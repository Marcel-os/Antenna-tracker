
Antenna tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e120  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800e230  0800e230  0001e230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e674  0800e674  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800e674  0800e674  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e674  0800e674  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e674  0800e674  0001e674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e678  0800e678  0001e678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800e67c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d2c  2000034c  0800e9c8  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001078  0800e9c8  00021078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017501  00000000  00000000  00020375  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000364f  00000000  00000000  00037876  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001138  00000000  00000000  0003aec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f80  00000000  00000000  0003c000  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bad4  00000000  00000000  0003cf80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011b25  00000000  00000000  00058a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e8e2  00000000  00000000  0006a579  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f8e5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b8c  00000000  00000000  000f8ed8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000034c 	.word	0x2000034c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e218 	.word	0x0800e218

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000350 	.word	0x20000350
 800014c:	0800e218 	.word	0x0800e218

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <MX_GPIO_Init+0xa4>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a22      	ldr	r2, [pc, #136]	; (8001114 <MX_GPIO_Init+0xa4>)
 800108a:	f043 0310 	orr.w	r3, r3, #16
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <MX_GPIO_Init+0xa4>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MX_GPIO_Init+0xa4>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <MX_GPIO_Init+0xa4>)
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_GPIO_Init+0xa4>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0320 	and.w	r3, r3, #32
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_GPIO_Init+0xa4>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a16      	ldr	r2, [pc, #88]	; (8001114 <MX_GPIO_Init+0xa4>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_GPIO_Init+0xa4>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_GPIO_Init+0xa4>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a10      	ldr	r2, [pc, #64]	; (8001114 <MX_GPIO_Init+0xa4>)
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_GPIO_Init+0xa4>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR11_Pin|MOTOR12_Pin|MOTOR21_Pin|MOTOR22_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	210f      	movs	r1, #15
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <MX_GPIO_Init+0xa8>)
 80010ea:	f001 f8cb 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR11_Pin|MOTOR12_Pin|MOTOR21_Pin|MOTOR22_Pin;
 80010ee:	230f      	movs	r3, #15
 80010f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	4619      	mov	r1, r3
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_GPIO_Init+0xa8>)
 8001106:	f000 ff63 	bl	8001fd0 <HAL_GPIO_Init>

}
 800110a:	bf00      	nop
 800110c:	3720      	adds	r7, #32
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	40010800 	.word	0x40010800

0800111c <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len){
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
    //HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
    CDC_Transmit_FS((uint8_t*)ptr, len);
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	68b8      	ldr	r0, [r7, #8]
 800112c:	f007 fdd8 	bl	8008ce0 <CDC_Transmit_FS>
    return len;
 8001130:	687b      	ldr	r3, [r7, #4]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <send_json_ada>:

void send_json(int32_t Encoder1, int32_t Encoder2){
	printf("{\"enkoder1\":%d,\"enkoder2\":%d}\r\n", Encoder1, Encoder2);
}

void send_json_ada(double azimuth, double altitude, double distance){
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af04      	add	r7, sp, #16
 8001142:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001146:	e9c7 2300 	strd	r2, r3, [r7]
	printf("{\"azimuth\":%f,\"altitude\":%f,\"distance\":%f}\r\n", azimuth, altitude, distance);
 800114a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800114e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001152:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001156:	e9cd 3400 	strd	r3, r4, [sp]
 800115a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800115e:	4803      	ldr	r0, [pc, #12]	; (800116c <send_json_ada+0x30>)
 8001160:	f008 fffe 	bl	800a160 <iprintf>
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	bd90      	pop	{r4, r7, pc}
 800116c:	0800e274 	.word	0x0800e274

08001170 <parse_loc>:

	*distance = sqrt( pow(sphere_distance, 2.0) + pow(delta_Height, 2.0));// in km
	*altitude = acos(sphere_distance/ *distance) * (180/M_PI);
}

void parse_loc(){
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b09b      	sub	sp, #108	; 0x6c
 8001174:	af06      	add	r7, sp, #24
  	char header[1];
  	double Latitude1, Longitude1, Height1, Latitude2, Longitude2, Height2, azimuth, distance, altitude;

  	sscanf(ReceivedData, "%s %lf %lf %lf %lf %lf %lf", &header, &Latitude1, &Longitude1, &Height1, &Latitude2, &Longitude2, &Height2);
 8001176:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800117a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800117e:	463b      	mov	r3, r7
 8001180:	9304      	str	r3, [sp, #16]
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	9303      	str	r3, [sp, #12]
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	f107 0318 	add.w	r3, r7, #24
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	460b      	mov	r3, r1
 800119c:	490c      	ldr	r1, [pc, #48]	; (80011d0 <parse_loc+0x60>)
 800119e:	480d      	ldr	r0, [pc, #52]	; (80011d4 <parse_loc+0x64>)
 80011a0:	f009 f87e 	bl	800a2a0 <siscanf>
  	if( header[0] == 'G' )
 80011a4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80011a8:	2b47      	cmp	r3, #71	; 0x47
 80011aa:	d10a      	bne.n	80011c2 <parse_loc+0x52>
  	{
  		//calc_azimuth( Latitude1,  Longitude1,  Height1,  Latitude2,  Longitude2,  Height2,  &azimuth,  &distance,  &altitude);
  		send_json_ada( azimuth, altitude, distance);
 80011ac:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80011b0:	e9cd 3400 	strd	r3, r4, [sp]
 80011b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80011b8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80011bc:	f7ff ffbe 	bl	800113c <send_json_ada>

  	}else printf("error - zle dane \r\n");
}
 80011c0:	e002      	b.n	80011c8 <parse_loc+0x58>
  	}else printf("error - zle dane \r\n");
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <parse_loc+0x68>)
 80011c4:	f009 f840 	bl	800a248 <puts>
}
 80011c8:	bf00      	nop
 80011ca:	3754      	adds	r7, #84	; 0x54
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	0800e2a4 	.word	0x0800e2a4
 80011d4:	20000660 	.word	0x20000660
 80011d8:	0800e240 	.word	0x0800e240

080011dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e2:	f000 fd63 	bl	8001cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e6:	f000 f90b 	bl	8001400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ea:	f7ff ff41 	bl	8001070 <MX_GPIO_Init>
  MX_TIM1_Init();
 80011ee:	f000 fafb 	bl	80017e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011f2:	f000 fba5 	bl	8001940 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011f6:	f000 fbf5 	bl	80019e4 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80011fa:	f007 fc97 	bl	8008b2c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80011fe:	2100      	movs	r1, #0
 8001200:	486f      	ldr	r0, [pc, #444]	; (80013c0 <main+0x1e4>)
 8001202:	f003 ff0f 	bl	8005024 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001206:	2104      	movs	r1, #4
 8001208:	486d      	ldr	r0, [pc, #436]	; (80013c0 <main+0x1e4>)
 800120a:	f003 ff0b 	bl	8005024 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800120e:	213c      	movs	r1, #60	; 0x3c
 8001210:	486c      	ldr	r0, [pc, #432]	; (80013c4 <main+0x1e8>)
 8001212:	f003 fa5f 	bl	80046d4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001216:	213c      	movs	r1, #60	; 0x3c
 8001218:	486b      	ldr	r0, [pc, #428]	; (80013c8 <main+0x1ec>)
 800121a:	f003 fa5b 	bl	80046d4 <HAL_TIM_Encoder_Start>

  pid_init(&pid_azimuth, 150.0f, 50.0f, 0.005f, 10, 1);
 800121e:	2301      	movs	r3, #1
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	230a      	movs	r3, #10
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	4b69      	ldr	r3, [pc, #420]	; (80013cc <main+0x1f0>)
 8001228:	4a69      	ldr	r2, [pc, #420]	; (80013d0 <main+0x1f4>)
 800122a:	496a      	ldr	r1, [pc, #424]	; (80013d4 <main+0x1f8>)
 800122c:	486a      	ldr	r0, [pc, #424]	; (80013d8 <main+0x1fc>)
 800122e:	f000 f947 	bl	80014c0 <pid_init>
  pid_azimuth.p_max = pid_scale(&pid_azimuth, 4095);
 8001232:	496a      	ldr	r1, [pc, #424]	; (80013dc <main+0x200>)
 8001234:	4868      	ldr	r0, [pc, #416]	; (80013d8 <main+0x1fc>)
 8001236:	f000 f9cb 	bl	80015d0 <pid_scale>
 800123a:	4602      	mov	r2, r0
 800123c:	4b66      	ldr	r3, [pc, #408]	; (80013d8 <main+0x1fc>)
 800123e:	619a      	str	r2, [r3, #24]
  pid_azimuth.p_min = pid_scale(&pid_azimuth, -4095);
 8001240:	4967      	ldr	r1, [pc, #412]	; (80013e0 <main+0x204>)
 8001242:	4865      	ldr	r0, [pc, #404]	; (80013d8 <main+0x1fc>)
 8001244:	f000 f9c4 	bl	80015d0 <pid_scale>
 8001248:	4602      	mov	r2, r0
 800124a:	4b63      	ldr	r3, [pc, #396]	; (80013d8 <main+0x1fc>)
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
  pid_azimuth.i_max = pid_scale(&pid_azimuth, 4095);
 800124e:	4963      	ldr	r1, [pc, #396]	; (80013dc <main+0x200>)
 8001250:	4861      	ldr	r0, [pc, #388]	; (80013d8 <main+0x1fc>)
 8001252:	f000 f9bd 	bl	80015d0 <pid_scale>
 8001256:	4602      	mov	r2, r0
 8001258:	4b5f      	ldr	r3, [pc, #380]	; (80013d8 <main+0x1fc>)
 800125a:	61da      	str	r2, [r3, #28]
  pid_azimuth.i_min = pid_scale(&pid_azimuth, -4095);
 800125c:	4960      	ldr	r1, [pc, #384]	; (80013e0 <main+0x204>)
 800125e:	485e      	ldr	r0, [pc, #376]	; (80013d8 <main+0x1fc>)
 8001260:	f000 f9b6 	bl	80015d0 <pid_scale>
 8001264:	4602      	mov	r2, r0
 8001266:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <main+0x1fc>)
 8001268:	629a      	str	r2, [r3, #40]	; 0x28
  pid_azimuth.d_max = pid_scale(&pid_azimuth, 4095);
 800126a:	495c      	ldr	r1, [pc, #368]	; (80013dc <main+0x200>)
 800126c:	485a      	ldr	r0, [pc, #360]	; (80013d8 <main+0x1fc>)
 800126e:	f000 f9af 	bl	80015d0 <pid_scale>
 8001272:	4602      	mov	r2, r0
 8001274:	4b58      	ldr	r3, [pc, #352]	; (80013d8 <main+0x1fc>)
 8001276:	621a      	str	r2, [r3, #32]
  pid_azimuth.d_min = pid_scale(&pid_azimuth, -4095);
 8001278:	4959      	ldr	r1, [pc, #356]	; (80013e0 <main+0x204>)
 800127a:	4857      	ldr	r0, [pc, #348]	; (80013d8 <main+0x1fc>)
 800127c:	f000 f9a8 	bl	80015d0 <pid_scale>
 8001280:	4602      	mov	r2, r0
 8001282:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <main+0x1fc>)
 8001284:	62da      	str	r2, [r3, #44]	; 0x2c
  pid_azimuth.total_max = pid_scale(&pid_azimuth, 4095);
 8001286:	4955      	ldr	r1, [pc, #340]	; (80013dc <main+0x200>)
 8001288:	4853      	ldr	r0, [pc, #332]	; (80013d8 <main+0x1fc>)
 800128a:	f000 f9a1 	bl	80015d0 <pid_scale>
 800128e:	4602      	mov	r2, r0
 8001290:	4b51      	ldr	r3, [pc, #324]	; (80013d8 <main+0x1fc>)
 8001292:	649a      	str	r2, [r3, #72]	; 0x48
  pid_azimuth.total_min = pid_scale(&pid_azimuth, 0);
 8001294:	f04f 0100 	mov.w	r1, #0
 8001298:	484f      	ldr	r0, [pc, #316]	; (80013d8 <main+0x1fc>)
 800129a:	f000 f999 	bl	80015d0 <pid_scale>
 800129e:	4602      	mov	r2, r0
 80012a0:	4b4d      	ldr	r3, [pc, #308]	; (80013d8 <main+0x1fc>)
 80012a2:	64da      	str	r2, [r3, #76]	; 0x4c

  pid_init(&pid_height, 150.0f, 50.0f, 0.005f, 10, 1);
 80012a4:	2301      	movs	r3, #1
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	230a      	movs	r3, #10
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	4b47      	ldr	r3, [pc, #284]	; (80013cc <main+0x1f0>)
 80012ae:	4a48      	ldr	r2, [pc, #288]	; (80013d0 <main+0x1f4>)
 80012b0:	4948      	ldr	r1, [pc, #288]	; (80013d4 <main+0x1f8>)
 80012b2:	484c      	ldr	r0, [pc, #304]	; (80013e4 <main+0x208>)
 80012b4:	f000 f904 	bl	80014c0 <pid_init>
  pid_height.p_max = pid_scale(&pid_height, 4095);
 80012b8:	4948      	ldr	r1, [pc, #288]	; (80013dc <main+0x200>)
 80012ba:	484a      	ldr	r0, [pc, #296]	; (80013e4 <main+0x208>)
 80012bc:	f000 f988 	bl	80015d0 <pid_scale>
 80012c0:	4602      	mov	r2, r0
 80012c2:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <main+0x208>)
 80012c4:	619a      	str	r2, [r3, #24]
  pid_height.p_min = pid_scale(&pid_height, -4095);
 80012c6:	4946      	ldr	r1, [pc, #280]	; (80013e0 <main+0x204>)
 80012c8:	4846      	ldr	r0, [pc, #280]	; (80013e4 <main+0x208>)
 80012ca:	f000 f981 	bl	80015d0 <pid_scale>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b44      	ldr	r3, [pc, #272]	; (80013e4 <main+0x208>)
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
  pid_height.i_max = pid_scale(&pid_height, 4095);
 80012d4:	4941      	ldr	r1, [pc, #260]	; (80013dc <main+0x200>)
 80012d6:	4843      	ldr	r0, [pc, #268]	; (80013e4 <main+0x208>)
 80012d8:	f000 f97a 	bl	80015d0 <pid_scale>
 80012dc:	4602      	mov	r2, r0
 80012de:	4b41      	ldr	r3, [pc, #260]	; (80013e4 <main+0x208>)
 80012e0:	61da      	str	r2, [r3, #28]
  pid_height.i_min = pid_scale(&pid_height, -4095);
 80012e2:	493f      	ldr	r1, [pc, #252]	; (80013e0 <main+0x204>)
 80012e4:	483f      	ldr	r0, [pc, #252]	; (80013e4 <main+0x208>)
 80012e6:	f000 f973 	bl	80015d0 <pid_scale>
 80012ea:	4602      	mov	r2, r0
 80012ec:	4b3d      	ldr	r3, [pc, #244]	; (80013e4 <main+0x208>)
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
  pid_height.d_max = pid_scale(&pid_height, 4095);
 80012f0:	493a      	ldr	r1, [pc, #232]	; (80013dc <main+0x200>)
 80012f2:	483c      	ldr	r0, [pc, #240]	; (80013e4 <main+0x208>)
 80012f4:	f000 f96c 	bl	80015d0 <pid_scale>
 80012f8:	4602      	mov	r2, r0
 80012fa:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <main+0x208>)
 80012fc:	621a      	str	r2, [r3, #32]
  pid_height.d_min = pid_scale(&pid_height, -4095);
 80012fe:	4938      	ldr	r1, [pc, #224]	; (80013e0 <main+0x204>)
 8001300:	4838      	ldr	r0, [pc, #224]	; (80013e4 <main+0x208>)
 8001302:	f000 f965 	bl	80015d0 <pid_scale>
 8001306:	4602      	mov	r2, r0
 8001308:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <main+0x208>)
 800130a:	62da      	str	r2, [r3, #44]	; 0x2c
  pid_height.total_max = pid_scale(&pid_height, 4095);
 800130c:	4933      	ldr	r1, [pc, #204]	; (80013dc <main+0x200>)
 800130e:	4835      	ldr	r0, [pc, #212]	; (80013e4 <main+0x208>)
 8001310:	f000 f95e 	bl	80015d0 <pid_scale>
 8001314:	4602      	mov	r2, r0
 8001316:	4b33      	ldr	r3, [pc, #204]	; (80013e4 <main+0x208>)
 8001318:	649a      	str	r2, [r3, #72]	; 0x48
  pid_height.total_min = pid_scale(&pid_height, 0);
 800131a:	f04f 0100 	mov.w	r1, #0
 800131e:	4831      	ldr	r0, [pc, #196]	; (80013e4 <main+0x208>)
 8001320:	f000 f956 	bl	80015d0 <pid_scale>
 8001324:	4602      	mov	r2, r0
 8001326:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <main+0x208>)
 8001328:	64da      	str	r2, [r3, #76]	; 0x4c

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <main+0x1e4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2200      	movs	r2, #0
 8001330:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001332:	2100      	movs	r1, #0
 8001334:	4822      	ldr	r0, [pc, #136]	; (80013c0 <main+0x1e4>)
 8001336:	f003 f889 	bl	800444c <HAL_TIM_PWM_Start>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800133a:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <main+0x1e4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2200      	movs	r2, #0
 8001340:	639a      	str	r2, [r3, #56]	; 0x38
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001342:	2104      	movs	r1, #4
 8001344:	481e      	ldr	r0, [pc, #120]	; (80013c0 <main+0x1e4>)
 8001346:	f003 f881 	bl	800444c <HAL_TIM_PWM_Start>

		HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2101      	movs	r1, #1
 800134e:	4826      	ldr	r0, [pc, #152]	; (80013e8 <main+0x20c>)
 8001350:	f000 ff98 	bl	8002284 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	2102      	movs	r1, #2
 8001358:	4823      	ldr	r0, [pc, #140]	; (80013e8 <main+0x20c>)
 800135a:	f000 ff93 	bl	8002284 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2104      	movs	r1, #4
 8001362:	4821      	ldr	r0, [pc, #132]	; (80013e8 <main+0x20c>)
 8001364:	f000 ff8e 	bl	8002284 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2108      	movs	r1, #8
 800136c:	481e      	ldr	r0, [pc, #120]	; (80013e8 <main+0x20c>)
 800136e:	f000 ff89 	bl	8002284 <HAL_GPIO_WritePin>
  while (1)
  {

		pulse_count_azimuth = TIM2->CNT; // przepisanie wartosci z rejestru timera
 8001372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	b29a      	uxth	r2, r3
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <main+0x210>)
 800137c:	801a      	strh	r2, [r3, #0]
		positions_azimuth = pulse_count_azimuth/4;
 800137e:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <main+0x210>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	b29a      	uxth	r2, r3
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <main+0x214>)
 800138a:	801a      	strh	r2, [r3, #0]

		pulse_count_height = TIM2->CNT; // przepisanie wartosci z rejestru timera
 800138c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	b29a      	uxth	r2, r3
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <main+0x218>)
 8001396:	801a      	strh	r2, [r3, #0]
		positions_height = pulse_count_height/4;
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <main+0x218>)
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	b29b      	uxth	r3, r3
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <main+0x21c>)
 80013a4:	801a      	strh	r2, [r3, #0]

	  if(ReceivedDataFlag == 1){
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <main+0x220>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d104      	bne.n	80013b8 <main+0x1dc>
	  	ReceivedDataFlag = 0;
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <main+0x220>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
	  	//parse();
	  	parse_loc();
 80013b4:	f7ff fedc 	bl	8001170 <parse_loc>
//	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
//	  HAL_Delay(1000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 80013b8:	2064      	movs	r0, #100	; 0x64
 80013ba:	f000 fcd9 	bl	8001d70 <HAL_Delay>
		pulse_count_azimuth = TIM2->CNT; // przepisanie wartosci z rejestru timera
 80013be:	e7d8      	b.n	8001372 <main+0x196>
 80013c0:	20000768 	.word	0x20000768
 80013c4:	200007b0 	.word	0x200007b0
 80013c8:	20000720 	.word	0x20000720
 80013cc:	3ba3d70a 	.word	0x3ba3d70a
 80013d0:	42480000 	.word	0x42480000
 80013d4:	43160000 	.word	0x43160000
 80013d8:	2000059c 	.word	0x2000059c
 80013dc:	457ff000 	.word	0x457ff000
 80013e0:	c57ff000 	.word	0xc57ff000
 80013e4:	200006c4 	.word	0x200006c4
 80013e8:	40010800 	.word	0x40010800
 80013ec:	2000065c 	.word	0x2000065c
 80013f0:	2000071c 	.word	0x2000071c
 80013f4:	200005f6 	.word	0x200005f6
 80013f8:	200005f4 	.word	0x200005f4
 80013fc:	20000368 	.word	0x20000368

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b094      	sub	sp, #80	; 0x50
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140a:	2228      	movs	r2, #40	; 0x28
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f008 f86e 	bl	80094f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001430:	2301      	movs	r3, #1
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143e:	2301      	movs	r3, #1
 8001440:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001442:	2302      	movs	r3, #2
 8001444:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800144a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800144c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001450:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001456:	4618      	mov	r0, r3
 8001458:	f002 fab0 	bl	80039bc <HAL_RCC_OscConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001462:	f000 f827 	bl	80014b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001466:	230f      	movs	r3, #15
 8001468:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001476:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2102      	movs	r1, #2
 8001482:	4618      	mov	r0, r3
 8001484:	f002 fd1a 	bl	8003ebc <HAL_RCC_ClockConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800148e:	f000 f811 	bl	80014b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001492:	2310      	movs	r3, #16
 8001494:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4618      	mov	r0, r3
 800149e:	f002 fe77 	bl	8004190 <HAL_RCCEx_PeriphCLKConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <SystemClock_Config+0xac>
  {
    Error_Handler();
 80014a8:	f000 f804 	bl	80014b4 <Error_Handler>
  }
}
 80014ac:	bf00      	nop
 80014ae:	3750      	adds	r7, #80	; 0x50
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <pid_init>:
 *
 * Created on: 09.03.2018
 * Author: Wojciech Domski
 */
#include "pid.h"
void pid_init(cpid_t *pid, float p, float i, float d, uint8_t f, int32_t dt_ms) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	603b      	str	r3, [r7, #0]
	uint32_t k;
	pid->power = 1;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2201      	movs	r2, #1
 80014d2:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	e007      	b.n	80014ea <pid_init+0x2a>
		pid->power = pid->power * 2;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014de:	005a      	lsls	r2, r3, #1
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3301      	adds	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d3f2      	bcc.n	80014da <pid_init+0x1a>
	}
	pid->f = f;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	pid->p = (int32_t) (p * pid->power);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fbe6 	bl	8000cd4 <__aeabi_ui2f>
 8001508:	4603      	mov	r3, r0
 800150a:	68b9      	ldr	r1, [r7, #8]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fc39 	bl	8000d84 <__aeabi_fmul>
 8001512:	4603      	mov	r3, r0
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fd85 	bl	8001024 <__aeabi_f2iz>
 800151a:	4602      	mov	r2, r0
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	601a      	str	r2, [r3, #0]
	pid->i = (int32_t) (i * pid->power);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fbd5 	bl	8000cd4 <__aeabi_ui2f>
 800152a:	4603      	mov	r3, r0
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fc28 	bl	8000d84 <__aeabi_fmul>
 8001534:	4603      	mov	r3, r0
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fd74 	bl	8001024 <__aeabi_f2iz>
 800153c:	4602      	mov	r2, r0
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	605a      	str	r2, [r3, #4]
	pid->d = (int32_t) (d * pid->power);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fbc4 	bl	8000cd4 <__aeabi_ui2f>
 800154c:	4603      	mov	r3, r0
 800154e:	6839      	ldr	r1, [r7, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fc17 	bl	8000d84 <__aeabi_fmul>
 8001556:	4603      	mov	r3, r0
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fd63 	bl	8001024 <__aeabi_f2iz>
 800155e:	4602      	mov	r2, r0
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	609a      	str	r2, [r3, #8]
	pid->p_val = 0;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
	pid->i_val = 0;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
	pid->d_val = 0;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	615a      	str	r2, [r3, #20]
	pid->p_max = INT32_MAX;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800157c:	619a      	str	r2, [r3, #24]
	pid->p_min = INT32_MIN;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
	pid->i_max = INT32_MAX;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800158c:	61da      	str	r2, [r3, #28]
	pid->i_min = INT32_MIN;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001594:	629a      	str	r2, [r3, #40]	; 0x28
	pid->d_max = INT32_MAX;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800159c:	621a      	str	r2, [r3, #32]
	pid->d_min = INT32_MIN;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015a4:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->e_last = 0;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	641a      	str	r2, [r3, #64]	; 0x40
	pid->sum = 0;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	645a      	str	r2, [r3, #68]	; 0x44
	pid->total_max = INT32_MAX;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80015b8:	649a      	str	r2, [r3, #72]	; 0x48
	pid->total_min = INT32_MIN;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015c0:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->dt_ms = dt_ms;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c6:	655a      	str	r2, [r3, #84]	; 0x54
}
 80015c8:	bf00      	nop
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <pid_scale>:
		total = pid->total_min;
	pid->control = total >> pid->f;
	pid->e_last = e;
	return pid->control;
}
int32_t pid_scale(cpid_t *pid, float v) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
	return v * pid->power;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fb78 	bl	8000cd4 <__aeabi_ui2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	6839      	ldr	r1, [r7, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fbcb 	bl	8000d84 <__aeabi_fmul>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fd17 	bl	8001024 <__aeabi_f2iz>
 80015f6:	4603      	mov	r3, r0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <HAL_MspInit+0x6c>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	4a18      	ldr	r2, [pc, #96]	; (800166c <HAL_MspInit+0x6c>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6193      	str	r3, [r2, #24]
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <HAL_MspInit+0x6c>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <HAL_MspInit+0x6c>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <HAL_MspInit+0x6c>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_MspInit+0x6c>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	2005      	movs	r0, #5
 800163c:	f000 fc91 	bl	8001f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001640:	2005      	movs	r0, #5
 8001642:	f000 fcaa 	bl	8001f9a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_MspInit+0x70>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_MspInit+0x70>)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	40010000 	.word	0x40010000

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <HardFault_Handler+0x4>

08001686 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <MemManage_Handler+0x4>

0800168c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <BusFault_Handler+0x4>

08001692 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <UsageFault_Handler+0x4>

08001698 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c0:	f000 fb3a 	bl	8001d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80016da:	f000 ff1c 	bl	8002516 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000d88 	.word	0x20000d88

080016e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	e00a      	b.n	8001710 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016fa:	f3af 8000 	nop.w
 80016fe:	4601      	mov	r1, r0
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	60ba      	str	r2, [r7, #8]
 8001706:	b2ca      	uxtb	r2, r1
 8001708:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbf0      	blt.n	80016fa <_read+0x12>
	}

return len;
 8001718:	687b      	ldr	r3, [r7, #4]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
	return -1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001748:	605a      	str	r2, [r3, #4]
	return 0;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <_isatty>:

int _isatty(int file)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	return 1;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800176a:	b480      	push	{r7}
 800176c:	b085      	sub	sp, #20
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
	return 0;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
	...

08001784 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <_sbrk+0x50>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <_sbrk+0x16>
		heap_end = &end;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <_sbrk+0x50>)
 8001796:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <_sbrk+0x54>)
 8001798:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <_sbrk+0x50>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <_sbrk+0x50>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4413      	add	r3, r2
 80017a8:	466a      	mov	r2, sp
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d907      	bls.n	80017be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80017ae:	f007 fe75 	bl	800949c <__errno>
 80017b2:	4602      	mov	r2, r0
 80017b4:	230c      	movs	r3, #12
 80017b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295
 80017bc:	e006      	b.n	80017cc <_sbrk+0x48>
	}

	heap_end += incr;
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <_sbrk+0x50>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a03      	ldr	r2, [pc, #12]	; (80017d4 <_sbrk+0x50>)
 80017c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017ca:	68fb      	ldr	r3, [r7, #12]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2000036c 	.word	0x2000036c
 80017d8:	20001078 	.word	0x20001078

080017dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b096      	sub	sp, #88	; 0x58
 80017ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]
 8001816:	615a      	str	r2, [r3, #20]
 8001818:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2220      	movs	r2, #32
 800181e:	2100      	movs	r1, #0
 8001820:	4618      	mov	r0, r3
 8001822:	f007 fe65 	bl	80094f0 <memset>

  htim1.Instance = TIM1;
 8001826:	4b44      	ldr	r3, [pc, #272]	; (8001938 <MX_TIM1_Init+0x150>)
 8001828:	4a44      	ldr	r2, [pc, #272]	; (800193c <MX_TIM1_Init+0x154>)
 800182a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 800182c:	4b42      	ldr	r3, [pc, #264]	; (8001938 <MX_TIM1_Init+0x150>)
 800182e:	2202      	movs	r2, #2
 8001830:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <MX_TIM1_Init+0x150>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001838:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <MX_TIM1_Init+0x150>)
 800183a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800183e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001840:	4b3d      	ldr	r3, [pc, #244]	; (8001938 <MX_TIM1_Init+0x150>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001846:	4b3c      	ldr	r3, [pc, #240]	; (8001938 <MX_TIM1_Init+0x150>)
 8001848:	2200      	movs	r2, #0
 800184a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184c:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <MX_TIM1_Init+0x150>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001852:	4839      	ldr	r0, [pc, #228]	; (8001938 <MX_TIM1_Init+0x150>)
 8001854:	f002 fd52 	bl	80042fc <HAL_TIM_Base_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800185e:	f7ff fe29 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001866:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001868:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800186c:	4619      	mov	r1, r3
 800186e:	4832      	ldr	r0, [pc, #200]	; (8001938 <MX_TIM1_Init+0x150>)
 8001870:	f003 f87c 	bl	800496c <HAL_TIM_ConfigClockSource>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800187a:	f7ff fe1b 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800187e:	482e      	ldr	r0, [pc, #184]	; (8001938 <MX_TIM1_Init+0x150>)
 8001880:	f002 fd8b 	bl	800439a <HAL_TIM_PWM_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800188a:	f7ff fe13 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001896:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800189a:	4619      	mov	r1, r3
 800189c:	4826      	ldr	r0, [pc, #152]	; (8001938 <MX_TIM1_Init+0x150>)
 800189e:	f003 fc5f 	bl	8005160 <HAL_TIMEx_MasterConfigSynchronization>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80018a8:	f7ff fe04 	bl	80014b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ac:	2360      	movs	r3, #96	; 0x60
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018b8:	2300      	movs	r3, #0
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018cc:	2200      	movs	r2, #0
 80018ce:	4619      	mov	r1, r3
 80018d0:	4819      	ldr	r0, [pc, #100]	; (8001938 <MX_TIM1_Init+0x150>)
 80018d2:	f002 ff8d 	bl	80047f0 <HAL_TIM_PWM_ConfigChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80018dc:	f7ff fdea 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e4:	2204      	movs	r2, #4
 80018e6:	4619      	mov	r1, r3
 80018e8:	4813      	ldr	r0, [pc, #76]	; (8001938 <MX_TIM1_Init+0x150>)
 80018ea:	f002 ff81 	bl	80047f0 <HAL_TIM_PWM_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80018f4:	f7ff fdde 	bl	80014b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800190c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001910:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	4619      	mov	r1, r3
 800191a:	4807      	ldr	r0, [pc, #28]	; (8001938 <MX_TIM1_Init+0x150>)
 800191c:	f003 fc7e 	bl	800521c <HAL_TIMEx_ConfigBreakDeadTime>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001926:	f7ff fdc5 	bl	80014b4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800192a:	4803      	ldr	r0, [pc, #12]	; (8001938 <MX_TIM1_Init+0x150>)
 800192c:	f000 f964 	bl	8001bf8 <HAL_TIM_MspPostInit>

}
 8001930:	bf00      	nop
 8001932:	3758      	adds	r7, #88	; 0x58
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000768 	.word	0x20000768
 800193c:	40012c00 	.word	0x40012c00

08001940 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08c      	sub	sp, #48	; 0x30
 8001944:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	2224      	movs	r2, #36	; 0x24
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f007 fdce 	bl	80094f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800195c:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <MX_TIM2_Init+0xa0>)
 800195e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001962:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <MX_TIM2_Init+0xa0>)
 8001966:	2200      	movs	r2, #0
 8001968:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196a:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <MX_TIM2_Init+0xa0>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001970:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <MX_TIM2_Init+0xa0>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001976:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <MX_TIM2_Init+0xa0>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197c:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <MX_TIM2_Init+0xa0>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001982:	2303      	movs	r3, #3
 8001984:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800198a:	2301      	movs	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800199a:	2301      	movs	r3, #1
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	4619      	mov	r1, r3
 80019ac:	480c      	ldr	r0, [pc, #48]	; (80019e0 <MX_TIM2_Init+0xa0>)
 80019ae:	f002 fdef 	bl	8004590 <HAL_TIM_Encoder_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80019b8:	f7ff fd7c 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_TIM2_Init+0xa0>)
 80019ca:	f003 fbc9 	bl	8005160 <HAL_TIMEx_MasterConfigSynchronization>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80019d4:	f7ff fd6e 	bl	80014b4 <Error_Handler>
  }

}
 80019d8:	bf00      	nop
 80019da:	3730      	adds	r7, #48	; 0x30
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200007b0 	.word	0x200007b0

080019e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	; 0x30
 80019e8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	2224      	movs	r2, #36	; 0x24
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f007 fd7c 	bl	80094f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8001a00:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <MX_TIM3_Init+0xa0>)
 8001a02:	4a21      	ldr	r2, [pc, #132]	; (8001a88 <MX_TIM3_Init+0xa4>)
 8001a04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a06:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <MX_TIM3_Init+0xa0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <MX_TIM3_Init+0xa0>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <MX_TIM3_Init+0xa0>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <MX_TIM3_Init+0xa0>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <MX_TIM3_Init+0xa0>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a24:	2301      	movs	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480d      	ldr	r0, [pc, #52]	; (8001a84 <MX_TIM3_Init+0xa0>)
 8001a50:	f002 fd9e 	bl	8004590 <HAL_TIM_Encoder_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001a5a:	f7ff fd2b 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4806      	ldr	r0, [pc, #24]	; (8001a84 <MX_TIM3_Init+0xa0>)
 8001a6c:	f003 fb78 	bl	8005160 <HAL_TIMEx_MasterConfigSynchronization>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001a76:	f7ff fd1d 	bl	80014b4 <Error_Handler>
  }

}
 8001a7a:	bf00      	nop
 8001a7c:	3730      	adds	r7, #48	; 0x30
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000720 	.word	0x20000720
 8001a88:	40000400 	.word	0x40000400

08001a8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <HAL_TIM_Base_MspInit+0x34>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d10b      	bne.n	8001ab6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_TIM_Base_MspInit+0x38>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <HAL_TIM_Base_MspInit+0x38>)
 8001aa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aa8:	6193      	str	r3, [r2, #24]
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_TIM_Base_MspInit+0x38>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	40012c00 	.word	0x40012c00
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	; 0x30
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae6:	d14f      	bne.n	8001b88 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ae8:	4b3e      	ldr	r3, [pc, #248]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	4a3d      	ldr	r2, [pc, #244]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	61d3      	str	r3, [r2, #28]
 8001af4:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b00:	4b38      	ldr	r3, [pc, #224]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a37      	ldr	r2, [pc, #220]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001b06:	f043 0304 	orr.w	r3, r3, #4
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b35      	ldr	r3, [pc, #212]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b18:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a31      	ldr	r2, [pc, #196]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001b1e:	f043 0308 	orr.w	r3, r3, #8
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	4828      	ldr	r0, [pc, #160]	; (8001be8 <HAL_TIM_Encoder_MspInit+0x120>)
 8001b46:	f000 fa43 	bl	8001fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4823      	ldr	r0, [pc, #140]	; (8001bec <HAL_TIM_Encoder_MspInit+0x124>)
 8001b5e:	f000 fa37 	bl	8001fd0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001b62:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <HAL_TIM_Encoder_MspInit+0x128>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b72:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b80:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <HAL_TIM_Encoder_MspInit+0x128>)
 8001b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b86:	e028      	b.n	8001bda <HAL_TIM_Encoder_MspInit+0x112>
  else if(tim_encoderHandle->Instance==TIM3)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d123      	bne.n	8001bda <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b92:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	61d3      	str	r3, [r2, #28]
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	6193      	str	r3, [r2, #24]
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bc2:	23c0      	movs	r3, #192	; 0xc0
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4804      	ldr	r0, [pc, #16]	; (8001be8 <HAL_TIM_Encoder_MspInit+0x120>)
 8001bd6:	f000 f9fb 	bl	8001fd0 <HAL_GPIO_Init>
}
 8001bda:	bf00      	nop
 8001bdc:	3730      	adds	r7, #48	; 0x30
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010800 	.word	0x40010800
 8001bec:	40010c00 	.word	0x40010c00
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	40000400 	.word	0x40000400

08001bf8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a10      	ldr	r2, [pc, #64]	; (8001c54 <HAL_TIM_MspPostInit+0x5c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d118      	bne.n	8001c4a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <HAL_TIM_MspPostInit+0x60>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <HAL_TIM_MspPostInit+0x60>)
 8001c1e:	f043 0304 	orr.w	r3, r3, #4
 8001c22:	6193      	str	r3, [r2, #24]
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_TIM_MspPostInit+0x60>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = PWM2_Pin|PWM1_Pin;
 8001c30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 0310 	add.w	r3, r7, #16
 8001c42:	4619      	mov	r1, r3
 8001c44:	4805      	ldr	r0, [pc, #20]	; (8001c5c <HAL_TIM_MspPostInit+0x64>)
 8001c46:	f000 f9c3 	bl	8001fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c4a:	bf00      	nop
 8001c4c:	3720      	adds	r7, #32
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40012c00 	.word	0x40012c00
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40010800 	.word	0x40010800

08001c60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c60:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c62:	e003      	b.n	8001c6c <LoopCopyDataInit>

08001c64 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c66:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c68:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c6a:	3104      	adds	r1, #4

08001c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c6c:	480a      	ldr	r0, [pc, #40]	; (8001c98 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c70:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c72:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c74:	d3f6      	bcc.n	8001c64 <CopyDataInit>
  ldr r2, =_sbss
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c78:	e002      	b.n	8001c80 <LoopFillZerobss>

08001c7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c7c:	f842 3b04 	str.w	r3, [r2], #4

08001c80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c82:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c84:	d3f9      	bcc.n	8001c7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c86:	f7ff fda9 	bl	80017dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c8a:	f007 fc0d 	bl	80094a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c8e:	f7ff faa5 	bl	80011dc <main>
  bx lr
 8001c92:	4770      	bx	lr
  ldr r3, =_sidata
 8001c94:	0800e67c 	.word	0x0800e67c
  ldr r0, =_sdata
 8001c98:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c9c:	2000034c 	.word	0x2000034c
  ldr r2, =_sbss
 8001ca0:	2000034c 	.word	0x2000034c
  ldr r3, = _ebss
 8001ca4:	20001078 	.word	0x20001078

08001ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ca8:	e7fe      	b.n	8001ca8 <ADC1_2_IRQHandler>
	...

08001cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_Init+0x28>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <HAL_Init+0x28>)
 8001cb6:	f043 0310 	orr.w	r3, r3, #16
 8001cba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	f000 f945 	bl	8001f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f000 f808 	bl	8001cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc8:	f7ff fc9a 	bl	8001600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40022000 	.word	0x40022000

08001cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_InitTick+0x54>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_InitTick+0x58>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f95d 	bl	8001fb6 <HAL_SYSTICK_Config>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00e      	b.n	8001d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b0f      	cmp	r3, #15
 8001d0a:	d80a      	bhi.n	8001d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f000 f925 	bl	8001f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d18:	4a06      	ldr	r2, [pc, #24]	; (8001d34 <HAL_InitTick+0x5c>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e000      	b.n	8001d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	20000008 	.word	0x20000008
 8001d34:	20000004 	.word	0x20000004

08001d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_IncTick+0x1c>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_IncTick+0x20>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	4a03      	ldr	r2, [pc, #12]	; (8001d58 <HAL_IncTick+0x20>)
 8001d4a:	6013      	str	r3, [r2, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	20000008 	.word	0x20000008
 8001d58:	200007f8 	.word	0x200007f8

08001d5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d60:	4b02      	ldr	r3, [pc, #8]	; (8001d6c <HAL_GetTick+0x10>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	200007f8 	.word	0x200007f8

08001d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff fff0 	bl	8001d5c <HAL_GetTick>
 8001d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d88:	d005      	beq.n	8001d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <HAL_Delay+0x40>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d96:	bf00      	nop
 8001d98:	f7ff ffe0 	bl	8001d5c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d8f7      	bhi.n	8001d98 <HAL_Delay+0x28>
  {
  }
}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000008 	.word	0x20000008

08001db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de6:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <__NVIC_SetPriorityGrouping+0x44>)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	60d3      	str	r3, [r2, #12]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <__NVIC_GetPriorityGrouping+0x18>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	f003 0307 	and.w	r3, r3, #7
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	db0b      	blt.n	8001e42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	f003 021f 	and.w	r2, r3, #31
 8001e30:	4906      	ldr	r1, [pc, #24]	; (8001e4c <__NVIC_EnableIRQ+0x34>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	2001      	movs	r0, #1
 8001e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	e000e100 	.word	0xe000e100

08001e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	db0a      	blt.n	8001e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	490c      	ldr	r1, [pc, #48]	; (8001e9c <__NVIC_SetPriority+0x4c>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	0112      	lsls	r2, r2, #4
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	440b      	add	r3, r1
 8001e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e78:	e00a      	b.n	8001e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4908      	ldr	r1, [pc, #32]	; (8001ea0 <__NVIC_SetPriority+0x50>)
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	3b04      	subs	r3, #4
 8001e88:	0112      	lsls	r2, r2, #4
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	761a      	strb	r2, [r3, #24]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000e100 	.word	0xe000e100
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f1c3 0307 	rsb	r3, r3, #7
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	bf28      	it	cs
 8001ec2:	2304      	movcs	r3, #4
 8001ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	d902      	bls.n	8001ed4 <NVIC_EncodePriority+0x30>
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3b03      	subs	r3, #3
 8001ed2:	e000      	b.n	8001ed6 <NVIC_EncodePriority+0x32>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	43d9      	mvns	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	4313      	orrs	r3, r2
         );
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3724      	adds	r7, #36	; 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f18:	d301      	bcc.n	8001f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00f      	b.n	8001f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <SysTick_Config+0x40>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f26:	210f      	movs	r1, #15
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	f7ff ff90 	bl	8001e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <SysTick_Config+0x40>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <SysTick_Config+0x40>)
 8001f38:	2207      	movs	r2, #7
 8001f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	e000e010 	.word	0xe000e010

08001f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff2d 	bl	8001db4 <__NVIC_SetPriorityGrouping>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f74:	f7ff ff42 	bl	8001dfc <__NVIC_GetPriorityGrouping>
 8001f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	6978      	ldr	r0, [r7, #20]
 8001f80:	f7ff ff90 	bl	8001ea4 <NVIC_EncodePriority>
 8001f84:	4602      	mov	r2, r0
 8001f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff5f 	bl	8001e50 <__NVIC_SetPriority>
}
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff35 	bl	8001e18 <__NVIC_EnableIRQ>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ffa2 	bl	8001f08 <SysTick_Config>
 8001fc4:	4603      	mov	r3, r0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b08b      	sub	sp, #44	; 0x2c
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe2:	e127      	b.n	8002234 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	f040 8116 	bne.w	800222e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b12      	cmp	r3, #18
 8002008:	d034      	beq.n	8002074 <HAL_GPIO_Init+0xa4>
 800200a:	2b12      	cmp	r3, #18
 800200c:	d80d      	bhi.n	800202a <HAL_GPIO_Init+0x5a>
 800200e:	2b02      	cmp	r3, #2
 8002010:	d02b      	beq.n	800206a <HAL_GPIO_Init+0x9a>
 8002012:	2b02      	cmp	r3, #2
 8002014:	d804      	bhi.n	8002020 <HAL_GPIO_Init+0x50>
 8002016:	2b00      	cmp	r3, #0
 8002018:	d031      	beq.n	800207e <HAL_GPIO_Init+0xae>
 800201a:	2b01      	cmp	r3, #1
 800201c:	d01c      	beq.n	8002058 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800201e:	e048      	b.n	80020b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002020:	2b03      	cmp	r3, #3
 8002022:	d043      	beq.n	80020ac <HAL_GPIO_Init+0xdc>
 8002024:	2b11      	cmp	r3, #17
 8002026:	d01b      	beq.n	8002060 <HAL_GPIO_Init+0x90>
          break;
 8002028:	e043      	b.n	80020b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800202a:	4a89      	ldr	r2, [pc, #548]	; (8002250 <HAL_GPIO_Init+0x280>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d026      	beq.n	800207e <HAL_GPIO_Init+0xae>
 8002030:	4a87      	ldr	r2, [pc, #540]	; (8002250 <HAL_GPIO_Init+0x280>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d806      	bhi.n	8002044 <HAL_GPIO_Init+0x74>
 8002036:	4a87      	ldr	r2, [pc, #540]	; (8002254 <HAL_GPIO_Init+0x284>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d020      	beq.n	800207e <HAL_GPIO_Init+0xae>
 800203c:	4a86      	ldr	r2, [pc, #536]	; (8002258 <HAL_GPIO_Init+0x288>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01d      	beq.n	800207e <HAL_GPIO_Init+0xae>
          break;
 8002042:	e036      	b.n	80020b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002044:	4a85      	ldr	r2, [pc, #532]	; (800225c <HAL_GPIO_Init+0x28c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d019      	beq.n	800207e <HAL_GPIO_Init+0xae>
 800204a:	4a85      	ldr	r2, [pc, #532]	; (8002260 <HAL_GPIO_Init+0x290>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d016      	beq.n	800207e <HAL_GPIO_Init+0xae>
 8002050:	4a84      	ldr	r2, [pc, #528]	; (8002264 <HAL_GPIO_Init+0x294>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_GPIO_Init+0xae>
          break;
 8002056:	e02c      	b.n	80020b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	623b      	str	r3, [r7, #32]
          break;
 800205e:	e028      	b.n	80020b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	3304      	adds	r3, #4
 8002066:	623b      	str	r3, [r7, #32]
          break;
 8002068:	e023      	b.n	80020b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	3308      	adds	r3, #8
 8002070:	623b      	str	r3, [r7, #32]
          break;
 8002072:	e01e      	b.n	80020b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	330c      	adds	r3, #12
 800207a:	623b      	str	r3, [r7, #32]
          break;
 800207c:	e019      	b.n	80020b2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d102      	bne.n	800208c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002086:	2304      	movs	r3, #4
 8002088:	623b      	str	r3, [r7, #32]
          break;
 800208a:	e012      	b.n	80020b2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d105      	bne.n	80020a0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002094:	2308      	movs	r3, #8
 8002096:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	611a      	str	r2, [r3, #16]
          break;
 800209e:	e008      	b.n	80020b2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020a0:	2308      	movs	r3, #8
 80020a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	615a      	str	r2, [r3, #20]
          break;
 80020aa:	e002      	b.n	80020b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
          break;
 80020b0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	2bff      	cmp	r3, #255	; 0xff
 80020b6:	d801      	bhi.n	80020bc <HAL_GPIO_Init+0xec>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	e001      	b.n	80020c0 <HAL_GPIO_Init+0xf0>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3304      	adds	r3, #4
 80020c0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	2bff      	cmp	r3, #255	; 0xff
 80020c6:	d802      	bhi.n	80020ce <HAL_GPIO_Init+0xfe>
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	e002      	b.n	80020d4 <HAL_GPIO_Init+0x104>
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	3b08      	subs	r3, #8
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	210f      	movs	r1, #15
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	401a      	ands	r2, r3
 80020e6:	6a39      	ldr	r1, [r7, #32]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	431a      	orrs	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8096 	beq.w	800222e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002102:	4b59      	ldr	r3, [pc, #356]	; (8002268 <HAL_GPIO_Init+0x298>)
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	4a58      	ldr	r2, [pc, #352]	; (8002268 <HAL_GPIO_Init+0x298>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6193      	str	r3, [r2, #24]
 800210e:	4b56      	ldr	r3, [pc, #344]	; (8002268 <HAL_GPIO_Init+0x298>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800211a:	4a54      	ldr	r2, [pc, #336]	; (800226c <HAL_GPIO_Init+0x29c>)
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	3302      	adds	r3, #2
 8002122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002126:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	220f      	movs	r2, #15
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4013      	ands	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4b      	ldr	r2, [pc, #300]	; (8002270 <HAL_GPIO_Init+0x2a0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <HAL_GPIO_Init+0x19e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4a      	ldr	r2, [pc, #296]	; (8002274 <HAL_GPIO_Init+0x2a4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00d      	beq.n	800216a <HAL_GPIO_Init+0x19a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a49      	ldr	r2, [pc, #292]	; (8002278 <HAL_GPIO_Init+0x2a8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d007      	beq.n	8002166 <HAL_GPIO_Init+0x196>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a48      	ldr	r2, [pc, #288]	; (800227c <HAL_GPIO_Init+0x2ac>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d101      	bne.n	8002162 <HAL_GPIO_Init+0x192>
 800215e:	2303      	movs	r3, #3
 8002160:	e006      	b.n	8002170 <HAL_GPIO_Init+0x1a0>
 8002162:	2304      	movs	r3, #4
 8002164:	e004      	b.n	8002170 <HAL_GPIO_Init+0x1a0>
 8002166:	2302      	movs	r3, #2
 8002168:	e002      	b.n	8002170 <HAL_GPIO_Init+0x1a0>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_GPIO_Init+0x1a0>
 800216e:	2300      	movs	r3, #0
 8002170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002172:	f002 0203 	and.w	r2, r2, #3
 8002176:	0092      	lsls	r2, r2, #2
 8002178:	4093      	lsls	r3, r2
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002180:	493a      	ldr	r1, [pc, #232]	; (800226c <HAL_GPIO_Init+0x29c>)
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	3302      	adds	r3, #2
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800219a:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_GPIO_Init+0x2b0>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	4938      	ldr	r1, [pc, #224]	; (8002280 <HAL_GPIO_Init+0x2b0>)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]
 80021a6:	e006      	b.n	80021b6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021a8:	4b35      	ldr	r3, [pc, #212]	; (8002280 <HAL_GPIO_Init+0x2b0>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	4933      	ldr	r1, [pc, #204]	; (8002280 <HAL_GPIO_Init+0x2b0>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d006      	beq.n	80021d0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021c2:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <HAL_GPIO_Init+0x2b0>)
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	492e      	ldr	r1, [pc, #184]	; (8002280 <HAL_GPIO_Init+0x2b0>)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
 80021ce:	e006      	b.n	80021de <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021d0:	4b2b      	ldr	r3, [pc, #172]	; (8002280 <HAL_GPIO_Init+0x2b0>)
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	4929      	ldr	r1, [pc, #164]	; (8002280 <HAL_GPIO_Init+0x2b0>)
 80021da:	4013      	ands	r3, r2
 80021dc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d006      	beq.n	80021f8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <HAL_GPIO_Init+0x2b0>)
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	4924      	ldr	r1, [pc, #144]	; (8002280 <HAL_GPIO_Init+0x2b0>)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
 80021f6:	e006      	b.n	8002206 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021f8:	4b21      	ldr	r3, [pc, #132]	; (8002280 <HAL_GPIO_Init+0x2b0>)
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	43db      	mvns	r3, r3
 8002200:	491f      	ldr	r1, [pc, #124]	; (8002280 <HAL_GPIO_Init+0x2b0>)
 8002202:	4013      	ands	r3, r2
 8002204:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d006      	beq.n	8002220 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002212:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <HAL_GPIO_Init+0x2b0>)
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	491a      	ldr	r1, [pc, #104]	; (8002280 <HAL_GPIO_Init+0x2b0>)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	60cb      	str	r3, [r1, #12]
 800221e:	e006      	b.n	800222e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <HAL_GPIO_Init+0x2b0>)
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	43db      	mvns	r3, r3
 8002228:	4915      	ldr	r1, [pc, #84]	; (8002280 <HAL_GPIO_Init+0x2b0>)
 800222a:	4013      	ands	r3, r2
 800222c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	3301      	adds	r3, #1
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	fa22 f303 	lsr.w	r3, r2, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	f47f aed0 	bne.w	8001fe4 <HAL_GPIO_Init+0x14>
  }
}
 8002244:	bf00      	nop
 8002246:	372c      	adds	r7, #44	; 0x2c
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	10210000 	.word	0x10210000
 8002254:	10110000 	.word	0x10110000
 8002258:	10120000 	.word	0x10120000
 800225c:	10310000 	.word	0x10310000
 8002260:	10320000 	.word	0x10320000
 8002264:	10220000 	.word	0x10220000
 8002268:	40021000 	.word	0x40021000
 800226c:	40010000 	.word	0x40010000
 8002270:	40010800 	.word	0x40010800
 8002274:	40010c00 	.word	0x40010c00
 8002278:	40011000 	.word	0x40011000
 800227c:	40011400 	.word	0x40011400
 8002280:	40010400 	.word	0x40010400

08002284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	807b      	strh	r3, [r7, #2]
 8002290:	4613      	mov	r3, r2
 8002292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002294:	787b      	ldrb	r3, [r7, #1]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800229a:	887a      	ldrh	r2, [r7, #2]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022a0:	e003      	b.n	80022aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022a2:	887b      	ldrh	r3, [r7, #2]
 80022a4:	041a      	lsls	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	611a      	str	r2, [r3, #16]
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b6:	b08b      	sub	sp, #44	; 0x2c
 80022b8:	af06      	add	r7, sp, #24
 80022ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e0fd      	b.n	80024c2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f006 fe34 	bl	8008f48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2203      	movs	r2, #3
 80022e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 f830 	bl	8005352 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	687e      	ldr	r6, [r7, #4]
 80022fa:	466d      	mov	r5, sp
 80022fc:	f106 0410 	add.w	r4, r6, #16
 8002300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002302:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	602b      	str	r3, [r5, #0]
 8002308:	1d33      	adds	r3, r6, #4
 800230a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800230c:	6838      	ldr	r0, [r7, #0]
 800230e:	f002 fffa 	bl	8005306 <USB_CoreInit>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0ce      	b.n	80024c2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f003 f82b 	bl	8005386 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002330:	2300      	movs	r3, #0
 8002332:	73fb      	strb	r3, [r7, #15]
 8002334:	e04c      	b.n	80023d0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	3301      	adds	r3, #1
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	b298      	uxth	r0, r3
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	440b      	add	r3, r1
 8002372:	3336      	adds	r3, #54	; 0x36
 8002374:	4602      	mov	r2, r0
 8002376:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	3303      	adds	r3, #3
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	440b      	add	r3, r1
 800239c:	3338      	adds	r3, #56	; 0x38
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023a2:	7bfa      	ldrb	r2, [r7, #15]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	440b      	add	r3, r1
 80023b0:	333c      	adds	r3, #60	; 0x3c
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	440b      	add	r3, r1
 80023c4:	3340      	adds	r3, #64	; 0x40
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	3301      	adds	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d3ad      	bcc.n	8002336 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023da:	2300      	movs	r3, #0
 80023dc:	73fb      	strb	r3, [r7, #15]
 80023de:	e044      	b.n	800246a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	440b      	add	r3, r1
 80023ee:	f203 1369 	addw	r3, r3, #361	; 0x169
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	440b      	add	r3, r1
 8002404:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	440b      	add	r3, r1
 8002430:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	440b      	add	r3, r1
 8002446:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	440b      	add	r3, r1
 800245c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	3301      	adds	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	429a      	cmp	r2, r3
 8002472:	d3b5      	bcc.n	80023e0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	687e      	ldr	r6, [r7, #4]
 800247c:	466d      	mov	r5, sp
 800247e:	f106 0410 	add.w	r4, r6, #16
 8002482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	602b      	str	r3, [r5, #0]
 800248a:	1d33      	adds	r3, r6, #4
 800248c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800248e:	6838      	ldr	r0, [r7, #0]
 8002490:	f002 ff85 	bl	800539e <USB_DevInit>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2202      	movs	r2, #2
 800249e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00d      	b.n	80024c2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f004 ff20 	bl	8007300 <USB_DevDisconnect>

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_PCD_Start+0x16>
 80024dc:	2302      	movs	r3, #2
 80024de:	e016      	b.n	800250e <HAL_PCD_Start+0x44>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f002 ff1a 	bl	8005326 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80024f2:	2101      	movs	r1, #1
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f006 ff9a 	bl	800942e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f004 fef4 	bl	80072ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b088      	sub	sp, #32
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f004 fef6 	bl	8007314 <USB_ReadInterrupts>
 8002528:	4603      	mov	r3, r0
 800252a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800252e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002532:	d102      	bne.n	800253a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fb61 	bl	8002bfc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f004 fee8 	bl	8007314 <USB_ReadInterrupts>
 8002544:	4603      	mov	r3, r0
 8002546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800254e:	d112      	bne.n	8002576 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002558:	b29a      	uxth	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002562:	b292      	uxth	r2, r2
 8002564:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f006 fd68 	bl	800903e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800256e:	2100      	movs	r1, #0
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f925 	bl	80027c0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f004 feca 	bl	8007314 <USB_ReadInterrupts>
 8002580:	4603      	mov	r3, r0
 8002582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800258a:	d10b      	bne.n	80025a4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002594:	b29a      	uxth	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800259e:	b292      	uxth	r2, r2
 80025a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f004 feb3 	bl	8007314 <USB_ReadInterrupts>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b8:	d10b      	bne.n	80025d2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025cc:	b292      	uxth	r2, r2
 80025ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f004 fe9c 	bl	8007314 <USB_ReadInterrupts>
 80025dc:	4603      	mov	r3, r0
 80025de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e6:	d126      	bne.n	8002636 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0204 	bic.w	r2, r2, #4
 80025fa:	b292      	uxth	r2, r2
 80025fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002608:	b29a      	uxth	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0208 	bic.w	r2, r2, #8
 8002612:	b292      	uxth	r2, r2
 8002614:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f006 fd49 	bl	80090b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002626:	b29a      	uxth	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002630:	b292      	uxth	r2, r2
 8002632:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f004 fe6a 	bl	8007314 <USB_ReadInterrupts>
 8002640:	4603      	mov	r3, r0
 8002642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800264a:	f040 8084 	bne.w	8002756 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800264e:	2300      	movs	r3, #0
 8002650:	77fb      	strb	r3, [r7, #31]
 8002652:	e011      	b.n	8002678 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	7ffb      	ldrb	r3, [r7, #31]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	441a      	add	r2, r3
 8002660:	7ffb      	ldrb	r3, [r7, #31]
 8002662:	8812      	ldrh	r2, [r2, #0]
 8002664:	b292      	uxth	r2, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	f107 0120 	add.w	r1, r7, #32
 800266c:	440b      	add	r3, r1
 800266e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002672:	7ffb      	ldrb	r3, [r7, #31]
 8002674:	3301      	adds	r3, #1
 8002676:	77fb      	strb	r3, [r7, #31]
 8002678:	7ffb      	ldrb	r3, [r7, #31]
 800267a:	2b07      	cmp	r3, #7
 800267c:	d9ea      	bls.n	8002654 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002686:	b29a      	uxth	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0201 	orr.w	r2, r2, #1
 8002690:	b292      	uxth	r2, r2
 8002692:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800269e:	b29a      	uxth	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0201 	bic.w	r2, r2, #1
 80026a8:	b292      	uxth	r2, r2
 80026aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80026ae:	bf00      	nop
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f6      	beq.n	80026b0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d4:	b292      	uxth	r2, r2
 80026d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80026da:	2300      	movs	r3, #0
 80026dc:	77fb      	strb	r3, [r7, #31]
 80026de:	e010      	b.n	8002702 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80026e0:	7ffb      	ldrb	r3, [r7, #31]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	4611      	mov	r1, r2
 80026e8:	7ffa      	ldrb	r2, [r7, #31]
 80026ea:	0092      	lsls	r2, r2, #2
 80026ec:	440a      	add	r2, r1
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	f107 0120 	add.w	r1, r7, #32
 80026f4:	440b      	add	r3, r1
 80026f6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80026fa:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80026fc:	7ffb      	ldrb	r3, [r7, #31]
 80026fe:	3301      	adds	r3, #1
 8002700:	77fb      	strb	r3, [r7, #31]
 8002702:	7ffb      	ldrb	r3, [r7, #31]
 8002704:	2b07      	cmp	r3, #7
 8002706:	d9eb      	bls.n	80026e0 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002710:	b29a      	uxth	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0208 	orr.w	r2, r2, #8
 800271a:	b292      	uxth	r2, r2
 800271c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002728:	b29a      	uxth	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002732:	b292      	uxth	r2, r2
 8002734:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002740:	b29a      	uxth	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0204 	orr.w	r2, r2, #4
 800274a:	b292      	uxth	r2, r2
 800274c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f006 fc93 	bl	800907c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f004 fdda 	bl	8007314 <USB_ReadInterrupts>
 8002760:	4603      	mov	r3, r0
 8002762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800276a:	d10e      	bne.n	800278a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002774:	b29a      	uxth	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800277e:	b292      	uxth	r2, r2
 8002780:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f006 fc4c 	bl	8009022 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f004 fdc0 	bl	8007314 <USB_ReadInterrupts>
 8002794:	4603      	mov	r3, r0
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800279e:	d10b      	bne.n	80027b8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027b2:	b292      	uxth	r2, r2
 80027b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80027b8:	bf00      	nop
 80027ba:	3720      	adds	r7, #32
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_PCD_SetAddress+0x1a>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e013      	b.n	8002802 <HAL_PCD_SetAddress+0x42>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f004 fd67 	bl	80072c6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	4608      	mov	r0, r1
 8002814:	4611      	mov	r1, r2
 8002816:	461a      	mov	r2, r3
 8002818:	4603      	mov	r3, r0
 800281a:	70fb      	strb	r3, [r7, #3]
 800281c:	460b      	mov	r3, r1
 800281e:	803b      	strh	r3, [r7, #0]
 8002820:	4613      	mov	r3, r2
 8002822:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800282c:	2b00      	cmp	r3, #0
 800282e:	da0e      	bge.n	800284e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	4413      	add	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	705a      	strb	r2, [r3, #1]
 800284c:	e00e      	b.n	800286c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	f003 0207 	and.w	r2, r3, #7
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	4413      	add	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	b2da      	uxtb	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002878:	883a      	ldrh	r2, [r7, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	78ba      	ldrb	r2, [r7, #2]
 8002882:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	785b      	ldrb	r3, [r3, #1]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d004      	beq.n	8002896 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002896:	78bb      	ldrb	r3, [r7, #2]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d102      	bne.n	80028a2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_PCD_EP_Open+0xa6>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e00e      	b.n	80028ce <HAL_PCD_EP_Open+0xc4>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68f9      	ldr	r1, [r7, #12]
 80028be:	4618      	mov	r0, r3
 80028c0:	f002 fd8e 	bl	80053e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80028cc:	7afb      	ldrb	r3, [r7, #11]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	460b      	mov	r3, r1
 80028e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	da0e      	bge.n	8002908 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2201      	movs	r2, #1
 8002904:	705a      	strb	r2, [r3, #1]
 8002906:	e00e      	b.n	8002926 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	f003 0207 	and.w	r2, r3, #7
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002926:	78fb      	ldrb	r3, [r7, #3]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	b2da      	uxtb	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_PCD_EP_Close+0x6a>
 800293c:	2302      	movs	r3, #2
 800293e:	e00e      	b.n	800295e <HAL_PCD_EP_Close+0x88>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68f9      	ldr	r1, [r7, #12]
 800294e:	4618      	mov	r0, r3
 8002950:	f003 f8b0 	bl	8005ab4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	460b      	mov	r3, r1
 8002974:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002976:	7afb      	ldrb	r3, [r7, #11]
 8002978:	f003 0207 	and.w	r2, r3, #7
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4413      	add	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2200      	movs	r2, #0
 800299e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2200      	movs	r2, #0
 80029a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029a6:	7afb      	ldrb	r3, [r7, #11]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029b2:	7afb      	ldrb	r3, [r7, #11]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d106      	bne.n	80029ca <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6979      	ldr	r1, [r7, #20]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f003 fa62 	bl	8005e8c <USB_EPStartXfer>
 80029c8:	e005      	b.n	80029d6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6979      	ldr	r1, [r7, #20]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f003 fa5b 	bl	8005e8c <USB_EPStartXfer>
  }

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	f003 0207 	and.w	r2, r3, #7
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	440b      	add	r3, r1
 80029fe:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a1e:	7afb      	ldrb	r3, [r7, #11]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4413      	add	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2200      	movs	r2, #0
 8002a52:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2201      	movs	r2, #1
 8002a58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a5a:	7afb      	ldrb	r3, [r7, #11]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a66:	7afb      	ldrb	r3, [r7, #11]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d106      	bne.n	8002a7e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6979      	ldr	r1, [r7, #20]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f003 fa08 	bl	8005e8c <USB_EPStartXfer>
 8002a7c:	e005      	b.n	8002a8a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6979      	ldr	r1, [r7, #20]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f003 fa01 	bl	8005e8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	f003 0207 	and.w	r2, r3, #7
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d901      	bls.n	8002ab2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e04c      	b.n	8002b4c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	da0e      	bge.n	8002ad8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	705a      	strb	r2, [r3, #1]
 8002ad6:	e00c      	b.n	8002af2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_PCD_EP_SetStall+0x7e>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e01c      	b.n	8002b4c <HAL_PCD_EP_SetStall+0xb8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68f9      	ldr	r1, [r7, #12]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f004 fad3 	bl	80070cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d108      	bne.n	8002b42 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	f004 fbf8 	bl	8007332 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	f003 020f 	and.w	r2, r3, #15
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d901      	bls.n	8002b72 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e040      	b.n	8002bf4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	da0e      	bge.n	8002b98 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	705a      	strb	r2, [r3, #1]
 8002b96:	e00e      	b.n	8002bb6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	f003 0207 	and.w	r2, r3, #7
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_PCD_EP_ClrStall+0x82>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e00e      	b.n	8002bf4 <HAL_PCD_EP_ClrStall+0xa0>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68f9      	ldr	r1, [r7, #12]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f004 fac1 	bl	800716c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08e      	sub	sp, #56	; 0x38
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c04:	e2df      	b.n	80031c6 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c0e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002c10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002c1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f040 8158 	bne.w	8002ed6 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002c26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d152      	bne.n	8002cd6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c40:	81fb      	strh	r3, [r7, #14]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	89fb      	ldrh	r3, [r7, #14]
 8002c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3328      	adds	r3, #40	; 0x28
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	441a      	add	r2, r3
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c94:	2100      	movs	r1, #0
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f006 f9a9 	bl	8008fee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 828e 	beq.w	80031c6 <PCD_EP_ISR_Handler+0x5ca>
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f040 8289 	bne.w	80031c6 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	b292      	uxth	r2, r2
 8002cc8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cd4:	e277      	b.n	80031c6 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002ce6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d034      	beq.n	8002d5a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4413      	add	r3, r2
 8002d04:	3306      	adds	r3, #6
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f004 fb4e 	bl	80073d0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d40:	4013      	ands	r3, r2
 8002d42:	823b      	strh	r3, [r7, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	8a3a      	ldrh	r2, [r7, #16]
 8002d4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d4e:	b292      	uxth	r2, r2
 8002d50:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f006 f91e 	bl	8008f94 <HAL_PCD_SetupStageCallback>
 8002d58:	e235      	b.n	80031c6 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d5a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f280 8231 	bge.w	80031c6 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d70:	4013      	ands	r3, r2
 8002d72:	83bb      	strh	r3, [r7, #28]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	8bba      	ldrh	r2, [r7, #28]
 8002d7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d7e:	b292      	uxth	r2, r2
 8002d80:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	3306      	adds	r3, #6
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d019      	beq.n	8002dea <PCD_EP_ISR_Handler+0x1ee>
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d015      	beq.n	8002dea <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	6959      	ldr	r1, [r3, #20]
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	f004 fafe 	bl	80073d0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	441a      	add	r2, r3
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002de2:	2100      	movs	r1, #0
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f006 f8e7 	bl	8008fb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	4413      	add	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d112      	bne.n	8002e38 <PCD_EP_ISR_Handler+0x23c>
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	801a      	strh	r2, [r3, #0]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	801a      	strh	r2, [r3, #0]
 8002e36:	e02f      	b.n	8002e98 <PCD_EP_ISR_Handler+0x29c>
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2b3e      	cmp	r3, #62	; 0x3e
 8002e3e:	d813      	bhi.n	8002e68 <PCD_EP_ISR_Handler+0x26c>
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	633b      	str	r3, [r7, #48]	; 0x30
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <PCD_EP_ISR_Handler+0x25e>
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	3301      	adds	r3, #1
 8002e58:	633b      	str	r3, [r7, #48]	; 0x30
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	029b      	lsls	r3, r3, #10
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	801a      	strh	r2, [r3, #0]
 8002e66:	e017      	b.n	8002e98 <PCD_EP_ISR_Handler+0x29c>
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d102      	bne.n	8002e82 <PCD_EP_ISR_Handler+0x286>
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	633b      	str	r3, [r7, #48]	; 0x30
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	029b      	lsls	r3, r3, #10
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea8:	827b      	strh	r3, [r7, #18]
 8002eaa:	8a7b      	ldrh	r3, [r7, #18]
 8002eac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002eb0:	827b      	strh	r3, [r7, #18]
 8002eb2:	8a7b      	ldrh	r3, [r7, #18]
 8002eb4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002eb8:	827b      	strh	r3, [r7, #18]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	8a7b      	ldrh	r3, [r7, #18]
 8002ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	8013      	strh	r3, [r2, #0]
 8002ed4:	e177      	b.n	80031c6 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ee8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f280 80ea 	bge.w	80030c6 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f08:	4013      	ands	r3, r2
 8002f0a:	853b      	strh	r3, [r7, #40]	; 0x28
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002f1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f20:	b292      	uxth	r2, r2
 8002f22:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002f24:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	4413      	add	r3, r2
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	7b1b      	ldrb	r3, [r3, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d122      	bne.n	8002f88 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	3306      	adds	r3, #6
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f6a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002f6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8087 	beq.w	8003082 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	6959      	ldr	r1, [r3, #20]
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	88da      	ldrh	r2, [r3, #6]
 8002f80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f82:	f004 fa25 	bl	80073d0 <USB_ReadPMA>
 8002f86:	e07c      	b.n	8003082 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	78db      	ldrb	r3, [r3, #3]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d108      	bne.n	8002fa2 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f92:	461a      	mov	r2, r3
 8002f94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f923 	bl	80031e2 <HAL_PCD_EP_DB_Receive>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002fa0:	e06f      	b.n	8003082 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fbc:	847b      	strh	r3, [r7, #34]	; 0x22
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	441a      	add	r2, r3
 8002fcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d021      	beq.n	8003040 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003004:	b29b      	uxth	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	3302      	adds	r3, #2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003024:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003026:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003028:	2b00      	cmp	r3, #0
 800302a:	d02a      	beq.n	8003082 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	6959      	ldr	r1, [r3, #20]
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	891a      	ldrh	r2, [r3, #8]
 8003038:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800303a:	f004 f9c9 	bl	80073d0 <USB_ReadPMA>
 800303e:	e020      	b.n	8003082 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003048:	b29b      	uxth	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4413      	add	r3, r2
 8003054:	3306      	adds	r3, #6
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003068:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800306a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	6959      	ldr	r1, [r3, #20]
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	895a      	ldrh	r2, [r3, #10]
 800307c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800307e:	f004 f9a7 	bl	80073d0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	69da      	ldr	r2, [r3, #28]
 8003086:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003088:	441a      	add	r2, r3
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003094:	441a      	add	r2, r3
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d004      	beq.n	80030ac <PCD_EP_ISR_Handler+0x4b0>
 80030a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d206      	bcs.n	80030ba <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	4619      	mov	r1, r3
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f005 ff80 	bl	8008fb8 <HAL_PCD_DataOutStageCallback>
 80030b8:	e005      	b.n	80030c6 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030c0:	4618      	mov	r0, r3
 80030c2:	f002 fee3 	bl	8005e8c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80030c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d07a      	beq.n	80031c6 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80030d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80030fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fe:	843b      	strh	r3, [r7, #32]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	441a      	add	r2, r3
 800310e:	8c3b      	ldrh	r3, [r7, #32]
 8003110:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003114:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003118:	b29b      	uxth	r3, r3
 800311a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	78db      	ldrb	r3, [r3, #3]
 8003120:	2b02      	cmp	r3, #2
 8003122:	d108      	bne.n	8003136 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003128:	2b02      	cmp	r3, #2
 800312a:	d146      	bne.n	80031ba <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800312c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800312e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003132:	2b00      	cmp	r3, #0
 8003134:	d141      	bne.n	80031ba <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313e:	b29b      	uxth	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	3302      	adds	r3, #2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	4413      	add	r3, r2
 8003154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800315e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	699a      	ldr	r2, [r3, #24]
 8003164:	8bfb      	ldrh	r3, [r7, #30]
 8003166:	429a      	cmp	r2, r3
 8003168:	d906      	bls.n	8003178 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	8bfb      	ldrh	r3, [r7, #30]
 8003170:	1ad2      	subs	r2, r2, r3
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	619a      	str	r2, [r3, #24]
 8003176:	e002      	b.n	800317e <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	2200      	movs	r2, #0
 800317c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	4619      	mov	r1, r3
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f005 ff2e 	bl	8008fee <HAL_PCD_DataInStageCallback>
 8003192:	e018      	b.n	80031c6 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	8bfb      	ldrh	r3, [r7, #30]
 800319a:	441a      	add	r2, r3
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	69da      	ldr	r2, [r3, #28]
 80031a4:	8bfb      	ldrh	r3, [r7, #30]
 80031a6:	441a      	add	r2, r3
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031b2:	4618      	mov	r0, r3
 80031b4:	f002 fe6a 	bl	8005e8c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80031b8:	e005      	b.n	80031c6 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80031ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031bc:	461a      	mov	r2, r3
 80031be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f91b 	bl	80033fc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	b21b      	sxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f6ff ad17 	blt.w	8002c06 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3738      	adds	r7, #56	; 0x38
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b088      	sub	sp, #32
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	4613      	mov	r3, r2
 80031ee:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d07e      	beq.n	80032f8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003202:	b29b      	uxth	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4413      	add	r3, r2
 800320e:	3302      	adds	r3, #2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003222:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	699a      	ldr	r2, [r3, #24]
 8003228:	8b7b      	ldrh	r3, [r7, #26]
 800322a:	429a      	cmp	r2, r3
 800322c:	d306      	bcc.n	800323c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	8b7b      	ldrh	r3, [r7, #26]
 8003234:	1ad2      	subs	r2, r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	619a      	str	r2, [r3, #24]
 800323a:	e002      	b.n	8003242 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2200      	movs	r2, #0
 8003240:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d123      	bne.n	8003292 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	b29b      	uxth	r3, r3
 800325c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003264:	833b      	strh	r3, [r7, #24]
 8003266:	8b3b      	ldrh	r3, [r7, #24]
 8003268:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800326c:	833b      	strh	r3, [r7, #24]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	441a      	add	r2, r3
 800327c:	8b3b      	ldrh	r3, [r7, #24]
 800327e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800328e:	b29b      	uxth	r3, r3
 8003290:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01f      	beq.n	80032dc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b6:	82fb      	strh	r3, [r7, #22]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	441a      	add	r2, r3
 80032c6:	8afb      	ldrh	r3, [r7, #22]
 80032c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032d8:	b29b      	uxth	r3, r3
 80032da:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80032dc:	8b7b      	ldrh	r3, [r7, #26]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8087 	beq.w	80033f2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	6959      	ldr	r1, [r3, #20]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	891a      	ldrh	r2, [r3, #8]
 80032f0:	8b7b      	ldrh	r3, [r7, #26]
 80032f2:	f004 f86d 	bl	80073d0 <USB_ReadPMA>
 80032f6:	e07c      	b.n	80033f2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003300:	b29b      	uxth	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4413      	add	r3, r2
 800330c:	3306      	adds	r3, #6
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	4413      	add	r3, r2
 8003316:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003320:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	699a      	ldr	r2, [r3, #24]
 8003326:	8b7b      	ldrh	r3, [r7, #26]
 8003328:	429a      	cmp	r2, r3
 800332a:	d306      	bcc.n	800333a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	699a      	ldr	r2, [r3, #24]
 8003330:	8b7b      	ldrh	r3, [r7, #26]
 8003332:	1ad2      	subs	r2, r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	619a      	str	r2, [r3, #24]
 8003338:	e002      	b.n	8003340 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2200      	movs	r2, #0
 800333e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d123      	bne.n	8003390 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	b29b      	uxth	r3, r3
 800335a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800335e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003362:	83fb      	strh	r3, [r7, #30]
 8003364:	8bfb      	ldrh	r3, [r7, #30]
 8003366:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800336a:	83fb      	strh	r3, [r7, #30]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	441a      	add	r2, r3
 800337a:	8bfb      	ldrh	r3, [r7, #30]
 800337c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800338c:	b29b      	uxth	r3, r3
 800338e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d11f      	bne.n	80033da <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b4:	83bb      	strh	r3, [r7, #28]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	441a      	add	r2, r3
 80033c4:	8bbb      	ldrh	r3, [r7, #28]
 80033c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033da:	8b7b      	ldrh	r3, [r7, #26]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	6959      	ldr	r1, [r3, #20]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	895a      	ldrh	r2, [r3, #10]
 80033ec:	8b7b      	ldrh	r3, [r7, #26]
 80033ee:	f003 ffef 	bl	80073d0 <USB_ReadPMA>
    }
  }

  return count;
 80033f2:	8b7b      	ldrh	r3, [r7, #26]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b092      	sub	sp, #72	; 0x48
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8132 	beq.w	800367a <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800341e:	b29b      	uxth	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4413      	add	r3, r2
 800342a:	3302      	adds	r3, #2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800343e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003446:	429a      	cmp	r2, r3
 8003448:	d906      	bls.n	8003458 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003450:	1ad2      	subs	r2, r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	619a      	str	r2, [r3, #24]
 8003456:	e002      	b.n	800345e <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2200      	movs	r2, #0
 800345c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d12c      	bne.n	80034c0 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	4619      	mov	r1, r3
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f005 fdbe 	bl	8008fee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 822f 	beq.w	80038dc <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	b29b      	uxth	r3, r3
 8003490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003498:	827b      	strh	r3, [r7, #18]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	441a      	add	r2, r3
 80034a8:	8a7b      	ldrh	r3, [r7, #18]
 80034aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	8013      	strh	r3, [r2, #0]
 80034be:	e20d      	b.n	80038dc <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d01f      	beq.n	800350a <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	441a      	add	r2, r3
 80034f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003506:	b29b      	uxth	r3, r3
 8003508:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003510:	2b01      	cmp	r3, #1
 8003512:	f040 81e3 	bne.w	80038dc <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800351c:	441a      	add	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003528:	441a      	add	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	6a1a      	ldr	r2, [r3, #32]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	429a      	cmp	r2, r3
 8003538:	d309      	bcc.n	800354e <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	6a1a      	ldr	r2, [r3, #32]
 8003544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003546:	1ad2      	subs	r2, r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	621a      	str	r2, [r3, #32]
 800354c:	e014      	b.n	8003578 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8003556:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003558:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003562:	e009      	b.n	8003578 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2200      	movs	r2, #0
 8003576:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	785b      	ldrb	r3, [r3, #1]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d155      	bne.n	800362c <HAL_PCD_EP_DB_Transmit+0x230>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800358e:	b29b      	uxth	r3, r3
 8003590:	461a      	mov	r2, r3
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	4413      	add	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	011a      	lsls	r2, r3, #4
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	4413      	add	r3, r2
 80035a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d112      	bne.n	80035d4 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	801a      	strh	r2, [r3, #0]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	801a      	strh	r2, [r3, #0]
 80035d2:	e047      	b.n	8003664 <HAL_PCD_EP_DB_Transmit+0x268>
 80035d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d6:	2b3e      	cmp	r3, #62	; 0x3e
 80035d8:	d811      	bhi.n	80035fe <HAL_PCD_EP_DB_Transmit+0x202>
 80035da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035dc:	085b      	lsrs	r3, r3, #1
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_PCD_EP_DB_Transmit+0x1f4>
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	3301      	adds	r3, #1
 80035ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80035f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	029b      	lsls	r3, r3, #10
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	801a      	strh	r2, [r3, #0]
 80035fc:	e032      	b.n	8003664 <HAL_PCD_EP_DB_Transmit+0x268>
 80035fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	62bb      	str	r3, [r7, #40]	; 0x28
 8003604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <HAL_PCD_EP_DB_Transmit+0x218>
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	3b01      	subs	r3, #1
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
 8003614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003616:	b29b      	uxth	r3, r3
 8003618:	029b      	lsls	r3, r3, #10
 800361a:	b29b      	uxth	r3, r3
 800361c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003624:	b29a      	uxth	r2, r3
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	801a      	strh	r2, [r3, #0]
 800362a:	e01b      	b.n	8003664 <HAL_PCD_EP_DB_Transmit+0x268>
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	785b      	ldrb	r3, [r3, #1]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d117      	bne.n	8003664 <HAL_PCD_EP_DB_Transmit+0x268>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	623b      	str	r3, [r7, #32]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003642:	b29b      	uxth	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	4413      	add	r3, r2
 800364a:	623b      	str	r3, [r7, #32]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	011a      	lsls	r2, r3, #4
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	4413      	add	r3, r2
 8003656:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365e:	b29a      	uxth	r2, r3
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	6959      	ldr	r1, [r3, #20]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	891a      	ldrh	r2, [r3, #8]
 8003670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003672:	b29b      	uxth	r3, r3
 8003674:	f003 fe68 	bl	8007348 <USB_WritePMA>
 8003678:	e130      	b.n	80038dc <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003682:	b29b      	uxth	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	3306      	adds	r3, #6
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	4413      	add	r3, r2
 8003698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036a2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	699a      	ldr	r2, [r3, #24]
 80036a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d306      	bcc.n	80036bc <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036b4:	1ad2      	subs	r2, r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	619a      	str	r2, [r3, #24]
 80036ba:	e002      	b.n	80036c2 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2200      	movs	r2, #0
 80036c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d12c      	bne.n	8003724 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	4619      	mov	r1, r3
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f005 fc8c 	bl	8008fee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f040 80fd 	bne.w	80038dc <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	441a      	add	r2, r3
 800370c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800370e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003716:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800371a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800371e:	b29b      	uxth	r3, r3
 8003720:	8013      	strh	r3, [r2, #0]
 8003722:	e0db      	b.n	80038dc <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d11f      	bne.n	800376e <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	b29b      	uxth	r3, r3
 8003740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003748:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	441a      	add	r2, r3
 8003758:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800375a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800375e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376a:	b29b      	uxth	r3, r3
 800376c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003774:	2b01      	cmp	r3, #1
 8003776:	f040 80b1 	bne.w	80038dc <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003780:	441a      	add	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800378c:	441a      	add	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	6a1a      	ldr	r2, [r3, #32]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	429a      	cmp	r2, r3
 800379c:	d309      	bcc.n	80037b2 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	6a1a      	ldr	r2, [r3, #32]
 80037a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037aa:	1ad2      	subs	r2, r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	621a      	str	r2, [r3, #32]
 80037b0:	e014      	b.n	80037dc <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80037ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80037bc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80037c6:	e009      	b.n	80037dc <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2200      	movs	r2, #0
 80037d2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	637b      	str	r3, [r7, #52]	; 0x34
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	785b      	ldrb	r3, [r3, #1]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d155      	bne.n	8003896 <HAL_PCD_EP_DB_Transmit+0x49a>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	647b      	str	r3, [r7, #68]	; 0x44
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037fe:	4413      	add	r3, r2
 8003800:	647b      	str	r3, [r7, #68]	; 0x44
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	011a      	lsls	r2, r3, #4
 8003808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800380a:	4413      	add	r3, r2
 800380c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003810:	643b      	str	r3, [r7, #64]	; 0x40
 8003812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003814:	2b00      	cmp	r3, #0
 8003816:	d112      	bne.n	800383e <HAL_PCD_EP_DB_Transmit+0x442>
 8003818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	b29b      	uxth	r3, r3
 800381e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003822:	b29a      	uxth	r2, r3
 8003824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003826:	801a      	strh	r2, [r3, #0]
 8003828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b29b      	uxth	r3, r3
 800382e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003836:	b29a      	uxth	r2, r3
 8003838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800383a:	801a      	strh	r2, [r3, #0]
 800383c:	e044      	b.n	80038c8 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800383e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003840:	2b3e      	cmp	r3, #62	; 0x3e
 8003842:	d811      	bhi.n	8003868 <HAL_PCD_EP_DB_Transmit+0x46c>
 8003844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_PCD_EP_DB_Transmit+0x45e>
 8003854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003856:	3301      	adds	r3, #1
 8003858:	63fb      	str	r3, [r7, #60]	; 0x3c
 800385a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385c:	b29b      	uxth	r3, r3
 800385e:	029b      	lsls	r3, r3, #10
 8003860:	b29a      	uxth	r2, r3
 8003862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003864:	801a      	strh	r2, [r3, #0]
 8003866:	e02f      	b.n	80038c8 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	f003 031f 	and.w	r3, r3, #31
 8003874:	2b00      	cmp	r3, #0
 8003876:	d102      	bne.n	800387e <HAL_PCD_EP_DB_Transmit+0x482>
 8003878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800387a:	3b01      	subs	r3, #1
 800387c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800387e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003880:	b29b      	uxth	r3, r3
 8003882:	029b      	lsls	r3, r3, #10
 8003884:	b29b      	uxth	r3, r3
 8003886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800388a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800388e:	b29a      	uxth	r2, r3
 8003890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003892:	801a      	strh	r2, [r3, #0]
 8003894:	e018      	b.n	80038c8 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	785b      	ldrb	r3, [r3, #1]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d114      	bne.n	80038c8 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	461a      	mov	r2, r3
 80038aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ac:	4413      	add	r3, r2
 80038ae:	637b      	str	r3, [r7, #52]	; 0x34
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	011a      	lsls	r2, r3, #4
 80038b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b8:	4413      	add	r3, r2
 80038ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038be:	633b      	str	r3, [r7, #48]	; 0x30
 80038c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6818      	ldr	r0, [r3, #0]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	6959      	ldr	r1, [r3, #20]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	895a      	ldrh	r2, [r3, #10]
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	f003 fd36 	bl	8007348 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	461a      	mov	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f6:	823b      	strh	r3, [r7, #16]
 80038f8:	8a3b      	ldrh	r3, [r7, #16]
 80038fa:	f083 0310 	eor.w	r3, r3, #16
 80038fe:	823b      	strh	r3, [r7, #16]
 8003900:	8a3b      	ldrh	r3, [r7, #16]
 8003902:	f083 0320 	eor.w	r3, r3, #32
 8003906:	823b      	strh	r3, [r7, #16]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	441a      	add	r2, r3
 8003916:	8a3b      	ldrh	r3, [r7, #16]
 8003918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800391c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003928:	b29b      	uxth	r3, r3
 800392a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3748      	adds	r7, #72	; 0x48
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003936:	b480      	push	{r7}
 8003938:	b087      	sub	sp, #28
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	607b      	str	r3, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	817b      	strh	r3, [r7, #10]
 8003944:	4613      	mov	r3, r2
 8003946:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003948:	897b      	ldrh	r3, [r7, #10]
 800394a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00b      	beq.n	800396c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003954:	897b      	ldrh	r3, [r7, #10]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4413      	add	r3, r2
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	e009      	b.n	8003980 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800396c:	897a      	ldrh	r2, [r7, #10]
 800396e:	4613      	mov	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4413      	add	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003980:	893b      	ldrh	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d107      	bne.n	8003996 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2200      	movs	r2, #0
 800398a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	b29a      	uxth	r2, r3
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	80da      	strh	r2, [r3, #6]
 8003994:	e00b      	b.n	80039ae <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2201      	movs	r2, #1
 800399a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	b29a      	uxth	r2, r3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	0c1b      	lsrs	r3, r3, #16
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	371c      	adds	r7, #28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr
	...

080039bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e26c      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8087 	beq.w	8003aea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039dc:	4b92      	ldr	r3, [pc, #584]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d00c      	beq.n	8003a02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039e8:	4b8f      	ldr	r3, [pc, #572]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d112      	bne.n	8003a1a <HAL_RCC_OscConfig+0x5e>
 80039f4:	4b8c      	ldr	r3, [pc, #560]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a00:	d10b      	bne.n	8003a1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a02:	4b89      	ldr	r3, [pc, #548]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d06c      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x12c>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d168      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e246      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a22:	d106      	bne.n	8003a32 <HAL_RCC_OscConfig+0x76>
 8003a24:	4b80      	ldr	r3, [pc, #512]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a7f      	ldr	r2, [pc, #508]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e02e      	b.n	8003a90 <HAL_RCC_OscConfig+0xd4>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x98>
 8003a3a:	4b7b      	ldr	r3, [pc, #492]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a7a      	ldr	r2, [pc, #488]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	4b78      	ldr	r3, [pc, #480]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a77      	ldr	r2, [pc, #476]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e01d      	b.n	8003a90 <HAL_RCC_OscConfig+0xd4>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCC_OscConfig+0xbc>
 8003a5e:	4b72      	ldr	r3, [pc, #456]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a71      	ldr	r2, [pc, #452]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	4b6f      	ldr	r3, [pc, #444]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a6e      	ldr	r2, [pc, #440]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e00b      	b.n	8003a90 <HAL_RCC_OscConfig+0xd4>
 8003a78:	4b6b      	ldr	r3, [pc, #428]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a6a      	ldr	r2, [pc, #424]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4b68      	ldr	r3, [pc, #416]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a67      	ldr	r2, [pc, #412]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d013      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fe f960 	bl	8001d5c <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7fe f95c 	bl	8001d5c <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	; 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e1fa      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	4b5d      	ldr	r3, [pc, #372]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0xe4>
 8003abe:	e014      	b.n	8003aea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac0:	f7fe f94c 	bl	8001d5c <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac8:	f7fe f948 	bl	8001d5c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b64      	cmp	r3, #100	; 0x64
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e1e6      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ada:	4b53      	ldr	r3, [pc, #332]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x10c>
 8003ae6:	e000      	b.n	8003aea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d063      	beq.n	8003bbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003af6:	4b4c      	ldr	r3, [pc, #304]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00b      	beq.n	8003b1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b02:	4b49      	ldr	r3, [pc, #292]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d11c      	bne.n	8003b48 <HAL_RCC_OscConfig+0x18c>
 8003b0e:	4b46      	ldr	r3, [pc, #280]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d116      	bne.n	8003b48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1a:	4b43      	ldr	r3, [pc, #268]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_RCC_OscConfig+0x176>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d001      	beq.n	8003b32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e1ba      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b32:	4b3d      	ldr	r3, [pc, #244]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4939      	ldr	r1, [pc, #228]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b46:	e03a      	b.n	8003bbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d020      	beq.n	8003b92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b50:	4b36      	ldr	r3, [pc, #216]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b56:	f7fe f901 	bl	8001d5c <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5e:	f7fe f8fd 	bl	8001d5c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e19b      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b70:	4b2d      	ldr	r3, [pc, #180]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7c:	4b2a      	ldr	r3, [pc, #168]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4927      	ldr	r1, [pc, #156]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	600b      	str	r3, [r1, #0]
 8003b90:	e015      	b.n	8003bbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b92:	4b26      	ldr	r3, [pc, #152]	; (8003c2c <HAL_RCC_OscConfig+0x270>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fe f8e0 	bl	8001d5c <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba0:	f7fe f8dc 	bl	8001d5c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e17a      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d03a      	beq.n	8003c40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d019      	beq.n	8003c06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd2:	4b17      	ldr	r3, [pc, #92]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd8:	f7fe f8c0 	bl	8001d5c <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be0:	f7fe f8bc 	bl	8001d5c <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e15a      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	; (8003c28 <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0f0      	beq.n	8003be0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bfe:	2001      	movs	r0, #1
 8003c00:	f000 faa8 	bl	8004154 <RCC_Delay>
 8003c04:	e01c      	b.n	8003c40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c06:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0c:	f7fe f8a6 	bl	8001d5c <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c12:	e00f      	b.n	8003c34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c14:	f7fe f8a2 	bl	8001d5c <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d908      	bls.n	8003c34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e140      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4ec>
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	42420000 	.word	0x42420000
 8003c30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c34:	4b9e      	ldr	r3, [pc, #632]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e9      	bne.n	8003c14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80a6 	beq.w	8003d9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c52:	4b97      	ldr	r3, [pc, #604]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10d      	bne.n	8003c7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5e:	4b94      	ldr	r3, [pc, #592]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	4a93      	ldr	r2, [pc, #588]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c68:	61d3      	str	r3, [r2, #28]
 8003c6a:	4b91      	ldr	r3, [pc, #580]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c76:	2301      	movs	r3, #1
 8003c78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7a:	4b8e      	ldr	r3, [pc, #568]	; (8003eb4 <HAL_RCC_OscConfig+0x4f8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d118      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c86:	4b8b      	ldr	r3, [pc, #556]	; (8003eb4 <HAL_RCC_OscConfig+0x4f8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a8a      	ldr	r2, [pc, #552]	; (8003eb4 <HAL_RCC_OscConfig+0x4f8>)
 8003c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c92:	f7fe f863 	bl	8001d5c <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9a:	f7fe f85f 	bl	8001d5c <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b64      	cmp	r3, #100	; 0x64
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e0fd      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cac:	4b81      	ldr	r3, [pc, #516]	; (8003eb4 <HAL_RCC_OscConfig+0x4f8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d106      	bne.n	8003cce <HAL_RCC_OscConfig+0x312>
 8003cc0:	4b7b      	ldr	r3, [pc, #492]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	4a7a      	ldr	r2, [pc, #488]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	6213      	str	r3, [r2, #32]
 8003ccc:	e02d      	b.n	8003d2a <HAL_RCC_OscConfig+0x36e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x334>
 8003cd6:	4b76      	ldr	r3, [pc, #472]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	4a75      	ldr	r2, [pc, #468]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	6213      	str	r3, [r2, #32]
 8003ce2:	4b73      	ldr	r3, [pc, #460]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	4a72      	ldr	r2, [pc, #456]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003ce8:	f023 0304 	bic.w	r3, r3, #4
 8003cec:	6213      	str	r3, [r2, #32]
 8003cee:	e01c      	b.n	8003d2a <HAL_RCC_OscConfig+0x36e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d10c      	bne.n	8003d12 <HAL_RCC_OscConfig+0x356>
 8003cf8:	4b6d      	ldr	r3, [pc, #436]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	4a6c      	ldr	r2, [pc, #432]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003cfe:	f043 0304 	orr.w	r3, r3, #4
 8003d02:	6213      	str	r3, [r2, #32]
 8003d04:	4b6a      	ldr	r3, [pc, #424]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	4a69      	ldr	r2, [pc, #420]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6213      	str	r3, [r2, #32]
 8003d10:	e00b      	b.n	8003d2a <HAL_RCC_OscConfig+0x36e>
 8003d12:	4b67      	ldr	r3, [pc, #412]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	4a66      	ldr	r2, [pc, #408]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	6213      	str	r3, [r2, #32]
 8003d1e:	4b64      	ldr	r3, [pc, #400]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	4a63      	ldr	r2, [pc, #396]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003d24:	f023 0304 	bic.w	r3, r3, #4
 8003d28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d015      	beq.n	8003d5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d32:	f7fe f813 	bl	8001d5c <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d38:	e00a      	b.n	8003d50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3a:	f7fe f80f 	bl	8001d5c <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e0ab      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d50:	4b57      	ldr	r3, [pc, #348]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0ee      	beq.n	8003d3a <HAL_RCC_OscConfig+0x37e>
 8003d5c:	e014      	b.n	8003d88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5e:	f7fd fffd 	bl	8001d5c <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d64:	e00a      	b.n	8003d7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d66:	f7fd fff9 	bl	8001d5c <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e095      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7c:	4b4c      	ldr	r3, [pc, #304]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1ee      	bne.n	8003d66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d88:	7dfb      	ldrb	r3, [r7, #23]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d105      	bne.n	8003d9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8e:	4b48      	ldr	r3, [pc, #288]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	4a47      	ldr	r2, [pc, #284]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 8081 	beq.w	8003ea6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da4:	4b42      	ldr	r3, [pc, #264]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 030c 	and.w	r3, r3, #12
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d061      	beq.n	8003e74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d146      	bne.n	8003e46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db8:	4b3f      	ldr	r3, [pc, #252]	; (8003eb8 <HAL_RCC_OscConfig+0x4fc>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbe:	f7fd ffcd 	bl	8001d5c <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc6:	f7fd ffc9 	bl	8001d5c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e067      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd8:	4b35      	ldr	r3, [pc, #212]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f0      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dec:	d108      	bne.n	8003e00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dee:	4b30      	ldr	r3, [pc, #192]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	492d      	ldr	r1, [pc, #180]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e00:	4b2b      	ldr	r3, [pc, #172]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a19      	ldr	r1, [r3, #32]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	430b      	orrs	r3, r1
 8003e12:	4927      	ldr	r1, [pc, #156]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e18:	4b27      	ldr	r3, [pc, #156]	; (8003eb8 <HAL_RCC_OscConfig+0x4fc>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1e:	f7fd ff9d 	bl	8001d5c <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e26:	f7fd ff99 	bl	8001d5c <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e037      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e38:	4b1d      	ldr	r3, [pc, #116]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x46a>
 8003e44:	e02f      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e46:	4b1c      	ldr	r3, [pc, #112]	; (8003eb8 <HAL_RCC_OscConfig+0x4fc>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fd ff86 	bl	8001d5c <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fd ff82 	bl	8001d5c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e020      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e66:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x498>
 8003e72:	e018      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e013      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e80:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <HAL_RCC_OscConfig+0x4f4>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d106      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d001      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40007000 	.word	0x40007000
 8003eb8:	42420060 	.word	0x42420060

08003ebc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0d0      	b.n	8004072 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed0:	4b6a      	ldr	r3, [pc, #424]	; (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d910      	bls.n	8003f00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ede:	4b67      	ldr	r3, [pc, #412]	; (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 0207 	bic.w	r2, r3, #7
 8003ee6:	4965      	ldr	r1, [pc, #404]	; (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eee:	4b63      	ldr	r3, [pc, #396]	; (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0b8      	b.n	8004072 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d020      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f18:	4b59      	ldr	r3, [pc, #356]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	4a58      	ldr	r2, [pc, #352]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f30:	4b53      	ldr	r3, [pc, #332]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	4a52      	ldr	r2, [pc, #328]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f3c:	4b50      	ldr	r3, [pc, #320]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	494d      	ldr	r1, [pc, #308]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d040      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d107      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f62:	4b47      	ldr	r3, [pc, #284]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d115      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e07f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7a:	4b41      	ldr	r3, [pc, #260]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e073      	b.n	8004072 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f8a:	4b3d      	ldr	r3, [pc, #244]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e06b      	b.n	8004072 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f9a:	4b39      	ldr	r3, [pc, #228]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f023 0203 	bic.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4936      	ldr	r1, [pc, #216]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fac:	f7fd fed6 	bl	8001d5c <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb4:	f7fd fed2 	bl	8001d5c <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e053      	b.n	8004072 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	4b2d      	ldr	r3, [pc, #180]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f003 020c 	and.w	r2, r3, #12
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d1eb      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fdc:	4b27      	ldr	r3, [pc, #156]	; (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d210      	bcs.n	800400c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fea:	4b24      	ldr	r3, [pc, #144]	; (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f023 0207 	bic.w	r2, r3, #7
 8003ff2:	4922      	ldr	r1, [pc, #136]	; (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffa:	4b20      	ldr	r3, [pc, #128]	; (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d001      	beq.n	800400c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e032      	b.n	8004072 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004018:	4b19      	ldr	r3, [pc, #100]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4916      	ldr	r1, [pc, #88]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8004026:	4313      	orrs	r3, r2
 8004028:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d009      	beq.n	800404a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004036:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	490e      	ldr	r1, [pc, #56]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8004046:	4313      	orrs	r3, r2
 8004048:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800404a:	f000 f821 	bl	8004090 <HAL_RCC_GetSysClockFreq>
 800404e:	4601      	mov	r1, r0
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	4a0a      	ldr	r2, [pc, #40]	; (8004084 <HAL_RCC_ClockConfig+0x1c8>)
 800405c:	5cd3      	ldrb	r3, [r2, r3]
 800405e:	fa21 f303 	lsr.w	r3, r1, r3
 8004062:	4a09      	ldr	r2, [pc, #36]	; (8004088 <HAL_RCC_ClockConfig+0x1cc>)
 8004064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <HAL_RCC_ClockConfig+0x1d0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fd fe34 	bl	8001cd8 <HAL_InitTick>

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40022000 	.word	0x40022000
 8004080:	40021000 	.word	0x40021000
 8004084:	0800e328 	.word	0x0800e328
 8004088:	20000000 	.word	0x20000000
 800408c:	20000004 	.word	0x20000004

08004090 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004090:	b490      	push	{r4, r7}
 8004092:	b08a      	sub	sp, #40	; 0x28
 8004094:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004096:	4b2a      	ldr	r3, [pc, #168]	; (8004140 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004098:	1d3c      	adds	r4, r7, #4
 800409a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800409c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80040a0:	4b28      	ldr	r3, [pc, #160]	; (8004144 <HAL_RCC_GetSysClockFreq+0xb4>)
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	2300      	movs	r3, #0
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	2300      	movs	r3, #0
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040ba:	4b23      	ldr	r3, [pc, #140]	; (8004148 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d002      	beq.n	80040d0 <HAL_RCC_GetSysClockFreq+0x40>
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d003      	beq.n	80040d6 <HAL_RCC_GetSysClockFreq+0x46>
 80040ce:	e02d      	b.n	800412c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040d0:	4b1e      	ldr	r3, [pc, #120]	; (800414c <HAL_RCC_GetSysClockFreq+0xbc>)
 80040d2:	623b      	str	r3, [r7, #32]
      break;
 80040d4:	e02d      	b.n	8004132 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	0c9b      	lsrs	r3, r3, #18
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80040e2:	4413      	add	r3, r2
 80040e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80040e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d013      	beq.n	800411c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040f4:	4b14      	ldr	r3, [pc, #80]	; (8004148 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	0c5b      	lsrs	r3, r3, #17
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004102:	4413      	add	r3, r2
 8004104:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004108:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	4a0f      	ldr	r2, [pc, #60]	; (800414c <HAL_RCC_GetSysClockFreq+0xbc>)
 800410e:	fb02 f203 	mul.w	r2, r2, r3
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	fbb2 f3f3 	udiv	r3, r2, r3
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
 800411a:	e004      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	4a0c      	ldr	r2, [pc, #48]	; (8004150 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004120:	fb02 f303 	mul.w	r3, r2, r3
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	623b      	str	r3, [r7, #32]
      break;
 800412a:	e002      	b.n	8004132 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <HAL_RCC_GetSysClockFreq+0xbc>)
 800412e:	623b      	str	r3, [r7, #32]
      break;
 8004130:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004132:	6a3b      	ldr	r3, [r7, #32]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3728      	adds	r7, #40	; 0x28
 8004138:	46bd      	mov	sp, r7
 800413a:	bc90      	pop	{r4, r7}
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	0800e2c0 	.word	0x0800e2c0
 8004144:	0800e2d0 	.word	0x0800e2d0
 8004148:	40021000 	.word	0x40021000
 800414c:	007a1200 	.word	0x007a1200
 8004150:	003d0900 	.word	0x003d0900

08004154 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <RCC_Delay+0x34>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0a      	ldr	r2, [pc, #40]	; (800418c <RCC_Delay+0x38>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	0a5b      	lsrs	r3, r3, #9
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004170:	bf00      	nop
  }
  while (Delay --);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1e5a      	subs	r2, r3, #1
 8004176:	60fa      	str	r2, [r7, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f9      	bne.n	8004170 <RCC_Delay+0x1c>
}
 800417c:	bf00      	nop
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	20000000 	.word	0x20000000
 800418c:	10624dd3 	.word	0x10624dd3

08004190 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d07d      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80041ac:	2300      	movs	r3, #0
 80041ae:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b0:	4b4f      	ldr	r3, [pc, #316]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10d      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041bc:	4b4c      	ldr	r3, [pc, #304]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	4a4b      	ldr	r2, [pc, #300]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c6:	61d3      	str	r3, [r2, #28]
 80041c8:	4b49      	ldr	r3, [pc, #292]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d4:	2301      	movs	r3, #1
 80041d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d8:	4b46      	ldr	r3, [pc, #280]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d118      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041e4:	4b43      	ldr	r3, [pc, #268]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a42      	ldr	r2, [pc, #264]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f0:	f7fd fdb4 	bl	8001d5c <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f6:	e008      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f8:	f7fd fdb0 	bl	8001d5c <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b64      	cmp	r3, #100	; 0x64
 8004204:	d901      	bls.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e06d      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420a:	4b3a      	ldr	r3, [pc, #232]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004216:	4b36      	ldr	r3, [pc, #216]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d02e      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	429a      	cmp	r2, r3
 8004232:	d027      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004234:	4b2e      	ldr	r3, [pc, #184]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800423e:	4b2e      	ldr	r3, [pc, #184]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004240:	2201      	movs	r2, #1
 8004242:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004244:	4b2c      	ldr	r3, [pc, #176]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800424a:	4a29      	ldr	r2, [pc, #164]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d014      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425a:	f7fd fd7f 	bl	8001d5c <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004260:	e00a      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004262:	f7fd fd7b 	bl	8001d5c <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004270:	4293      	cmp	r3, r2
 8004272:	d901      	bls.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e036      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004278:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0ee      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004284:	4b1a      	ldr	r3, [pc, #104]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	4917      	ldr	r1, [pc, #92]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004292:	4313      	orrs	r3, r2
 8004294:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004296:	7dfb      	ldrb	r3, [r7, #23]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d105      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429c:	4b14      	ldr	r3, [pc, #80]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042b4:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	490b      	ldr	r1, [pc, #44]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d008      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	4904      	ldr	r1, [pc, #16]	; (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40007000 	.word	0x40007000
 80042f8:	42420440 	.word	0x42420440

080042fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e041      	b.n	8004392 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fd fbb2 	bl	8001a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3304      	adds	r3, #4
 8004338:	4619      	mov	r1, r3
 800433a:	4610      	mov	r0, r2
 800433c:	f000 fbce 	bl	8004adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e041      	b.n	8004430 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d106      	bne.n	80043c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f839 	bl	8004438 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2202      	movs	r2, #2
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3304      	adds	r3, #4
 80043d6:	4619      	mov	r1, r3
 80043d8:	4610      	mov	r0, r2
 80043da:	f000 fb7f 	bl	8004adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr
	...

0800444c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d109      	bne.n	8004470 <HAL_TIM_PWM_Start+0x24>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b01      	cmp	r3, #1
 8004466:	bf14      	ite	ne
 8004468:	2301      	movne	r3, #1
 800446a:	2300      	moveq	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	e022      	b.n	80044b6 <HAL_TIM_PWM_Start+0x6a>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b04      	cmp	r3, #4
 8004474:	d109      	bne.n	800448a <HAL_TIM_PWM_Start+0x3e>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	bf14      	ite	ne
 8004482:	2301      	movne	r3, #1
 8004484:	2300      	moveq	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	e015      	b.n	80044b6 <HAL_TIM_PWM_Start+0x6a>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b08      	cmp	r3, #8
 800448e:	d109      	bne.n	80044a4 <HAL_TIM_PWM_Start+0x58>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	bf14      	ite	ne
 800449c:	2301      	movne	r3, #1
 800449e:	2300      	moveq	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	e008      	b.n	80044b6 <HAL_TIM_PWM_Start+0x6a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	bf14      	ite	ne
 80044b0:	2301      	movne	r3, #1
 80044b2:	2300      	moveq	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e05e      	b.n	800457c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d104      	bne.n	80044ce <HAL_TIM_PWM_Start+0x82>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044cc:	e013      	b.n	80044f6 <HAL_TIM_PWM_Start+0xaa>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d104      	bne.n	80044de <HAL_TIM_PWM_Start+0x92>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044dc:	e00b      	b.n	80044f6 <HAL_TIM_PWM_Start+0xaa>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d104      	bne.n	80044ee <HAL_TIM_PWM_Start+0xa2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044ec:	e003      	b.n	80044f6 <HAL_TIM_PWM_Start+0xaa>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2202      	movs	r2, #2
 80044f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2201      	movs	r2, #1
 80044fc:	6839      	ldr	r1, [r7, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fd6c 	bl	8004fdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1e      	ldr	r2, [pc, #120]	; (8004584 <HAL_TIM_PWM_Start+0x138>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d107      	bne.n	800451e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800451c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a18      	ldr	r2, [pc, #96]	; (8004584 <HAL_TIM_PWM_Start+0x138>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00e      	beq.n	8004546 <HAL_TIM_PWM_Start+0xfa>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004530:	d009      	beq.n	8004546 <HAL_TIM_PWM_Start+0xfa>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a14      	ldr	r2, [pc, #80]	; (8004588 <HAL_TIM_PWM_Start+0x13c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_TIM_PWM_Start+0xfa>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a12      	ldr	r2, [pc, #72]	; (800458c <HAL_TIM_PWM_Start+0x140>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d111      	bne.n	800456a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b06      	cmp	r3, #6
 8004556:	d010      	beq.n	800457a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004568:	e007      	b.n	800457a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0201 	orr.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40012c00 	.word	0x40012c00
 8004588:	40000400 	.word	0x40000400
 800458c:	40000800 	.word	0x40000800

08004590 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e093      	b.n	80046cc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d106      	bne.n	80045be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7fd fa85 	bl	8001ac8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2202      	movs	r2, #2
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045d4:	f023 0307 	bic.w	r3, r3, #7
 80045d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3304      	adds	r3, #4
 80045e2:	4619      	mov	r1, r3
 80045e4:	4610      	mov	r0, r2
 80045e6:	f000 fa79 	bl	8004adc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004612:	f023 0303 	bic.w	r3, r3, #3
 8004616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	021b      	lsls	r3, r3, #8
 8004622:	4313      	orrs	r3, r2
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004630:	f023 030c 	bic.w	r3, r3, #12
 8004634:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800463c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004640:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	4313      	orrs	r3, r2
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	011a      	lsls	r2, r3, #4
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	031b      	lsls	r3, r3, #12
 8004660:	4313      	orrs	r3, r2
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800466e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	4313      	orrs	r3, r2
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80046fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d110      	bne.n	8004726 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d102      	bne.n	8004710 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800470a:	7b7b      	ldrb	r3, [r7, #13]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d001      	beq.n	8004714 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e068      	b.n	80047e6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004724:	e031      	b.n	800478a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b04      	cmp	r3, #4
 800472a:	d110      	bne.n	800474e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800472c:	7bbb      	ldrb	r3, [r7, #14]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d102      	bne.n	8004738 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004732:	7b3b      	ldrb	r3, [r7, #12]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d001      	beq.n	800473c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e054      	b.n	80047e6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800474c:	e01d      	b.n	800478a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d108      	bne.n	8004766 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004754:	7bbb      	ldrb	r3, [r7, #14]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d105      	bne.n	8004766 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800475a:	7b7b      	ldrb	r3, [r7, #13]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d102      	bne.n	8004766 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004760:	7b3b      	ldrb	r3, [r7, #12]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d001      	beq.n	800476a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e03d      	b.n	80047e6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2202      	movs	r2, #2
 800476e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2202      	movs	r2, #2
 8004776:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2202      	movs	r2, #2
 8004786:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <HAL_TIM_Encoder_Start+0xc2>
 8004790:	2b04      	cmp	r3, #4
 8004792:	d008      	beq.n	80047a6 <HAL_TIM_Encoder_Start+0xd2>
 8004794:	e00f      	b.n	80047b6 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2201      	movs	r2, #1
 800479c:	2100      	movs	r1, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fc1c 	bl	8004fdc <TIM_CCxChannelCmd>
      break;
 80047a4:	e016      	b.n	80047d4 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2201      	movs	r2, #1
 80047ac:	2104      	movs	r1, #4
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fc14 	bl	8004fdc <TIM_CCxChannelCmd>
      break;
 80047b4:	e00e      	b.n	80047d4 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2201      	movs	r2, #1
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fc0c 	bl	8004fdc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2201      	movs	r2, #1
 80047ca:	2104      	movs	r1, #4
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fc05 	bl	8004fdc <TIM_CCxChannelCmd>
      break;
 80047d2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004806:	2302      	movs	r3, #2
 8004808:	e0ac      	b.n	8004964 <HAL_TIM_PWM_ConfigChannel+0x174>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b0c      	cmp	r3, #12
 8004816:	f200 809f 	bhi.w	8004958 <HAL_TIM_PWM_ConfigChannel+0x168>
 800481a:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800481c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004820:	08004855 	.word	0x08004855
 8004824:	08004959 	.word	0x08004959
 8004828:	08004959 	.word	0x08004959
 800482c:	08004959 	.word	0x08004959
 8004830:	08004895 	.word	0x08004895
 8004834:	08004959 	.word	0x08004959
 8004838:	08004959 	.word	0x08004959
 800483c:	08004959 	.word	0x08004959
 8004840:	080048d7 	.word	0x080048d7
 8004844:	08004959 	.word	0x08004959
 8004848:	08004959 	.word	0x08004959
 800484c:	08004959 	.word	0x08004959
 8004850:	08004917 	.word	0x08004917
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 f9a0 	bl	8004ba0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0208 	orr.w	r2, r2, #8
 800486e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0204 	bic.w	r2, r2, #4
 800487e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6999      	ldr	r1, [r3, #24]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	691a      	ldr	r2, [r3, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	619a      	str	r2, [r3, #24]
      break;
 8004892:	e062      	b.n	800495a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	4618      	mov	r0, r3
 800489c:	f000 f9e6 	bl	8004c6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6999      	ldr	r1, [r3, #24]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	021a      	lsls	r2, r3, #8
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	619a      	str	r2, [r3, #24]
      break;
 80048d4:	e041      	b.n	800495a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fa2f 	bl	8004d40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0208 	orr.w	r2, r2, #8
 80048f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0204 	bic.w	r2, r2, #4
 8004900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69d9      	ldr	r1, [r3, #28]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	61da      	str	r2, [r3, #28]
      break;
 8004914:	e021      	b.n	800495a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fa79 	bl	8004e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69da      	ldr	r2, [r3, #28]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69d9      	ldr	r1, [r3, #28]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	021a      	lsls	r2, r3, #8
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	61da      	str	r2, [r3, #28]
      break;
 8004956:	e000      	b.n	800495a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004958:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_TIM_ConfigClockSource+0x18>
 8004980:	2302      	movs	r3, #2
 8004982:	e0a6      	b.n	8004ad2 <HAL_TIM_ConfigClockSource+0x166>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b40      	cmp	r3, #64	; 0x40
 80049ba:	d067      	beq.n	8004a8c <HAL_TIM_ConfigClockSource+0x120>
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	d80b      	bhi.n	80049d8 <HAL_TIM_ConfigClockSource+0x6c>
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d073      	beq.n	8004aac <HAL_TIM_ConfigClockSource+0x140>
 80049c4:	2b10      	cmp	r3, #16
 80049c6:	d802      	bhi.n	80049ce <HAL_TIM_ConfigClockSource+0x62>
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d06f      	beq.n	8004aac <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80049cc:	e078      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049ce:	2b20      	cmp	r3, #32
 80049d0:	d06c      	beq.n	8004aac <HAL_TIM_ConfigClockSource+0x140>
 80049d2:	2b30      	cmp	r3, #48	; 0x30
 80049d4:	d06a      	beq.n	8004aac <HAL_TIM_ConfigClockSource+0x140>
      break;
 80049d6:	e073      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049d8:	2b70      	cmp	r3, #112	; 0x70
 80049da:	d00d      	beq.n	80049f8 <HAL_TIM_ConfigClockSource+0x8c>
 80049dc:	2b70      	cmp	r3, #112	; 0x70
 80049de:	d804      	bhi.n	80049ea <HAL_TIM_ConfigClockSource+0x7e>
 80049e0:	2b50      	cmp	r3, #80	; 0x50
 80049e2:	d033      	beq.n	8004a4c <HAL_TIM_ConfigClockSource+0xe0>
 80049e4:	2b60      	cmp	r3, #96	; 0x60
 80049e6:	d041      	beq.n	8004a6c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80049e8:	e06a      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ee:	d066      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0x152>
 80049f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f4:	d017      	beq.n	8004a26 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80049f6:	e063      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6818      	ldr	r0, [r3, #0]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	6899      	ldr	r1, [r3, #8]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f000 fac9 	bl	8004f9e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a1a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	609a      	str	r2, [r3, #8]
      break;
 8004a24:	e04c      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6818      	ldr	r0, [r3, #0]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6899      	ldr	r1, [r3, #8]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f000 fab2 	bl	8004f9e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a48:	609a      	str	r2, [r3, #8]
      break;
 8004a4a:	e039      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	6859      	ldr	r1, [r3, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f000 fa29 	bl	8004eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2150      	movs	r1, #80	; 0x50
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 fa80 	bl	8004f6a <TIM_ITRx_SetConfig>
      break;
 8004a6a:	e029      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	6859      	ldr	r1, [r3, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f000 fa47 	bl	8004f0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2160      	movs	r1, #96	; 0x60
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fa70 	bl	8004f6a <TIM_ITRx_SetConfig>
      break;
 8004a8a:	e019      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	6859      	ldr	r1, [r3, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	f000 fa09 	bl	8004eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2140      	movs	r1, #64	; 0x40
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fa60 	bl	8004f6a <TIM_ITRx_SetConfig>
      break;
 8004aaa:	e009      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	f000 fa57 	bl	8004f6a <TIM_ITRx_SetConfig>
        break;
 8004abc:	e000      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004abe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a29      	ldr	r2, [pc, #164]	; (8004b94 <TIM_Base_SetConfig+0xb8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00b      	beq.n	8004b0c <TIM_Base_SetConfig+0x30>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afa:	d007      	beq.n	8004b0c <TIM_Base_SetConfig+0x30>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a26      	ldr	r2, [pc, #152]	; (8004b98 <TIM_Base_SetConfig+0xbc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_Base_SetConfig+0x30>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a25      	ldr	r2, [pc, #148]	; (8004b9c <TIM_Base_SetConfig+0xc0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d108      	bne.n	8004b1e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a1c      	ldr	r2, [pc, #112]	; (8004b94 <TIM_Base_SetConfig+0xb8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00b      	beq.n	8004b3e <TIM_Base_SetConfig+0x62>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2c:	d007      	beq.n	8004b3e <TIM_Base_SetConfig+0x62>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a19      	ldr	r2, [pc, #100]	; (8004b98 <TIM_Base_SetConfig+0xbc>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d003      	beq.n	8004b3e <TIM_Base_SetConfig+0x62>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a18      	ldr	r2, [pc, #96]	; (8004b9c <TIM_Base_SetConfig+0xc0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d108      	bne.n	8004b50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a07      	ldr	r2, [pc, #28]	; (8004b94 <TIM_Base_SetConfig+0xb8>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d103      	bne.n	8004b84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	615a      	str	r2, [r3, #20]
}
 8004b8a:	bf00      	nop
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800

08004ba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f023 0201 	bic.w	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f023 0302 	bic.w	r3, r3, #2
 8004be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a1c      	ldr	r2, [pc, #112]	; (8004c68 <TIM_OC1_SetConfig+0xc8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d10c      	bne.n	8004c16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f023 0308 	bic.w	r3, r3, #8
 8004c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f023 0304 	bic.w	r3, r3, #4
 8004c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a13      	ldr	r2, [pc, #76]	; (8004c68 <TIM_OC1_SetConfig+0xc8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d111      	bne.n	8004c42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	621a      	str	r2, [r3, #32]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bc80      	pop	{r7}
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40012c00 	.word	0x40012c00

08004c6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f023 0210 	bic.w	r2, r3, #16
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f023 0320 	bic.w	r3, r3, #32
 8004cb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a1d      	ldr	r2, [pc, #116]	; (8004d3c <TIM_OC2_SetConfig+0xd0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d10d      	bne.n	8004ce8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <TIM_OC2_SetConfig+0xd0>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d113      	bne.n	8004d18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	621a      	str	r2, [r3, #32]
}
 8004d32:	bf00      	nop
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr
 8004d3c:	40012c00 	.word	0x40012c00

08004d40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0303 	bic.w	r3, r3, #3
 8004d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	021b      	lsls	r3, r3, #8
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a1d      	ldr	r2, [pc, #116]	; (8004e10 <TIM_OC3_SetConfig+0xd0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d10d      	bne.n	8004dba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a14      	ldr	r2, [pc, #80]	; (8004e10 <TIM_OC3_SetConfig+0xd0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d113      	bne.n	8004dea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	621a      	str	r2, [r3, #32]
}
 8004e04:	bf00      	nop
 8004e06:	371c      	adds	r7, #28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bc80      	pop	{r7}
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40012c00 	.word	0x40012c00

08004e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	031b      	lsls	r3, r3, #12
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a0f      	ldr	r2, [pc, #60]	; (8004eac <TIM_OC4_SetConfig+0x98>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d109      	bne.n	8004e88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	019b      	lsls	r3, r3, #6
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bc80      	pop	{r7}
 8004eaa:	4770      	bx	lr
 8004eac:	40012c00 	.word	0x40012c00

08004eb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	f023 0201 	bic.w	r2, r3, #1
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f023 030a 	bic.w	r3, r3, #10
 8004eec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	621a      	str	r2, [r3, #32]
}
 8004f02:	bf00      	nop
 8004f04:	371c      	adds	r7, #28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr

08004f0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	f023 0210 	bic.w	r2, r3, #16
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	031b      	lsls	r3, r3, #12
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	621a      	str	r2, [r3, #32]
}
 8004f60:	bf00      	nop
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr

08004f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f043 0307 	orr.w	r3, r3, #7
 8004f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	609a      	str	r2, [r3, #8]
}
 8004f94:	bf00      	nop
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bc80      	pop	{r7}
 8004f9c:	4770      	bx	lr

08004f9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b087      	sub	sp, #28
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	607a      	str	r2, [r7, #4]
 8004faa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	021a      	lsls	r2, r3, #8
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	609a      	str	r2, [r3, #8]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr

08004fdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	2201      	movs	r2, #1
 8004ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6a1a      	ldr	r2, [r3, #32]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	401a      	ands	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6a1a      	ldr	r2, [r3, #32]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f003 031f 	and.w	r3, r3, #31
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	fa01 f303 	lsl.w	r3, r1, r3
 8005014:	431a      	orrs	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr

08005024 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d109      	bne.n	8005048 <HAL_TIMEx_PWMN_Start+0x24>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b01      	cmp	r3, #1
 800503e:	bf14      	ite	ne
 8005040:	2301      	movne	r3, #1
 8005042:	2300      	moveq	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	e022      	b.n	800508e <HAL_TIMEx_PWMN_Start+0x6a>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2b04      	cmp	r3, #4
 800504c:	d109      	bne.n	8005062 <HAL_TIMEx_PWMN_Start+0x3e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b01      	cmp	r3, #1
 8005058:	bf14      	ite	ne
 800505a:	2301      	movne	r3, #1
 800505c:	2300      	moveq	r3, #0
 800505e:	b2db      	uxtb	r3, r3
 8005060:	e015      	b.n	800508e <HAL_TIMEx_PWMN_Start+0x6a>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b08      	cmp	r3, #8
 8005066:	d109      	bne.n	800507c <HAL_TIMEx_PWMN_Start+0x58>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	bf14      	ite	ne
 8005074:	2301      	movne	r3, #1
 8005076:	2300      	moveq	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	e008      	b.n	800508e <HAL_TIMEx_PWMN_Start+0x6a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	bf14      	ite	ne
 8005088:	2301      	movne	r3, #1
 800508a:	2300      	moveq	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e059      	b.n	800514a <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d104      	bne.n	80050a6 <HAL_TIMEx_PWMN_Start+0x82>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050a4:	e013      	b.n	80050ce <HAL_TIMEx_PWMN_Start+0xaa>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d104      	bne.n	80050b6 <HAL_TIMEx_PWMN_Start+0x92>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050b4:	e00b      	b.n	80050ce <HAL_TIMEx_PWMN_Start+0xaa>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d104      	bne.n	80050c6 <HAL_TIMEx_PWMN_Start+0xa2>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c4:	e003      	b.n	80050ce <HAL_TIMEx_PWMN_Start+0xaa>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2202      	movs	r2, #2
 80050ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2204      	movs	r2, #4
 80050d4:	6839      	ldr	r1, [r7, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 f8f1 	bl	80052be <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a18      	ldr	r2, [pc, #96]	; (8005154 <HAL_TIMEx_PWMN_Start+0x130>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00e      	beq.n	8005114 <HAL_TIMEx_PWMN_Start+0xf0>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fe:	d009      	beq.n	8005114 <HAL_TIMEx_PWMN_Start+0xf0>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a14      	ldr	r2, [pc, #80]	; (8005158 <HAL_TIMEx_PWMN_Start+0x134>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d004      	beq.n	8005114 <HAL_TIMEx_PWMN_Start+0xf0>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a13      	ldr	r2, [pc, #76]	; (800515c <HAL_TIMEx_PWMN_Start+0x138>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d111      	bne.n	8005138 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b06      	cmp	r3, #6
 8005124:	d010      	beq.n	8005148 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0201 	orr.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005136:	e007      	b.n	8005148 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0201 	orr.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40012c00 	.word	0x40012c00
 8005158:	40000400 	.word	0x40000400
 800515c:	40000800 	.word	0x40000800

08005160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005174:	2302      	movs	r3, #2
 8005176:	e046      	b.n	8005206 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a16      	ldr	r2, [pc, #88]	; (8005210 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d00e      	beq.n	80051da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c4:	d009      	beq.n	80051da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a12      	ldr	r2, [pc, #72]	; (8005214 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d004      	beq.n	80051da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a10      	ldr	r2, [pc, #64]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d10c      	bne.n	80051f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40000400 	.word	0x40000400
 8005218:	40000800 	.word	0x40000800

0800521c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005234:	2302      	movs	r3, #2
 8005236:	e03d      	b.n	80052b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bc80      	pop	{r7}
 80052bc:	4770      	bx	lr

080052be <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80052be:	b480      	push	{r7}
 80052c0:	b087      	sub	sp, #28
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f003 031f 	and.w	r3, r3, #31
 80052d0:	2204      	movs	r2, #4
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a1a      	ldr	r2, [r3, #32]
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	43db      	mvns	r3, r3
 80052e0:	401a      	ands	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a1a      	ldr	r2, [r3, #32]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f003 031f 	and.w	r3, r3, #31
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	fa01 f303 	lsl.w	r3, r1, r3
 80052f6:	431a      	orrs	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	621a      	str	r2, [r3, #32]
}
 80052fc:	bf00      	nop
 80052fe:	371c      	adds	r7, #28
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr

08005306 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005306:	b084      	sub	sp, #16
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	f107 0014 	add.w	r0, r7, #20
 8005314:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	b004      	add	sp, #16
 8005324:	4770      	bx	lr

08005326 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005326:	b480      	push	{r7}
 8005328:	b085      	sub	sp, #20
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005336:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800533a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	b29a      	uxth	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	bc80      	pop	{r7}
 8005350:	4770      	bx	lr

08005352 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800535a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800535e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	b29b      	uxth	r3, r3
 800536c:	43db      	mvns	r3, r3
 800536e:	b29b      	uxth	r3, r3
 8005370:	4013      	ands	r3, r2
 8005372:	b29a      	uxth	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	bc80      	pop	{r7}
 8005384:	4770      	bx	lr

08005386 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	460b      	mov	r3, r1
 8005390:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr

0800539e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800539e:	b084      	sub	sp, #16
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	f107 0014 	add.w	r0, r7, #20
 80053ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	b004      	add	sp, #16
 80053dc:	4770      	bx	lr
	...

080053e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b09b      	sub	sp, #108	; 0x6c
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	78db      	ldrb	r3, [r3, #3]
 800540e:	2b03      	cmp	r3, #3
 8005410:	d81f      	bhi.n	8005452 <USB_ActivateEndpoint+0x72>
 8005412:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <USB_ActivateEndpoint+0x38>)
 8005414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005418:	08005429 	.word	0x08005429
 800541c:	08005445 	.word	0x08005445
 8005420:	0800545b 	.word	0x0800545b
 8005424:	08005437 	.word	0x08005437
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005428:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800542c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005430:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005434:	e012      	b.n	800545c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005436:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800543a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800543e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005442:	e00b      	b.n	800545c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005444:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005448:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800544c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005450:	e004      	b.n	800545c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005458:	e000      	b.n	800545c <USB_ActivateEndpoint+0x7c>
      break;
 800545a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	441a      	add	r2, r3
 8005466:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800546a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800546e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547a:	b29b      	uxth	r3, r3
 800547c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	b29b      	uxth	r3, r3
 800548c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005494:	b29a      	uxth	r2, r3
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	b29b      	uxth	r3, r3
 800549c:	4313      	orrs	r3, r2
 800549e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	441a      	add	r2, r3
 80054ac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80054b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	7b1b      	ldrb	r3, [r3, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f040 8149 	bne.w	8005760 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	785b      	ldrb	r3, [r3, #1]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 8084 	beq.w	80055e0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	461a      	mov	r2, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	4413      	add	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	011a      	lsls	r2, r3, #4
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054fa:	613b      	str	r3, [r7, #16]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	88db      	ldrh	r3, [r3, #6]
 8005500:	085b      	lsrs	r3, r3, #1
 8005502:	b29b      	uxth	r3, r3
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	81fb      	strh	r3, [r7, #14]
 800551a:	89fb      	ldrh	r3, [r7, #14]
 800551c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01b      	beq.n	800555c <USB_ActivateEndpoint+0x17c>
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b29b      	uxth	r3, r3
 8005532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553a:	81bb      	strh	r3, [r7, #12]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	441a      	add	r2, r3
 8005546:	89bb      	ldrh	r3, [r7, #12]
 8005548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800554c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005554:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005558:	b29b      	uxth	r3, r3
 800555a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	78db      	ldrb	r3, [r3, #3]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d020      	beq.n	80055a6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	b29b      	uxth	r3, r3
 8005572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800557a:	813b      	strh	r3, [r7, #8]
 800557c:	893b      	ldrh	r3, [r7, #8]
 800557e:	f083 0320 	eor.w	r3, r3, #32
 8005582:	813b      	strh	r3, [r7, #8]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	441a      	add	r2, r3
 800558e:	893b      	ldrh	r3, [r7, #8]
 8005590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800559c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	8013      	strh	r3, [r2, #0]
 80055a4:	e27f      	b.n	8005aa6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055bc:	817b      	strh	r3, [r7, #10]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	441a      	add	r2, r3
 80055c8:	897b      	ldrh	r3, [r7, #10]
 80055ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055da:	b29b      	uxth	r3, r3
 80055dc:	8013      	strh	r3, [r2, #0]
 80055de:	e262      	b.n	8005aa6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f0:	4413      	add	r3, r2
 80055f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	011a      	lsls	r2, r3, #4
 80055fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	88db      	ldrh	r3, [r3, #6]
 8005608:	085b      	lsrs	r3, r3, #1
 800560a:	b29b      	uxth	r3, r3
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800561e:	b29b      	uxth	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	4413      	add	r3, r2
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	011a      	lsls	r2, r3, #4
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	4413      	add	r3, r2
 8005632:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005636:	623b      	str	r3, [r7, #32]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d112      	bne.n	8005666 <USB_ActivateEndpoint+0x286>
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800564a:	b29a      	uxth	r2, r3
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	801a      	strh	r2, [r3, #0]
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b29b      	uxth	r3, r3
 8005656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800565a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800565e:	b29a      	uxth	r2, r3
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	801a      	strh	r2, [r3, #0]
 8005664:	e02f      	b.n	80056c6 <USB_ActivateEndpoint+0x2e6>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b3e      	cmp	r3, #62	; 0x3e
 800566c:	d813      	bhi.n	8005696 <USB_ActivateEndpoint+0x2b6>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	085b      	lsrs	r3, r3, #1
 8005674:	663b      	str	r3, [r7, #96]	; 0x60
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <USB_ActivateEndpoint+0x2a8>
 8005682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005684:	3301      	adds	r3, #1
 8005686:	663b      	str	r3, [r7, #96]	; 0x60
 8005688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800568a:	b29b      	uxth	r3, r3
 800568c:	029b      	lsls	r3, r3, #10
 800568e:	b29a      	uxth	r2, r3
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	801a      	strh	r2, [r3, #0]
 8005694:	e017      	b.n	80056c6 <USB_ActivateEndpoint+0x2e6>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	663b      	str	r3, [r7, #96]	; 0x60
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 031f 	and.w	r3, r3, #31
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d102      	bne.n	80056b0 <USB_ActivateEndpoint+0x2d0>
 80056aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056ac:	3b01      	subs	r3, #1
 80056ae:	663b      	str	r3, [r7, #96]	; 0x60
 80056b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	029b      	lsls	r3, r3, #10
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	83fb      	strh	r3, [r7, #30]
 80056d4:	8bfb      	ldrh	r3, [r7, #30]
 80056d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d01b      	beq.n	8005716 <USB_ActivateEndpoint+0x336>
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f4:	83bb      	strh	r3, [r7, #28]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	441a      	add	r2, r3
 8005700:	8bbb      	ldrh	r3, [r7, #28]
 8005702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800570a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800570e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005712:	b29b      	uxth	r3, r3
 8005714:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572c:	837b      	strh	r3, [r7, #26]
 800572e:	8b7b      	ldrh	r3, [r7, #26]
 8005730:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005734:	837b      	strh	r3, [r7, #26]
 8005736:	8b7b      	ldrh	r3, [r7, #26]
 8005738:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800573c:	837b      	strh	r3, [r7, #26]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	441a      	add	r2, r3
 8005748:	8b7b      	ldrh	r3, [r7, #26]
 800574a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800574e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800575a:	b29b      	uxth	r3, r3
 800575c:	8013      	strh	r3, [r2, #0]
 800575e:	e1a2      	b.n	8005aa6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	b29b      	uxth	r3, r3
 800576e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005776:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	441a      	add	r2, r3
 8005784:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800578c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005790:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005798:	b29b      	uxth	r3, r3
 800579a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	65bb      	str	r3, [r7, #88]	; 0x58
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	461a      	mov	r2, r3
 80057aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ac:	4413      	add	r3, r2
 80057ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	011a      	lsls	r2, r3, #4
 80057b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057be:	657b      	str	r3, [r7, #84]	; 0x54
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	891b      	ldrh	r3, [r3, #8]
 80057c4:	085b      	lsrs	r3, r3, #1
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ce:	801a      	strh	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	653b      	str	r3, [r7, #80]	; 0x50
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057da:	b29b      	uxth	r3, r3
 80057dc:	461a      	mov	r2, r3
 80057de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e0:	4413      	add	r3, r2
 80057e2:	653b      	str	r3, [r7, #80]	; 0x50
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	011a      	lsls	r2, r3, #4
 80057ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80057f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	895b      	ldrh	r3, [r3, #10]
 80057f8:	085b      	lsrs	r3, r3, #1
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	b29a      	uxth	r2, r3
 8005800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005802:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	2b00      	cmp	r3, #0
 800580a:	f040 8091 	bne.w	8005930 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800581c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800581e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d01b      	beq.n	800585e <USB_ActivateEndpoint+0x47e>
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	b29b      	uxth	r3, r3
 8005834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	441a      	add	r2, r3
 8005848:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800584a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800584e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585a:	b29b      	uxth	r3, r3
 800585c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	873b      	strh	r3, [r7, #56]	; 0x38
 800586c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800586e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005872:	2b00      	cmp	r3, #0
 8005874:	d01b      	beq.n	80058ae <USB_ActivateEndpoint+0x4ce>
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	b29b      	uxth	r3, r3
 8005884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	441a      	add	r2, r3
 8005898:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800589a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800589e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80058c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80058c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80058cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80058ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80058d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	441a      	add	r2, r3
 80058e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80058e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800590c:	867b      	strh	r3, [r7, #50]	; 0x32
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	441a      	add	r2, r3
 8005918:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800591a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592a:	b29b      	uxth	r3, r3
 800592c:	8013      	strh	r3, [r2, #0]
 800592e:	e0ba      	b.n	8005aa6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005940:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01d      	beq.n	8005988 <USB_ActivateEndpoint+0x5a8>
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	b29b      	uxth	r3, r3
 800595a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005962:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	441a      	add	r2, r3
 8005970:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800597c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005984:	b29b      	uxth	r3, r3
 8005986:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005998:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800599c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01d      	beq.n	80059e0 <USB_ActivateEndpoint+0x600>
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	441a      	add	r2, r3
 80059c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80059cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059dc:	b29b      	uxth	r3, r3
 80059de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	78db      	ldrb	r3, [r3, #3]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d024      	beq.n	8005a32 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005a02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a06:	f083 0320 	eor.w	r3, r3, #32
 8005a0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	441a      	add	r2, r3
 8005a18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	8013      	strh	r3, [r2, #0]
 8005a30:	e01d      	b.n	8005a6e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	441a      	add	r2, r3
 8005a56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a84:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	441a      	add	r2, r3
 8005a90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005aa6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	376c      	adds	r7, #108	; 0x6c
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr

08005ab4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b08d      	sub	sp, #52	; 0x34
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	7b1b      	ldrb	r3, [r3, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f040 808e 	bne.w	8005be4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d044      	beq.n	8005b5a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	81bb      	strh	r3, [r7, #12]
 8005ade:	89bb      	ldrh	r3, [r7, #12]
 8005ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01b      	beq.n	8005b20 <USB_DeactivateEndpoint+0x6c>
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afe:	817b      	strh	r3, [r7, #10]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	441a      	add	r2, r3
 8005b0a:	897b      	ldrh	r3, [r7, #10]
 8005b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b36:	813b      	strh	r3, [r7, #8]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	441a      	add	r2, r3
 8005b42:	893b      	ldrh	r3, [r7, #8]
 8005b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	8013      	strh	r3, [r2, #0]
 8005b58:	e192      	b.n	8005e80 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	827b      	strh	r3, [r7, #18]
 8005b68:	8a7b      	ldrh	r3, [r7, #18]
 8005b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d01b      	beq.n	8005baa <USB_DeactivateEndpoint+0xf6>
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b88:	823b      	strh	r3, [r7, #16]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	441a      	add	r2, r3
 8005b94:	8a3b      	ldrh	r3, [r7, #16]
 8005b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc0:	81fb      	strh	r3, [r7, #14]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	441a      	add	r2, r3
 8005bcc:	89fb      	ldrh	r3, [r7, #14]
 8005bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	8013      	strh	r3, [r2, #0]
 8005be2:	e14d      	b.n	8005e80 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	785b      	ldrb	r3, [r3, #1]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f040 80a5 	bne.w	8005d38 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	843b      	strh	r3, [r7, #32]
 8005bfc:	8c3b      	ldrh	r3, [r7, #32]
 8005bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d01b      	beq.n	8005c3e <USB_DeactivateEndpoint+0x18a>
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1c:	83fb      	strh	r3, [r7, #30]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	441a      	add	r2, r3
 8005c28:	8bfb      	ldrh	r3, [r7, #30]
 8005c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	83bb      	strh	r3, [r7, #28]
 8005c4c:	8bbb      	ldrh	r3, [r7, #28]
 8005c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d01b      	beq.n	8005c8e <USB_DeactivateEndpoint+0x1da>
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6c:	837b      	strh	r3, [r7, #26]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	441a      	add	r2, r3
 8005c78:	8b7b      	ldrh	r3, [r7, #26]
 8005c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca4:	833b      	strh	r3, [r7, #24]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	441a      	add	r2, r3
 8005cb0:	8b3b      	ldrh	r3, [r7, #24]
 8005cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cdc:	82fb      	strh	r3, [r7, #22]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	441a      	add	r2, r3
 8005ce8:	8afb      	ldrh	r3, [r7, #22]
 8005cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d14:	82bb      	strh	r3, [r7, #20]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	441a      	add	r2, r3
 8005d20:	8abb      	ldrh	r3, [r7, #20]
 8005d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	8013      	strh	r3, [r2, #0]
 8005d36:	e0a3      	b.n	8005e80 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005d46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d01b      	beq.n	8005d88 <USB_DeactivateEndpoint+0x2d4>
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	441a      	add	r2, r3
 8005d72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005d96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d01b      	beq.n	8005dd8 <USB_DeactivateEndpoint+0x324>
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db6:	853b      	strh	r3, [r7, #40]	; 0x28
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	441a      	add	r2, r3
 8005dc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	441a      	add	r2, r3
 8005dfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e26:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	441a      	add	r2, r3
 8005e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	441a      	add	r2, r3
 8005e6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3734      	adds	r7, #52	; 0x34
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bc80      	pop	{r7}
 8005e8a:	4770      	bx	lr

08005e8c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b0c4      	sub	sp, #272	; 0x110
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	1d3b      	adds	r3, r7, #4
 8005e94:	6018      	str	r0, [r3, #0]
 8005e96:	463b      	mov	r3, r7
 8005e98:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	785b      	ldrb	r3, [r3, #1]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	f040 8557 	bne.w	8006954 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005ea6:	463b      	mov	r3, r7
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	699a      	ldr	r2, [r3, #24]
 8005eac:	463b      	mov	r3, r7
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d905      	bls.n	8005ec2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005eb6:	463b      	mov	r3, r7
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005ec0:	e004      	b.n	8005ecc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005ec2:	463b      	mov	r3, r7
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005ecc:	463b      	mov	r3, r7
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	7b1b      	ldrb	r3, [r3, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d12c      	bne.n	8005f30 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6959      	ldr	r1, [r3, #20]
 8005edc:	463b      	mov	r3, r7
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	88da      	ldrh	r2, [r3, #6]
 8005ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	1d38      	adds	r0, r7, #4
 8005eea:	6800      	ldr	r0, [r0, #0]
 8005eec:	f001 fa2c 	bl	8007348 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ef0:	1d3b      	adds	r3, r7, #4
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	1d3b      	adds	r3, r7, #4
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	4413      	add	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	463b      	mov	r3, r7
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	011a      	lsls	r2, r3, #4
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	4413      	add	r3, r2
 8005f14:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005f18:	f107 0310 	add.w	r3, r7, #16
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	f107 0310 	add.w	r3, r7, #16
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	801a      	strh	r2, [r3, #0]
 8005f2c:	f000 bcdd 	b.w	80068ea <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005f30:	463b      	mov	r3, r7
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	78db      	ldrb	r3, [r3, #3]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	f040 8347 	bne.w	80065ca <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005f3c:	463b      	mov	r3, r7
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6a1a      	ldr	r2, [r3, #32]
 8005f42:	463b      	mov	r3, r7
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	f240 82eb 	bls.w	8006524 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005f4e:	1d3b      	adds	r3, r7, #4
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	463b      	mov	r3, r7
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f68:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005f6c:	1d3b      	adds	r3, r7, #4
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	463b      	mov	r3, r7
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	441a      	add	r2, r3
 8005f7a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f86:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005f92:	463b      	mov	r3, r7
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6a1a      	ldr	r2, [r3, #32]
 8005f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f9c:	1ad2      	subs	r2, r2, r3
 8005f9e:	463b      	mov	r3, r7
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005fa4:	1d3b      	adds	r3, r7, #4
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	463b      	mov	r3, r7
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 8159 	beq.w	8006272 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fc0:	1d3b      	adds	r3, r7, #4
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d164      	bne.n	800609a <USB_EPStartXfer+0x20e>
 8005fd0:	1d3b      	adds	r3, r7, #4
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fd6:	1d3b      	adds	r3, r7, #4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe4:	4413      	add	r3, r2
 8005fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe8:	463b      	mov	r3, r7
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	011a      	lsls	r2, r3, #4
 8005ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d112      	bne.n	8006028 <USB_EPStartXfer+0x19c>
 8006002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	b29b      	uxth	r3, r3
 8006008:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800600c:	b29a      	uxth	r2, r3
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	801a      	strh	r2, [r3, #0]
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800601c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006020:	b29a      	uxth	r2, r3
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	801a      	strh	r2, [r3, #0]
 8006026:	e054      	b.n	80060d2 <USB_EPStartXfer+0x246>
 8006028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800602c:	2b3e      	cmp	r3, #62	; 0x3e
 800602e:	d817      	bhi.n	8006060 <USB_EPStartXfer+0x1d4>
 8006030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006034:	085b      	lsrs	r3, r3, #1
 8006036:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800603a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d004      	beq.n	8006050 <USB_EPStartXfer+0x1c4>
 8006046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800604a:	3301      	adds	r3, #1
 800604c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006054:	b29b      	uxth	r3, r3
 8006056:	029b      	lsls	r3, r3, #10
 8006058:	b29a      	uxth	r2, r3
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605c:	801a      	strh	r2, [r3, #0]
 800605e:	e038      	b.n	80060d2 <USB_EPStartXfer+0x246>
 8006060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800606a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800606e:	f003 031f 	and.w	r3, r3, #31
 8006072:	2b00      	cmp	r3, #0
 8006074:	d104      	bne.n	8006080 <USB_EPStartXfer+0x1f4>
 8006076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800607a:	3b01      	subs	r3, #1
 800607c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006084:	b29b      	uxth	r3, r3
 8006086:	029b      	lsls	r3, r3, #10
 8006088:	b29b      	uxth	r3, r3
 800608a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800608e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006092:	b29a      	uxth	r2, r3
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	801a      	strh	r2, [r3, #0]
 8006098:	e01b      	b.n	80060d2 <USB_EPStartXfer+0x246>
 800609a:	463b      	mov	r3, r7
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	785b      	ldrb	r3, [r3, #1]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d116      	bne.n	80060d2 <USB_EPStartXfer+0x246>
 80060a4:	1d3b      	adds	r3, r7, #4
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	461a      	mov	r2, r3
 80060b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b2:	4413      	add	r3, r2
 80060b4:	637b      	str	r3, [r7, #52]	; 0x34
 80060b6:	463b      	mov	r3, r7
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	011a      	lsls	r2, r3, #4
 80060be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c0:	4413      	add	r3, r2
 80060c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060c6:	633b      	str	r3, [r7, #48]	; 0x30
 80060c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060d2:	463b      	mov	r3, r7
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	895b      	ldrh	r3, [r3, #10]
 80060d8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060dc:	463b      	mov	r3, r7
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6959      	ldr	r1, [r3, #20]
 80060e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80060ec:	1d38      	adds	r0, r7, #4
 80060ee:	6800      	ldr	r0, [r0, #0]
 80060f0:	f001 f92a 	bl	8007348 <USB_WritePMA>
            ep->xfer_buff += len;
 80060f4:	463b      	mov	r3, r7
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695a      	ldr	r2, [r3, #20]
 80060fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060fe:	441a      	add	r2, r3
 8006100:	463b      	mov	r3, r7
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006106:	463b      	mov	r3, r7
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6a1a      	ldr	r2, [r3, #32]
 800610c:	463b      	mov	r3, r7
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	429a      	cmp	r2, r3
 8006114:	d909      	bls.n	800612a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8006116:	463b      	mov	r3, r7
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6a1a      	ldr	r2, [r3, #32]
 800611c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006120:	1ad2      	subs	r2, r2, r3
 8006122:	463b      	mov	r3, r7
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	621a      	str	r2, [r3, #32]
 8006128:	e008      	b.n	800613c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800612a:	463b      	mov	r3, r7
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006134:	463b      	mov	r3, r7
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2200      	movs	r2, #0
 800613a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800613c:	463b      	mov	r3, r7
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	785b      	ldrb	r3, [r3, #1]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d164      	bne.n	8006210 <USB_EPStartXfer+0x384>
 8006146:	1d3b      	adds	r3, r7, #4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	61fb      	str	r3, [r7, #28]
 800614c:	1d3b      	adds	r3, r7, #4
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006154:	b29b      	uxth	r3, r3
 8006156:	461a      	mov	r2, r3
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	4413      	add	r3, r2
 800615c:	61fb      	str	r3, [r7, #28]
 800615e:	463b      	mov	r3, r7
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	011a      	lsls	r2, r3, #4
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	4413      	add	r3, r2
 800616a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800616e:	61bb      	str	r3, [r7, #24]
 8006170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d112      	bne.n	800619e <USB_EPStartXfer+0x312>
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	b29b      	uxth	r3, r3
 800617e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006182:	b29a      	uxth	r2, r3
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	801a      	strh	r2, [r3, #0]
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b29b      	uxth	r3, r3
 800618e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006196:	b29a      	uxth	r2, r3
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	801a      	strh	r2, [r3, #0]
 800619c:	e057      	b.n	800624e <USB_EPStartXfer+0x3c2>
 800619e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061a2:	2b3e      	cmp	r3, #62	; 0x3e
 80061a4:	d817      	bhi.n	80061d6 <USB_EPStartXfer+0x34a>
 80061a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061aa:	085b      	lsrs	r3, r3, #1
 80061ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80061b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d004      	beq.n	80061c6 <USB_EPStartXfer+0x33a>
 80061bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061c0:	3301      	adds	r3, #1
 80061c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80061c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	029b      	lsls	r3, r3, #10
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	801a      	strh	r2, [r3, #0]
 80061d4:	e03b      	b.n	800624e <USB_EPStartXfer+0x3c2>
 80061d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061da:	095b      	lsrs	r3, r3, #5
 80061dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80061e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e4:	f003 031f 	and.w	r3, r3, #31
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <USB_EPStartXfer+0x36a>
 80061ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061f0:	3b01      	subs	r3, #1
 80061f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80061f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	029b      	lsls	r3, r3, #10
 80061fe:	b29b      	uxth	r3, r3
 8006200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006208:	b29a      	uxth	r2, r3
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	e01e      	b.n	800624e <USB_EPStartXfer+0x3c2>
 8006210:	463b      	mov	r3, r7
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	785b      	ldrb	r3, [r3, #1]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d119      	bne.n	800624e <USB_EPStartXfer+0x3c2>
 800621a:	1d3b      	adds	r3, r7, #4
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	627b      	str	r3, [r7, #36]	; 0x24
 8006220:	1d3b      	adds	r3, r7, #4
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006228:	b29b      	uxth	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	4413      	add	r3, r2
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
 8006232:	463b      	mov	r3, r7
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	011a      	lsls	r2, r3, #4
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	4413      	add	r3, r2
 800623e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006242:	623b      	str	r3, [r7, #32]
 8006244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006248:	b29a      	uxth	r2, r3
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800624e:	463b      	mov	r3, r7
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	891b      	ldrh	r3, [r3, #8]
 8006254:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006258:	463b      	mov	r3, r7
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6959      	ldr	r1, [r3, #20]
 800625e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006262:	b29b      	uxth	r3, r3
 8006264:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006268:	1d38      	adds	r0, r7, #4
 800626a:	6800      	ldr	r0, [r0, #0]
 800626c:	f001 f86c 	bl	8007348 <USB_WritePMA>
 8006270:	e33b      	b.n	80068ea <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006272:	463b      	mov	r3, r7
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	785b      	ldrb	r3, [r3, #1]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d164      	bne.n	8006346 <USB_EPStartXfer+0x4ba>
 800627c:	1d3b      	adds	r3, r7, #4
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006282:	1d3b      	adds	r3, r7, #4
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800628a:	b29b      	uxth	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006290:	4413      	add	r3, r2
 8006292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006294:	463b      	mov	r3, r7
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	011a      	lsls	r2, r3, #4
 800629c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800629e:	4413      	add	r3, r2
 80062a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80062a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d112      	bne.n	80062d4 <USB_EPStartXfer+0x448>
 80062ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d0:	801a      	strh	r2, [r3, #0]
 80062d2:	e057      	b.n	8006384 <USB_EPStartXfer+0x4f8>
 80062d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062d8:	2b3e      	cmp	r3, #62	; 0x3e
 80062da:	d817      	bhi.n	800630c <USB_EPStartXfer+0x480>
 80062dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062e0:	085b      	lsrs	r3, r3, #1
 80062e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80062e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d004      	beq.n	80062fc <USB_EPStartXfer+0x470>
 80062f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062f6:	3301      	adds	r3, #1
 80062f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80062fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006300:	b29b      	uxth	r3, r3
 8006302:	029b      	lsls	r3, r3, #10
 8006304:	b29a      	uxth	r2, r3
 8006306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006308:	801a      	strh	r2, [r3, #0]
 800630a:	e03b      	b.n	8006384 <USB_EPStartXfer+0x4f8>
 800630c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006310:	095b      	lsrs	r3, r3, #5
 8006312:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800631a:	f003 031f 	and.w	r3, r3, #31
 800631e:	2b00      	cmp	r3, #0
 8006320:	d104      	bne.n	800632c <USB_EPStartXfer+0x4a0>
 8006322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006326:	3b01      	subs	r3, #1
 8006328:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800632c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006330:	b29b      	uxth	r3, r3
 8006332:	029b      	lsls	r3, r3, #10
 8006334:	b29b      	uxth	r3, r3
 8006336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800633a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800633e:	b29a      	uxth	r2, r3
 8006340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	e01e      	b.n	8006384 <USB_EPStartXfer+0x4f8>
 8006346:	463b      	mov	r3, r7
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	785b      	ldrb	r3, [r3, #1]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d119      	bne.n	8006384 <USB_EPStartXfer+0x4f8>
 8006350:	1d3b      	adds	r3, r7, #4
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	657b      	str	r3, [r7, #84]	; 0x54
 8006356:	1d3b      	adds	r3, r7, #4
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800635e:	b29b      	uxth	r3, r3
 8006360:	461a      	mov	r2, r3
 8006362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006364:	4413      	add	r3, r2
 8006366:	657b      	str	r3, [r7, #84]	; 0x54
 8006368:	463b      	mov	r3, r7
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	011a      	lsls	r2, r3, #4
 8006370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006372:	4413      	add	r3, r2
 8006374:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006378:	653b      	str	r3, [r7, #80]	; 0x50
 800637a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800637e:	b29a      	uxth	r2, r3
 8006380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006382:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006384:	463b      	mov	r3, r7
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	891b      	ldrh	r3, [r3, #8]
 800638a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800638e:	463b      	mov	r3, r7
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6959      	ldr	r1, [r3, #20]
 8006394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006398:	b29b      	uxth	r3, r3
 800639a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800639e:	1d38      	adds	r0, r7, #4
 80063a0:	6800      	ldr	r0, [r0, #0]
 80063a2:	f000 ffd1 	bl	8007348 <USB_WritePMA>
            ep->xfer_buff += len;
 80063a6:	463b      	mov	r3, r7
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	695a      	ldr	r2, [r3, #20]
 80063ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063b0:	441a      	add	r2, r3
 80063b2:	463b      	mov	r3, r7
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80063b8:	463b      	mov	r3, r7
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6a1a      	ldr	r2, [r3, #32]
 80063be:	463b      	mov	r3, r7
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d909      	bls.n	80063dc <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80063c8:	463b      	mov	r3, r7
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6a1a      	ldr	r2, [r3, #32]
 80063ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063d2:	1ad2      	subs	r2, r2, r3
 80063d4:	463b      	mov	r3, r7
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	621a      	str	r2, [r3, #32]
 80063da:	e008      	b.n	80063ee <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80063dc:	463b      	mov	r3, r7
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80063e6:	463b      	mov	r3, r7
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2200      	movs	r2, #0
 80063ec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063ee:	1d3b      	adds	r3, r7, #4
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	647b      	str	r3, [r7, #68]	; 0x44
 80063f4:	463b      	mov	r3, r7
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	785b      	ldrb	r3, [r3, #1]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d164      	bne.n	80064c8 <USB_EPStartXfer+0x63c>
 80063fe:	1d3b      	adds	r3, r7, #4
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006404:	1d3b      	adds	r3, r7, #4
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800640c:	b29b      	uxth	r3, r3
 800640e:	461a      	mov	r2, r3
 8006410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006412:	4413      	add	r3, r2
 8006414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006416:	463b      	mov	r3, r7
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	011a      	lsls	r2, r3, #4
 800641e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006420:	4413      	add	r3, r2
 8006422:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006426:	63bb      	str	r3, [r7, #56]	; 0x38
 8006428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800642c:	2b00      	cmp	r3, #0
 800642e:	d112      	bne.n	8006456 <USB_EPStartXfer+0x5ca>
 8006430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800643a:	b29a      	uxth	r2, r3
 800643c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643e:	801a      	strh	r2, [r3, #0]
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	b29b      	uxth	r3, r3
 8006446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800644a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800644e:	b29a      	uxth	r2, r3
 8006450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006452:	801a      	strh	r2, [r3, #0]
 8006454:	e054      	b.n	8006500 <USB_EPStartXfer+0x674>
 8006456:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800645a:	2b3e      	cmp	r3, #62	; 0x3e
 800645c:	d817      	bhi.n	800648e <USB_EPStartXfer+0x602>
 800645e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006462:	085b      	lsrs	r3, r3, #1
 8006464:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006468:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b00      	cmp	r3, #0
 8006472:	d004      	beq.n	800647e <USB_EPStartXfer+0x5f2>
 8006474:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006478:	3301      	adds	r3, #1
 800647a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800647e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006482:	b29b      	uxth	r3, r3
 8006484:	029b      	lsls	r3, r3, #10
 8006486:	b29a      	uxth	r2, r3
 8006488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648a:	801a      	strh	r2, [r3, #0]
 800648c:	e038      	b.n	8006500 <USB_EPStartXfer+0x674>
 800648e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006492:	095b      	lsrs	r3, r3, #5
 8006494:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800649c:	f003 031f 	and.w	r3, r3, #31
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d104      	bne.n	80064ae <USB_EPStartXfer+0x622>
 80064a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064a8:	3b01      	subs	r3, #1
 80064aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	029b      	lsls	r3, r3, #10
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	801a      	strh	r2, [r3, #0]
 80064c6:	e01b      	b.n	8006500 <USB_EPStartXfer+0x674>
 80064c8:	463b      	mov	r3, r7
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	785b      	ldrb	r3, [r3, #1]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d116      	bne.n	8006500 <USB_EPStartXfer+0x674>
 80064d2:	1d3b      	adds	r3, r7, #4
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064da:	b29b      	uxth	r3, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064e0:	4413      	add	r3, r2
 80064e2:	647b      	str	r3, [r7, #68]	; 0x44
 80064e4:	463b      	mov	r3, r7
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	011a      	lsls	r2, r3, #4
 80064ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ee:	4413      	add	r3, r2
 80064f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064f4:	643b      	str	r3, [r7, #64]	; 0x40
 80064f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006500:	463b      	mov	r3, r7
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	895b      	ldrh	r3, [r3, #10]
 8006506:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800650a:	463b      	mov	r3, r7
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6959      	ldr	r1, [r3, #20]
 8006510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006514:	b29b      	uxth	r3, r3
 8006516:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800651a:	1d38      	adds	r0, r7, #4
 800651c:	6800      	ldr	r0, [r0, #0]
 800651e:	f000 ff13 	bl	8007348 <USB_WritePMA>
 8006522:	e1e2      	b.n	80068ea <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006524:	463b      	mov	r3, r7
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800652e:	1d3b      	adds	r3, r7, #4
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	463b      	mov	r3, r7
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	b29b      	uxth	r3, r3
 8006540:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006548:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800654c:	1d3b      	adds	r3, r7, #4
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	463b      	mov	r3, r7
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	441a      	add	r2, r3
 800655a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800655e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800656a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656e:	b29b      	uxth	r3, r3
 8006570:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006572:	1d3b      	adds	r3, r7, #4
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	663b      	str	r3, [r7, #96]	; 0x60
 8006578:	1d3b      	adds	r3, r7, #4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006580:	b29b      	uxth	r3, r3
 8006582:	461a      	mov	r2, r3
 8006584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006586:	4413      	add	r3, r2
 8006588:	663b      	str	r3, [r7, #96]	; 0x60
 800658a:	463b      	mov	r3, r7
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	011a      	lsls	r2, r3, #4
 8006592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006594:	4413      	add	r3, r2
 8006596:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800659a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800659c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80065a6:	463b      	mov	r3, r7
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	891b      	ldrh	r3, [r3, #8]
 80065ac:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065b0:	463b      	mov	r3, r7
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6959      	ldr	r1, [r3, #20]
 80065b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80065c0:	1d38      	adds	r0, r7, #4
 80065c2:	6800      	ldr	r0, [r0, #0]
 80065c4:	f000 fec0 	bl	8007348 <USB_WritePMA>
 80065c8:	e18f      	b.n	80068ea <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80065ca:	1d3b      	adds	r3, r7, #4
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	463b      	mov	r3, r7
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 808f 	beq.w	8006704 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065e6:	1d3b      	adds	r3, r7, #4
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80065ec:	463b      	mov	r3, r7
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	785b      	ldrb	r3, [r3, #1]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d164      	bne.n	80066c0 <USB_EPStartXfer+0x834>
 80065f6:	1d3b      	adds	r3, r7, #4
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	673b      	str	r3, [r7, #112]	; 0x70
 80065fc:	1d3b      	adds	r3, r7, #4
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006604:	b29b      	uxth	r3, r3
 8006606:	461a      	mov	r2, r3
 8006608:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800660a:	4413      	add	r3, r2
 800660c:	673b      	str	r3, [r7, #112]	; 0x70
 800660e:	463b      	mov	r3, r7
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	011a      	lsls	r2, r3, #4
 8006616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006618:	4413      	add	r3, r2
 800661a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800661e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006624:	2b00      	cmp	r3, #0
 8006626:	d112      	bne.n	800664e <USB_EPStartXfer+0x7c2>
 8006628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	b29b      	uxth	r3, r3
 800662e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006632:	b29a      	uxth	r2, r3
 8006634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006636:	801a      	strh	r2, [r3, #0]
 8006638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006646:	b29a      	uxth	r2, r3
 8006648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800664a:	801a      	strh	r2, [r3, #0]
 800664c:	e054      	b.n	80066f8 <USB_EPStartXfer+0x86c>
 800664e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006652:	2b3e      	cmp	r3, #62	; 0x3e
 8006654:	d817      	bhi.n	8006686 <USB_EPStartXfer+0x7fa>
 8006656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800665a:	085b      	lsrs	r3, r3, #1
 800665c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d004      	beq.n	8006676 <USB_EPStartXfer+0x7ea>
 800666c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006670:	3301      	adds	r3, #1
 8006672:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667a:	b29b      	uxth	r3, r3
 800667c:	029b      	lsls	r3, r3, #10
 800667e:	b29a      	uxth	r2, r3
 8006680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006682:	801a      	strh	r2, [r3, #0]
 8006684:	e038      	b.n	80066f8 <USB_EPStartXfer+0x86c>
 8006686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800668a:	095b      	lsrs	r3, r3, #5
 800668c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006694:	f003 031f 	and.w	r3, r3, #31
 8006698:	2b00      	cmp	r3, #0
 800669a:	d104      	bne.n	80066a6 <USB_EPStartXfer+0x81a>
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a0:	3b01      	subs	r3, #1
 80066a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	029b      	lsls	r3, r3, #10
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066bc:	801a      	strh	r2, [r3, #0]
 80066be:	e01b      	b.n	80066f8 <USB_EPStartXfer+0x86c>
 80066c0:	463b      	mov	r3, r7
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	785b      	ldrb	r3, [r3, #1]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d116      	bne.n	80066f8 <USB_EPStartXfer+0x86c>
 80066ca:	1d3b      	adds	r3, r7, #4
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	461a      	mov	r2, r3
 80066d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066d8:	4413      	add	r3, r2
 80066da:	67bb      	str	r3, [r7, #120]	; 0x78
 80066dc:	463b      	mov	r3, r7
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	011a      	lsls	r2, r3, #4
 80066e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066e6:	4413      	add	r3, r2
 80066e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066ec:	677b      	str	r3, [r7, #116]	; 0x74
 80066ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80066f8:	463b      	mov	r3, r7
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	895b      	ldrh	r3, [r3, #10]
 80066fe:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8006702:	e097      	b.n	8006834 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006704:	463b      	mov	r3, r7
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	785b      	ldrb	r3, [r3, #1]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d168      	bne.n	80067e0 <USB_EPStartXfer+0x954>
 800670e:	1d3b      	adds	r3, r7, #4
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006716:	1d3b      	adds	r3, r7, #4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800671e:	b29b      	uxth	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006726:	4413      	add	r3, r2
 8006728:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800672c:	463b      	mov	r3, r7
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	011a      	lsls	r2, r3, #4
 8006734:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006738:	4413      	add	r3, r2
 800673a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800673e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006744:	2b00      	cmp	r3, #0
 8006746:	d112      	bne.n	800676e <USB_EPStartXfer+0x8e2>
 8006748:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006752:	b29a      	uxth	r2, r3
 8006754:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	b29b      	uxth	r3, r3
 800675e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006766:	b29a      	uxth	r2, r3
 8006768:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	e05d      	b.n	800682a <USB_EPStartXfer+0x99e>
 800676e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006772:	2b3e      	cmp	r3, #62	; 0x3e
 8006774:	d817      	bhi.n	80067a6 <USB_EPStartXfer+0x91a>
 8006776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800677a:	085b      	lsrs	r3, r3, #1
 800677c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d004      	beq.n	8006796 <USB_EPStartXfer+0x90a>
 800678c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006790:	3301      	adds	r3, #1
 8006792:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006796:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800679a:	b29b      	uxth	r3, r3
 800679c:	029b      	lsls	r3, r3, #10
 800679e:	b29a      	uxth	r2, r3
 80067a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067a2:	801a      	strh	r2, [r3, #0]
 80067a4:	e041      	b.n	800682a <USB_EPStartXfer+0x99e>
 80067a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067aa:	095b      	lsrs	r3, r3, #5
 80067ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067b4:	f003 031f 	and.w	r3, r3, #31
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d104      	bne.n	80067c6 <USB_EPStartXfer+0x93a>
 80067bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80067c0:	3b01      	subs	r3, #1
 80067c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	029b      	lsls	r3, r3, #10
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d8:	b29a      	uxth	r2, r3
 80067da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067dc:	801a      	strh	r2, [r3, #0]
 80067de:	e024      	b.n	800682a <USB_EPStartXfer+0x99e>
 80067e0:	463b      	mov	r3, r7
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	785b      	ldrb	r3, [r3, #1]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d11f      	bne.n	800682a <USB_EPStartXfer+0x99e>
 80067ea:	1d3b      	adds	r3, r7, #4
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067f2:	1d3b      	adds	r3, r7, #4
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006802:	4413      	add	r3, r2
 8006804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006808:	463b      	mov	r3, r7
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	011a      	lsls	r2, r3, #4
 8006810:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006814:	4413      	add	r3, r2
 8006816:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800681a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800681e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006822:	b29a      	uxth	r2, r3
 8006824:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006828:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800682a:	463b      	mov	r3, r7
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	891b      	ldrh	r3, [r3, #8]
 8006830:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006834:	463b      	mov	r3, r7
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6959      	ldr	r1, [r3, #20]
 800683a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800683e:	b29b      	uxth	r3, r3
 8006840:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006844:	1d38      	adds	r0, r7, #4
 8006846:	6800      	ldr	r0, [r0, #0]
 8006848:	f000 fd7e 	bl	8007348 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800684c:	463b      	mov	r3, r7
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	785b      	ldrb	r3, [r3, #1]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d122      	bne.n	800689c <USB_EPStartXfer+0xa10>
 8006856:	1d3b      	adds	r3, r7, #4
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	463b      	mov	r3, r7
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	b29b      	uxth	r3, r3
 8006868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800686c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006870:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006874:	1d3b      	adds	r3, r7, #4
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	463b      	mov	r3, r7
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	441a      	add	r2, r3
 8006882:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800688a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800688e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006892:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006896:	b29b      	uxth	r3, r3
 8006898:	8013      	strh	r3, [r2, #0]
 800689a:	e026      	b.n	80068ea <USB_EPStartXfer+0xa5e>
 800689c:	463b      	mov	r3, r7
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	785b      	ldrb	r3, [r3, #1]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d121      	bne.n	80068ea <USB_EPStartXfer+0xa5e>
 80068a6:	1d3b      	adds	r3, r7, #4
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	463b      	mov	r3, r7
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80068c4:	1d3b      	adds	r3, r7, #4
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	463b      	mov	r3, r7
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	441a      	add	r2, r3
 80068d2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80068d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80068ea:	1d3b      	adds	r3, r7, #4
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	463b      	mov	r3, r7
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	f107 020e 	add.w	r2, r7, #14
 8006900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006908:	8013      	strh	r3, [r2, #0]
 800690a:	f107 030e 	add.w	r3, r7, #14
 800690e:	f107 020e 	add.w	r2, r7, #14
 8006912:	8812      	ldrh	r2, [r2, #0]
 8006914:	f082 0210 	eor.w	r2, r2, #16
 8006918:	801a      	strh	r2, [r3, #0]
 800691a:	f107 030e 	add.w	r3, r7, #14
 800691e:	f107 020e 	add.w	r2, r7, #14
 8006922:	8812      	ldrh	r2, [r2, #0]
 8006924:	f082 0220 	eor.w	r2, r2, #32
 8006928:	801a      	strh	r2, [r3, #0]
 800692a:	1d3b      	adds	r3, r7, #4
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	463b      	mov	r3, r7
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	441a      	add	r2, r3
 8006938:	f107 030e 	add.w	r3, r7, #14
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800694a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694e:	b29b      	uxth	r3, r3
 8006950:	8013      	strh	r3, [r2, #0]
 8006952:	e3b5      	b.n	80070c0 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006954:	463b      	mov	r3, r7
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	7b1b      	ldrb	r3, [r3, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	f040 8090 	bne.w	8006a80 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006960:	463b      	mov	r3, r7
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	699a      	ldr	r2, [r3, #24]
 8006966:	463b      	mov	r3, r7
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	429a      	cmp	r2, r3
 800696e:	d90e      	bls.n	800698e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8006970:	463b      	mov	r3, r7
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800697a:	463b      	mov	r3, r7
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	699a      	ldr	r2, [r3, #24]
 8006980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006984:	1ad2      	subs	r2, r2, r3
 8006986:	463b      	mov	r3, r7
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	619a      	str	r2, [r3, #24]
 800698c:	e008      	b.n	80069a0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800698e:	463b      	mov	r3, r7
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006998:	463b      	mov	r3, r7
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2200      	movs	r2, #0
 800699e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80069a0:	1d3b      	adds	r3, r7, #4
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069a8:	1d3b      	adds	r3, r7, #4
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	461a      	mov	r2, r3
 80069b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80069b8:	4413      	add	r3, r2
 80069ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069be:	463b      	mov	r3, r7
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	011a      	lsls	r2, r3, #4
 80069c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80069ca:	4413      	add	r3, r2
 80069cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d116      	bne.n	8006a0a <USB_EPStartXfer+0xb7e>
 80069dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069ee:	801a      	strh	r2, [r3, #0]
 80069f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a06:	801a      	strh	r2, [r3, #0]
 8006a08:	e32c      	b.n	8007064 <USB_EPStartXfer+0x11d8>
 8006a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a0e:	2b3e      	cmp	r3, #62	; 0x3e
 8006a10:	d818      	bhi.n	8006a44 <USB_EPStartXfer+0xbb8>
 8006a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a16:	085b      	lsrs	r3, r3, #1
 8006a18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d004      	beq.n	8006a32 <USB_EPStartXfer+0xba6>
 8006a28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	029b      	lsls	r3, r3, #10
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a40:	801a      	strh	r2, [r3, #0]
 8006a42:	e30f      	b.n	8007064 <USB_EPStartXfer+0x11d8>
 8006a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a48:	095b      	lsrs	r3, r3, #5
 8006a4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a52:	f003 031f 	and.w	r3, r3, #31
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d104      	bne.n	8006a64 <USB_EPStartXfer+0xbd8>
 8006a5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	029b      	lsls	r3, r3, #10
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a7c:	801a      	strh	r2, [r3, #0]
 8006a7e:	e2f1      	b.n	8007064 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006a80:	463b      	mov	r3, r7
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	78db      	ldrb	r3, [r3, #3]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	f040 818f 	bne.w	8006daa <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006a8c:	463b      	mov	r3, r7
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	785b      	ldrb	r3, [r3, #1]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d175      	bne.n	8006b82 <USB_EPStartXfer+0xcf6>
 8006a96:	1d3b      	adds	r3, r7, #4
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a9e:	1d3b      	adds	r3, r7, #4
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006aae:	4413      	add	r3, r2
 8006ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ab4:	463b      	mov	r3, r7
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	011a      	lsls	r2, r3, #4
 8006abc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006aca:	463b      	mov	r3, r7
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d116      	bne.n	8006b02 <USB_EPStartXfer+0xc76>
 8006ad4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ae6:	801a      	strh	r2, [r3, #0]
 8006ae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006afe:	801a      	strh	r2, [r3, #0]
 8006b00:	e065      	b.n	8006bce <USB_EPStartXfer+0xd42>
 8006b02:	463b      	mov	r3, r7
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	2b3e      	cmp	r3, #62	; 0x3e
 8006b0a:	d81a      	bhi.n	8006b42 <USB_EPStartXfer+0xcb6>
 8006b0c:	463b      	mov	r3, r7
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	085b      	lsrs	r3, r3, #1
 8006b14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b18:	463b      	mov	r3, r7
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d004      	beq.n	8006b30 <USB_EPStartXfer+0xca4>
 8006b26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	029b      	lsls	r3, r3, #10
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b3e:	801a      	strh	r2, [r3, #0]
 8006b40:	e045      	b.n	8006bce <USB_EPStartXfer+0xd42>
 8006b42:	463b      	mov	r3, r7
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	095b      	lsrs	r3, r3, #5
 8006b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b4e:	463b      	mov	r3, r7
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	f003 031f 	and.w	r3, r3, #31
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d104      	bne.n	8006b66 <USB_EPStartXfer+0xcda>
 8006b5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b60:	3b01      	subs	r3, #1
 8006b62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	029b      	lsls	r3, r3, #10
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b7e:	801a      	strh	r2, [r3, #0]
 8006b80:	e025      	b.n	8006bce <USB_EPStartXfer+0xd42>
 8006b82:	463b      	mov	r3, r7
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	785b      	ldrb	r3, [r3, #1]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d120      	bne.n	8006bce <USB_EPStartXfer+0xd42>
 8006b8c:	1d3b      	adds	r3, r7, #4
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b94:	1d3b      	adds	r3, r7, #4
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006baa:	463b      	mov	r3, r7
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	011a      	lsls	r2, r3, #4
 8006bb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bc0:	463b      	mov	r3, r7
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006bcc:	801a      	strh	r2, [r3, #0]
 8006bce:	1d3b      	adds	r3, r7, #4
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006bd6:	463b      	mov	r3, r7
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	785b      	ldrb	r3, [r3, #1]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d175      	bne.n	8006ccc <USB_EPStartXfer+0xe40>
 8006be0:	1d3b      	adds	r3, r7, #4
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006be8:	1d3b      	adds	r3, r7, #4
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006bfe:	463b      	mov	r3, r7
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	011a      	lsls	r2, r3, #4
 8006c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c14:	463b      	mov	r3, r7
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d116      	bne.n	8006c4c <USB_EPStartXfer+0xdc0>
 8006c1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c30:	801a      	strh	r2, [r3, #0]
 8006c32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c48:	801a      	strh	r2, [r3, #0]
 8006c4a:	e061      	b.n	8006d10 <USB_EPStartXfer+0xe84>
 8006c4c:	463b      	mov	r3, r7
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b3e      	cmp	r3, #62	; 0x3e
 8006c54:	d81a      	bhi.n	8006c8c <USB_EPStartXfer+0xe00>
 8006c56:	463b      	mov	r3, r7
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	085b      	lsrs	r3, r3, #1
 8006c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c62:	463b      	mov	r3, r7
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d004      	beq.n	8006c7a <USB_EPStartXfer+0xdee>
 8006c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c74:	3301      	adds	r3, #1
 8006c76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	029b      	lsls	r3, r3, #10
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c88:	801a      	strh	r2, [r3, #0]
 8006c8a:	e041      	b.n	8006d10 <USB_EPStartXfer+0xe84>
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	095b      	lsrs	r3, r3, #5
 8006c94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c98:	463b      	mov	r3, r7
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f003 031f 	and.w	r3, r3, #31
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d104      	bne.n	8006cb0 <USB_EPStartXfer+0xe24>
 8006ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006caa:	3b01      	subs	r3, #1
 8006cac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	029b      	lsls	r3, r3, #10
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cc8:	801a      	strh	r2, [r3, #0]
 8006cca:	e021      	b.n	8006d10 <USB_EPStartXfer+0xe84>
 8006ccc:	463b      	mov	r3, r7
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	785b      	ldrb	r3, [r3, #1]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d11c      	bne.n	8006d10 <USB_EPStartXfer+0xe84>
 8006cd6:	1d3b      	adds	r3, r7, #4
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006cec:	463b      	mov	r3, r7
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	011a      	lsls	r2, r3, #4
 8006cf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d02:	463b      	mov	r3, r7
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d0e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006d10:	463b      	mov	r3, r7
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 81a4 	beq.w	8007064 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006d1c:	1d3b      	adds	r3, r7, #4
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	463b      	mov	r3, r7
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006d30:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <USB_EPStartXfer+0xebc>
 8006d3c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10d      	bne.n	8006d64 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006d48:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f040 8187 	bne.w	8007064 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006d56:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f040 8180 	bne.w	8007064 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006d64:	1d3b      	adds	r3, r7, #4
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	463b      	mov	r3, r7
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006d82:	1d3b      	adds	r3, r7, #4
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	463b      	mov	r3, r7
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	441a      	add	r2, r3
 8006d90:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	8013      	strh	r3, [r2, #0]
 8006da8:	e15c      	b.n	8007064 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006daa:	463b      	mov	r3, r7
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	78db      	ldrb	r3, [r3, #3]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	f040 8155 	bne.w	8007060 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006db6:	463b      	mov	r3, r7
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	699a      	ldr	r2, [r3, #24]
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d90e      	bls.n	8006de4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8006dc6:	463b      	mov	r3, r7
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006dd0:	463b      	mov	r3, r7
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	699a      	ldr	r2, [r3, #24]
 8006dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dda:	1ad2      	subs	r2, r2, r3
 8006ddc:	463b      	mov	r3, r7
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	619a      	str	r2, [r3, #24]
 8006de2:	e008      	b.n	8006df6 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006de4:	463b      	mov	r3, r7
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8006dee:	463b      	mov	r3, r7
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2200      	movs	r2, #0
 8006df4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006df6:	463b      	mov	r3, r7
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	785b      	ldrb	r3, [r3, #1]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d16f      	bne.n	8006ee0 <USB_EPStartXfer+0x1054>
 8006e00:	1d3b      	adds	r3, r7, #4
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e08:	1d3b      	adds	r3, r7, #4
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	461a      	mov	r2, r3
 8006e14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006e18:	4413      	add	r3, r2
 8006e1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e1e:	463b      	mov	r3, r7
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	011a      	lsls	r2, r3, #4
 8006e26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d116      	bne.n	8006e6a <USB_EPStartXfer+0xfde>
 8006e3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e66:	801a      	strh	r2, [r3, #0]
 8006e68:	e05f      	b.n	8006f2a <USB_EPStartXfer+0x109e>
 8006e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e6e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e70:	d818      	bhi.n	8006ea4 <USB_EPStartXfer+0x1018>
 8006e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e76:	085b      	lsrs	r3, r3, #1
 8006e78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d004      	beq.n	8006e92 <USB_EPStartXfer+0x1006>
 8006e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	029b      	lsls	r3, r3, #10
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ea0:	801a      	strh	r2, [r3, #0]
 8006ea2:	e042      	b.n	8006f2a <USB_EPStartXfer+0x109e>
 8006ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ea8:	095b      	lsrs	r3, r3, #5
 8006eaa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eb2:	f003 031f 	and.w	r3, r3, #31
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d104      	bne.n	8006ec4 <USB_EPStartXfer+0x1038>
 8006eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	029b      	lsls	r3, r3, #10
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006edc:	801a      	strh	r2, [r3, #0]
 8006ede:	e024      	b.n	8006f2a <USB_EPStartXfer+0x109e>
 8006ee0:	463b      	mov	r3, r7
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	785b      	ldrb	r3, [r3, #1]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d11f      	bne.n	8006f2a <USB_EPStartXfer+0x109e>
 8006eea:	1d3b      	adds	r3, r7, #4
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ef2:	1d3b      	adds	r3, r7, #4
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	461a      	mov	r2, r3
 8006efe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f02:	4413      	add	r3, r2
 8006f04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f08:	463b      	mov	r3, r7
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	011a      	lsls	r2, r3, #4
 8006f10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f14:	4413      	add	r3, r2
 8006f16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f28:	801a      	strh	r2, [r3, #0]
 8006f2a:	1d3b      	adds	r3, r7, #4
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f32:	463b      	mov	r3, r7
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	785b      	ldrb	r3, [r3, #1]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d16f      	bne.n	800701c <USB_EPStartXfer+0x1190>
 8006f3c:	1d3b      	adds	r3, r7, #4
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f44:	1d3b      	adds	r3, r7, #4
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f54:	4413      	add	r3, r2
 8006f56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f5a:	463b      	mov	r3, r7
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	011a      	lsls	r2, r3, #4
 8006f62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f66:	4413      	add	r3, r2
 8006f68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d116      	bne.n	8006fa6 <USB_EPStartXfer+0x111a>
 8006f78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f8a:	801a      	strh	r2, [r3, #0]
 8006f8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006fa2:	801a      	strh	r2, [r3, #0]
 8006fa4:	e05e      	b.n	8007064 <USB_EPStartXfer+0x11d8>
 8006fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006faa:	2b3e      	cmp	r3, #62	; 0x3e
 8006fac:	d818      	bhi.n	8006fe0 <USB_EPStartXfer+0x1154>
 8006fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fb2:	085b      	lsrs	r3, r3, #1
 8006fb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d004      	beq.n	8006fce <USB_EPStartXfer+0x1142>
 8006fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fc8:	3301      	adds	r3, #1
 8006fca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	029b      	lsls	r3, r3, #10
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006fdc:	801a      	strh	r2, [r3, #0]
 8006fde:	e041      	b.n	8007064 <USB_EPStartXfer+0x11d8>
 8006fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fe4:	095b      	lsrs	r3, r3, #5
 8006fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fee:	f003 031f 	and.w	r3, r3, #31
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d104      	bne.n	8007000 <USB_EPStartXfer+0x1174>
 8006ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007004:	b29b      	uxth	r3, r3
 8007006:	029b      	lsls	r3, r3, #10
 8007008:	b29b      	uxth	r3, r3
 800700a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800700e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007012:	b29a      	uxth	r2, r3
 8007014:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007018:	801a      	strh	r2, [r3, #0]
 800701a:	e023      	b.n	8007064 <USB_EPStartXfer+0x11d8>
 800701c:	463b      	mov	r3, r7
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	785b      	ldrb	r3, [r3, #1]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d11e      	bne.n	8007064 <USB_EPStartXfer+0x11d8>
 8007026:	1d3b      	adds	r3, r7, #4
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800702e:	b29b      	uxth	r3, r3
 8007030:	461a      	mov	r2, r3
 8007032:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007036:	4413      	add	r3, r2
 8007038:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800703c:	463b      	mov	r3, r7
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	011a      	lsls	r2, r3, #4
 8007044:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007048:	4413      	add	r3, r2
 800704a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800704e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007052:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007056:	b29a      	uxth	r2, r3
 8007058:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800705c:	801a      	strh	r2, [r3, #0]
 800705e:	e001      	b.n	8007064 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e02e      	b.n	80070c2 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007064:	1d3b      	adds	r3, r7, #4
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	463b      	mov	r3, r7
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	b29b      	uxth	r3, r3
 8007076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800707a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007082:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007086:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800708a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800708e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007092:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007096:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800709a:	1d3b      	adds	r3, r7, #4
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	463b      	mov	r3, r7
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	441a      	add	r2, r3
 80070a8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80070ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070bc:	b29b      	uxth	r3, r3
 80070be:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	785b      	ldrb	r3, [r3, #1]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d020      	beq.n	8007120 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070f4:	81bb      	strh	r3, [r7, #12]
 80070f6:	89bb      	ldrh	r3, [r7, #12]
 80070f8:	f083 0310 	eor.w	r3, r3, #16
 80070fc:	81bb      	strh	r3, [r7, #12]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	441a      	add	r2, r3
 8007108:	89bb      	ldrh	r3, [r7, #12]
 800710a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800710e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800711a:	b29b      	uxth	r3, r3
 800711c:	8013      	strh	r3, [r2, #0]
 800711e:	e01f      	b.n	8007160 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	b29b      	uxth	r3, r3
 800712e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007136:	81fb      	strh	r3, [r7, #14]
 8007138:	89fb      	ldrh	r3, [r7, #14]
 800713a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800713e:	81fb      	strh	r3, [r7, #14]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	441a      	add	r2, r3
 800714a:	89fb      	ldrh	r3, [r7, #14]
 800714c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800715c:	b29b      	uxth	r3, r3
 800715e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr

0800716c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	7b1b      	ldrb	r3, [r3, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	f040 809d 	bne.w	80072ba <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	785b      	ldrb	r3, [r3, #1]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d04c      	beq.n	8007222 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	823b      	strh	r3, [r7, #16]
 8007196:	8a3b      	ldrh	r3, [r7, #16]
 8007198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719c:	2b00      	cmp	r3, #0
 800719e:	d01b      	beq.n	80071d8 <USB_EPClearStall+0x6c>
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b6:	81fb      	strh	r3, [r7, #14]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	441a      	add	r2, r3
 80071c2:	89fb      	ldrh	r3, [r7, #14]
 80071c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	78db      	ldrb	r3, [r3, #3]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d06c      	beq.n	80072ba <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f6:	81bb      	strh	r3, [r7, #12]
 80071f8:	89bb      	ldrh	r3, [r7, #12]
 80071fa:	f083 0320 	eor.w	r3, r3, #32
 80071fe:	81bb      	strh	r3, [r7, #12]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	441a      	add	r2, r3
 800720a:	89bb      	ldrh	r3, [r7, #12]
 800720c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800721c:	b29b      	uxth	r3, r3
 800721e:	8013      	strh	r3, [r2, #0]
 8007220:	e04b      	b.n	80072ba <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	82fb      	strh	r3, [r7, #22]
 8007230:	8afb      	ldrh	r3, [r7, #22]
 8007232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d01b      	beq.n	8007272 <USB_EPClearStall+0x106>
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	b29b      	uxth	r3, r3
 8007248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800724c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007250:	82bb      	strh	r3, [r7, #20]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	441a      	add	r2, r3
 800725c:	8abb      	ldrh	r3, [r7, #20]
 800725e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007266:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800726a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726e:	b29b      	uxth	r3, r3
 8007270:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	b29b      	uxth	r3, r3
 8007280:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007288:	827b      	strh	r3, [r7, #18]
 800728a:	8a7b      	ldrh	r3, [r7, #18]
 800728c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007290:	827b      	strh	r3, [r7, #18]
 8007292:	8a7b      	ldrh	r3, [r7, #18]
 8007294:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007298:	827b      	strh	r3, [r7, #18]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	441a      	add	r2, r3
 80072a4:	8a7b      	ldrh	r3, [r7, #18]
 80072a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	371c      	adds	r7, #28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bc80      	pop	{r7}
 80072c4:	4770      	bx	lr

080072c6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	460b      	mov	r3, r1
 80072d0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80072d2:	78fb      	ldrb	r3, [r7, #3]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d103      	bne.n	80072e0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2280      	movs	r2, #128	; 0x80
 80072dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bc80      	pop	{r7}
 80072ea:	4770      	bx	lr

080072ec <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bc80      	pop	{r7}
 80072fe:	4770      	bx	lr

08007300 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	bc80      	pop	{r7}
 8007312:	4770      	bx	lr

08007314 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007322:	b29b      	uxth	r3, r3
 8007324:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007326:	68fb      	ldr	r3, [r7, #12]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	bc80      	pop	{r7}
 8007330:	4770      	bx	lr

08007332 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	bc80      	pop	{r7}
 8007346:	4770      	bx	lr

08007348 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007348:	b480      	push	{r7}
 800734a:	b08d      	sub	sp, #52	; 0x34
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	4611      	mov	r1, r2
 8007354:	461a      	mov	r2, r3
 8007356:	460b      	mov	r3, r1
 8007358:	80fb      	strh	r3, [r7, #6]
 800735a:	4613      	mov	r3, r2
 800735c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800735e:	88bb      	ldrh	r3, [r7, #4]
 8007360:	3301      	adds	r3, #1
 8007362:	085b      	lsrs	r3, r3, #1
 8007364:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800736e:	88fb      	ldrh	r3, [r7, #6]
 8007370:	005a      	lsls	r2, r3, #1
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800737a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007380:	e01e      	b.n	80073c0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	3301      	adds	r3, #1
 800738c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	b29b      	uxth	r3, r3
 8007394:	021b      	lsls	r3, r3, #8
 8007396:	b29b      	uxth	r3, r3
 8007398:	461a      	mov	r2, r3
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	4313      	orrs	r3, r2
 800739e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	3302      	adds	r3, #2
 80073ac:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80073ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b0:	3302      	adds	r3, #2
 80073b2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	3301      	adds	r3, #1
 80073b8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073bc:	3b01      	subs	r3, #1
 80073be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1dd      	bne.n	8007382 <USB_WritePMA+0x3a>
  }
}
 80073c6:	bf00      	nop
 80073c8:	3734      	adds	r7, #52	; 0x34
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bc80      	pop	{r7}
 80073ce:	4770      	bx	lr

080073d0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b08b      	sub	sp, #44	; 0x2c
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	4611      	mov	r1, r2
 80073dc:	461a      	mov	r2, r3
 80073de:	460b      	mov	r3, r1
 80073e0:	80fb      	strh	r3, [r7, #6]
 80073e2:	4613      	mov	r3, r2
 80073e4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80073e6:	88bb      	ldrh	r3, [r7, #4]
 80073e8:	085b      	lsrs	r3, r3, #1
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80073f6:	88fb      	ldrh	r3, [r7, #6]
 80073f8:	005a      	lsls	r2, r3, #1
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007402:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	627b      	str	r3, [r7, #36]	; 0x24
 8007408:	e01b      	b.n	8007442 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	b29b      	uxth	r3, r3
 8007410:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	3302      	adds	r3, #2
 8007416:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	b2da      	uxtb	r2, r3
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	3301      	adds	r3, #1
 8007424:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	0a1b      	lsrs	r3, r3, #8
 800742a:	b2da      	uxtb	r2, r3
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	3301      	adds	r3, #1
 8007434:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	3302      	adds	r3, #2
 800743a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800743c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743e:	3b01      	subs	r3, #1
 8007440:	627b      	str	r3, [r7, #36]	; 0x24
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e0      	bne.n	800740a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007448:	88bb      	ldrh	r3, [r7, #4]
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	b29b      	uxth	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	d007      	beq.n	8007464 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	b29b      	uxth	r3, r3
 800745a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	b2da      	uxtb	r2, r3
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	701a      	strb	r2, [r3, #0]
  }
}
 8007464:	bf00      	nop
 8007466:	372c      	adds	r7, #44	; 0x2c
 8007468:	46bd      	mov	sp, r7
 800746a:	bc80      	pop	{r7}
 800746c:	4770      	bx	lr

0800746e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	460b      	mov	r3, r1
 8007478:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800747a:	2300      	movs	r3, #0
 800747c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	7c1b      	ldrb	r3, [r3, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d115      	bne.n	80074b2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800748a:	2202      	movs	r2, #2
 800748c:	2181      	movs	r1, #129	; 0x81
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f001 fe91 	bl	80091b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800749a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800749e:	2202      	movs	r2, #2
 80074a0:	2101      	movs	r1, #1
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f001 fe87 	bl	80091b6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80074b0:	e012      	b.n	80074d8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80074b2:	2340      	movs	r3, #64	; 0x40
 80074b4:	2202      	movs	r2, #2
 80074b6:	2181      	movs	r1, #129	; 0x81
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 fe7c 	bl	80091b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80074c4:	2340      	movs	r3, #64	; 0x40
 80074c6:	2202      	movs	r2, #2
 80074c8:	2101      	movs	r1, #1
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f001 fe73 	bl	80091b6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80074d8:	2308      	movs	r3, #8
 80074da:	2203      	movs	r2, #3
 80074dc:	2182      	movs	r1, #130	; 0x82
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f001 fe69 	bl	80091b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80074ea:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80074ee:	f001 ff89 	bl	8009404 <USBD_static_malloc>
 80074f2:	4602      	mov	r2, r0
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007500:	2b00      	cmp	r3, #0
 8007502:	d102      	bne.n	800750a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007504:	2301      	movs	r3, #1
 8007506:	73fb      	strb	r3, [r7, #15]
 8007508:	e026      	b.n	8007558 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007510:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2200      	movs	r2, #0
 8007520:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2200      	movs	r2, #0
 8007528:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	7c1b      	ldrb	r3, [r3, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d109      	bne.n	8007548 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800753a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800753e:	2101      	movs	r1, #1
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 ff29 	bl	8009398 <USBD_LL_PrepareReceive>
 8007546:	e007      	b.n	8007558 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800754e:	2340      	movs	r3, #64	; 0x40
 8007550:	2101      	movs	r1, #1
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f001 ff20 	bl	8009398 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	460b      	mov	r3, r1
 800756c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007572:	2181      	movs	r1, #129	; 0x81
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 fe44 	bl	8009202 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007580:	2101      	movs	r1, #1
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 fe3d 	bl	8009202 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007590:	2182      	movs	r1, #130	; 0x82
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f001 fe35 	bl	8009202 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00e      	beq.n	80075c6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b8:	4618      	mov	r0, r3
 80075ba:	f001 ff2f 	bl	800941c <USBD_static_free>
    pdev->pClassData = NULL;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d039      	beq.n	800766e <USBD_CDC_Setup+0x9e>
 80075fa:	2b20      	cmp	r3, #32
 80075fc:	d17c      	bne.n	80076f8 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	88db      	ldrh	r3, [r3, #6]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d029      	beq.n	800765a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	b25b      	sxtb	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	da11      	bge.n	8007634 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800761c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	88d2      	ldrh	r2, [r2, #6]
 8007622:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007624:	6939      	ldr	r1, [r7, #16]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	88db      	ldrh	r3, [r3, #6]
 800762a:	461a      	mov	r2, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f001 f9f9 	bl	8008a24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007632:	e068      	b.n	8007706 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	785a      	ldrb	r2, [r3, #1]
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	88db      	ldrh	r3, [r3, #6]
 8007642:	b2da      	uxtb	r2, r3
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800764a:	6939      	ldr	r1, [r7, #16]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	88db      	ldrh	r3, [r3, #6]
 8007650:	461a      	mov	r2, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f001 fa14 	bl	8008a80 <USBD_CtlPrepareRx>
      break;
 8007658:	e055      	b.n	8007706 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	683a      	ldr	r2, [r7, #0]
 8007664:	7850      	ldrb	r0, [r2, #1]
 8007666:	2200      	movs	r2, #0
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	4798      	blx	r3
      break;
 800766c:	e04b      	b.n	8007706 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	785b      	ldrb	r3, [r3, #1]
 8007672:	2b0a      	cmp	r3, #10
 8007674:	d017      	beq.n	80076a6 <USBD_CDC_Setup+0xd6>
 8007676:	2b0b      	cmp	r3, #11
 8007678:	d029      	beq.n	80076ce <USBD_CDC_Setup+0xfe>
 800767a:	2b00      	cmp	r3, #0
 800767c:	d133      	bne.n	80076e6 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007684:	2b03      	cmp	r3, #3
 8007686:	d107      	bne.n	8007698 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007688:	f107 030c 	add.w	r3, r7, #12
 800768c:	2202      	movs	r2, #2
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f001 f9c7 	bl	8008a24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007696:	e02e      	b.n	80076f6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f001 f958 	bl	8008950 <USBD_CtlError>
            ret = USBD_FAIL;
 80076a0:	2302      	movs	r3, #2
 80076a2:	75fb      	strb	r3, [r7, #23]
          break;
 80076a4:	e027      	b.n	80076f6 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d107      	bne.n	80076c0 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80076b0:	f107 030f 	add.w	r3, r7, #15
 80076b4:	2201      	movs	r2, #1
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f001 f9b3 	bl	8008a24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076be:	e01a      	b.n	80076f6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f001 f944 	bl	8008950 <USBD_CtlError>
            ret = USBD_FAIL;
 80076c8:	2302      	movs	r3, #2
 80076ca:	75fb      	strb	r3, [r7, #23]
          break;
 80076cc:	e013      	b.n	80076f6 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d00d      	beq.n	80076f4 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f001 f938 	bl	8008950 <USBD_CtlError>
            ret = USBD_FAIL;
 80076e0:	2302      	movs	r3, #2
 80076e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80076e4:	e006      	b.n	80076f4 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f001 f931 	bl	8008950 <USBD_CtlError>
          ret = USBD_FAIL;
 80076ee:	2302      	movs	r3, #2
 80076f0:	75fb      	strb	r3, [r7, #23]
          break;
 80076f2:	e000      	b.n	80076f6 <USBD_CDC_Setup+0x126>
          break;
 80076f4:	bf00      	nop
      }
      break;
 80076f6:	e006      	b.n	8007706 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 f928 	bl	8008950 <USBD_CtlError>
      ret = USBD_FAIL;
 8007700:	2302      	movs	r3, #2
 8007702:	75fb      	strb	r3, [r7, #23]
      break;
 8007704:	bf00      	nop
  }

  return ret;
 8007706:	7dfb      	ldrb	r3, [r7, #23]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007722:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800772a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d03a      	beq.n	80077ac <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007736:	78fa      	ldrb	r2, [r7, #3]
 8007738:	6879      	ldr	r1, [r7, #4]
 800773a:	4613      	mov	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	440b      	add	r3, r1
 8007744:	331c      	adds	r3, #28
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d029      	beq.n	80077a0 <USBD_CDC_DataIn+0x90>
 800774c:	78fa      	ldrb	r2, [r7, #3]
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	4613      	mov	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	440b      	add	r3, r1
 800775a:	331c      	adds	r3, #28
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	78f9      	ldrb	r1, [r7, #3]
 8007760:	68b8      	ldr	r0, [r7, #8]
 8007762:	460b      	mov	r3, r1
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	440b      	add	r3, r1
 8007768:	00db      	lsls	r3, r3, #3
 800776a:	4403      	add	r3, r0
 800776c:	3338      	adds	r3, #56	; 0x38
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	fbb2 f1f3 	udiv	r1, r2, r3
 8007774:	fb03 f301 	mul.w	r3, r3, r1
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d110      	bne.n	80077a0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800777e:	78fa      	ldrb	r2, [r7, #3]
 8007780:	6879      	ldr	r1, [r7, #4]
 8007782:	4613      	mov	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	440b      	add	r3, r1
 800778c:	331c      	adds	r3, #28
 800778e:	2200      	movs	r2, #0
 8007790:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007792:	78f9      	ldrb	r1, [r7, #3]
 8007794:	2300      	movs	r3, #0
 8007796:	2200      	movs	r2, #0
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f001 fdda 	bl	8009352 <USBD_LL_Transmit>
 800779e:	e003      	b.n	80077a8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	e000      	b.n	80077ae <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80077ac:	2302      	movs	r3, #2
  }
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	460b      	mov	r3, r1
 80077c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077ca:	78fb      	ldrb	r3, [r7, #3]
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f001 fe05 	bl	80093de <USBD_LL_GetRxDataSize>
 80077d4:	4602      	mov	r2, r0
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00d      	beq.n	8007802 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80077fa:	4611      	mov	r1, r2
 80077fc:	4798      	blx	r3

    return USBD_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	e000      	b.n	8007804 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007802:	2302      	movs	r3, #2
  }
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800781a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007822:	2b00      	cmp	r3, #0
 8007824:	d015      	beq.n	8007852 <USBD_CDC_EP0_RxReady+0x46>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800782c:	2bff      	cmp	r3, #255	; 0xff
 800782e:	d010      	beq.n	8007852 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800783e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007846:	b292      	uxth	r2, r2
 8007848:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	22ff      	movs	r2, #255	; 0xff
 800784e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2243      	movs	r2, #67	; 0x43
 8007868:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800786a:	4b03      	ldr	r3, [pc, #12]	; (8007878 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800786c:	4618      	mov	r0, r3
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	bc80      	pop	{r7}
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	20000094 	.word	0x20000094

0800787c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2243      	movs	r2, #67	; 0x43
 8007888:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800788a:	4b03      	ldr	r3, [pc, #12]	; (8007898 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800788c:	4618      	mov	r0, r3
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	bc80      	pop	{r7}
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	20000050 	.word	0x20000050

0800789c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2243      	movs	r2, #67	; 0x43
 80078a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80078aa:	4b03      	ldr	r3, [pc, #12]	; (80078b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bc80      	pop	{r7}
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	200000d8 	.word	0x200000d8

080078bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	220a      	movs	r2, #10
 80078c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80078ca:	4b03      	ldr	r3, [pc, #12]	; (80078d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bc80      	pop	{r7}
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	2000000c 	.word	0x2000000c

080078dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80078e6:	2302      	movs	r3, #2
 80078e8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d005      	beq.n	80078fc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	bc80      	pop	{r7}
 8007906:	4770      	bx	lr

08007908 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	4613      	mov	r3, r2
 8007914:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007926:	88fa      	ldrh	r2, [r7, #6]
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	371c      	adds	r7, #28
 8007934:	46bd      	mov	sp, r7
 8007936:	bc80      	pop	{r7}
 8007938:	4770      	bx	lr

0800793a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800793a:	b480      	push	{r7}
 800793c:	b085      	sub	sp, #20
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3714      	adds	r7, #20
 800795a:	46bd      	mov	sp, r7
 800795c:	bc80      	pop	{r7}
 800795e:	4770      	bx	lr

08007960 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007976:	2b00      	cmp	r3, #0
 8007978:	d01c      	beq.n	80079b4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007980:	2b00      	cmp	r3, #0
 8007982:	d115      	bne.n	80079b0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2201      	movs	r2, #1
 8007988:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	2181      	movs	r1, #129	; 0x81
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f001 fcd3 	bl	8009352 <USBD_LL_Transmit>

      return USBD_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	e002      	b.n	80079b6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e000      	b.n	80079b6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80079b4:	2302      	movs	r3, #2
  }
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b084      	sub	sp, #16
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079cc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d017      	beq.n	8007a08 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	7c1b      	ldrb	r3, [r3, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d109      	bne.n	80079f4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079ea:	2101      	movs	r1, #1
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 fcd3 	bl	8009398 <USBD_LL_PrepareReceive>
 80079f2:	e007      	b.n	8007a04 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079fa:	2340      	movs	r3, #64	; 0x40
 80079fc:	2101      	movs	r1, #1
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f001 fcca 	bl	8009398 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	e000      	b.n	8007a0a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007a08:	2302      	movs	r3, #2
  }
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	60b9      	str	r1, [r7, #8]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007a26:	2302      	movs	r3, #2
 8007a28:	e01a      	b.n	8007a60 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d003      	beq.n	8007a3c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	79fa      	ldrb	r2, [r7, #7]
 8007a56:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f001 fb37 	bl	80090cc <USBD_LL_Init>

  return USBD_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d006      	beq.n	8007a8a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	73fb      	strb	r3, [r7, #15]
 8007a88:	e001      	b.n	8007a8e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bc80      	pop	{r7}
 8007a98:	4770      	bx	lr

08007a9a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b082      	sub	sp, #8
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 fb6c 	bl	8009180 <USBD_LL_Start>

  return USBD_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b083      	sub	sp, #12
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bc80      	pop	{r7}
 8007ac4:	4770      	bx	lr

08007ac6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	460b      	mov	r3, r1
 8007ad0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00c      	beq.n	8007afa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	78fa      	ldrb	r2, [r7, #3]
 8007aea:	4611      	mov	r1, r2
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	4798      	blx	r3
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	78fa      	ldrb	r2, [r7, #3]
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	4798      	blx	r3

  return USBD_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 fecb 	bl	80088d8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007b50:	461a      	mov	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b5e:	f003 031f 	and.w	r3, r3, #31
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d00c      	beq.n	8007b80 <USBD_LL_SetupStage+0x56>
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d302      	bcc.n	8007b70 <USBD_LL_SetupStage+0x46>
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d010      	beq.n	8007b90 <USBD_LL_SetupStage+0x66>
 8007b6e:	e017      	b.n	8007ba0 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f9cb 	bl	8007f14 <USBD_StdDevReq>
      break;
 8007b7e:	e01a      	b.n	8007bb6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fa2d 	bl	8007fe8 <USBD_StdItfReq>
      break;
 8007b8e:	e012      	b.n	8007bb6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fa6b 	bl	8008074 <USBD_StdEPReq>
      break;
 8007b9e:	e00a      	b.n	8007bb6 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007ba6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	4619      	mov	r1, r3
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f001 fb46 	bl	8009240 <USBD_LL_StallEP>
      break;
 8007bb4:	bf00      	nop
  }

  return USBD_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007bce:	7afb      	ldrb	r3, [r7, #11]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d14b      	bne.n	8007c6c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007bda:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	d134      	bne.n	8007c50 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	68da      	ldr	r2, [r3, #12]
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d919      	bls.n	8007c26 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	1ad2      	subs	r2, r2, r3
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	68da      	ldr	r2, [r3, #12]
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d203      	bcs.n	8007c14 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	e002      	b.n	8007c1a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f000 ff4c 	bl	8008abc <USBD_CtlContinueRx>
 8007c24:	e038      	b.n	8007c98 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d105      	bne.n	8007c48 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 ff49 	bl	8008ae0 <USBD_CtlSendStatus>
 8007c4e:	e023      	b.n	8007c98 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c56:	2b05      	cmp	r3, #5
 8007c58:	d11e      	bne.n	8007c98 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007c62:	2100      	movs	r1, #0
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f001 faeb 	bl	8009240 <USBD_LL_StallEP>
 8007c6a:	e015      	b.n	8007c98 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00d      	beq.n	8007c94 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d108      	bne.n	8007c94 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	7afa      	ldrb	r2, [r7, #11]
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	4798      	blx	r3
 8007c92:	e001      	b.n	8007c98 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c94:	2302      	movs	r3, #2
 8007c96:	e000      	b.n	8007c9a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b086      	sub	sp, #24
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	60f8      	str	r0, [r7, #12]
 8007caa:	460b      	mov	r3, r1
 8007cac:	607a      	str	r2, [r7, #4]
 8007cae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007cb0:	7afb      	ldrb	r3, [r7, #11]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d17f      	bne.n	8007db6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	3314      	adds	r3, #20
 8007cba:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d15c      	bne.n	8007d80 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d915      	bls.n	8007cfe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	68da      	ldr	r2, [r3, #12]
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	1ad2      	subs	r2, r2, r3
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	6879      	ldr	r1, [r7, #4]
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 feb6 	bl	8008a5c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f001 fb4e 	bl	8009398 <USBD_LL_PrepareReceive>
 8007cfc:	e04e      	b.n	8007d9c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	6912      	ldr	r2, [r2, #16]
 8007d06:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d0a:	fb02 f201 	mul.w	r2, r2, r1
 8007d0e:	1a9b      	subs	r3, r3, r2
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d11c      	bne.n	8007d4e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	689a      	ldr	r2, [r3, #8]
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d316      	bcc.n	8007d4e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d20f      	bcs.n	8007d4e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2100      	movs	r1, #0
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f000 fe92 	bl	8008a5c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d40:	2300      	movs	r3, #0
 8007d42:	2200      	movs	r2, #0
 8007d44:	2100      	movs	r1, #0
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f001 fb26 	bl	8009398 <USBD_LL_PrepareReceive>
 8007d4c:	e026      	b.n	8007d9c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00a      	beq.n	8007d70 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d105      	bne.n	8007d70 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007d70:	2180      	movs	r1, #128	; 0x80
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f001 fa64 	bl	8009240 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 fec4 	bl	8008b06 <USBD_CtlReceiveStatus>
 8007d7e:	e00d      	b.n	8007d9c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d86:	2b04      	cmp	r3, #4
 8007d88:	d004      	beq.n	8007d94 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d103      	bne.n	8007d9c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007d94:	2180      	movs	r1, #128	; 0x80
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f001 fa52 	bl	8009240 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d11d      	bne.n	8007de2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f7ff fe83 	bl	8007ab2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007db4:	e015      	b.n	8007de2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00d      	beq.n	8007dde <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	d108      	bne.n	8007dde <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	7afa      	ldrb	r2, [r7, #11]
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	4798      	blx	r3
 8007ddc:	e001      	b.n	8007de2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007dde:	2302      	movs	r3, #2
 8007de0:	e000      	b.n	8007de4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007df4:	2340      	movs	r3, #64	; 0x40
 8007df6:	2200      	movs	r2, #0
 8007df8:	2100      	movs	r1, #0
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 f9db 	bl	80091b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2240      	movs	r2, #64	; 0x40
 8007e0c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e10:	2340      	movs	r3, #64	; 0x40
 8007e12:	2200      	movs	r2, #0
 8007e14:	2180      	movs	r1, #128	; 0x80
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f001 f9cd 	bl	80091b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2240      	movs	r2, #64	; 0x40
 8007e26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d009      	beq.n	8007e64 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	6852      	ldr	r2, [r2, #4]
 8007e5c:	b2d2      	uxtb	r2, r2
 8007e5e:	4611      	mov	r1, r2
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	4798      	blx	r3
  }

  return USBD_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	460b      	mov	r3, r1
 8007e78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	78fa      	ldrb	r2, [r7, #3]
 8007e7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bc80      	pop	{r7}
 8007e8a:	4770      	bx	lr

08007e8c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2204      	movs	r2, #4
 8007ea4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bc80      	pop	{r7}
 8007eb2:	4770      	bx	lr

08007eb4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec2:	2b04      	cmp	r3, #4
 8007ec4:	d105      	bne.n	8007ed2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bc80      	pop	{r7}
 8007edc:	4770      	bx	lr

08007ede <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b082      	sub	sp, #8
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d10b      	bne.n	8007f08 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef6:	69db      	ldr	r3, [r3, #28]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d005      	beq.n	8007f08 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
	...

08007f14 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f2a:	2b20      	cmp	r3, #32
 8007f2c:	d004      	beq.n	8007f38 <USBD_StdDevReq+0x24>
 8007f2e:	2b40      	cmp	r3, #64	; 0x40
 8007f30:	d002      	beq.n	8007f38 <USBD_StdDevReq+0x24>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d008      	beq.n	8007f48 <USBD_StdDevReq+0x34>
 8007f36:	e04c      	b.n	8007fd2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	4798      	blx	r3
      break;
 8007f46:	e049      	b.n	8007fdc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	785b      	ldrb	r3, [r3, #1]
 8007f4c:	2b09      	cmp	r3, #9
 8007f4e:	d83a      	bhi.n	8007fc6 <USBD_StdDevReq+0xb2>
 8007f50:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <USBD_StdDevReq+0x44>)
 8007f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f56:	bf00      	nop
 8007f58:	08007fa9 	.word	0x08007fa9
 8007f5c:	08007fbd 	.word	0x08007fbd
 8007f60:	08007fc7 	.word	0x08007fc7
 8007f64:	08007fb3 	.word	0x08007fb3
 8007f68:	08007fc7 	.word	0x08007fc7
 8007f6c:	08007f8b 	.word	0x08007f8b
 8007f70:	08007f81 	.word	0x08007f81
 8007f74:	08007fc7 	.word	0x08007fc7
 8007f78:	08007f9f 	.word	0x08007f9f
 8007f7c:	08007f95 	.word	0x08007f95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f9d4 	bl	8008330 <USBD_GetDescriptor>
          break;
 8007f88:	e022      	b.n	8007fd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fb37 	bl	8008600 <USBD_SetAddress>
          break;
 8007f92:	e01d      	b.n	8007fd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fb74 	bl	8008684 <USBD_SetConfig>
          break;
 8007f9c:	e018      	b.n	8007fd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fbfd 	bl	80087a0 <USBD_GetConfig>
          break;
 8007fa6:	e013      	b.n	8007fd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fc2c 	bl	8008808 <USBD_GetStatus>
          break;
 8007fb0:	e00e      	b.n	8007fd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fc5a 	bl	800886e <USBD_SetFeature>
          break;
 8007fba:	e009      	b.n	8007fd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fc69 	bl	8008896 <USBD_ClrFeature>
          break;
 8007fc4:	e004      	b.n	8007fd0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fcc1 	bl	8008950 <USBD_CtlError>
          break;
 8007fce:	bf00      	nop
      }
      break;
 8007fd0:	e004      	b.n	8007fdc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fcbb 	bl	8008950 <USBD_CtlError>
      break;
 8007fda:	bf00      	nop
  }

  return ret;
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop

08007fe8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ffe:	2b20      	cmp	r3, #32
 8008000:	d003      	beq.n	800800a <USBD_StdItfReq+0x22>
 8008002:	2b40      	cmp	r3, #64	; 0x40
 8008004:	d001      	beq.n	800800a <USBD_StdItfReq+0x22>
 8008006:	2b00      	cmp	r3, #0
 8008008:	d12a      	bne.n	8008060 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008010:	3b01      	subs	r3, #1
 8008012:	2b02      	cmp	r3, #2
 8008014:	d81d      	bhi.n	8008052 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	889b      	ldrh	r3, [r3, #4]
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b01      	cmp	r3, #1
 800801e:	d813      	bhi.n	8008048 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	4798      	blx	r3
 800802e:	4603      	mov	r3, r0
 8008030:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	88db      	ldrh	r3, [r3, #6]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d110      	bne.n	800805c <USBD_StdItfReq+0x74>
 800803a:	7bfb      	ldrb	r3, [r7, #15]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10d      	bne.n	800805c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fd4d 	bl	8008ae0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008046:	e009      	b.n	800805c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fc80 	bl	8008950 <USBD_CtlError>
          break;
 8008050:	e004      	b.n	800805c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fc7b 	bl	8008950 <USBD_CtlError>
          break;
 800805a:	e000      	b.n	800805e <USBD_StdItfReq+0x76>
          break;
 800805c:	bf00      	nop
      }
      break;
 800805e:	e004      	b.n	800806a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fc74 	bl	8008950 <USBD_CtlError>
      break;
 8008068:	bf00      	nop
  }

  return USBD_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	889b      	ldrh	r3, [r3, #4]
 8008086:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008090:	2b20      	cmp	r3, #32
 8008092:	d004      	beq.n	800809e <USBD_StdEPReq+0x2a>
 8008094:	2b40      	cmp	r3, #64	; 0x40
 8008096:	d002      	beq.n	800809e <USBD_StdEPReq+0x2a>
 8008098:	2b00      	cmp	r3, #0
 800809a:	d008      	beq.n	80080ae <USBD_StdEPReq+0x3a>
 800809c:	e13d      	b.n	800831a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	6839      	ldr	r1, [r7, #0]
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	4798      	blx	r3
      break;
 80080ac:	e13a      	b.n	8008324 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080b6:	2b20      	cmp	r3, #32
 80080b8:	d10a      	bne.n	80080d0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	4798      	blx	r3
 80080c8:	4603      	mov	r3, r0
 80080ca:	73fb      	strb	r3, [r7, #15]

        return ret;
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	e12a      	b.n	8008326 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	785b      	ldrb	r3, [r3, #1]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d03e      	beq.n	8008156 <USBD_StdEPReq+0xe2>
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d002      	beq.n	80080e2 <USBD_StdEPReq+0x6e>
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d070      	beq.n	80081c2 <USBD_StdEPReq+0x14e>
 80080e0:	e115      	b.n	800830e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d002      	beq.n	80080f2 <USBD_StdEPReq+0x7e>
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	d015      	beq.n	800811c <USBD_StdEPReq+0xa8>
 80080f0:	e02b      	b.n	800814a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080f2:	7bbb      	ldrb	r3, [r7, #14]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00c      	beq.n	8008112 <USBD_StdEPReq+0x9e>
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	2b80      	cmp	r3, #128	; 0x80
 80080fc:	d009      	beq.n	8008112 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80080fe:	7bbb      	ldrb	r3, [r7, #14]
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f001 f89c 	bl	8009240 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008108:	2180      	movs	r1, #128	; 0x80
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 f898 	bl	8009240 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008110:	e020      	b.n	8008154 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fc1b 	bl	8008950 <USBD_CtlError>
              break;
 800811a:	e01b      	b.n	8008154 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	885b      	ldrh	r3, [r3, #2]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10e      	bne.n	8008142 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008124:	7bbb      	ldrb	r3, [r7, #14]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00b      	beq.n	8008142 <USBD_StdEPReq+0xce>
 800812a:	7bbb      	ldrb	r3, [r7, #14]
 800812c:	2b80      	cmp	r3, #128	; 0x80
 800812e:	d008      	beq.n	8008142 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	88db      	ldrh	r3, [r3, #6]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d104      	bne.n	8008142 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	4619      	mov	r1, r3
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 f87f 	bl	8009240 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fccc 	bl	8008ae0 <USBD_CtlSendStatus>

              break;
 8008148:	e004      	b.n	8008154 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fbff 	bl	8008950 <USBD_CtlError>
              break;
 8008152:	bf00      	nop
          }
          break;
 8008154:	e0e0      	b.n	8008318 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800815c:	2b02      	cmp	r3, #2
 800815e:	d002      	beq.n	8008166 <USBD_StdEPReq+0xf2>
 8008160:	2b03      	cmp	r3, #3
 8008162:	d015      	beq.n	8008190 <USBD_StdEPReq+0x11c>
 8008164:	e026      	b.n	80081b4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00c      	beq.n	8008186 <USBD_StdEPReq+0x112>
 800816c:	7bbb      	ldrb	r3, [r7, #14]
 800816e:	2b80      	cmp	r3, #128	; 0x80
 8008170:	d009      	beq.n	8008186 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f001 f862 	bl	8009240 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800817c:	2180      	movs	r1, #128	; 0x80
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f001 f85e 	bl	8009240 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008184:	e01c      	b.n	80081c0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fbe1 	bl	8008950 <USBD_CtlError>
              break;
 800818e:	e017      	b.n	80081c0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	885b      	ldrh	r3, [r3, #2]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d112      	bne.n	80081be <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d004      	beq.n	80081ac <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	4619      	mov	r1, r3
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f001 f869 	bl	800927e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fc97 	bl	8008ae0 <USBD_CtlSendStatus>
              }
              break;
 80081b2:	e004      	b.n	80081be <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fbca 	bl	8008950 <USBD_CtlError>
              break;
 80081bc:	e000      	b.n	80081c0 <USBD_StdEPReq+0x14c>
              break;
 80081be:	bf00      	nop
          }
          break;
 80081c0:	e0aa      	b.n	8008318 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d002      	beq.n	80081d2 <USBD_StdEPReq+0x15e>
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d032      	beq.n	8008236 <USBD_StdEPReq+0x1c2>
 80081d0:	e097      	b.n	8008302 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081d2:	7bbb      	ldrb	r3, [r7, #14]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d007      	beq.n	80081e8 <USBD_StdEPReq+0x174>
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	2b80      	cmp	r3, #128	; 0x80
 80081dc:	d004      	beq.n	80081e8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fbb5 	bl	8008950 <USBD_CtlError>
                break;
 80081e6:	e091      	b.n	800830c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	da0b      	bge.n	8008208 <USBD_StdEPReq+0x194>
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081f6:	4613      	mov	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	3310      	adds	r3, #16
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	4413      	add	r3, r2
 8008204:	3304      	adds	r3, #4
 8008206:	e00b      	b.n	8008220 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008208:	7bbb      	ldrb	r3, [r7, #14]
 800820a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800820e:	4613      	mov	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	4413      	add	r3, r2
 800821e:	3304      	adds	r3, #4
 8008220:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2202      	movs	r2, #2
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fbf8 	bl	8008a24 <USBD_CtlSendData>
              break;
 8008234:	e06a      	b.n	800830c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008236:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800823a:	2b00      	cmp	r3, #0
 800823c:	da11      	bge.n	8008262 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800823e:	7bbb      	ldrb	r3, [r7, #14]
 8008240:	f003 020f 	and.w	r2, r3, #15
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	4613      	mov	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	440b      	add	r3, r1
 8008250:	3318      	adds	r3, #24
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d117      	bne.n	8008288 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008258:	6839      	ldr	r1, [r7, #0]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fb78 	bl	8008950 <USBD_CtlError>
                  break;
 8008260:	e054      	b.n	800830c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	f003 020f 	and.w	r2, r3, #15
 8008268:	6879      	ldr	r1, [r7, #4]
 800826a:	4613      	mov	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	440b      	add	r3, r1
 8008274:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d104      	bne.n	8008288 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fb65 	bl	8008950 <USBD_CtlError>
                  break;
 8008286:	e041      	b.n	800830c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008288:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800828c:	2b00      	cmp	r3, #0
 800828e:	da0b      	bge.n	80082a8 <USBD_StdEPReq+0x234>
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008296:	4613      	mov	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	3310      	adds	r3, #16
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	4413      	add	r3, r2
 80082a4:	3304      	adds	r3, #4
 80082a6:	e00b      	b.n	80082c0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
 80082aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	4413      	add	r3, r2
 80082be:	3304      	adds	r3, #4
 80082c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d002      	beq.n	80082ce <USBD_StdEPReq+0x25a>
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	2b80      	cmp	r3, #128	; 0x80
 80082cc:	d103      	bne.n	80082d6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2200      	movs	r2, #0
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	e00e      	b.n	80082f4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	4619      	mov	r1, r3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 ffee 	bl	80092bc <USBD_LL_IsStallEP>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	2201      	movs	r2, #1
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	e002      	b.n	80082f4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2200      	movs	r2, #0
 80082f2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2202      	movs	r2, #2
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fb92 	bl	8008a24 <USBD_CtlSendData>
              break;
 8008300:	e004      	b.n	800830c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fb23 	bl	8008950 <USBD_CtlError>
              break;
 800830a:	bf00      	nop
          }
          break;
 800830c:	e004      	b.n	8008318 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fb1d 	bl	8008950 <USBD_CtlError>
          break;
 8008316:	bf00      	nop
      }
      break;
 8008318:	e004      	b.n	8008324 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fb17 	bl	8008950 <USBD_CtlError>
      break;
 8008322:	bf00      	nop
  }

  return ret;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008342:	2300      	movs	r3, #0
 8008344:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	885b      	ldrh	r3, [r3, #2]
 800834a:	0a1b      	lsrs	r3, r3, #8
 800834c:	b29b      	uxth	r3, r3
 800834e:	3b01      	subs	r3, #1
 8008350:	2b06      	cmp	r3, #6
 8008352:	f200 8128 	bhi.w	80085a6 <USBD_GetDescriptor+0x276>
 8008356:	a201      	add	r2, pc, #4	; (adr r2, 800835c <USBD_GetDescriptor+0x2c>)
 8008358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835c:	08008379 	.word	0x08008379
 8008360:	08008391 	.word	0x08008391
 8008364:	080083d1 	.word	0x080083d1
 8008368:	080085a7 	.word	0x080085a7
 800836c:	080085a7 	.word	0x080085a7
 8008370:	08008547 	.word	0x08008547
 8008374:	08008573 	.word	0x08008573
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	7c12      	ldrb	r2, [r2, #16]
 8008384:	f107 0108 	add.w	r1, r7, #8
 8008388:	4610      	mov	r0, r2
 800838a:	4798      	blx	r3
 800838c:	60f8      	str	r0, [r7, #12]
      break;
 800838e:	e112      	b.n	80085b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	7c1b      	ldrb	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10d      	bne.n	80083b4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800839e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a0:	f107 0208 	add.w	r2, r7, #8
 80083a4:	4610      	mov	r0, r2
 80083a6:	4798      	blx	r3
 80083a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3301      	adds	r3, #1
 80083ae:	2202      	movs	r2, #2
 80083b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80083b2:	e100      	b.n	80085b6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083bc:	f107 0208 	add.w	r2, r7, #8
 80083c0:	4610      	mov	r0, r2
 80083c2:	4798      	blx	r3
 80083c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3301      	adds	r3, #1
 80083ca:	2202      	movs	r2, #2
 80083cc:	701a      	strb	r2, [r3, #0]
      break;
 80083ce:	e0f2      	b.n	80085b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	885b      	ldrh	r3, [r3, #2]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b05      	cmp	r3, #5
 80083d8:	f200 80ac 	bhi.w	8008534 <USBD_GetDescriptor+0x204>
 80083dc:	a201      	add	r2, pc, #4	; (adr r2, 80083e4 <USBD_GetDescriptor+0xb4>)
 80083de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e2:	bf00      	nop
 80083e4:	080083fd 	.word	0x080083fd
 80083e8:	08008431 	.word	0x08008431
 80083ec:	08008465 	.word	0x08008465
 80083f0:	08008499 	.word	0x08008499
 80083f4:	080084cd 	.word	0x080084cd
 80083f8:	08008501 	.word	0x08008501
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00b      	beq.n	8008420 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	7c12      	ldrb	r2, [r2, #16]
 8008414:	f107 0108 	add.w	r1, r7, #8
 8008418:	4610      	mov	r0, r2
 800841a:	4798      	blx	r3
 800841c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800841e:	e091      	b.n	8008544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fa94 	bl	8008950 <USBD_CtlError>
            err++;
 8008428:	7afb      	ldrb	r3, [r7, #11]
 800842a:	3301      	adds	r3, #1
 800842c:	72fb      	strb	r3, [r7, #11]
          break;
 800842e:	e089      	b.n	8008544 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00b      	beq.n	8008454 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	7c12      	ldrb	r2, [r2, #16]
 8008448:	f107 0108 	add.w	r1, r7, #8
 800844c:	4610      	mov	r0, r2
 800844e:	4798      	blx	r3
 8008450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008452:	e077      	b.n	8008544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fa7a 	bl	8008950 <USBD_CtlError>
            err++;
 800845c:	7afb      	ldrb	r3, [r7, #11]
 800845e:	3301      	adds	r3, #1
 8008460:	72fb      	strb	r3, [r7, #11]
          break;
 8008462:	e06f      	b.n	8008544 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00b      	beq.n	8008488 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	7c12      	ldrb	r2, [r2, #16]
 800847c:	f107 0108 	add.w	r1, r7, #8
 8008480:	4610      	mov	r0, r2
 8008482:	4798      	blx	r3
 8008484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008486:	e05d      	b.n	8008544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fa60 	bl	8008950 <USBD_CtlError>
            err++;
 8008490:	7afb      	ldrb	r3, [r7, #11]
 8008492:	3301      	adds	r3, #1
 8008494:	72fb      	strb	r3, [r7, #11]
          break;
 8008496:	e055      	b.n	8008544 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00b      	beq.n	80084bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	7c12      	ldrb	r2, [r2, #16]
 80084b0:	f107 0108 	add.w	r1, r7, #8
 80084b4:	4610      	mov	r0, r2
 80084b6:	4798      	blx	r3
 80084b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ba:	e043      	b.n	8008544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fa46 	bl	8008950 <USBD_CtlError>
            err++;
 80084c4:	7afb      	ldrb	r3, [r7, #11]
 80084c6:	3301      	adds	r3, #1
 80084c8:	72fb      	strb	r3, [r7, #11]
          break;
 80084ca:	e03b      	b.n	8008544 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00b      	beq.n	80084f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	7c12      	ldrb	r2, [r2, #16]
 80084e4:	f107 0108 	add.w	r1, r7, #8
 80084e8:	4610      	mov	r0, r2
 80084ea:	4798      	blx	r3
 80084ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ee:	e029      	b.n	8008544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fa2c 	bl	8008950 <USBD_CtlError>
            err++;
 80084f8:	7afb      	ldrb	r3, [r7, #11]
 80084fa:	3301      	adds	r3, #1
 80084fc:	72fb      	strb	r3, [r7, #11]
          break;
 80084fe:	e021      	b.n	8008544 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00b      	beq.n	8008524 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	7c12      	ldrb	r2, [r2, #16]
 8008518:	f107 0108 	add.w	r1, r7, #8
 800851c:	4610      	mov	r0, r2
 800851e:	4798      	blx	r3
 8008520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008522:	e00f      	b.n	8008544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fa12 	bl	8008950 <USBD_CtlError>
            err++;
 800852c:	7afb      	ldrb	r3, [r7, #11]
 800852e:	3301      	adds	r3, #1
 8008530:	72fb      	strb	r3, [r7, #11]
          break;
 8008532:	e007      	b.n	8008544 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fa0a 	bl	8008950 <USBD_CtlError>
          err++;
 800853c:	7afb      	ldrb	r3, [r7, #11]
 800853e:	3301      	adds	r3, #1
 8008540:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008542:	e038      	b.n	80085b6 <USBD_GetDescriptor+0x286>
 8008544:	e037      	b.n	80085b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	7c1b      	ldrb	r3, [r3, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d109      	bne.n	8008562 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008556:	f107 0208 	add.w	r2, r7, #8
 800855a:	4610      	mov	r0, r2
 800855c:	4798      	blx	r3
 800855e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008560:	e029      	b.n	80085b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f9f3 	bl	8008950 <USBD_CtlError>
        err++;
 800856a:	7afb      	ldrb	r3, [r7, #11]
 800856c:	3301      	adds	r3, #1
 800856e:	72fb      	strb	r3, [r7, #11]
      break;
 8008570:	e021      	b.n	80085b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	7c1b      	ldrb	r3, [r3, #16]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10d      	bne.n	8008596 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008582:	f107 0208 	add.w	r2, r7, #8
 8008586:	4610      	mov	r0, r2
 8008588:	4798      	blx	r3
 800858a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	3301      	adds	r3, #1
 8008590:	2207      	movs	r2, #7
 8008592:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008594:	e00f      	b.n	80085b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f9d9 	bl	8008950 <USBD_CtlError>
        err++;
 800859e:	7afb      	ldrb	r3, [r7, #11]
 80085a0:	3301      	adds	r3, #1
 80085a2:	72fb      	strb	r3, [r7, #11]
      break;
 80085a4:	e007      	b.n	80085b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f9d1 	bl	8008950 <USBD_CtlError>
      err++;
 80085ae:	7afb      	ldrb	r3, [r7, #11]
 80085b0:	3301      	adds	r3, #1
 80085b2:	72fb      	strb	r3, [r7, #11]
      break;
 80085b4:	bf00      	nop
  }

  if (err != 0U)
 80085b6:	7afb      	ldrb	r3, [r7, #11]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d11c      	bne.n	80085f6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80085bc:	893b      	ldrh	r3, [r7, #8]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d011      	beq.n	80085e6 <USBD_GetDescriptor+0x2b6>
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	88db      	ldrh	r3, [r3, #6]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00d      	beq.n	80085e6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	88da      	ldrh	r2, [r3, #6]
 80085ce:	893b      	ldrh	r3, [r7, #8]
 80085d0:	4293      	cmp	r3, r2
 80085d2:	bf28      	it	cs
 80085d4:	4613      	movcs	r3, r2
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80085da:	893b      	ldrh	r3, [r7, #8]
 80085dc:	461a      	mov	r2, r3
 80085de:	68f9      	ldr	r1, [r7, #12]
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fa1f 	bl	8008a24 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	88db      	ldrh	r3, [r3, #6]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d104      	bne.n	80085f8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fa76 	bl	8008ae0 <USBD_CtlSendStatus>
 80085f4:	e000      	b.n	80085f8 <USBD_GetDescriptor+0x2c8>
    return;
 80085f6:	bf00      	nop
    }
  }
}
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop

08008600 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	889b      	ldrh	r3, [r3, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d130      	bne.n	8008674 <USBD_SetAddress+0x74>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	88db      	ldrh	r3, [r3, #6]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d12c      	bne.n	8008674 <USBD_SetAddress+0x74>
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	885b      	ldrh	r3, [r3, #2]
 800861e:	2b7f      	cmp	r3, #127	; 0x7f
 8008620:	d828      	bhi.n	8008674 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	885b      	ldrh	r3, [r3, #2]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800862c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008634:	2b03      	cmp	r3, #3
 8008636:	d104      	bne.n	8008642 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008638:	6839      	ldr	r1, [r7, #0]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f988 	bl	8008950 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008640:	e01c      	b.n	800867c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	7bfa      	ldrb	r2, [r7, #15]
 8008646:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fe60 	bl	8009314 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fa43 	bl	8008ae0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800865a:	7bfb      	ldrb	r3, [r7, #15]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d004      	beq.n	800866a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2202      	movs	r2, #2
 8008664:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008668:	e008      	b.n	800867c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008672:	e003      	b.n	800867c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008674:	6839      	ldr	r1, [r7, #0]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f96a 	bl	8008950 <USBD_CtlError>
  }
}
 800867c:	bf00      	nop
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	885b      	ldrh	r3, [r3, #2]
 8008692:	b2da      	uxtb	r2, r3
 8008694:	4b41      	ldr	r3, [pc, #260]	; (800879c <USBD_SetConfig+0x118>)
 8008696:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008698:	4b40      	ldr	r3, [pc, #256]	; (800879c <USBD_SetConfig+0x118>)
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d904      	bls.n	80086aa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80086a0:	6839      	ldr	r1, [r7, #0]
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f954 	bl	8008950 <USBD_CtlError>
 80086a8:	e075      	b.n	8008796 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d002      	beq.n	80086ba <USBD_SetConfig+0x36>
 80086b4:	2b03      	cmp	r3, #3
 80086b6:	d023      	beq.n	8008700 <USBD_SetConfig+0x7c>
 80086b8:	e062      	b.n	8008780 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80086ba:	4b38      	ldr	r3, [pc, #224]	; (800879c <USBD_SetConfig+0x118>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d01a      	beq.n	80086f8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80086c2:	4b36      	ldr	r3, [pc, #216]	; (800879c <USBD_SetConfig+0x118>)
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	461a      	mov	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2203      	movs	r2, #3
 80086d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80086d4:	4b31      	ldr	r3, [pc, #196]	; (800879c <USBD_SetConfig+0x118>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	4619      	mov	r1, r3
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7ff f9f3 	bl	8007ac6 <USBD_SetClassConfig>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d104      	bne.n	80086f0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f931 	bl	8008950 <USBD_CtlError>
            return;
 80086ee:	e052      	b.n	8008796 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f9f5 	bl	8008ae0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80086f6:	e04e      	b.n	8008796 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f9f1 	bl	8008ae0 <USBD_CtlSendStatus>
        break;
 80086fe:	e04a      	b.n	8008796 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008700:	4b26      	ldr	r3, [pc, #152]	; (800879c <USBD_SetConfig+0x118>)
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d112      	bne.n	800872e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008710:	4b22      	ldr	r3, [pc, #136]	; (800879c <USBD_SetConfig+0x118>)
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	461a      	mov	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800871a:	4b20      	ldr	r3, [pc, #128]	; (800879c <USBD_SetConfig+0x118>)
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7ff f9ef 	bl	8007b04 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f9da 	bl	8008ae0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800872c:	e033      	b.n	8008796 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800872e:	4b1b      	ldr	r3, [pc, #108]	; (800879c <USBD_SetConfig+0x118>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	461a      	mov	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	429a      	cmp	r2, r3
 800873a:	d01d      	beq.n	8008778 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7ff f9dd 	bl	8007b04 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800874a:	4b14      	ldr	r3, [pc, #80]	; (800879c <USBD_SetConfig+0x118>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008754:	4b11      	ldr	r3, [pc, #68]	; (800879c <USBD_SetConfig+0x118>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7ff f9b3 	bl	8007ac6 <USBD_SetClassConfig>
 8008760:	4603      	mov	r3, r0
 8008762:	2b02      	cmp	r3, #2
 8008764:	d104      	bne.n	8008770 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008766:	6839      	ldr	r1, [r7, #0]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f8f1 	bl	8008950 <USBD_CtlError>
            return;
 800876e:	e012      	b.n	8008796 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f9b5 	bl	8008ae0 <USBD_CtlSendStatus>
        break;
 8008776:	e00e      	b.n	8008796 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f9b1 	bl	8008ae0 <USBD_CtlSendStatus>
        break;
 800877e:	e00a      	b.n	8008796 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f8e4 	bl	8008950 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008788:	4b04      	ldr	r3, [pc, #16]	; (800879c <USBD_SetConfig+0x118>)
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff f9b8 	bl	8007b04 <USBD_ClrClassConfig>
        break;
 8008794:	bf00      	nop
    }
  }
}
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	20000370 	.word	0x20000370

080087a0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	88db      	ldrh	r3, [r3, #6]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d004      	beq.n	80087bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f8cb 	bl	8008950 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80087ba:	e021      	b.n	8008800 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	db17      	blt.n	80087f6 <USBD_GetConfig+0x56>
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	dd02      	ble.n	80087d0 <USBD_GetConfig+0x30>
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	d00b      	beq.n	80087e6 <USBD_GetConfig+0x46>
 80087ce:	e012      	b.n	80087f6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	3308      	adds	r3, #8
 80087da:	2201      	movs	r2, #1
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f920 	bl	8008a24 <USBD_CtlSendData>
        break;
 80087e4:	e00c      	b.n	8008800 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	3304      	adds	r3, #4
 80087ea:	2201      	movs	r2, #1
 80087ec:	4619      	mov	r1, r3
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f918 	bl	8008a24 <USBD_CtlSendData>
        break;
 80087f4:	e004      	b.n	8008800 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f8a9 	bl	8008950 <USBD_CtlError>
        break;
 80087fe:	bf00      	nop
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008818:	3b01      	subs	r3, #1
 800881a:	2b02      	cmp	r3, #2
 800881c:	d81e      	bhi.n	800885c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	88db      	ldrh	r3, [r3, #6]
 8008822:	2b02      	cmp	r3, #2
 8008824:	d004      	beq.n	8008830 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008826:	6839      	ldr	r1, [r7, #0]
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 f891 	bl	8008950 <USBD_CtlError>
        break;
 800882e:	e01a      	b.n	8008866 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800883c:	2b00      	cmp	r3, #0
 800883e:	d005      	beq.n	800884c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f043 0202 	orr.w	r2, r3, #2
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	330c      	adds	r3, #12
 8008850:	2202      	movs	r2, #2
 8008852:	4619      	mov	r1, r3
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f8e5 	bl	8008a24 <USBD_CtlSendData>
      break;
 800885a:	e004      	b.n	8008866 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f876 	bl	8008950 <USBD_CtlError>
      break;
 8008864:	bf00      	nop
  }
}
 8008866:	bf00      	nop
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b082      	sub	sp, #8
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	885b      	ldrh	r3, [r3, #2]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d106      	bne.n	800888e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f929 	bl	8008ae0 <USBD_CtlSendStatus>
  }
}
 800888e:	bf00      	nop
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a6:	3b01      	subs	r3, #1
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d80b      	bhi.n	80088c4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	885b      	ldrh	r3, [r3, #2]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d10c      	bne.n	80088ce <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f90f 	bl	8008ae0 <USBD_CtlSendStatus>
      }
      break;
 80088c2:	e004      	b.n	80088ce <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f842 	bl	8008950 <USBD_CtlError>
      break;
 80088cc:	e000      	b.n	80088d0 <USBD_ClrFeature+0x3a>
      break;
 80088ce:	bf00      	nop
  }
}
 80088d0:	bf00      	nop
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	781a      	ldrb	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	785a      	ldrb	r2, [r3, #1]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	3302      	adds	r3, #2
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	3303      	adds	r3, #3
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	b29b      	uxth	r3, r3
 8008902:	021b      	lsls	r3, r3, #8
 8008904:	b29b      	uxth	r3, r3
 8008906:	4413      	add	r3, r2
 8008908:	b29a      	uxth	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	3304      	adds	r3, #4
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	b29a      	uxth	r2, r3
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	3305      	adds	r3, #5
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	b29b      	uxth	r3, r3
 800891e:	021b      	lsls	r3, r3, #8
 8008920:	b29b      	uxth	r3, r3
 8008922:	4413      	add	r3, r2
 8008924:	b29a      	uxth	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	3306      	adds	r3, #6
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	b29a      	uxth	r2, r3
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	3307      	adds	r3, #7
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	b29b      	uxth	r3, r3
 800893a:	021b      	lsls	r3, r3, #8
 800893c:	b29b      	uxth	r3, r3
 800893e:	4413      	add	r3, r2
 8008940:	b29a      	uxth	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	80da      	strh	r2, [r3, #6]

}
 8008946:	bf00      	nop
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	bc80      	pop	{r7}
 800894e:	4770      	bx	lr

08008950 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800895a:	2180      	movs	r1, #128	; 0x80
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fc6f 	bl	8009240 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008962:	2100      	movs	r1, #0
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fc6b 	bl	8009240 <USBD_LL_StallEP>
}
 800896a:	bf00      	nop
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b086      	sub	sp, #24
 8008976:	af00      	add	r7, sp, #0
 8008978:	60f8      	str	r0, [r7, #12]
 800897a:	60b9      	str	r1, [r7, #8]
 800897c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800897e:	2300      	movs	r3, #0
 8008980:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d032      	beq.n	80089ee <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 f834 	bl	80089f6 <USBD_GetLen>
 800898e:	4603      	mov	r3, r0
 8008990:	3301      	adds	r3, #1
 8008992:	b29b      	uxth	r3, r3
 8008994:	005b      	lsls	r3, r3, #1
 8008996:	b29a      	uxth	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800899c:	7dfb      	ldrb	r3, [r7, #23]
 800899e:	1c5a      	adds	r2, r3, #1
 80089a0:	75fa      	strb	r2, [r7, #23]
 80089a2:	461a      	mov	r2, r3
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	4413      	add	r3, r2
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	7812      	ldrb	r2, [r2, #0]
 80089ac:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80089ae:	7dfb      	ldrb	r3, [r7, #23]
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	75fa      	strb	r2, [r7, #23]
 80089b4:	461a      	mov	r2, r3
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	4413      	add	r3, r2
 80089ba:	2203      	movs	r2, #3
 80089bc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80089be:	e012      	b.n	80089e6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	60fa      	str	r2, [r7, #12]
 80089c6:	7dfa      	ldrb	r2, [r7, #23]
 80089c8:	1c51      	adds	r1, r2, #1
 80089ca:	75f9      	strb	r1, [r7, #23]
 80089cc:	4611      	mov	r1, r2
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	440a      	add	r2, r1
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
 80089d8:	1c5a      	adds	r2, r3, #1
 80089da:	75fa      	strb	r2, [r7, #23]
 80089dc:	461a      	mov	r2, r3
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	4413      	add	r3, r2
 80089e2:	2200      	movs	r2, #0
 80089e4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e8      	bne.n	80089c0 <USBD_GetString+0x4e>
    }
  }
}
 80089ee:	bf00      	nop
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008a02:	e005      	b.n	8008a10 <USBD_GetLen+0x1a>
  {
    len++;
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	3301      	adds	r3, #1
 8008a08:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1f5      	bne.n	8008a04 <USBD_GetLen+0xe>
  }

  return len;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bc80      	pop	{r7}
 8008a22:	4770      	bx	lr

08008a24 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2202      	movs	r2, #2
 8008a36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a3a:	88fa      	ldrh	r2, [r7, #6]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008a40:	88fa      	ldrh	r2, [r7, #6]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a46:	88fb      	ldrh	r3, [r7, #6]
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 fc80 	bl	8009352 <USBD_LL_Transmit>

  return USBD_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	4613      	mov	r3, r2
 8008a68:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a6a:	88fb      	ldrh	r3, [r7, #6]
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	2100      	movs	r1, #0
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 fc6e 	bl	8009352 <USBD_LL_Transmit>

  return USBD_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2203      	movs	r2, #3
 8008a92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a96:	88fa      	ldrh	r2, [r7, #6]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008a9e:	88fa      	ldrh	r2, [r7, #6]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008aa6:	88fb      	ldrh	r3, [r7, #6]
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	2100      	movs	r1, #0
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f000 fc73 	bl	8009398 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008aca:	88fb      	ldrh	r3, [r7, #6]
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	2100      	movs	r1, #0
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f000 fc61 	bl	8009398 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2204      	movs	r2, #4
 8008aec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008af0:	2300      	movs	r3, #0
 8008af2:	2200      	movs	r2, #0
 8008af4:	2100      	movs	r1, #0
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fc2b 	bl	8009352 <USBD_LL_Transmit>

  return USBD_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b082      	sub	sp, #8
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2205      	movs	r2, #5
 8008b12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b16:	2300      	movs	r3, #0
 8008b18:	2200      	movs	r2, #0
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fc3b 	bl	8009398 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b30:	2200      	movs	r2, #0
 8008b32:	4912      	ldr	r1, [pc, #72]	; (8008b7c <MX_USB_DEVICE_Init+0x50>)
 8008b34:	4812      	ldr	r0, [pc, #72]	; (8008b80 <MX_USB_DEVICE_Init+0x54>)
 8008b36:	f7fe ff6c 	bl	8007a12 <USBD_Init>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d001      	beq.n	8008b44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b40:	f7f8 fcb8 	bl	80014b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008b44:	490f      	ldr	r1, [pc, #60]	; (8008b84 <MX_USB_DEVICE_Init+0x58>)
 8008b46:	480e      	ldr	r0, [pc, #56]	; (8008b80 <MX_USB_DEVICE_Init+0x54>)
 8008b48:	f7fe ff8e 	bl	8007a68 <USBD_RegisterClass>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b52:	f7f8 fcaf 	bl	80014b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b56:	490c      	ldr	r1, [pc, #48]	; (8008b88 <MX_USB_DEVICE_Init+0x5c>)
 8008b58:	4809      	ldr	r0, [pc, #36]	; (8008b80 <MX_USB_DEVICE_Init+0x54>)
 8008b5a:	f7fe febf 	bl	80078dc <USBD_CDC_RegisterInterface>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b64:	f7f8 fca6 	bl	80014b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b68:	4805      	ldr	r0, [pc, #20]	; (8008b80 <MX_USB_DEVICE_Init+0x54>)
 8008b6a:	f7fe ff96 	bl	8007a9a <USBD_Start>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d001      	beq.n	8008b78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b74:	f7f8 fc9e 	bl	80014b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b78:	bf00      	nop
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	2000012c 	.word	0x2000012c
 8008b80:	200007fc 	.word	0x200007fc
 8008b84:	20000018 	.word	0x20000018
 8008b88:	2000011c 	.word	0x2000011c

08008b8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b90:	2200      	movs	r2, #0
 8008b92:	4905      	ldr	r1, [pc, #20]	; (8008ba8 <CDC_Init_FS+0x1c>)
 8008b94:	4805      	ldr	r0, [pc, #20]	; (8008bac <CDC_Init_FS+0x20>)
 8008b96:	f7fe feb7 	bl	8007908 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b9a:	4905      	ldr	r1, [pc, #20]	; (8008bb0 <CDC_Init_FS+0x24>)
 8008b9c:	4803      	ldr	r0, [pc, #12]	; (8008bac <CDC_Init_FS+0x20>)
 8008b9e:	f7fe fecc 	bl	800793a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008ba2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	20000b24 	.word	0x20000b24
 8008bac:	200007fc 	.word	0x200007fc
 8008bb0:	20000ac0 	.word	0x20000ac0

08008bb4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008bb8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bc80      	pop	{r7}
 8008bc0:	4770      	bx	lr
	...

08008bc4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	4603      	mov	r3, r0
 8008bcc:	6039      	str	r1, [r7, #0]
 8008bce:	71fb      	strb	r3, [r7, #7]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008bd4:	79fb      	ldrb	r3, [r7, #7]
 8008bd6:	2b23      	cmp	r3, #35	; 0x23
 8008bd8:	d84a      	bhi.n	8008c70 <CDC_Control_FS+0xac>
 8008bda:	a201      	add	r2, pc, #4	; (adr r2, 8008be0 <CDC_Control_FS+0x1c>)
 8008bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be0:	08008c71 	.word	0x08008c71
 8008be4:	08008c71 	.word	0x08008c71
 8008be8:	08008c71 	.word	0x08008c71
 8008bec:	08008c71 	.word	0x08008c71
 8008bf0:	08008c71 	.word	0x08008c71
 8008bf4:	08008c71 	.word	0x08008c71
 8008bf8:	08008c71 	.word	0x08008c71
 8008bfc:	08008c71 	.word	0x08008c71
 8008c00:	08008c71 	.word	0x08008c71
 8008c04:	08008c71 	.word	0x08008c71
 8008c08:	08008c71 	.word	0x08008c71
 8008c0c:	08008c71 	.word	0x08008c71
 8008c10:	08008c71 	.word	0x08008c71
 8008c14:	08008c71 	.word	0x08008c71
 8008c18:	08008c71 	.word	0x08008c71
 8008c1c:	08008c71 	.word	0x08008c71
 8008c20:	08008c71 	.word	0x08008c71
 8008c24:	08008c71 	.word	0x08008c71
 8008c28:	08008c71 	.word	0x08008c71
 8008c2c:	08008c71 	.word	0x08008c71
 8008c30:	08008c71 	.word	0x08008c71
 8008c34:	08008c71 	.word	0x08008c71
 8008c38:	08008c71 	.word	0x08008c71
 8008c3c:	08008c71 	.word	0x08008c71
 8008c40:	08008c71 	.word	0x08008c71
 8008c44:	08008c71 	.word	0x08008c71
 8008c48:	08008c71 	.word	0x08008c71
 8008c4c:	08008c71 	.word	0x08008c71
 8008c50:	08008c71 	.word	0x08008c71
 8008c54:	08008c71 	.word	0x08008c71
 8008c58:	08008c71 	.word	0x08008c71
 8008c5c:	08008c71 	.word	0x08008c71
 8008c60:	08008c71 	.word	0x08008c71
 8008c64:	08008c71 	.word	0x08008c71
 8008c68:	08008c71 	.word	0x08008c71
 8008c6c:	08008c71 	.word	0x08008c71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c70:	bf00      	nop
  }

  return (USBD_OK);
 8008c72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bc80      	pop	{r7}
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop

08008c80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c8a:	6879      	ldr	r1, [r7, #4]
 8008c8c:	4811      	ldr	r0, [pc, #68]	; (8008cd4 <CDC_Receive_FS+0x54>)
 8008c8e:	f7fe fe54 	bl	800793a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c92:	4810      	ldr	r0, [pc, #64]	; (8008cd4 <CDC_Receive_FS+0x54>)
 8008c94:	f7fe fe93 	bl	80079be <USBD_CDC_ReceivePacket>
  extern uint8_t ReceivedData[100]; // Tablica przechowujaca odebrane dane
  extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych

  // Wyczyszczenie tablicy odebranych danych
  uint8_t iter;
  for(iter = 0; iter<100; ++iter){
 8008c98:	2300      	movs	r3, #0
 8008c9a:	73fb      	strb	r3, [r7, #15]
 8008c9c:	e006      	b.n	8008cac <CDC_Receive_FS+0x2c>
	  ReceivedData[iter] = 0;
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ca0:	4a0d      	ldr	r2, [pc, #52]	; (8008cd8 <CDC_Receive_FS+0x58>)
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	54d1      	strb	r1, [r2, r3]
  for(iter = 0; iter<100; ++iter){
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	73fb      	strb	r3, [r7, #15]
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	2b63      	cmp	r3, #99	; 0x63
 8008cb0:	d9f5      	bls.n	8008c9e <CDC_Receive_FS+0x1e>
  }

  strlcpy(ReceivedData, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	461a      	mov	r2, r3
 8008cba:	6879      	ldr	r1, [r7, #4]
 8008cbc:	4806      	ldr	r0, [pc, #24]	; (8008cd8 <CDC_Receive_FS+0x58>)
 8008cbe:	f001 fb5e 	bl	800a37e <strlcpy>
  ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 8008cc2:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <CDC_Receive_FS+0x5c>)
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 8008cc8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	200007fc 	.word	0x200007fc
 8008cd8:	20000660 	.word	0x20000660
 8008cdc:	20000368 	.word	0x20000368

08008ce0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008cf0:	4b0d      	ldr	r3, [pc, #52]	; (8008d28 <CDC_Transmit_FS+0x48>)
 8008cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e00b      	b.n	8008d1e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008d06:	887b      	ldrh	r3, [r7, #2]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	6879      	ldr	r1, [r7, #4]
 8008d0c:	4806      	ldr	r0, [pc, #24]	; (8008d28 <CDC_Transmit_FS+0x48>)
 8008d0e:	f7fe fdfb 	bl	8007908 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008d12:	4805      	ldr	r0, [pc, #20]	; (8008d28 <CDC_Transmit_FS+0x48>)
 8008d14:	f7fe fe24 	bl	8007960 <USBD_CDC_TransmitPacket>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	200007fc 	.word	0x200007fc

08008d2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	6039      	str	r1, [r7, #0]
 8008d36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	2212      	movs	r2, #18
 8008d3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d3e:	4b03      	ldr	r3, [pc, #12]	; (8008d4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bc80      	pop	{r7}
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	20000148 	.word	0x20000148

08008d50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	4603      	mov	r3, r0
 8008d58:	6039      	str	r1, [r7, #0]
 8008d5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	2204      	movs	r2, #4
 8008d60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d62:	4b03      	ldr	r3, [pc, #12]	; (8008d70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bc80      	pop	{r7}
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	2000015c 	.word	0x2000015c

08008d74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	6039      	str	r1, [r7, #0]
 8008d7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d80:	79fb      	ldrb	r3, [r7, #7]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d105      	bne.n	8008d92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	4907      	ldr	r1, [pc, #28]	; (8008da8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d8a:	4808      	ldr	r0, [pc, #32]	; (8008dac <USBD_FS_ProductStrDescriptor+0x38>)
 8008d8c:	f7ff fdf1 	bl	8008972 <USBD_GetString>
 8008d90:	e004      	b.n	8008d9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	4904      	ldr	r1, [pc, #16]	; (8008da8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d96:	4805      	ldr	r0, [pc, #20]	; (8008dac <USBD_FS_ProductStrDescriptor+0x38>)
 8008d98:	f7ff fdeb 	bl	8008972 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d9c:	4b02      	ldr	r3, [pc, #8]	; (8008da8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	20000b88 	.word	0x20000b88
 8008dac:	0800e2d4 	.word	0x0800e2d4

08008db0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	4603      	mov	r3, r0
 8008db8:	6039      	str	r1, [r7, #0]
 8008dba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	4904      	ldr	r1, [pc, #16]	; (8008dd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008dc0:	4804      	ldr	r0, [pc, #16]	; (8008dd4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008dc2:	f7ff fdd6 	bl	8008972 <USBD_GetString>
  return USBD_StrDesc;
 8008dc6:	4b02      	ldr	r3, [pc, #8]	; (8008dd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	20000b88 	.word	0x20000b88
 8008dd4:	0800e2ec 	.word	0x0800e2ec

08008dd8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	6039      	str	r1, [r7, #0]
 8008de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	221a      	movs	r2, #26
 8008de8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008dea:	f000 f843 	bl	8008e74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008dee:	4b02      	ldr	r3, [pc, #8]	; (8008df8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	20000160 	.word	0x20000160

08008dfc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	4603      	mov	r3, r0
 8008e04:	6039      	str	r1, [r7, #0]
 8008e06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e08:	79fb      	ldrb	r3, [r7, #7]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d105      	bne.n	8008e1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	4907      	ldr	r1, [pc, #28]	; (8008e30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e12:	4808      	ldr	r0, [pc, #32]	; (8008e34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e14:	f7ff fdad 	bl	8008972 <USBD_GetString>
 8008e18:	e004      	b.n	8008e24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	4904      	ldr	r1, [pc, #16]	; (8008e30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e1e:	4805      	ldr	r0, [pc, #20]	; (8008e34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e20:	f7ff fda7 	bl	8008972 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e24:	4b02      	ldr	r3, [pc, #8]	; (8008e30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20000b88 	.word	0x20000b88
 8008e34:	0800e300 	.word	0x0800e300

08008e38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	6039      	str	r1, [r7, #0]
 8008e42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e44:	79fb      	ldrb	r3, [r7, #7]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d105      	bne.n	8008e56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	4907      	ldr	r1, [pc, #28]	; (8008e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e4e:	4808      	ldr	r0, [pc, #32]	; (8008e70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e50:	f7ff fd8f 	bl	8008972 <USBD_GetString>
 8008e54:	e004      	b.n	8008e60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	4904      	ldr	r1, [pc, #16]	; (8008e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e5a:	4805      	ldr	r0, [pc, #20]	; (8008e70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e5c:	f7ff fd89 	bl	8008972 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e60:	4b02      	ldr	r3, [pc, #8]	; (8008e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20000b88 	.word	0x20000b88
 8008e70:	0800e30c 	.word	0x0800e30c

08008e74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e7a:	4b0f      	ldr	r3, [pc, #60]	; (8008eb8 <Get_SerialNum+0x44>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e80:	4b0e      	ldr	r3, [pc, #56]	; (8008ebc <Get_SerialNum+0x48>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e86:	4b0e      	ldr	r3, [pc, #56]	; (8008ec0 <Get_SerialNum+0x4c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4413      	add	r3, r2
 8008e92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d009      	beq.n	8008eae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e9a:	2208      	movs	r2, #8
 8008e9c:	4909      	ldr	r1, [pc, #36]	; (8008ec4 <Get_SerialNum+0x50>)
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f000 f814 	bl	8008ecc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ea4:	2204      	movs	r2, #4
 8008ea6:	4908      	ldr	r1, [pc, #32]	; (8008ec8 <Get_SerialNum+0x54>)
 8008ea8:	68b8      	ldr	r0, [r7, #8]
 8008eaa:	f000 f80f 	bl	8008ecc <IntToUnicode>
  }
}
 8008eae:	bf00      	nop
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	1ffff7e8 	.word	0x1ffff7e8
 8008ebc:	1ffff7ec 	.word	0x1ffff7ec
 8008ec0:	1ffff7f0 	.word	0x1ffff7f0
 8008ec4:	20000162 	.word	0x20000162
 8008ec8:	20000172 	.word	0x20000172

08008ecc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b087      	sub	sp, #28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008ede:	2300      	movs	r3, #0
 8008ee0:	75fb      	strb	r3, [r7, #23]
 8008ee2:	e027      	b.n	8008f34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	0f1b      	lsrs	r3, r3, #28
 8008ee8:	2b09      	cmp	r3, #9
 8008eea:	d80b      	bhi.n	8008f04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	0f1b      	lsrs	r3, r3, #28
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	7dfb      	ldrb	r3, [r7, #23]
 8008ef4:	005b      	lsls	r3, r3, #1
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	440b      	add	r3, r1
 8008efc:	3230      	adds	r2, #48	; 0x30
 8008efe:	b2d2      	uxtb	r2, r2
 8008f00:	701a      	strb	r2, [r3, #0]
 8008f02:	e00a      	b.n	8008f1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	0f1b      	lsrs	r3, r3, #28
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	4619      	mov	r1, r3
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	440b      	add	r3, r1
 8008f14:	3237      	adds	r2, #55	; 0x37
 8008f16:	b2d2      	uxtb	r2, r2
 8008f18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	011b      	lsls	r3, r3, #4
 8008f1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f20:	7dfb      	ldrb	r3, [r7, #23]
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	3301      	adds	r3, #1
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	4413      	add	r3, r2
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
 8008f30:	3301      	adds	r3, #1
 8008f32:	75fb      	strb	r3, [r7, #23]
 8008f34:	7dfa      	ldrb	r2, [r7, #23]
 8008f36:	79fb      	ldrb	r3, [r7, #7]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d3d3      	bcc.n	8008ee4 <IntToUnicode+0x18>
  }
}
 8008f3c:	bf00      	nop
 8008f3e:	371c      	adds	r7, #28
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bc80      	pop	{r7}
 8008f44:	4770      	bx	lr
	...

08008f48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a0d      	ldr	r2, [pc, #52]	; (8008f8c <HAL_PCD_MspInit+0x44>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d113      	bne.n	8008f82 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008f5a:	4b0d      	ldr	r3, [pc, #52]	; (8008f90 <HAL_PCD_MspInit+0x48>)
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	4a0c      	ldr	r2, [pc, #48]	; (8008f90 <HAL_PCD_MspInit+0x48>)
 8008f60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f64:	61d3      	str	r3, [r2, #28]
 8008f66:	4b0a      	ldr	r3, [pc, #40]	; (8008f90 <HAL_PCD_MspInit+0x48>)
 8008f68:	69db      	ldr	r3, [r3, #28]
 8008f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f6e:	60fb      	str	r3, [r7, #12]
 8008f70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008f72:	2200      	movs	r2, #0
 8008f74:	2100      	movs	r1, #0
 8008f76:	2014      	movs	r0, #20
 8008f78:	f7f8 fff3 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008f7c:	2014      	movs	r0, #20
 8008f7e:	f7f9 f80c 	bl	8001f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008f82:	bf00      	nop
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	40005c00 	.word	0x40005c00
 8008f90:	40021000 	.word	0x40021000

08008f94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4610      	mov	r0, r2
 8008fac:	f7fe fdbd 	bl	8007b2a <USBD_LL_SetupStage>
}
 8008fb0:	bf00      	nop
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008fca:	78fa      	ldrb	r2, [r7, #3]
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	00db      	lsls	r3, r3, #3
 8008fd6:	440b      	add	r3, r1
 8008fd8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	78fb      	ldrb	r3, [r7, #3]
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	f7fe fded 	bl	8007bc0 <USBD_LL_DataOutStage>
}
 8008fe6:	bf00      	nop
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b082      	sub	sp, #8
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009000:	78fa      	ldrb	r2, [r7, #3]
 8009002:	6879      	ldr	r1, [r7, #4]
 8009004:	4613      	mov	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4413      	add	r3, r2
 800900a:	00db      	lsls	r3, r3, #3
 800900c:	440b      	add	r3, r1
 800900e:	333c      	adds	r3, #60	; 0x3c
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	78fb      	ldrb	r3, [r7, #3]
 8009014:	4619      	mov	r1, r3
 8009016:	f7fe fe44 	bl	8007ca2 <USBD_LL_DataInStage>
}
 800901a:	bf00      	nop
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b082      	sub	sp, #8
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009030:	4618      	mov	r0, r3
 8009032:	f7fe ff54 	bl	8007ede <USBD_LL_SOF>
}
 8009036:	bf00      	nop
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800903e:	b580      	push	{r7, lr}
 8009040:	b084      	sub	sp, #16
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009046:	2301      	movs	r3, #1
 8009048:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	2b02      	cmp	r3, #2
 8009050:	d001      	beq.n	8009056 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009052:	f7f8 fa2f 	bl	80014b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800905c:	7bfa      	ldrb	r2, [r7, #15]
 800905e:	4611      	mov	r1, r2
 8009060:	4618      	mov	r0, r3
 8009062:	f7fe ff04 	bl	8007e6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800906c:	4618      	mov	r0, r3
 800906e:	f7fe febd 	bl	8007dec <USBD_LL_Reset>
}
 8009072:	bf00      	nop
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
	...

0800907c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800908a:	4618      	mov	r0, r3
 800908c:	f7fe fefe 	bl	8007e8c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d005      	beq.n	80090a4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009098:	4b04      	ldr	r3, [pc, #16]	; (80090ac <HAL_PCD_SuspendCallback+0x30>)
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	4a03      	ldr	r2, [pc, #12]	; (80090ac <HAL_PCD_SuspendCallback+0x30>)
 800909e:	f043 0306 	orr.w	r3, r3, #6
 80090a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090a4:	bf00      	nop
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	e000ed00 	.word	0xe000ed00

080090b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fe fef8 	bl	8007eb4 <USBD_LL_Resume>
}
 80090c4:	bf00      	nop
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80090d4:	4a28      	ldr	r2, [pc, #160]	; (8009178 <USBD_LL_Init+0xac>)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a26      	ldr	r2, [pc, #152]	; (8009178 <USBD_LL_Init+0xac>)
 80090e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80090e4:	4b24      	ldr	r3, [pc, #144]	; (8009178 <USBD_LL_Init+0xac>)
 80090e6:	4a25      	ldr	r2, [pc, #148]	; (800917c <USBD_LL_Init+0xb0>)
 80090e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80090ea:	4b23      	ldr	r3, [pc, #140]	; (8009178 <USBD_LL_Init+0xac>)
 80090ec:	2208      	movs	r2, #8
 80090ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80090f0:	4b21      	ldr	r3, [pc, #132]	; (8009178 <USBD_LL_Init+0xac>)
 80090f2:	2202      	movs	r2, #2
 80090f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80090f6:	4b20      	ldr	r3, [pc, #128]	; (8009178 <USBD_LL_Init+0xac>)
 80090f8:	2200      	movs	r2, #0
 80090fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80090fc:	4b1e      	ldr	r3, [pc, #120]	; (8009178 <USBD_LL_Init+0xac>)
 80090fe:	2200      	movs	r2, #0
 8009100:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009102:	4b1d      	ldr	r3, [pc, #116]	; (8009178 <USBD_LL_Init+0xac>)
 8009104:	2200      	movs	r2, #0
 8009106:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009108:	481b      	ldr	r0, [pc, #108]	; (8009178 <USBD_LL_Init+0xac>)
 800910a:	f7f9 f8d3 	bl	80022b4 <HAL_PCD_Init>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009114:	f7f8 f9ce 	bl	80014b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800911e:	2318      	movs	r3, #24
 8009120:	2200      	movs	r2, #0
 8009122:	2100      	movs	r1, #0
 8009124:	f7fa fc07 	bl	8003936 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800912e:	2358      	movs	r3, #88	; 0x58
 8009130:	2200      	movs	r2, #0
 8009132:	2180      	movs	r1, #128	; 0x80
 8009134:	f7fa fbff 	bl	8003936 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800913e:	23c0      	movs	r3, #192	; 0xc0
 8009140:	2200      	movs	r2, #0
 8009142:	2181      	movs	r1, #129	; 0x81
 8009144:	f7fa fbf7 	bl	8003936 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800914e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009152:	2200      	movs	r2, #0
 8009154:	2101      	movs	r1, #1
 8009156:	f7fa fbee 	bl	8003936 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009160:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009164:	2200      	movs	r2, #0
 8009166:	2182      	movs	r1, #130	; 0x82
 8009168:	f7fa fbe5 	bl	8003936 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	20000d88 	.word	0x20000d88
 800917c:	40005c00 	.word	0x40005c00

08009180 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009188:	2300      	movs	r3, #0
 800918a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800918c:	2300      	movs	r3, #0
 800918e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009196:	4618      	mov	r0, r3
 8009198:	f7f9 f997 	bl	80024ca <HAL_PCD_Start>
 800919c:	4603      	mov	r3, r0
 800919e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 f94e 	bl	8009444 <USBD_Get_USB_Status>
 80091a8:	4603      	mov	r3, r0
 80091aa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80091ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	4608      	mov	r0, r1
 80091c0:	4611      	mov	r1, r2
 80091c2:	461a      	mov	r2, r3
 80091c4:	4603      	mov	r3, r0
 80091c6:	70fb      	strb	r3, [r7, #3]
 80091c8:	460b      	mov	r3, r1
 80091ca:	70bb      	strb	r3, [r7, #2]
 80091cc:	4613      	mov	r3, r2
 80091ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091de:	78bb      	ldrb	r3, [r7, #2]
 80091e0:	883a      	ldrh	r2, [r7, #0]
 80091e2:	78f9      	ldrb	r1, [r7, #3]
 80091e4:	f7f9 fb11 	bl	800280a <HAL_PCD_EP_Open>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 f928 	bl	8009444 <USBD_Get_USB_Status>
 80091f4:	4603      	mov	r3, r0
 80091f6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80091f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b084      	sub	sp, #16
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	460b      	mov	r3, r1
 800920c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800921c:	78fa      	ldrb	r2, [r7, #3]
 800921e:	4611      	mov	r1, r2
 8009220:	4618      	mov	r0, r3
 8009222:	f7f9 fb58 	bl	80028d6 <HAL_PCD_EP_Close>
 8009226:	4603      	mov	r3, r0
 8009228:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800922a:	7bfb      	ldrb	r3, [r7, #15]
 800922c:	4618      	mov	r0, r3
 800922e:	f000 f909 	bl	8009444 <USBD_Get_USB_Status>
 8009232:	4603      	mov	r3, r0
 8009234:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8009236:	7bbb      	ldrb	r3, [r7, #14]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800925a:	78fa      	ldrb	r2, [r7, #3]
 800925c:	4611      	mov	r1, r2
 800925e:	4618      	mov	r0, r3
 8009260:	f7f9 fc18 	bl	8002a94 <HAL_PCD_EP_SetStall>
 8009264:	4603      	mov	r3, r0
 8009266:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	4618      	mov	r0, r3
 800926c:	f000 f8ea 	bl	8009444 <USBD_Get_USB_Status>
 8009270:	4603      	mov	r3, r0
 8009272:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009274:	7bbb      	ldrb	r3, [r7, #14]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	460b      	mov	r3, r1
 8009288:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800928a:	2300      	movs	r3, #0
 800928c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009298:	78fa      	ldrb	r2, [r7, #3]
 800929a:	4611      	mov	r1, r2
 800929c:	4618      	mov	r0, r3
 800929e:	f7f9 fc59 	bl	8002b54 <HAL_PCD_EP_ClrStall>
 80092a2:	4603      	mov	r3, r0
 80092a4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80092a6:	7bfb      	ldrb	r3, [r7, #15]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f000 f8cb 	bl	8009444 <USBD_Get_USB_Status>
 80092ae:	4603      	mov	r3, r0
 80092b0:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80092b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092ce:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80092d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	da0c      	bge.n	80092f2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80092d8:	78fb      	ldrb	r3, [r7, #3]
 80092da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092de:	68f9      	ldr	r1, [r7, #12]
 80092e0:	1c5a      	adds	r2, r3, #1
 80092e2:	4613      	mov	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4413      	add	r3, r2
 80092e8:	00db      	lsls	r3, r3, #3
 80092ea:	440b      	add	r3, r1
 80092ec:	3302      	adds	r3, #2
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	e00b      	b.n	800930a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80092f2:	78fb      	ldrb	r3, [r7, #3]
 80092f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092f8:	68f9      	ldr	r1, [r7, #12]
 80092fa:	4613      	mov	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	00db      	lsls	r3, r3, #3
 8009302:	440b      	add	r3, r1
 8009304:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009308:	781b      	ldrb	r3, [r3, #0]
  }
}
 800930a:	4618      	mov	r0, r3
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	bc80      	pop	{r7}
 8009312:	4770      	bx	lr

08009314 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009324:	2300      	movs	r3, #0
 8009326:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800932e:	78fa      	ldrb	r2, [r7, #3]
 8009330:	4611      	mov	r1, r2
 8009332:	4618      	mov	r0, r3
 8009334:	f7f9 fa44 	bl	80027c0 <HAL_PCD_SetAddress>
 8009338:	4603      	mov	r3, r0
 800933a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800933c:	7bfb      	ldrb	r3, [r7, #15]
 800933e:	4618      	mov	r0, r3
 8009340:	f000 f880 	bl	8009444 <USBD_Get_USB_Status>
 8009344:	4603      	mov	r3, r0
 8009346:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009348:	7bbb      	ldrb	r3, [r7, #14]
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b086      	sub	sp, #24
 8009356:	af00      	add	r7, sp, #0
 8009358:	60f8      	str	r0, [r7, #12]
 800935a:	607a      	str	r2, [r7, #4]
 800935c:	461a      	mov	r2, r3
 800935e:	460b      	mov	r3, r1
 8009360:	72fb      	strb	r3, [r7, #11]
 8009362:	4613      	mov	r3, r2
 8009364:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009374:	893b      	ldrh	r3, [r7, #8]
 8009376:	7af9      	ldrb	r1, [r7, #11]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	f7f9 fb48 	bl	8002a0e <HAL_PCD_EP_Transmit>
 800937e:	4603      	mov	r3, r0
 8009380:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009382:	7dfb      	ldrb	r3, [r7, #23]
 8009384:	4618      	mov	r0, r3
 8009386:	f000 f85d 	bl	8009444 <USBD_Get_USB_Status>
 800938a:	4603      	mov	r3, r0
 800938c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800938e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	607a      	str	r2, [r7, #4]
 80093a2:	461a      	mov	r2, r3
 80093a4:	460b      	mov	r3, r1
 80093a6:	72fb      	strb	r3, [r7, #11]
 80093a8:	4613      	mov	r3, r2
 80093aa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093b0:	2300      	movs	r3, #0
 80093b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093ba:	893b      	ldrh	r3, [r7, #8]
 80093bc:	7af9      	ldrb	r1, [r7, #11]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	f7f9 fad1 	bl	8002966 <HAL_PCD_EP_Receive>
 80093c4:	4603      	mov	r3, r0
 80093c6:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80093c8:	7dfb      	ldrb	r3, [r7, #23]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 f83a 	bl	8009444 <USBD_Get_USB_Status>
 80093d0:	4603      	mov	r3, r0
 80093d2:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80093d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b082      	sub	sp, #8
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	460b      	mov	r3, r1
 80093e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093f0:	78fa      	ldrb	r2, [r7, #3]
 80093f2:	4611      	mov	r1, r2
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7f9 faf3 	bl	80029e0 <HAL_PCD_EP_GetRxCount>
 80093fa:	4603      	mov	r3, r0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800940c:	4b02      	ldr	r3, [pc, #8]	; (8009418 <USBD_static_malloc+0x14>)
}
 800940e:	4618      	mov	r0, r3
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	bc80      	pop	{r7}
 8009416:	4770      	bx	lr
 8009418:	20000374 	.word	0x20000374

0800941c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]

}
 8009424:	bf00      	nop
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	bc80      	pop	{r7}
 800942c:	4770      	bx	lr

0800942e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800942e:	b480      	push	{r7}
 8009430:	b083      	sub	sp, #12
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	460b      	mov	r3, r1
 8009438:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800943a:	bf00      	nop
 800943c:	370c      	adds	r7, #12
 800943e:	46bd      	mov	sp, r7
 8009440:	bc80      	pop	{r7}
 8009442:	4770      	bx	lr

08009444 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	4603      	mov	r3, r0
 800944c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009452:	79fb      	ldrb	r3, [r7, #7]
 8009454:	2b03      	cmp	r3, #3
 8009456:	d817      	bhi.n	8009488 <USBD_Get_USB_Status+0x44>
 8009458:	a201      	add	r2, pc, #4	; (adr r2, 8009460 <USBD_Get_USB_Status+0x1c>)
 800945a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945e:	bf00      	nop
 8009460:	08009471 	.word	0x08009471
 8009464:	08009477 	.word	0x08009477
 8009468:	0800947d 	.word	0x0800947d
 800946c:	08009483 	.word	0x08009483
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	73fb      	strb	r3, [r7, #15]
    break;
 8009474:	e00b      	b.n	800948e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009476:	2302      	movs	r3, #2
 8009478:	73fb      	strb	r3, [r7, #15]
    break;
 800947a:	e008      	b.n	800948e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800947c:	2301      	movs	r3, #1
 800947e:	73fb      	strb	r3, [r7, #15]
    break;
 8009480:	e005      	b.n	800948e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009482:	2302      	movs	r3, #2
 8009484:	73fb      	strb	r3, [r7, #15]
    break;
 8009486:	e002      	b.n	800948e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009488:	2302      	movs	r3, #2
 800948a:	73fb      	strb	r3, [r7, #15]
    break;
 800948c:	bf00      	nop
  }
  return usb_status;
 800948e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	bc80      	pop	{r7}
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop

0800949c <__errno>:
 800949c:	4b01      	ldr	r3, [pc, #4]	; (80094a4 <__errno+0x8>)
 800949e:	6818      	ldr	r0, [r3, #0]
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	2000017c 	.word	0x2000017c

080094a8 <__libc_init_array>:
 80094a8:	b570      	push	{r4, r5, r6, lr}
 80094aa:	2500      	movs	r5, #0
 80094ac:	4e0c      	ldr	r6, [pc, #48]	; (80094e0 <__libc_init_array+0x38>)
 80094ae:	4c0d      	ldr	r4, [pc, #52]	; (80094e4 <__libc_init_array+0x3c>)
 80094b0:	1ba4      	subs	r4, r4, r6
 80094b2:	10a4      	asrs	r4, r4, #2
 80094b4:	42a5      	cmp	r5, r4
 80094b6:	d109      	bne.n	80094cc <__libc_init_array+0x24>
 80094b8:	f004 feae 	bl	800e218 <_init>
 80094bc:	2500      	movs	r5, #0
 80094be:	4e0a      	ldr	r6, [pc, #40]	; (80094e8 <__libc_init_array+0x40>)
 80094c0:	4c0a      	ldr	r4, [pc, #40]	; (80094ec <__libc_init_array+0x44>)
 80094c2:	1ba4      	subs	r4, r4, r6
 80094c4:	10a4      	asrs	r4, r4, #2
 80094c6:	42a5      	cmp	r5, r4
 80094c8:	d105      	bne.n	80094d6 <__libc_init_array+0x2e>
 80094ca:	bd70      	pop	{r4, r5, r6, pc}
 80094cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094d0:	4798      	blx	r3
 80094d2:	3501      	adds	r5, #1
 80094d4:	e7ee      	b.n	80094b4 <__libc_init_array+0xc>
 80094d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094da:	4798      	blx	r3
 80094dc:	3501      	adds	r5, #1
 80094de:	e7f2      	b.n	80094c6 <__libc_init_array+0x1e>
 80094e0:	0800e674 	.word	0x0800e674
 80094e4:	0800e674 	.word	0x0800e674
 80094e8:	0800e674 	.word	0x0800e674
 80094ec:	0800e678 	.word	0x0800e678

080094f0 <memset>:
 80094f0:	4603      	mov	r3, r0
 80094f2:	4402      	add	r2, r0
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d100      	bne.n	80094fa <memset+0xa>
 80094f8:	4770      	bx	lr
 80094fa:	f803 1b01 	strb.w	r1, [r3], #1
 80094fe:	e7f9      	b.n	80094f4 <memset+0x4>

08009500 <__cvt>:
 8009500:	2b00      	cmp	r3, #0
 8009502:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009506:	461e      	mov	r6, r3
 8009508:	bfbb      	ittet	lt
 800950a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800950e:	461e      	movlt	r6, r3
 8009510:	2300      	movge	r3, #0
 8009512:	232d      	movlt	r3, #45	; 0x2d
 8009514:	b088      	sub	sp, #32
 8009516:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009518:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800951c:	f027 0720 	bic.w	r7, r7, #32
 8009520:	2f46      	cmp	r7, #70	; 0x46
 8009522:	4614      	mov	r4, r2
 8009524:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009526:	700b      	strb	r3, [r1, #0]
 8009528:	d004      	beq.n	8009534 <__cvt+0x34>
 800952a:	2f45      	cmp	r7, #69	; 0x45
 800952c:	d100      	bne.n	8009530 <__cvt+0x30>
 800952e:	3501      	adds	r5, #1
 8009530:	2302      	movs	r3, #2
 8009532:	e000      	b.n	8009536 <__cvt+0x36>
 8009534:	2303      	movs	r3, #3
 8009536:	aa07      	add	r2, sp, #28
 8009538:	9204      	str	r2, [sp, #16]
 800953a:	aa06      	add	r2, sp, #24
 800953c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009540:	e9cd 3500 	strd	r3, r5, [sp]
 8009544:	4622      	mov	r2, r4
 8009546:	4633      	mov	r3, r6
 8009548:	f001 ff62 	bl	800b410 <_dtoa_r>
 800954c:	2f47      	cmp	r7, #71	; 0x47
 800954e:	4680      	mov	r8, r0
 8009550:	d102      	bne.n	8009558 <__cvt+0x58>
 8009552:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009554:	07db      	lsls	r3, r3, #31
 8009556:	d526      	bpl.n	80095a6 <__cvt+0xa6>
 8009558:	2f46      	cmp	r7, #70	; 0x46
 800955a:	eb08 0905 	add.w	r9, r8, r5
 800955e:	d111      	bne.n	8009584 <__cvt+0x84>
 8009560:	f898 3000 	ldrb.w	r3, [r8]
 8009564:	2b30      	cmp	r3, #48	; 0x30
 8009566:	d10a      	bne.n	800957e <__cvt+0x7e>
 8009568:	2200      	movs	r2, #0
 800956a:	2300      	movs	r3, #0
 800956c:	4620      	mov	r0, r4
 800956e:	4631      	mov	r1, r6
 8009570:	f7f7 fa1a 	bl	80009a8 <__aeabi_dcmpeq>
 8009574:	b918      	cbnz	r0, 800957e <__cvt+0x7e>
 8009576:	f1c5 0501 	rsb	r5, r5, #1
 800957a:	f8ca 5000 	str.w	r5, [sl]
 800957e:	f8da 3000 	ldr.w	r3, [sl]
 8009582:	4499      	add	r9, r3
 8009584:	2200      	movs	r2, #0
 8009586:	2300      	movs	r3, #0
 8009588:	4620      	mov	r0, r4
 800958a:	4631      	mov	r1, r6
 800958c:	f7f7 fa0c 	bl	80009a8 <__aeabi_dcmpeq>
 8009590:	b938      	cbnz	r0, 80095a2 <__cvt+0xa2>
 8009592:	2230      	movs	r2, #48	; 0x30
 8009594:	9b07      	ldr	r3, [sp, #28]
 8009596:	454b      	cmp	r3, r9
 8009598:	d205      	bcs.n	80095a6 <__cvt+0xa6>
 800959a:	1c59      	adds	r1, r3, #1
 800959c:	9107      	str	r1, [sp, #28]
 800959e:	701a      	strb	r2, [r3, #0]
 80095a0:	e7f8      	b.n	8009594 <__cvt+0x94>
 80095a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80095a6:	4640      	mov	r0, r8
 80095a8:	9b07      	ldr	r3, [sp, #28]
 80095aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80095ac:	eba3 0308 	sub.w	r3, r3, r8
 80095b0:	6013      	str	r3, [r2, #0]
 80095b2:	b008      	add	sp, #32
 80095b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080095b8 <__exponent>:
 80095b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095ba:	2900      	cmp	r1, #0
 80095bc:	bfb4      	ite	lt
 80095be:	232d      	movlt	r3, #45	; 0x2d
 80095c0:	232b      	movge	r3, #43	; 0x2b
 80095c2:	4604      	mov	r4, r0
 80095c4:	bfb8      	it	lt
 80095c6:	4249      	neglt	r1, r1
 80095c8:	2909      	cmp	r1, #9
 80095ca:	f804 2b02 	strb.w	r2, [r4], #2
 80095ce:	7043      	strb	r3, [r0, #1]
 80095d0:	dd21      	ble.n	8009616 <__exponent+0x5e>
 80095d2:	f10d 0307 	add.w	r3, sp, #7
 80095d6:	461f      	mov	r7, r3
 80095d8:	260a      	movs	r6, #10
 80095da:	fb91 f5f6 	sdiv	r5, r1, r6
 80095de:	fb06 1115 	mls	r1, r6, r5, r1
 80095e2:	2d09      	cmp	r5, #9
 80095e4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80095e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80095ec:	f103 32ff 	add.w	r2, r3, #4294967295
 80095f0:	4629      	mov	r1, r5
 80095f2:	dc09      	bgt.n	8009608 <__exponent+0x50>
 80095f4:	3130      	adds	r1, #48	; 0x30
 80095f6:	3b02      	subs	r3, #2
 80095f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80095fc:	42bb      	cmp	r3, r7
 80095fe:	4622      	mov	r2, r4
 8009600:	d304      	bcc.n	800960c <__exponent+0x54>
 8009602:	1a10      	subs	r0, r2, r0
 8009604:	b003      	add	sp, #12
 8009606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009608:	4613      	mov	r3, r2
 800960a:	e7e6      	b.n	80095da <__exponent+0x22>
 800960c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009610:	f804 2b01 	strb.w	r2, [r4], #1
 8009614:	e7f2      	b.n	80095fc <__exponent+0x44>
 8009616:	2330      	movs	r3, #48	; 0x30
 8009618:	4419      	add	r1, r3
 800961a:	7083      	strb	r3, [r0, #2]
 800961c:	1d02      	adds	r2, r0, #4
 800961e:	70c1      	strb	r1, [r0, #3]
 8009620:	e7ef      	b.n	8009602 <__exponent+0x4a>
	...

08009624 <_printf_float>:
 8009624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009628:	b091      	sub	sp, #68	; 0x44
 800962a:	460c      	mov	r4, r1
 800962c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800962e:	4693      	mov	fp, r2
 8009630:	461e      	mov	r6, r3
 8009632:	4605      	mov	r5, r0
 8009634:	f003 f956 	bl	800c8e4 <_localeconv_r>
 8009638:	6803      	ldr	r3, [r0, #0]
 800963a:	4618      	mov	r0, r3
 800963c:	9309      	str	r3, [sp, #36]	; 0x24
 800963e:	f7f6 fd87 	bl	8000150 <strlen>
 8009642:	2300      	movs	r3, #0
 8009644:	930e      	str	r3, [sp, #56]	; 0x38
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	900a      	str	r0, [sp, #40]	; 0x28
 800964a:	3307      	adds	r3, #7
 800964c:	f023 0307 	bic.w	r3, r3, #7
 8009650:	f103 0208 	add.w	r2, r3, #8
 8009654:	f894 8018 	ldrb.w	r8, [r4, #24]
 8009658:	f8d4 a000 	ldr.w	sl, [r4]
 800965c:	603a      	str	r2, [r7, #0]
 800965e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009662:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009666:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800966a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800966e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009670:	f04f 32ff 	mov.w	r2, #4294967295
 8009674:	4ba6      	ldr	r3, [pc, #664]	; (8009910 <_printf_float+0x2ec>)
 8009676:	4638      	mov	r0, r7
 8009678:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800967a:	f7f7 f9c7 	bl	8000a0c <__aeabi_dcmpun>
 800967e:	bb68      	cbnz	r0, 80096dc <_printf_float+0xb8>
 8009680:	f04f 32ff 	mov.w	r2, #4294967295
 8009684:	4ba2      	ldr	r3, [pc, #648]	; (8009910 <_printf_float+0x2ec>)
 8009686:	4638      	mov	r0, r7
 8009688:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800968a:	f7f7 f9a1 	bl	80009d0 <__aeabi_dcmple>
 800968e:	bb28      	cbnz	r0, 80096dc <_printf_float+0xb8>
 8009690:	2200      	movs	r2, #0
 8009692:	2300      	movs	r3, #0
 8009694:	4638      	mov	r0, r7
 8009696:	4649      	mov	r1, r9
 8009698:	f7f7 f990 	bl	80009bc <__aeabi_dcmplt>
 800969c:	b110      	cbz	r0, 80096a4 <_printf_float+0x80>
 800969e:	232d      	movs	r3, #45	; 0x2d
 80096a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096a4:	4f9b      	ldr	r7, [pc, #620]	; (8009914 <_printf_float+0x2f0>)
 80096a6:	4b9c      	ldr	r3, [pc, #624]	; (8009918 <_printf_float+0x2f4>)
 80096a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80096ac:	bf98      	it	ls
 80096ae:	461f      	movls	r7, r3
 80096b0:	2303      	movs	r3, #3
 80096b2:	f04f 0900 	mov.w	r9, #0
 80096b6:	6123      	str	r3, [r4, #16]
 80096b8:	f02a 0304 	bic.w	r3, sl, #4
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	9600      	str	r6, [sp, #0]
 80096c0:	465b      	mov	r3, fp
 80096c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80096c4:	4621      	mov	r1, r4
 80096c6:	4628      	mov	r0, r5
 80096c8:	f000 f9e2 	bl	8009a90 <_printf_common>
 80096cc:	3001      	adds	r0, #1
 80096ce:	f040 8090 	bne.w	80097f2 <_printf_float+0x1ce>
 80096d2:	f04f 30ff 	mov.w	r0, #4294967295
 80096d6:	b011      	add	sp, #68	; 0x44
 80096d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096dc:	463a      	mov	r2, r7
 80096de:	464b      	mov	r3, r9
 80096e0:	4638      	mov	r0, r7
 80096e2:	4649      	mov	r1, r9
 80096e4:	f7f7 f992 	bl	8000a0c <__aeabi_dcmpun>
 80096e8:	b110      	cbz	r0, 80096f0 <_printf_float+0xcc>
 80096ea:	4f8c      	ldr	r7, [pc, #560]	; (800991c <_printf_float+0x2f8>)
 80096ec:	4b8c      	ldr	r3, [pc, #560]	; (8009920 <_printf_float+0x2fc>)
 80096ee:	e7db      	b.n	80096a8 <_printf_float+0x84>
 80096f0:	6863      	ldr	r3, [r4, #4]
 80096f2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80096f6:	1c59      	adds	r1, r3, #1
 80096f8:	a80d      	add	r0, sp, #52	; 0x34
 80096fa:	a90e      	add	r1, sp, #56	; 0x38
 80096fc:	d140      	bne.n	8009780 <_printf_float+0x15c>
 80096fe:	2306      	movs	r3, #6
 8009700:	6063      	str	r3, [r4, #4]
 8009702:	f04f 0c00 	mov.w	ip, #0
 8009706:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800970a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800970e:	6863      	ldr	r3, [r4, #4]
 8009710:	6022      	str	r2, [r4, #0]
 8009712:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	463a      	mov	r2, r7
 800971a:	464b      	mov	r3, r9
 800971c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009720:	4628      	mov	r0, r5
 8009722:	f7ff feed 	bl	8009500 <__cvt>
 8009726:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800972a:	2b47      	cmp	r3, #71	; 0x47
 800972c:	4607      	mov	r7, r0
 800972e:	d109      	bne.n	8009744 <_printf_float+0x120>
 8009730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009732:	1cd8      	adds	r0, r3, #3
 8009734:	db02      	blt.n	800973c <_printf_float+0x118>
 8009736:	6862      	ldr	r2, [r4, #4]
 8009738:	4293      	cmp	r3, r2
 800973a:	dd47      	ble.n	80097cc <_printf_float+0x1a8>
 800973c:	f1a8 0802 	sub.w	r8, r8, #2
 8009740:	fa5f f888 	uxtb.w	r8, r8
 8009744:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009748:	990d      	ldr	r1, [sp, #52]	; 0x34
 800974a:	d824      	bhi.n	8009796 <_printf_float+0x172>
 800974c:	3901      	subs	r1, #1
 800974e:	4642      	mov	r2, r8
 8009750:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009754:	910d      	str	r1, [sp, #52]	; 0x34
 8009756:	f7ff ff2f 	bl	80095b8 <__exponent>
 800975a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800975c:	4681      	mov	r9, r0
 800975e:	1813      	adds	r3, r2, r0
 8009760:	2a01      	cmp	r2, #1
 8009762:	6123      	str	r3, [r4, #16]
 8009764:	dc02      	bgt.n	800976c <_printf_float+0x148>
 8009766:	6822      	ldr	r2, [r4, #0]
 8009768:	07d1      	lsls	r1, r2, #31
 800976a:	d501      	bpl.n	8009770 <_printf_float+0x14c>
 800976c:	3301      	adds	r3, #1
 800976e:	6123      	str	r3, [r4, #16]
 8009770:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009774:	2b00      	cmp	r3, #0
 8009776:	d0a2      	beq.n	80096be <_printf_float+0x9a>
 8009778:	232d      	movs	r3, #45	; 0x2d
 800977a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800977e:	e79e      	b.n	80096be <_printf_float+0x9a>
 8009780:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009784:	f000 816e 	beq.w	8009a64 <_printf_float+0x440>
 8009788:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800978c:	d1b9      	bne.n	8009702 <_printf_float+0xde>
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1b7      	bne.n	8009702 <_printf_float+0xde>
 8009792:	2301      	movs	r3, #1
 8009794:	e7b4      	b.n	8009700 <_printf_float+0xdc>
 8009796:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800979a:	d119      	bne.n	80097d0 <_printf_float+0x1ac>
 800979c:	2900      	cmp	r1, #0
 800979e:	6863      	ldr	r3, [r4, #4]
 80097a0:	dd0c      	ble.n	80097bc <_printf_float+0x198>
 80097a2:	6121      	str	r1, [r4, #16]
 80097a4:	b913      	cbnz	r3, 80097ac <_printf_float+0x188>
 80097a6:	6822      	ldr	r2, [r4, #0]
 80097a8:	07d2      	lsls	r2, r2, #31
 80097aa:	d502      	bpl.n	80097b2 <_printf_float+0x18e>
 80097ac:	3301      	adds	r3, #1
 80097ae:	440b      	add	r3, r1
 80097b0:	6123      	str	r3, [r4, #16]
 80097b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097b4:	f04f 0900 	mov.w	r9, #0
 80097b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80097ba:	e7d9      	b.n	8009770 <_printf_float+0x14c>
 80097bc:	b913      	cbnz	r3, 80097c4 <_printf_float+0x1a0>
 80097be:	6822      	ldr	r2, [r4, #0]
 80097c0:	07d0      	lsls	r0, r2, #31
 80097c2:	d501      	bpl.n	80097c8 <_printf_float+0x1a4>
 80097c4:	3302      	adds	r3, #2
 80097c6:	e7f3      	b.n	80097b0 <_printf_float+0x18c>
 80097c8:	2301      	movs	r3, #1
 80097ca:	e7f1      	b.n	80097b0 <_printf_float+0x18c>
 80097cc:	f04f 0867 	mov.w	r8, #103	; 0x67
 80097d0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80097d4:	4293      	cmp	r3, r2
 80097d6:	db05      	blt.n	80097e4 <_printf_float+0x1c0>
 80097d8:	6822      	ldr	r2, [r4, #0]
 80097da:	6123      	str	r3, [r4, #16]
 80097dc:	07d1      	lsls	r1, r2, #31
 80097de:	d5e8      	bpl.n	80097b2 <_printf_float+0x18e>
 80097e0:	3301      	adds	r3, #1
 80097e2:	e7e5      	b.n	80097b0 <_printf_float+0x18c>
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	bfcc      	ite	gt
 80097e8:	2301      	movgt	r3, #1
 80097ea:	f1c3 0302 	rsble	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	e7de      	b.n	80097b0 <_printf_float+0x18c>
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	055a      	lsls	r2, r3, #21
 80097f6:	d407      	bmi.n	8009808 <_printf_float+0x1e4>
 80097f8:	6923      	ldr	r3, [r4, #16]
 80097fa:	463a      	mov	r2, r7
 80097fc:	4659      	mov	r1, fp
 80097fe:	4628      	mov	r0, r5
 8009800:	47b0      	blx	r6
 8009802:	3001      	adds	r0, #1
 8009804:	d129      	bne.n	800985a <_printf_float+0x236>
 8009806:	e764      	b.n	80096d2 <_printf_float+0xae>
 8009808:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800980c:	f240 80d7 	bls.w	80099be <_printf_float+0x39a>
 8009810:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009814:	2200      	movs	r2, #0
 8009816:	2300      	movs	r3, #0
 8009818:	f7f7 f8c6 	bl	80009a8 <__aeabi_dcmpeq>
 800981c:	b388      	cbz	r0, 8009882 <_printf_float+0x25e>
 800981e:	2301      	movs	r3, #1
 8009820:	4a40      	ldr	r2, [pc, #256]	; (8009924 <_printf_float+0x300>)
 8009822:	4659      	mov	r1, fp
 8009824:	4628      	mov	r0, r5
 8009826:	47b0      	blx	r6
 8009828:	3001      	adds	r0, #1
 800982a:	f43f af52 	beq.w	80096d2 <_printf_float+0xae>
 800982e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009832:	429a      	cmp	r2, r3
 8009834:	db02      	blt.n	800983c <_printf_float+0x218>
 8009836:	6823      	ldr	r3, [r4, #0]
 8009838:	07d8      	lsls	r0, r3, #31
 800983a:	d50e      	bpl.n	800985a <_printf_float+0x236>
 800983c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009840:	4659      	mov	r1, fp
 8009842:	4628      	mov	r0, r5
 8009844:	47b0      	blx	r6
 8009846:	3001      	adds	r0, #1
 8009848:	f43f af43 	beq.w	80096d2 <_printf_float+0xae>
 800984c:	2700      	movs	r7, #0
 800984e:	f104 081a 	add.w	r8, r4, #26
 8009852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009854:	3b01      	subs	r3, #1
 8009856:	42bb      	cmp	r3, r7
 8009858:	dc09      	bgt.n	800986e <_printf_float+0x24a>
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	079f      	lsls	r7, r3, #30
 800985e:	f100 80fd 	bmi.w	8009a5c <_printf_float+0x438>
 8009862:	68e0      	ldr	r0, [r4, #12]
 8009864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009866:	4298      	cmp	r0, r3
 8009868:	bfb8      	it	lt
 800986a:	4618      	movlt	r0, r3
 800986c:	e733      	b.n	80096d6 <_printf_float+0xb2>
 800986e:	2301      	movs	r3, #1
 8009870:	4642      	mov	r2, r8
 8009872:	4659      	mov	r1, fp
 8009874:	4628      	mov	r0, r5
 8009876:	47b0      	blx	r6
 8009878:	3001      	adds	r0, #1
 800987a:	f43f af2a 	beq.w	80096d2 <_printf_float+0xae>
 800987e:	3701      	adds	r7, #1
 8009880:	e7e7      	b.n	8009852 <_printf_float+0x22e>
 8009882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009884:	2b00      	cmp	r3, #0
 8009886:	dc2b      	bgt.n	80098e0 <_printf_float+0x2bc>
 8009888:	2301      	movs	r3, #1
 800988a:	4a26      	ldr	r2, [pc, #152]	; (8009924 <_printf_float+0x300>)
 800988c:	4659      	mov	r1, fp
 800988e:	4628      	mov	r0, r5
 8009890:	47b0      	blx	r6
 8009892:	3001      	adds	r0, #1
 8009894:	f43f af1d 	beq.w	80096d2 <_printf_float+0xae>
 8009898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800989a:	b923      	cbnz	r3, 80098a6 <_printf_float+0x282>
 800989c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800989e:	b913      	cbnz	r3, 80098a6 <_printf_float+0x282>
 80098a0:	6823      	ldr	r3, [r4, #0]
 80098a2:	07d9      	lsls	r1, r3, #31
 80098a4:	d5d9      	bpl.n	800985a <_printf_float+0x236>
 80098a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098aa:	4659      	mov	r1, fp
 80098ac:	4628      	mov	r0, r5
 80098ae:	47b0      	blx	r6
 80098b0:	3001      	adds	r0, #1
 80098b2:	f43f af0e 	beq.w	80096d2 <_printf_float+0xae>
 80098b6:	f04f 0800 	mov.w	r8, #0
 80098ba:	f104 091a 	add.w	r9, r4, #26
 80098be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098c0:	425b      	negs	r3, r3
 80098c2:	4543      	cmp	r3, r8
 80098c4:	dc01      	bgt.n	80098ca <_printf_float+0x2a6>
 80098c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098c8:	e797      	b.n	80097fa <_printf_float+0x1d6>
 80098ca:	2301      	movs	r3, #1
 80098cc:	464a      	mov	r2, r9
 80098ce:	4659      	mov	r1, fp
 80098d0:	4628      	mov	r0, r5
 80098d2:	47b0      	blx	r6
 80098d4:	3001      	adds	r0, #1
 80098d6:	f43f aefc 	beq.w	80096d2 <_printf_float+0xae>
 80098da:	f108 0801 	add.w	r8, r8, #1
 80098de:	e7ee      	b.n	80098be <_printf_float+0x29a>
 80098e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098e4:	429a      	cmp	r2, r3
 80098e6:	bfa8      	it	ge
 80098e8:	461a      	movge	r2, r3
 80098ea:	2a00      	cmp	r2, #0
 80098ec:	4690      	mov	r8, r2
 80098ee:	dd07      	ble.n	8009900 <_printf_float+0x2dc>
 80098f0:	4613      	mov	r3, r2
 80098f2:	4659      	mov	r1, fp
 80098f4:	463a      	mov	r2, r7
 80098f6:	4628      	mov	r0, r5
 80098f8:	47b0      	blx	r6
 80098fa:	3001      	adds	r0, #1
 80098fc:	f43f aee9 	beq.w	80096d2 <_printf_float+0xae>
 8009900:	f104 031a 	add.w	r3, r4, #26
 8009904:	f04f 0a00 	mov.w	sl, #0
 8009908:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800990c:	930b      	str	r3, [sp, #44]	; 0x2c
 800990e:	e015      	b.n	800993c <_printf_float+0x318>
 8009910:	7fefffff 	.word	0x7fefffff
 8009914:	0800e340 	.word	0x0800e340
 8009918:	0800e33c 	.word	0x0800e33c
 800991c:	0800e348 	.word	0x0800e348
 8009920:	0800e344 	.word	0x0800e344
 8009924:	0800e56b 	.word	0x0800e56b
 8009928:	2301      	movs	r3, #1
 800992a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800992c:	4659      	mov	r1, fp
 800992e:	4628      	mov	r0, r5
 8009930:	47b0      	blx	r6
 8009932:	3001      	adds	r0, #1
 8009934:	f43f aecd 	beq.w	80096d2 <_printf_float+0xae>
 8009938:	f10a 0a01 	add.w	sl, sl, #1
 800993c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8009940:	eba9 0308 	sub.w	r3, r9, r8
 8009944:	4553      	cmp	r3, sl
 8009946:	dcef      	bgt.n	8009928 <_printf_float+0x304>
 8009948:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800994c:	429a      	cmp	r2, r3
 800994e:	444f      	add	r7, r9
 8009950:	db14      	blt.n	800997c <_printf_float+0x358>
 8009952:	6823      	ldr	r3, [r4, #0]
 8009954:	07da      	lsls	r2, r3, #31
 8009956:	d411      	bmi.n	800997c <_printf_float+0x358>
 8009958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800995a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800995c:	eba3 0209 	sub.w	r2, r3, r9
 8009960:	eba3 0901 	sub.w	r9, r3, r1
 8009964:	4591      	cmp	r9, r2
 8009966:	bfa8      	it	ge
 8009968:	4691      	movge	r9, r2
 800996a:	f1b9 0f00 	cmp.w	r9, #0
 800996e:	dc0d      	bgt.n	800998c <_printf_float+0x368>
 8009970:	2700      	movs	r7, #0
 8009972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009976:	f104 081a 	add.w	r8, r4, #26
 800997a:	e018      	b.n	80099ae <_printf_float+0x38a>
 800997c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009980:	4659      	mov	r1, fp
 8009982:	4628      	mov	r0, r5
 8009984:	47b0      	blx	r6
 8009986:	3001      	adds	r0, #1
 8009988:	d1e6      	bne.n	8009958 <_printf_float+0x334>
 800998a:	e6a2      	b.n	80096d2 <_printf_float+0xae>
 800998c:	464b      	mov	r3, r9
 800998e:	463a      	mov	r2, r7
 8009990:	4659      	mov	r1, fp
 8009992:	4628      	mov	r0, r5
 8009994:	47b0      	blx	r6
 8009996:	3001      	adds	r0, #1
 8009998:	d1ea      	bne.n	8009970 <_printf_float+0x34c>
 800999a:	e69a      	b.n	80096d2 <_printf_float+0xae>
 800999c:	2301      	movs	r3, #1
 800999e:	4642      	mov	r2, r8
 80099a0:	4659      	mov	r1, fp
 80099a2:	4628      	mov	r0, r5
 80099a4:	47b0      	blx	r6
 80099a6:	3001      	adds	r0, #1
 80099a8:	f43f ae93 	beq.w	80096d2 <_printf_float+0xae>
 80099ac:	3701      	adds	r7, #1
 80099ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80099b2:	1a9b      	subs	r3, r3, r2
 80099b4:	eba3 0309 	sub.w	r3, r3, r9
 80099b8:	42bb      	cmp	r3, r7
 80099ba:	dcef      	bgt.n	800999c <_printf_float+0x378>
 80099bc:	e74d      	b.n	800985a <_printf_float+0x236>
 80099be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099c0:	2a01      	cmp	r2, #1
 80099c2:	dc01      	bgt.n	80099c8 <_printf_float+0x3a4>
 80099c4:	07db      	lsls	r3, r3, #31
 80099c6:	d538      	bpl.n	8009a3a <_printf_float+0x416>
 80099c8:	2301      	movs	r3, #1
 80099ca:	463a      	mov	r2, r7
 80099cc:	4659      	mov	r1, fp
 80099ce:	4628      	mov	r0, r5
 80099d0:	47b0      	blx	r6
 80099d2:	3001      	adds	r0, #1
 80099d4:	f43f ae7d 	beq.w	80096d2 <_printf_float+0xae>
 80099d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099dc:	4659      	mov	r1, fp
 80099de:	4628      	mov	r0, r5
 80099e0:	47b0      	blx	r6
 80099e2:	3001      	adds	r0, #1
 80099e4:	f107 0701 	add.w	r7, r7, #1
 80099e8:	f43f ae73 	beq.w	80096d2 <_printf_float+0xae>
 80099ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099f2:	2200      	movs	r2, #0
 80099f4:	f103 38ff 	add.w	r8, r3, #4294967295
 80099f8:	2300      	movs	r3, #0
 80099fa:	f7f6 ffd5 	bl	80009a8 <__aeabi_dcmpeq>
 80099fe:	b9c0      	cbnz	r0, 8009a32 <_printf_float+0x40e>
 8009a00:	4643      	mov	r3, r8
 8009a02:	463a      	mov	r2, r7
 8009a04:	4659      	mov	r1, fp
 8009a06:	4628      	mov	r0, r5
 8009a08:	47b0      	blx	r6
 8009a0a:	3001      	adds	r0, #1
 8009a0c:	d10d      	bne.n	8009a2a <_printf_float+0x406>
 8009a0e:	e660      	b.n	80096d2 <_printf_float+0xae>
 8009a10:	2301      	movs	r3, #1
 8009a12:	4642      	mov	r2, r8
 8009a14:	4659      	mov	r1, fp
 8009a16:	4628      	mov	r0, r5
 8009a18:	47b0      	blx	r6
 8009a1a:	3001      	adds	r0, #1
 8009a1c:	f43f ae59 	beq.w	80096d2 <_printf_float+0xae>
 8009a20:	3701      	adds	r7, #1
 8009a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a24:	3b01      	subs	r3, #1
 8009a26:	42bb      	cmp	r3, r7
 8009a28:	dcf2      	bgt.n	8009a10 <_printf_float+0x3ec>
 8009a2a:	464b      	mov	r3, r9
 8009a2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a30:	e6e4      	b.n	80097fc <_printf_float+0x1d8>
 8009a32:	2700      	movs	r7, #0
 8009a34:	f104 081a 	add.w	r8, r4, #26
 8009a38:	e7f3      	b.n	8009a22 <_printf_float+0x3fe>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e7e1      	b.n	8009a02 <_printf_float+0x3de>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	4642      	mov	r2, r8
 8009a42:	4659      	mov	r1, fp
 8009a44:	4628      	mov	r0, r5
 8009a46:	47b0      	blx	r6
 8009a48:	3001      	adds	r0, #1
 8009a4a:	f43f ae42 	beq.w	80096d2 <_printf_float+0xae>
 8009a4e:	3701      	adds	r7, #1
 8009a50:	68e3      	ldr	r3, [r4, #12]
 8009a52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a54:	1a9b      	subs	r3, r3, r2
 8009a56:	42bb      	cmp	r3, r7
 8009a58:	dcf1      	bgt.n	8009a3e <_printf_float+0x41a>
 8009a5a:	e702      	b.n	8009862 <_printf_float+0x23e>
 8009a5c:	2700      	movs	r7, #0
 8009a5e:	f104 0819 	add.w	r8, r4, #25
 8009a62:	e7f5      	b.n	8009a50 <_printf_float+0x42c>
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f43f ae94 	beq.w	8009792 <_printf_float+0x16e>
 8009a6a:	f04f 0c00 	mov.w	ip, #0
 8009a6e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009a72:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8009a76:	6022      	str	r2, [r4, #0]
 8009a78:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009a7c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	463a      	mov	r2, r7
 8009a84:	464b      	mov	r3, r9
 8009a86:	4628      	mov	r0, r5
 8009a88:	f7ff fd3a 	bl	8009500 <__cvt>
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	e64f      	b.n	8009730 <_printf_float+0x10c>

08009a90 <_printf_common>:
 8009a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a94:	4691      	mov	r9, r2
 8009a96:	461f      	mov	r7, r3
 8009a98:	688a      	ldr	r2, [r1, #8]
 8009a9a:	690b      	ldr	r3, [r1, #16]
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	bfb8      	it	lt
 8009aa2:	4613      	movlt	r3, r2
 8009aa4:	f8c9 3000 	str.w	r3, [r9]
 8009aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009aac:	460c      	mov	r4, r1
 8009aae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ab2:	b112      	cbz	r2, 8009aba <_printf_common+0x2a>
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	f8c9 3000 	str.w	r3, [r9]
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	0699      	lsls	r1, r3, #26
 8009abe:	bf42      	ittt	mi
 8009ac0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009ac4:	3302      	addmi	r3, #2
 8009ac6:	f8c9 3000 	strmi.w	r3, [r9]
 8009aca:	6825      	ldr	r5, [r4, #0]
 8009acc:	f015 0506 	ands.w	r5, r5, #6
 8009ad0:	d107      	bne.n	8009ae2 <_printf_common+0x52>
 8009ad2:	f104 0a19 	add.w	sl, r4, #25
 8009ad6:	68e3      	ldr	r3, [r4, #12]
 8009ad8:	f8d9 2000 	ldr.w	r2, [r9]
 8009adc:	1a9b      	subs	r3, r3, r2
 8009ade:	42ab      	cmp	r3, r5
 8009ae0:	dc29      	bgt.n	8009b36 <_printf_common+0xa6>
 8009ae2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009ae6:	6822      	ldr	r2, [r4, #0]
 8009ae8:	3300      	adds	r3, #0
 8009aea:	bf18      	it	ne
 8009aec:	2301      	movne	r3, #1
 8009aee:	0692      	lsls	r2, r2, #26
 8009af0:	d42e      	bmi.n	8009b50 <_printf_common+0xc0>
 8009af2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009af6:	4639      	mov	r1, r7
 8009af8:	4630      	mov	r0, r6
 8009afa:	47c0      	blx	r8
 8009afc:	3001      	adds	r0, #1
 8009afe:	d021      	beq.n	8009b44 <_printf_common+0xb4>
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	68e5      	ldr	r5, [r4, #12]
 8009b04:	f003 0306 	and.w	r3, r3, #6
 8009b08:	2b04      	cmp	r3, #4
 8009b0a:	bf18      	it	ne
 8009b0c:	2500      	movne	r5, #0
 8009b0e:	f8d9 2000 	ldr.w	r2, [r9]
 8009b12:	f04f 0900 	mov.w	r9, #0
 8009b16:	bf08      	it	eq
 8009b18:	1aad      	subeq	r5, r5, r2
 8009b1a:	68a3      	ldr	r3, [r4, #8]
 8009b1c:	6922      	ldr	r2, [r4, #16]
 8009b1e:	bf08      	it	eq
 8009b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b24:	4293      	cmp	r3, r2
 8009b26:	bfc4      	itt	gt
 8009b28:	1a9b      	subgt	r3, r3, r2
 8009b2a:	18ed      	addgt	r5, r5, r3
 8009b2c:	341a      	adds	r4, #26
 8009b2e:	454d      	cmp	r5, r9
 8009b30:	d11a      	bne.n	8009b68 <_printf_common+0xd8>
 8009b32:	2000      	movs	r0, #0
 8009b34:	e008      	b.n	8009b48 <_printf_common+0xb8>
 8009b36:	2301      	movs	r3, #1
 8009b38:	4652      	mov	r2, sl
 8009b3a:	4639      	mov	r1, r7
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	47c0      	blx	r8
 8009b40:	3001      	adds	r0, #1
 8009b42:	d103      	bne.n	8009b4c <_printf_common+0xbc>
 8009b44:	f04f 30ff 	mov.w	r0, #4294967295
 8009b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b4c:	3501      	adds	r5, #1
 8009b4e:	e7c2      	b.n	8009ad6 <_printf_common+0x46>
 8009b50:	2030      	movs	r0, #48	; 0x30
 8009b52:	18e1      	adds	r1, r4, r3
 8009b54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b58:	1c5a      	adds	r2, r3, #1
 8009b5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b5e:	4422      	add	r2, r4
 8009b60:	3302      	adds	r3, #2
 8009b62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b66:	e7c4      	b.n	8009af2 <_printf_common+0x62>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	4622      	mov	r2, r4
 8009b6c:	4639      	mov	r1, r7
 8009b6e:	4630      	mov	r0, r6
 8009b70:	47c0      	blx	r8
 8009b72:	3001      	adds	r0, #1
 8009b74:	d0e6      	beq.n	8009b44 <_printf_common+0xb4>
 8009b76:	f109 0901 	add.w	r9, r9, #1
 8009b7a:	e7d8      	b.n	8009b2e <_printf_common+0x9e>

08009b7c <_printf_i>:
 8009b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009b84:	460c      	mov	r4, r1
 8009b86:	7e09      	ldrb	r1, [r1, #24]
 8009b88:	b085      	sub	sp, #20
 8009b8a:	296e      	cmp	r1, #110	; 0x6e
 8009b8c:	4617      	mov	r7, r2
 8009b8e:	4606      	mov	r6, r0
 8009b90:	4698      	mov	r8, r3
 8009b92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b94:	f000 80b3 	beq.w	8009cfe <_printf_i+0x182>
 8009b98:	d822      	bhi.n	8009be0 <_printf_i+0x64>
 8009b9a:	2963      	cmp	r1, #99	; 0x63
 8009b9c:	d036      	beq.n	8009c0c <_printf_i+0x90>
 8009b9e:	d80a      	bhi.n	8009bb6 <_printf_i+0x3a>
 8009ba0:	2900      	cmp	r1, #0
 8009ba2:	f000 80b9 	beq.w	8009d18 <_printf_i+0x19c>
 8009ba6:	2958      	cmp	r1, #88	; 0x58
 8009ba8:	f000 8083 	beq.w	8009cb2 <_printf_i+0x136>
 8009bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009bb4:	e032      	b.n	8009c1c <_printf_i+0xa0>
 8009bb6:	2964      	cmp	r1, #100	; 0x64
 8009bb8:	d001      	beq.n	8009bbe <_printf_i+0x42>
 8009bba:	2969      	cmp	r1, #105	; 0x69
 8009bbc:	d1f6      	bne.n	8009bac <_printf_i+0x30>
 8009bbe:	6820      	ldr	r0, [r4, #0]
 8009bc0:	6813      	ldr	r3, [r2, #0]
 8009bc2:	0605      	lsls	r5, r0, #24
 8009bc4:	f103 0104 	add.w	r1, r3, #4
 8009bc8:	d52a      	bpl.n	8009c20 <_printf_i+0xa4>
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6011      	str	r1, [r2, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	da03      	bge.n	8009bda <_printf_i+0x5e>
 8009bd2:	222d      	movs	r2, #45	; 0x2d
 8009bd4:	425b      	negs	r3, r3
 8009bd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009bda:	486f      	ldr	r0, [pc, #444]	; (8009d98 <_printf_i+0x21c>)
 8009bdc:	220a      	movs	r2, #10
 8009bde:	e039      	b.n	8009c54 <_printf_i+0xd8>
 8009be0:	2973      	cmp	r1, #115	; 0x73
 8009be2:	f000 809d 	beq.w	8009d20 <_printf_i+0x1a4>
 8009be6:	d808      	bhi.n	8009bfa <_printf_i+0x7e>
 8009be8:	296f      	cmp	r1, #111	; 0x6f
 8009bea:	d020      	beq.n	8009c2e <_printf_i+0xb2>
 8009bec:	2970      	cmp	r1, #112	; 0x70
 8009bee:	d1dd      	bne.n	8009bac <_printf_i+0x30>
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	f043 0320 	orr.w	r3, r3, #32
 8009bf6:	6023      	str	r3, [r4, #0]
 8009bf8:	e003      	b.n	8009c02 <_printf_i+0x86>
 8009bfa:	2975      	cmp	r1, #117	; 0x75
 8009bfc:	d017      	beq.n	8009c2e <_printf_i+0xb2>
 8009bfe:	2978      	cmp	r1, #120	; 0x78
 8009c00:	d1d4      	bne.n	8009bac <_printf_i+0x30>
 8009c02:	2378      	movs	r3, #120	; 0x78
 8009c04:	4865      	ldr	r0, [pc, #404]	; (8009d9c <_printf_i+0x220>)
 8009c06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c0a:	e055      	b.n	8009cb8 <_printf_i+0x13c>
 8009c0c:	6813      	ldr	r3, [r2, #0]
 8009c0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c12:	1d19      	adds	r1, r3, #4
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	6011      	str	r1, [r2, #0]
 8009c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e08c      	b.n	8009d3a <_printf_i+0x1be>
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c26:	6011      	str	r1, [r2, #0]
 8009c28:	bf18      	it	ne
 8009c2a:	b21b      	sxthne	r3, r3
 8009c2c:	e7cf      	b.n	8009bce <_printf_i+0x52>
 8009c2e:	6813      	ldr	r3, [r2, #0]
 8009c30:	6825      	ldr	r5, [r4, #0]
 8009c32:	1d18      	adds	r0, r3, #4
 8009c34:	6010      	str	r0, [r2, #0]
 8009c36:	0628      	lsls	r0, r5, #24
 8009c38:	d501      	bpl.n	8009c3e <_printf_i+0xc2>
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	e002      	b.n	8009c44 <_printf_i+0xc8>
 8009c3e:	0668      	lsls	r0, r5, #25
 8009c40:	d5fb      	bpl.n	8009c3a <_printf_i+0xbe>
 8009c42:	881b      	ldrh	r3, [r3, #0]
 8009c44:	296f      	cmp	r1, #111	; 0x6f
 8009c46:	bf14      	ite	ne
 8009c48:	220a      	movne	r2, #10
 8009c4a:	2208      	moveq	r2, #8
 8009c4c:	4852      	ldr	r0, [pc, #328]	; (8009d98 <_printf_i+0x21c>)
 8009c4e:	2100      	movs	r1, #0
 8009c50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c54:	6865      	ldr	r5, [r4, #4]
 8009c56:	2d00      	cmp	r5, #0
 8009c58:	60a5      	str	r5, [r4, #8]
 8009c5a:	f2c0 8095 	blt.w	8009d88 <_printf_i+0x20c>
 8009c5e:	6821      	ldr	r1, [r4, #0]
 8009c60:	f021 0104 	bic.w	r1, r1, #4
 8009c64:	6021      	str	r1, [r4, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d13d      	bne.n	8009ce6 <_printf_i+0x16a>
 8009c6a:	2d00      	cmp	r5, #0
 8009c6c:	f040 808e 	bne.w	8009d8c <_printf_i+0x210>
 8009c70:	4665      	mov	r5, ip
 8009c72:	2a08      	cmp	r2, #8
 8009c74:	d10b      	bne.n	8009c8e <_printf_i+0x112>
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	07db      	lsls	r3, r3, #31
 8009c7a:	d508      	bpl.n	8009c8e <_printf_i+0x112>
 8009c7c:	6923      	ldr	r3, [r4, #16]
 8009c7e:	6862      	ldr	r2, [r4, #4]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	bfde      	ittt	le
 8009c84:	2330      	movle	r3, #48	; 0x30
 8009c86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c8e:	ebac 0305 	sub.w	r3, ip, r5
 8009c92:	6123      	str	r3, [r4, #16]
 8009c94:	f8cd 8000 	str.w	r8, [sp]
 8009c98:	463b      	mov	r3, r7
 8009c9a:	aa03      	add	r2, sp, #12
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f7ff fef6 	bl	8009a90 <_printf_common>
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	d14d      	bne.n	8009d44 <_printf_i+0x1c8>
 8009ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cac:	b005      	add	sp, #20
 8009cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cb2:	4839      	ldr	r0, [pc, #228]	; (8009d98 <_printf_i+0x21c>)
 8009cb4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009cb8:	6813      	ldr	r3, [r2, #0]
 8009cba:	6821      	ldr	r1, [r4, #0]
 8009cbc:	1d1d      	adds	r5, r3, #4
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6015      	str	r5, [r2, #0]
 8009cc2:	060a      	lsls	r2, r1, #24
 8009cc4:	d50b      	bpl.n	8009cde <_printf_i+0x162>
 8009cc6:	07ca      	lsls	r2, r1, #31
 8009cc8:	bf44      	itt	mi
 8009cca:	f041 0120 	orrmi.w	r1, r1, #32
 8009cce:	6021      	strmi	r1, [r4, #0]
 8009cd0:	b91b      	cbnz	r3, 8009cda <_printf_i+0x15e>
 8009cd2:	6822      	ldr	r2, [r4, #0]
 8009cd4:	f022 0220 	bic.w	r2, r2, #32
 8009cd8:	6022      	str	r2, [r4, #0]
 8009cda:	2210      	movs	r2, #16
 8009cdc:	e7b7      	b.n	8009c4e <_printf_i+0xd2>
 8009cde:	064d      	lsls	r5, r1, #25
 8009ce0:	bf48      	it	mi
 8009ce2:	b29b      	uxthmi	r3, r3
 8009ce4:	e7ef      	b.n	8009cc6 <_printf_i+0x14a>
 8009ce6:	4665      	mov	r5, ip
 8009ce8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cec:	fb02 3311 	mls	r3, r2, r1, r3
 8009cf0:	5cc3      	ldrb	r3, [r0, r3]
 8009cf2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	2900      	cmp	r1, #0
 8009cfa:	d1f5      	bne.n	8009ce8 <_printf_i+0x16c>
 8009cfc:	e7b9      	b.n	8009c72 <_printf_i+0xf6>
 8009cfe:	6813      	ldr	r3, [r2, #0]
 8009d00:	6825      	ldr	r5, [r4, #0]
 8009d02:	1d18      	adds	r0, r3, #4
 8009d04:	6961      	ldr	r1, [r4, #20]
 8009d06:	6010      	str	r0, [r2, #0]
 8009d08:	0628      	lsls	r0, r5, #24
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	d501      	bpl.n	8009d12 <_printf_i+0x196>
 8009d0e:	6019      	str	r1, [r3, #0]
 8009d10:	e002      	b.n	8009d18 <_printf_i+0x19c>
 8009d12:	066a      	lsls	r2, r5, #25
 8009d14:	d5fb      	bpl.n	8009d0e <_printf_i+0x192>
 8009d16:	8019      	strh	r1, [r3, #0]
 8009d18:	2300      	movs	r3, #0
 8009d1a:	4665      	mov	r5, ip
 8009d1c:	6123      	str	r3, [r4, #16]
 8009d1e:	e7b9      	b.n	8009c94 <_printf_i+0x118>
 8009d20:	6813      	ldr	r3, [r2, #0]
 8009d22:	1d19      	adds	r1, r3, #4
 8009d24:	6011      	str	r1, [r2, #0]
 8009d26:	681d      	ldr	r5, [r3, #0]
 8009d28:	6862      	ldr	r2, [r4, #4]
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	f002 fe77 	bl	800ca20 <memchr>
 8009d32:	b108      	cbz	r0, 8009d38 <_printf_i+0x1bc>
 8009d34:	1b40      	subs	r0, r0, r5
 8009d36:	6060      	str	r0, [r4, #4]
 8009d38:	6863      	ldr	r3, [r4, #4]
 8009d3a:	6123      	str	r3, [r4, #16]
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d42:	e7a7      	b.n	8009c94 <_printf_i+0x118>
 8009d44:	6923      	ldr	r3, [r4, #16]
 8009d46:	462a      	mov	r2, r5
 8009d48:	4639      	mov	r1, r7
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	47c0      	blx	r8
 8009d4e:	3001      	adds	r0, #1
 8009d50:	d0aa      	beq.n	8009ca8 <_printf_i+0x12c>
 8009d52:	6823      	ldr	r3, [r4, #0]
 8009d54:	079b      	lsls	r3, r3, #30
 8009d56:	d413      	bmi.n	8009d80 <_printf_i+0x204>
 8009d58:	68e0      	ldr	r0, [r4, #12]
 8009d5a:	9b03      	ldr	r3, [sp, #12]
 8009d5c:	4298      	cmp	r0, r3
 8009d5e:	bfb8      	it	lt
 8009d60:	4618      	movlt	r0, r3
 8009d62:	e7a3      	b.n	8009cac <_printf_i+0x130>
 8009d64:	2301      	movs	r3, #1
 8009d66:	464a      	mov	r2, r9
 8009d68:	4639      	mov	r1, r7
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	47c0      	blx	r8
 8009d6e:	3001      	adds	r0, #1
 8009d70:	d09a      	beq.n	8009ca8 <_printf_i+0x12c>
 8009d72:	3501      	adds	r5, #1
 8009d74:	68e3      	ldr	r3, [r4, #12]
 8009d76:	9a03      	ldr	r2, [sp, #12]
 8009d78:	1a9b      	subs	r3, r3, r2
 8009d7a:	42ab      	cmp	r3, r5
 8009d7c:	dcf2      	bgt.n	8009d64 <_printf_i+0x1e8>
 8009d7e:	e7eb      	b.n	8009d58 <_printf_i+0x1dc>
 8009d80:	2500      	movs	r5, #0
 8009d82:	f104 0919 	add.w	r9, r4, #25
 8009d86:	e7f5      	b.n	8009d74 <_printf_i+0x1f8>
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1ac      	bne.n	8009ce6 <_printf_i+0x16a>
 8009d8c:	7803      	ldrb	r3, [r0, #0]
 8009d8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d96:	e76c      	b.n	8009c72 <_printf_i+0xf6>
 8009d98:	0800e34c 	.word	0x0800e34c
 8009d9c:	0800e35d 	.word	0x0800e35d

08009da0 <_scanf_float>:
 8009da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da4:	469a      	mov	sl, r3
 8009da6:	688b      	ldr	r3, [r1, #8]
 8009da8:	4616      	mov	r6, r2
 8009daa:	1e5a      	subs	r2, r3, #1
 8009dac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009db0:	bf88      	it	hi
 8009db2:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8009db6:	b087      	sub	sp, #28
 8009db8:	bf85      	ittet	hi
 8009dba:	189b      	addhi	r3, r3, r2
 8009dbc:	9301      	strhi	r3, [sp, #4]
 8009dbe:	2300      	movls	r3, #0
 8009dc0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009dc4:	4688      	mov	r8, r1
 8009dc6:	f04f 0b00 	mov.w	fp, #0
 8009dca:	bf8c      	ite	hi
 8009dcc:	608b      	strhi	r3, [r1, #8]
 8009dce:	9301      	strls	r3, [sp, #4]
 8009dd0:	680b      	ldr	r3, [r1, #0]
 8009dd2:	4607      	mov	r7, r0
 8009dd4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009dd8:	f848 3b1c 	str.w	r3, [r8], #28
 8009ddc:	460c      	mov	r4, r1
 8009dde:	4645      	mov	r5, r8
 8009de0:	465a      	mov	r2, fp
 8009de2:	46d9      	mov	r9, fp
 8009de4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8009de8:	f8cd b008 	str.w	fp, [sp, #8]
 8009dec:	68a1      	ldr	r1, [r4, #8]
 8009dee:	b181      	cbz	r1, 8009e12 <_scanf_float+0x72>
 8009df0:	6833      	ldr	r3, [r6, #0]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	2b49      	cmp	r3, #73	; 0x49
 8009df6:	d071      	beq.n	8009edc <_scanf_float+0x13c>
 8009df8:	d84d      	bhi.n	8009e96 <_scanf_float+0xf6>
 8009dfa:	2b39      	cmp	r3, #57	; 0x39
 8009dfc:	d840      	bhi.n	8009e80 <_scanf_float+0xe0>
 8009dfe:	2b31      	cmp	r3, #49	; 0x31
 8009e00:	f080 8088 	bcs.w	8009f14 <_scanf_float+0x174>
 8009e04:	2b2d      	cmp	r3, #45	; 0x2d
 8009e06:	f000 8090 	beq.w	8009f2a <_scanf_float+0x18a>
 8009e0a:	d815      	bhi.n	8009e38 <_scanf_float+0x98>
 8009e0c:	2b2b      	cmp	r3, #43	; 0x2b
 8009e0e:	f000 808c 	beq.w	8009f2a <_scanf_float+0x18a>
 8009e12:	f1b9 0f00 	cmp.w	r9, #0
 8009e16:	d003      	beq.n	8009e20 <_scanf_float+0x80>
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e1e:	6023      	str	r3, [r4, #0]
 8009e20:	3a01      	subs	r2, #1
 8009e22:	2a01      	cmp	r2, #1
 8009e24:	f200 80ea 	bhi.w	8009ffc <_scanf_float+0x25c>
 8009e28:	4545      	cmp	r5, r8
 8009e2a:	f200 80dc 	bhi.w	8009fe6 <_scanf_float+0x246>
 8009e2e:	2601      	movs	r6, #1
 8009e30:	4630      	mov	r0, r6
 8009e32:	b007      	add	sp, #28
 8009e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e38:	2b2e      	cmp	r3, #46	; 0x2e
 8009e3a:	f000 809f 	beq.w	8009f7c <_scanf_float+0x1dc>
 8009e3e:	2b30      	cmp	r3, #48	; 0x30
 8009e40:	d1e7      	bne.n	8009e12 <_scanf_float+0x72>
 8009e42:	6820      	ldr	r0, [r4, #0]
 8009e44:	f410 7f80 	tst.w	r0, #256	; 0x100
 8009e48:	d064      	beq.n	8009f14 <_scanf_float+0x174>
 8009e4a:	9b01      	ldr	r3, [sp, #4]
 8009e4c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8009e50:	6020      	str	r0, [r4, #0]
 8009e52:	f109 0901 	add.w	r9, r9, #1
 8009e56:	b11b      	cbz	r3, 8009e60 <_scanf_float+0xc0>
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	3101      	adds	r1, #1
 8009e5c:	9301      	str	r3, [sp, #4]
 8009e5e:	60a1      	str	r1, [r4, #8]
 8009e60:	68a3      	ldr	r3, [r4, #8]
 8009e62:	3b01      	subs	r3, #1
 8009e64:	60a3      	str	r3, [r4, #8]
 8009e66:	6923      	ldr	r3, [r4, #16]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	6123      	str	r3, [r4, #16]
 8009e6c:	6873      	ldr	r3, [r6, #4]
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	6073      	str	r3, [r6, #4]
 8009e74:	f340 80ac 	ble.w	8009fd0 <_scanf_float+0x230>
 8009e78:	6833      	ldr	r3, [r6, #0]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	6033      	str	r3, [r6, #0]
 8009e7e:	e7b5      	b.n	8009dec <_scanf_float+0x4c>
 8009e80:	2b45      	cmp	r3, #69	; 0x45
 8009e82:	f000 8085 	beq.w	8009f90 <_scanf_float+0x1f0>
 8009e86:	2b46      	cmp	r3, #70	; 0x46
 8009e88:	d06a      	beq.n	8009f60 <_scanf_float+0x1c0>
 8009e8a:	2b41      	cmp	r3, #65	; 0x41
 8009e8c:	d1c1      	bne.n	8009e12 <_scanf_float+0x72>
 8009e8e:	2a01      	cmp	r2, #1
 8009e90:	d1bf      	bne.n	8009e12 <_scanf_float+0x72>
 8009e92:	2202      	movs	r2, #2
 8009e94:	e046      	b.n	8009f24 <_scanf_float+0x184>
 8009e96:	2b65      	cmp	r3, #101	; 0x65
 8009e98:	d07a      	beq.n	8009f90 <_scanf_float+0x1f0>
 8009e9a:	d818      	bhi.n	8009ece <_scanf_float+0x12e>
 8009e9c:	2b54      	cmp	r3, #84	; 0x54
 8009e9e:	d066      	beq.n	8009f6e <_scanf_float+0x1ce>
 8009ea0:	d811      	bhi.n	8009ec6 <_scanf_float+0x126>
 8009ea2:	2b4e      	cmp	r3, #78	; 0x4e
 8009ea4:	d1b5      	bne.n	8009e12 <_scanf_float+0x72>
 8009ea6:	2a00      	cmp	r2, #0
 8009ea8:	d146      	bne.n	8009f38 <_scanf_float+0x198>
 8009eaa:	f1b9 0f00 	cmp.w	r9, #0
 8009eae:	d145      	bne.n	8009f3c <_scanf_float+0x19c>
 8009eb0:	6821      	ldr	r1, [r4, #0]
 8009eb2:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009eb6:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009eba:	d13f      	bne.n	8009f3c <_scanf_float+0x19c>
 8009ebc:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009ec0:	6021      	str	r1, [r4, #0]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	e02e      	b.n	8009f24 <_scanf_float+0x184>
 8009ec6:	2b59      	cmp	r3, #89	; 0x59
 8009ec8:	d01e      	beq.n	8009f08 <_scanf_float+0x168>
 8009eca:	2b61      	cmp	r3, #97	; 0x61
 8009ecc:	e7de      	b.n	8009e8c <_scanf_float+0xec>
 8009ece:	2b6e      	cmp	r3, #110	; 0x6e
 8009ed0:	d0e9      	beq.n	8009ea6 <_scanf_float+0x106>
 8009ed2:	d815      	bhi.n	8009f00 <_scanf_float+0x160>
 8009ed4:	2b66      	cmp	r3, #102	; 0x66
 8009ed6:	d043      	beq.n	8009f60 <_scanf_float+0x1c0>
 8009ed8:	2b69      	cmp	r3, #105	; 0x69
 8009eda:	d19a      	bne.n	8009e12 <_scanf_float+0x72>
 8009edc:	f1bb 0f00 	cmp.w	fp, #0
 8009ee0:	d138      	bne.n	8009f54 <_scanf_float+0x1b4>
 8009ee2:	f1b9 0f00 	cmp.w	r9, #0
 8009ee6:	d197      	bne.n	8009e18 <_scanf_float+0x78>
 8009ee8:	6821      	ldr	r1, [r4, #0]
 8009eea:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009eee:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009ef2:	d195      	bne.n	8009e20 <_scanf_float+0x80>
 8009ef4:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009ef8:	6021      	str	r1, [r4, #0]
 8009efa:	f04f 0b01 	mov.w	fp, #1
 8009efe:	e011      	b.n	8009f24 <_scanf_float+0x184>
 8009f00:	2b74      	cmp	r3, #116	; 0x74
 8009f02:	d034      	beq.n	8009f6e <_scanf_float+0x1ce>
 8009f04:	2b79      	cmp	r3, #121	; 0x79
 8009f06:	d184      	bne.n	8009e12 <_scanf_float+0x72>
 8009f08:	f1bb 0f07 	cmp.w	fp, #7
 8009f0c:	d181      	bne.n	8009e12 <_scanf_float+0x72>
 8009f0e:	f04f 0b08 	mov.w	fp, #8
 8009f12:	e007      	b.n	8009f24 <_scanf_float+0x184>
 8009f14:	eb12 0f0b 	cmn.w	r2, fp
 8009f18:	f47f af7b 	bne.w	8009e12 <_scanf_float+0x72>
 8009f1c:	6821      	ldr	r1, [r4, #0]
 8009f1e:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8009f22:	6021      	str	r1, [r4, #0]
 8009f24:	702b      	strb	r3, [r5, #0]
 8009f26:	3501      	adds	r5, #1
 8009f28:	e79a      	b.n	8009e60 <_scanf_float+0xc0>
 8009f2a:	6821      	ldr	r1, [r4, #0]
 8009f2c:	0608      	lsls	r0, r1, #24
 8009f2e:	f57f af70 	bpl.w	8009e12 <_scanf_float+0x72>
 8009f32:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009f36:	e7f4      	b.n	8009f22 <_scanf_float+0x182>
 8009f38:	2a02      	cmp	r2, #2
 8009f3a:	d047      	beq.n	8009fcc <_scanf_float+0x22c>
 8009f3c:	f1bb 0f01 	cmp.w	fp, #1
 8009f40:	d003      	beq.n	8009f4a <_scanf_float+0x1aa>
 8009f42:	f1bb 0f04 	cmp.w	fp, #4
 8009f46:	f47f af64 	bne.w	8009e12 <_scanf_float+0x72>
 8009f4a:	f10b 0b01 	add.w	fp, fp, #1
 8009f4e:	fa5f fb8b 	uxtb.w	fp, fp
 8009f52:	e7e7      	b.n	8009f24 <_scanf_float+0x184>
 8009f54:	f1bb 0f03 	cmp.w	fp, #3
 8009f58:	d0f7      	beq.n	8009f4a <_scanf_float+0x1aa>
 8009f5a:	f1bb 0f05 	cmp.w	fp, #5
 8009f5e:	e7f2      	b.n	8009f46 <_scanf_float+0x1a6>
 8009f60:	f1bb 0f02 	cmp.w	fp, #2
 8009f64:	f47f af55 	bne.w	8009e12 <_scanf_float+0x72>
 8009f68:	f04f 0b03 	mov.w	fp, #3
 8009f6c:	e7da      	b.n	8009f24 <_scanf_float+0x184>
 8009f6e:	f1bb 0f06 	cmp.w	fp, #6
 8009f72:	f47f af4e 	bne.w	8009e12 <_scanf_float+0x72>
 8009f76:	f04f 0b07 	mov.w	fp, #7
 8009f7a:	e7d3      	b.n	8009f24 <_scanf_float+0x184>
 8009f7c:	6821      	ldr	r1, [r4, #0]
 8009f7e:	0588      	lsls	r0, r1, #22
 8009f80:	f57f af47 	bpl.w	8009e12 <_scanf_float+0x72>
 8009f84:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8009f88:	6021      	str	r1, [r4, #0]
 8009f8a:	f8cd 9008 	str.w	r9, [sp, #8]
 8009f8e:	e7c9      	b.n	8009f24 <_scanf_float+0x184>
 8009f90:	6821      	ldr	r1, [r4, #0]
 8009f92:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8009f96:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009f9a:	d006      	beq.n	8009faa <_scanf_float+0x20a>
 8009f9c:	0548      	lsls	r0, r1, #21
 8009f9e:	f57f af38 	bpl.w	8009e12 <_scanf_float+0x72>
 8009fa2:	f1b9 0f00 	cmp.w	r9, #0
 8009fa6:	f43f af3b 	beq.w	8009e20 <_scanf_float+0x80>
 8009faa:	0588      	lsls	r0, r1, #22
 8009fac:	bf58      	it	pl
 8009fae:	9802      	ldrpl	r0, [sp, #8]
 8009fb0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009fb4:	bf58      	it	pl
 8009fb6:	eba9 0000 	subpl.w	r0, r9, r0
 8009fba:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8009fbe:	bf58      	it	pl
 8009fc0:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8009fc4:	6021      	str	r1, [r4, #0]
 8009fc6:	f04f 0900 	mov.w	r9, #0
 8009fca:	e7ab      	b.n	8009f24 <_scanf_float+0x184>
 8009fcc:	2203      	movs	r2, #3
 8009fce:	e7a9      	b.n	8009f24 <_scanf_float+0x184>
 8009fd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009fd4:	4631      	mov	r1, r6
 8009fd6:	4638      	mov	r0, r7
 8009fd8:	9205      	str	r2, [sp, #20]
 8009fda:	4798      	blx	r3
 8009fdc:	9a05      	ldr	r2, [sp, #20]
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	f43f af04 	beq.w	8009dec <_scanf_float+0x4c>
 8009fe4:	e715      	b.n	8009e12 <_scanf_float+0x72>
 8009fe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009fea:	4632      	mov	r2, r6
 8009fec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009ff0:	4638      	mov	r0, r7
 8009ff2:	4798      	blx	r3
 8009ff4:	6923      	ldr	r3, [r4, #16]
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	6123      	str	r3, [r4, #16]
 8009ffa:	e715      	b.n	8009e28 <_scanf_float+0x88>
 8009ffc:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a000:	2b06      	cmp	r3, #6
 800a002:	d80a      	bhi.n	800a01a <_scanf_float+0x27a>
 800a004:	f1bb 0f02 	cmp.w	fp, #2
 800a008:	d967      	bls.n	800a0da <_scanf_float+0x33a>
 800a00a:	f1ab 0b03 	sub.w	fp, fp, #3
 800a00e:	fa5f fb8b 	uxtb.w	fp, fp
 800a012:	eba5 0b0b 	sub.w	fp, r5, fp
 800a016:	455d      	cmp	r5, fp
 800a018:	d14a      	bne.n	800a0b0 <_scanf_float+0x310>
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	05da      	lsls	r2, r3, #23
 800a01e:	d51f      	bpl.n	800a060 <_scanf_float+0x2c0>
 800a020:	055b      	lsls	r3, r3, #21
 800a022:	d467      	bmi.n	800a0f4 <_scanf_float+0x354>
 800a024:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a028:	6923      	ldr	r3, [r4, #16]
 800a02a:	2965      	cmp	r1, #101	; 0x65
 800a02c:	f103 33ff 	add.w	r3, r3, #4294967295
 800a030:	f105 3bff 	add.w	fp, r5, #4294967295
 800a034:	6123      	str	r3, [r4, #16]
 800a036:	d00d      	beq.n	800a054 <_scanf_float+0x2b4>
 800a038:	2945      	cmp	r1, #69	; 0x45
 800a03a:	d00b      	beq.n	800a054 <_scanf_float+0x2b4>
 800a03c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a040:	4632      	mov	r2, r6
 800a042:	4638      	mov	r0, r7
 800a044:	4798      	blx	r3
 800a046:	6923      	ldr	r3, [r4, #16]
 800a048:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800a04c:	3b01      	subs	r3, #1
 800a04e:	f1a5 0b02 	sub.w	fp, r5, #2
 800a052:	6123      	str	r3, [r4, #16]
 800a054:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a058:	4632      	mov	r2, r6
 800a05a:	4638      	mov	r0, r7
 800a05c:	4798      	blx	r3
 800a05e:	465d      	mov	r5, fp
 800a060:	6826      	ldr	r6, [r4, #0]
 800a062:	f016 0610 	ands.w	r6, r6, #16
 800a066:	d176      	bne.n	800a156 <_scanf_float+0x3b6>
 800a068:	702e      	strb	r6, [r5, #0]
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a074:	d141      	bne.n	800a0fa <_scanf_float+0x35a>
 800a076:	9b02      	ldr	r3, [sp, #8]
 800a078:	eba9 0303 	sub.w	r3, r9, r3
 800a07c:	425a      	negs	r2, r3
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d148      	bne.n	800a114 <_scanf_float+0x374>
 800a082:	4641      	mov	r1, r8
 800a084:	2200      	movs	r2, #0
 800a086:	4638      	mov	r0, r7
 800a088:	f000 ffb2 	bl	800aff0 <_strtod_r>
 800a08c:	6825      	ldr	r5, [r4, #0]
 800a08e:	4680      	mov	r8, r0
 800a090:	f015 0f02 	tst.w	r5, #2
 800a094:	4689      	mov	r9, r1
 800a096:	f8da 3000 	ldr.w	r3, [sl]
 800a09a:	d046      	beq.n	800a12a <_scanf_float+0x38a>
 800a09c:	1d1a      	adds	r2, r3, #4
 800a09e:	f8ca 2000 	str.w	r2, [sl]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	e9c3 8900 	strd	r8, r9, [r3]
 800a0a8:	68e3      	ldr	r3, [r4, #12]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	60e3      	str	r3, [r4, #12]
 800a0ae:	e6bf      	b.n	8009e30 <_scanf_float+0x90>
 800a0b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0b4:	4632      	mov	r2, r6
 800a0b6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a0ba:	4638      	mov	r0, r7
 800a0bc:	4798      	blx	r3
 800a0be:	6923      	ldr	r3, [r4, #16]
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	6123      	str	r3, [r4, #16]
 800a0c4:	e7a7      	b.n	800a016 <_scanf_float+0x276>
 800a0c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0ca:	4632      	mov	r2, r6
 800a0cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	4798      	blx	r3
 800a0d4:	6923      	ldr	r3, [r4, #16]
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	6123      	str	r3, [r4, #16]
 800a0da:	4545      	cmp	r5, r8
 800a0dc:	d8f3      	bhi.n	800a0c6 <_scanf_float+0x326>
 800a0de:	e6a6      	b.n	8009e2e <_scanf_float+0x8e>
 800a0e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0e4:	4632      	mov	r2, r6
 800a0e6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a0ea:	4638      	mov	r0, r7
 800a0ec:	4798      	blx	r3
 800a0ee:	6923      	ldr	r3, [r4, #16]
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	6123      	str	r3, [r4, #16]
 800a0f4:	4545      	cmp	r5, r8
 800a0f6:	d8f3      	bhi.n	800a0e0 <_scanf_float+0x340>
 800a0f8:	e699      	b.n	8009e2e <_scanf_float+0x8e>
 800a0fa:	9b03      	ldr	r3, [sp, #12]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d0c0      	beq.n	800a082 <_scanf_float+0x2e2>
 800a100:	9904      	ldr	r1, [sp, #16]
 800a102:	230a      	movs	r3, #10
 800a104:	4632      	mov	r2, r6
 800a106:	3101      	adds	r1, #1
 800a108:	4638      	mov	r0, r7
 800a10a:	f000 fffd 	bl	800b108 <_strtol_r>
 800a10e:	9b03      	ldr	r3, [sp, #12]
 800a110:	9d04      	ldr	r5, [sp, #16]
 800a112:	1ac2      	subs	r2, r0, r3
 800a114:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a118:	429d      	cmp	r5, r3
 800a11a:	bf28      	it	cs
 800a11c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800a120:	490e      	ldr	r1, [pc, #56]	; (800a15c <_scanf_float+0x3bc>)
 800a122:	4628      	mov	r0, r5
 800a124:	f000 f89c 	bl	800a260 <siprintf>
 800a128:	e7ab      	b.n	800a082 <_scanf_float+0x2e2>
 800a12a:	1d1f      	adds	r7, r3, #4
 800a12c:	f015 0504 	ands.w	r5, r5, #4
 800a130:	f8ca 7000 	str.w	r7, [sl]
 800a134:	d1b5      	bne.n	800a0a2 <_scanf_float+0x302>
 800a136:	681f      	ldr	r7, [r3, #0]
 800a138:	4602      	mov	r2, r0
 800a13a:	460b      	mov	r3, r1
 800a13c:	f7f6 fc66 	bl	8000a0c <__aeabi_dcmpun>
 800a140:	b120      	cbz	r0, 800a14c <_scanf_float+0x3ac>
 800a142:	4628      	mov	r0, r5
 800a144:	f000 f888 	bl	800a258 <nanf>
 800a148:	6038      	str	r0, [r7, #0]
 800a14a:	e7ad      	b.n	800a0a8 <_scanf_float+0x308>
 800a14c:	4640      	mov	r0, r8
 800a14e:	4649      	mov	r1, r9
 800a150:	f7f6 fcba 	bl	8000ac8 <__aeabi_d2f>
 800a154:	e7f8      	b.n	800a148 <_scanf_float+0x3a8>
 800a156:	2600      	movs	r6, #0
 800a158:	e66a      	b.n	8009e30 <_scanf_float+0x90>
 800a15a:	bf00      	nop
 800a15c:	0800e36e 	.word	0x0800e36e

0800a160 <iprintf>:
 800a160:	b40f      	push	{r0, r1, r2, r3}
 800a162:	4b0a      	ldr	r3, [pc, #40]	; (800a18c <iprintf+0x2c>)
 800a164:	b513      	push	{r0, r1, r4, lr}
 800a166:	681c      	ldr	r4, [r3, #0]
 800a168:	b124      	cbz	r4, 800a174 <iprintf+0x14>
 800a16a:	69a3      	ldr	r3, [r4, #24]
 800a16c:	b913      	cbnz	r3, 800a174 <iprintf+0x14>
 800a16e:	4620      	mov	r0, r4
 800a170:	f001 fff2 	bl	800c158 <__sinit>
 800a174:	ab05      	add	r3, sp, #20
 800a176:	9a04      	ldr	r2, [sp, #16]
 800a178:	68a1      	ldr	r1, [r4, #8]
 800a17a:	4620      	mov	r0, r4
 800a17c:	9301      	str	r3, [sp, #4]
 800a17e:	f003 fc39 	bl	800d9f4 <_vfiprintf_r>
 800a182:	b002      	add	sp, #8
 800a184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a188:	b004      	add	sp, #16
 800a18a:	4770      	bx	lr
 800a18c:	2000017c 	.word	0x2000017c

0800a190 <_puts_r>:
 800a190:	b570      	push	{r4, r5, r6, lr}
 800a192:	460e      	mov	r6, r1
 800a194:	4605      	mov	r5, r0
 800a196:	b118      	cbz	r0, 800a1a0 <_puts_r+0x10>
 800a198:	6983      	ldr	r3, [r0, #24]
 800a19a:	b90b      	cbnz	r3, 800a1a0 <_puts_r+0x10>
 800a19c:	f001 ffdc 	bl	800c158 <__sinit>
 800a1a0:	69ab      	ldr	r3, [r5, #24]
 800a1a2:	68ac      	ldr	r4, [r5, #8]
 800a1a4:	b913      	cbnz	r3, 800a1ac <_puts_r+0x1c>
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	f001 ffd6 	bl	800c158 <__sinit>
 800a1ac:	4b23      	ldr	r3, [pc, #140]	; (800a23c <_puts_r+0xac>)
 800a1ae:	429c      	cmp	r4, r3
 800a1b0:	d117      	bne.n	800a1e2 <_puts_r+0x52>
 800a1b2:	686c      	ldr	r4, [r5, #4]
 800a1b4:	89a3      	ldrh	r3, [r4, #12]
 800a1b6:	071b      	lsls	r3, r3, #28
 800a1b8:	d51d      	bpl.n	800a1f6 <_puts_r+0x66>
 800a1ba:	6923      	ldr	r3, [r4, #16]
 800a1bc:	b1db      	cbz	r3, 800a1f6 <_puts_r+0x66>
 800a1be:	3e01      	subs	r6, #1
 800a1c0:	68a3      	ldr	r3, [r4, #8]
 800a1c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	60a3      	str	r3, [r4, #8]
 800a1ca:	b9e9      	cbnz	r1, 800a208 <_puts_r+0x78>
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	da2e      	bge.n	800a22e <_puts_r+0x9e>
 800a1d0:	4622      	mov	r2, r4
 800a1d2:	210a      	movs	r1, #10
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	f000 ffa9 	bl	800b12c <__swbuf_r>
 800a1da:	3001      	adds	r0, #1
 800a1dc:	d011      	beq.n	800a202 <_puts_r+0x72>
 800a1de:	200a      	movs	r0, #10
 800a1e0:	e011      	b.n	800a206 <_puts_r+0x76>
 800a1e2:	4b17      	ldr	r3, [pc, #92]	; (800a240 <_puts_r+0xb0>)
 800a1e4:	429c      	cmp	r4, r3
 800a1e6:	d101      	bne.n	800a1ec <_puts_r+0x5c>
 800a1e8:	68ac      	ldr	r4, [r5, #8]
 800a1ea:	e7e3      	b.n	800a1b4 <_puts_r+0x24>
 800a1ec:	4b15      	ldr	r3, [pc, #84]	; (800a244 <_puts_r+0xb4>)
 800a1ee:	429c      	cmp	r4, r3
 800a1f0:	bf08      	it	eq
 800a1f2:	68ec      	ldreq	r4, [r5, #12]
 800a1f4:	e7de      	b.n	800a1b4 <_puts_r+0x24>
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	f000 fffb 	bl	800b1f4 <__swsetup_r>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d0dd      	beq.n	800a1be <_puts_r+0x2e>
 800a202:	f04f 30ff 	mov.w	r0, #4294967295
 800a206:	bd70      	pop	{r4, r5, r6, pc}
 800a208:	2b00      	cmp	r3, #0
 800a20a:	da04      	bge.n	800a216 <_puts_r+0x86>
 800a20c:	69a2      	ldr	r2, [r4, #24]
 800a20e:	429a      	cmp	r2, r3
 800a210:	dc06      	bgt.n	800a220 <_puts_r+0x90>
 800a212:	290a      	cmp	r1, #10
 800a214:	d004      	beq.n	800a220 <_puts_r+0x90>
 800a216:	6823      	ldr	r3, [r4, #0]
 800a218:	1c5a      	adds	r2, r3, #1
 800a21a:	6022      	str	r2, [r4, #0]
 800a21c:	7019      	strb	r1, [r3, #0]
 800a21e:	e7cf      	b.n	800a1c0 <_puts_r+0x30>
 800a220:	4622      	mov	r2, r4
 800a222:	4628      	mov	r0, r5
 800a224:	f000 ff82 	bl	800b12c <__swbuf_r>
 800a228:	3001      	adds	r0, #1
 800a22a:	d1c9      	bne.n	800a1c0 <_puts_r+0x30>
 800a22c:	e7e9      	b.n	800a202 <_puts_r+0x72>
 800a22e:	200a      	movs	r0, #10
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	1c5a      	adds	r2, r3, #1
 800a234:	6022      	str	r2, [r4, #0]
 800a236:	7018      	strb	r0, [r3, #0]
 800a238:	e7e5      	b.n	800a206 <_puts_r+0x76>
 800a23a:	bf00      	nop
 800a23c:	0800e3f8 	.word	0x0800e3f8
 800a240:	0800e418 	.word	0x0800e418
 800a244:	0800e3d8 	.word	0x0800e3d8

0800a248 <puts>:
 800a248:	4b02      	ldr	r3, [pc, #8]	; (800a254 <puts+0xc>)
 800a24a:	4601      	mov	r1, r0
 800a24c:	6818      	ldr	r0, [r3, #0]
 800a24e:	f7ff bf9f 	b.w	800a190 <_puts_r>
 800a252:	bf00      	nop
 800a254:	2000017c 	.word	0x2000017c

0800a258 <nanf>:
 800a258:	4800      	ldr	r0, [pc, #0]	; (800a25c <nanf+0x4>)
 800a25a:	4770      	bx	lr
 800a25c:	7fc00000 	.word	0x7fc00000

0800a260 <siprintf>:
 800a260:	b40e      	push	{r1, r2, r3}
 800a262:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a266:	b500      	push	{lr}
 800a268:	b09c      	sub	sp, #112	; 0x70
 800a26a:	ab1d      	add	r3, sp, #116	; 0x74
 800a26c:	9002      	str	r0, [sp, #8]
 800a26e:	9006      	str	r0, [sp, #24]
 800a270:	9107      	str	r1, [sp, #28]
 800a272:	9104      	str	r1, [sp, #16]
 800a274:	4808      	ldr	r0, [pc, #32]	; (800a298 <siprintf+0x38>)
 800a276:	4909      	ldr	r1, [pc, #36]	; (800a29c <siprintf+0x3c>)
 800a278:	f853 2b04 	ldr.w	r2, [r3], #4
 800a27c:	9105      	str	r1, [sp, #20]
 800a27e:	6800      	ldr	r0, [r0, #0]
 800a280:	a902      	add	r1, sp, #8
 800a282:	9301      	str	r3, [sp, #4]
 800a284:	f003 f8ec 	bl	800d460 <_svfiprintf_r>
 800a288:	2200      	movs	r2, #0
 800a28a:	9b02      	ldr	r3, [sp, #8]
 800a28c:	701a      	strb	r2, [r3, #0]
 800a28e:	b01c      	add	sp, #112	; 0x70
 800a290:	f85d eb04 	ldr.w	lr, [sp], #4
 800a294:	b003      	add	sp, #12
 800a296:	4770      	bx	lr
 800a298:	2000017c 	.word	0x2000017c
 800a29c:	ffff0208 	.word	0xffff0208

0800a2a0 <siscanf>:
 800a2a0:	b40e      	push	{r1, r2, r3}
 800a2a2:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a2a6:	b530      	push	{r4, r5, lr}
 800a2a8:	b09c      	sub	sp, #112	; 0x70
 800a2aa:	ac1f      	add	r4, sp, #124	; 0x7c
 800a2ac:	f854 5b04 	ldr.w	r5, [r4], #4
 800a2b0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a2b4:	9002      	str	r0, [sp, #8]
 800a2b6:	9006      	str	r0, [sp, #24]
 800a2b8:	f7f5 ff4a 	bl	8000150 <strlen>
 800a2bc:	4b0b      	ldr	r3, [pc, #44]	; (800a2ec <siscanf+0x4c>)
 800a2be:	9003      	str	r0, [sp, #12]
 800a2c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2c6:	9314      	str	r3, [sp, #80]	; 0x50
 800a2c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a2cc:	9007      	str	r0, [sp, #28]
 800a2ce:	4808      	ldr	r0, [pc, #32]	; (800a2f0 <siscanf+0x50>)
 800a2d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a2d4:	462a      	mov	r2, r5
 800a2d6:	4623      	mov	r3, r4
 800a2d8:	a902      	add	r1, sp, #8
 800a2da:	6800      	ldr	r0, [r0, #0]
 800a2dc:	9401      	str	r4, [sp, #4]
 800a2de:	f003 fa11 	bl	800d704 <__ssvfiscanf_r>
 800a2e2:	b01c      	add	sp, #112	; 0x70
 800a2e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2e8:	b003      	add	sp, #12
 800a2ea:	4770      	bx	lr
 800a2ec:	0800a317 	.word	0x0800a317
 800a2f0:	2000017c 	.word	0x2000017c

0800a2f4 <__sread>:
 800a2f4:	b510      	push	{r4, lr}
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fc:	f003 fde8 	bl	800ded0 <_read_r>
 800a300:	2800      	cmp	r0, #0
 800a302:	bfab      	itete	ge
 800a304:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a306:	89a3      	ldrhlt	r3, [r4, #12]
 800a308:	181b      	addge	r3, r3, r0
 800a30a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a30e:	bfac      	ite	ge
 800a310:	6563      	strge	r3, [r4, #84]	; 0x54
 800a312:	81a3      	strhlt	r3, [r4, #12]
 800a314:	bd10      	pop	{r4, pc}

0800a316 <__seofread>:
 800a316:	2000      	movs	r0, #0
 800a318:	4770      	bx	lr

0800a31a <__swrite>:
 800a31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a31e:	461f      	mov	r7, r3
 800a320:	898b      	ldrh	r3, [r1, #12]
 800a322:	4605      	mov	r5, r0
 800a324:	05db      	lsls	r3, r3, #23
 800a326:	460c      	mov	r4, r1
 800a328:	4616      	mov	r6, r2
 800a32a:	d505      	bpl.n	800a338 <__swrite+0x1e>
 800a32c:	2302      	movs	r3, #2
 800a32e:	2200      	movs	r2, #0
 800a330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a334:	f002 fae4 	bl	800c900 <_lseek_r>
 800a338:	89a3      	ldrh	r3, [r4, #12]
 800a33a:	4632      	mov	r2, r6
 800a33c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a340:	81a3      	strh	r3, [r4, #12]
 800a342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a346:	463b      	mov	r3, r7
 800a348:	4628      	mov	r0, r5
 800a34a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a34e:	f000 bf3f 	b.w	800b1d0 <_write_r>

0800a352 <__sseek>:
 800a352:	b510      	push	{r4, lr}
 800a354:	460c      	mov	r4, r1
 800a356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a35a:	f002 fad1 	bl	800c900 <_lseek_r>
 800a35e:	1c43      	adds	r3, r0, #1
 800a360:	89a3      	ldrh	r3, [r4, #12]
 800a362:	bf15      	itete	ne
 800a364:	6560      	strne	r0, [r4, #84]	; 0x54
 800a366:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a36a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a36e:	81a3      	strheq	r3, [r4, #12]
 800a370:	bf18      	it	ne
 800a372:	81a3      	strhne	r3, [r4, #12]
 800a374:	bd10      	pop	{r4, pc}

0800a376 <__sclose>:
 800a376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a37a:	f000 bfa9 	b.w	800b2d0 <_close_r>

0800a37e <strlcpy>:
 800a37e:	b510      	push	{r4, lr}
 800a380:	460b      	mov	r3, r1
 800a382:	b162      	cbz	r2, 800a39e <strlcpy+0x20>
 800a384:	3a01      	subs	r2, #1
 800a386:	d008      	beq.n	800a39a <strlcpy+0x1c>
 800a388:	f813 4b01 	ldrb.w	r4, [r3], #1
 800a38c:	f800 4b01 	strb.w	r4, [r0], #1
 800a390:	2c00      	cmp	r4, #0
 800a392:	d1f7      	bne.n	800a384 <strlcpy+0x6>
 800a394:	1a58      	subs	r0, r3, r1
 800a396:	3801      	subs	r0, #1
 800a398:	bd10      	pop	{r4, pc}
 800a39a:	2200      	movs	r2, #0
 800a39c:	7002      	strb	r2, [r0, #0]
 800a39e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3a2:	2a00      	cmp	r2, #0
 800a3a4:	d1fb      	bne.n	800a39e <strlcpy+0x20>
 800a3a6:	e7f5      	b.n	800a394 <strlcpy+0x16>

0800a3a8 <sulp>:
 800a3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ac:	460f      	mov	r7, r1
 800a3ae:	4690      	mov	r8, r2
 800a3b0:	f002 fe1a 	bl	800cfe8 <__ulp>
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	460d      	mov	r5, r1
 800a3b8:	f1b8 0f00 	cmp.w	r8, #0
 800a3bc:	d011      	beq.n	800a3e2 <sulp+0x3a>
 800a3be:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a3c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	dd0b      	ble.n	800a3e2 <sulp+0x3a>
 800a3ca:	2400      	movs	r4, #0
 800a3cc:	051b      	lsls	r3, r3, #20
 800a3ce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a3d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	462b      	mov	r3, r5
 800a3da:	f7f6 f87d 	bl	80004d8 <__aeabi_dmul>
 800a3de:	4604      	mov	r4, r0
 800a3e0:	460d      	mov	r5, r1
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	4629      	mov	r1, r5
 800a3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3ea:	0000      	movs	r0, r0
 800a3ec:	0000      	movs	r0, r0
	...

0800a3f0 <_strtod_l>:
 800a3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f4:	461f      	mov	r7, r3
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	b0a1      	sub	sp, #132	; 0x84
 800a3fa:	4683      	mov	fp, r0
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	460e      	mov	r6, r1
 800a400:	9217      	str	r2, [sp, #92]	; 0x5c
 800a402:	931c      	str	r3, [sp, #112]	; 0x70
 800a404:	f002 fa6c 	bl	800c8e0 <__localeconv_l>
 800a408:	4680      	mov	r8, r0
 800a40a:	6800      	ldr	r0, [r0, #0]
 800a40c:	f7f5 fea0 	bl	8000150 <strlen>
 800a410:	f04f 0900 	mov.w	r9, #0
 800a414:	4604      	mov	r4, r0
 800a416:	f04f 0a00 	mov.w	sl, #0
 800a41a:	961b      	str	r6, [sp, #108]	; 0x6c
 800a41c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a41e:	781a      	ldrb	r2, [r3, #0]
 800a420:	2a0d      	cmp	r2, #13
 800a422:	d832      	bhi.n	800a48a <_strtod_l+0x9a>
 800a424:	2a09      	cmp	r2, #9
 800a426:	d236      	bcs.n	800a496 <_strtod_l+0xa6>
 800a428:	2a00      	cmp	r2, #0
 800a42a:	d03e      	beq.n	800a4aa <_strtod_l+0xba>
 800a42c:	2300      	movs	r3, #0
 800a42e:	930d      	str	r3, [sp, #52]	; 0x34
 800a430:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a432:	782b      	ldrb	r3, [r5, #0]
 800a434:	2b30      	cmp	r3, #48	; 0x30
 800a436:	f040 80ac 	bne.w	800a592 <_strtod_l+0x1a2>
 800a43a:	786b      	ldrb	r3, [r5, #1]
 800a43c:	2b58      	cmp	r3, #88	; 0x58
 800a43e:	d001      	beq.n	800a444 <_strtod_l+0x54>
 800a440:	2b78      	cmp	r3, #120	; 0x78
 800a442:	d167      	bne.n	800a514 <_strtod_l+0x124>
 800a444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a446:	9702      	str	r7, [sp, #8]
 800a448:	9301      	str	r3, [sp, #4]
 800a44a:	ab1c      	add	r3, sp, #112	; 0x70
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	4a89      	ldr	r2, [pc, #548]	; (800a674 <_strtod_l+0x284>)
 800a450:	ab1d      	add	r3, sp, #116	; 0x74
 800a452:	a91b      	add	r1, sp, #108	; 0x6c
 800a454:	4658      	mov	r0, fp
 800a456:	f001 ff59 	bl	800c30c <__gethex>
 800a45a:	f010 0407 	ands.w	r4, r0, #7
 800a45e:	4606      	mov	r6, r0
 800a460:	d005      	beq.n	800a46e <_strtod_l+0x7e>
 800a462:	2c06      	cmp	r4, #6
 800a464:	d12b      	bne.n	800a4be <_strtod_l+0xce>
 800a466:	2300      	movs	r3, #0
 800a468:	3501      	adds	r5, #1
 800a46a:	951b      	str	r5, [sp, #108]	; 0x6c
 800a46c:	930d      	str	r3, [sp, #52]	; 0x34
 800a46e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a470:	2b00      	cmp	r3, #0
 800a472:	f040 85a6 	bne.w	800afc2 <_strtod_l+0xbd2>
 800a476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a478:	b1e3      	cbz	r3, 800a4b4 <_strtod_l+0xc4>
 800a47a:	464a      	mov	r2, r9
 800a47c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800a480:	4610      	mov	r0, r2
 800a482:	4619      	mov	r1, r3
 800a484:	b021      	add	sp, #132	; 0x84
 800a486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48a:	2a2b      	cmp	r2, #43	; 0x2b
 800a48c:	d015      	beq.n	800a4ba <_strtod_l+0xca>
 800a48e:	2a2d      	cmp	r2, #45	; 0x2d
 800a490:	d004      	beq.n	800a49c <_strtod_l+0xac>
 800a492:	2a20      	cmp	r2, #32
 800a494:	d1ca      	bne.n	800a42c <_strtod_l+0x3c>
 800a496:	3301      	adds	r3, #1
 800a498:	931b      	str	r3, [sp, #108]	; 0x6c
 800a49a:	e7bf      	b.n	800a41c <_strtod_l+0x2c>
 800a49c:	2201      	movs	r2, #1
 800a49e:	920d      	str	r2, [sp, #52]	; 0x34
 800a4a0:	1c5a      	adds	r2, r3, #1
 800a4a2:	921b      	str	r2, [sp, #108]	; 0x6c
 800a4a4:	785b      	ldrb	r3, [r3, #1]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1c2      	bne.n	800a430 <_strtod_l+0x40>
 800a4aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4ac:	961b      	str	r6, [sp, #108]	; 0x6c
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f040 8585 	bne.w	800afbe <_strtod_l+0xbce>
 800a4b4:	464a      	mov	r2, r9
 800a4b6:	4653      	mov	r3, sl
 800a4b8:	e7e2      	b.n	800a480 <_strtod_l+0x90>
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	e7ef      	b.n	800a49e <_strtod_l+0xae>
 800a4be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a4c0:	b13a      	cbz	r2, 800a4d2 <_strtod_l+0xe2>
 800a4c2:	2135      	movs	r1, #53	; 0x35
 800a4c4:	a81e      	add	r0, sp, #120	; 0x78
 800a4c6:	f002 fe82 	bl	800d1ce <__copybits>
 800a4ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a4cc:	4658      	mov	r0, fp
 800a4ce:	f002 faf4 	bl	800caba <_Bfree>
 800a4d2:	3c01      	subs	r4, #1
 800a4d4:	2c04      	cmp	r4, #4
 800a4d6:	d806      	bhi.n	800a4e6 <_strtod_l+0xf6>
 800a4d8:	e8df f004 	tbb	[pc, r4]
 800a4dc:	1714030a 	.word	0x1714030a
 800a4e0:	0a          	.byte	0x0a
 800a4e1:	00          	.byte	0x00
 800a4e2:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800a4e6:	0731      	lsls	r1, r6, #28
 800a4e8:	d5c1      	bpl.n	800a46e <_strtod_l+0x7e>
 800a4ea:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800a4ee:	e7be      	b.n	800a46e <_strtod_l+0x7e>
 800a4f0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a4f2:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800a4f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a4fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a4fe:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800a502:	e7f0      	b.n	800a4e6 <_strtod_l+0xf6>
 800a504:	f8df a170 	ldr.w	sl, [pc, #368]	; 800a678 <_strtod_l+0x288>
 800a508:	e7ed      	b.n	800a4e6 <_strtod_l+0xf6>
 800a50a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800a50e:	f04f 39ff 	mov.w	r9, #4294967295
 800a512:	e7e8      	b.n	800a4e6 <_strtod_l+0xf6>
 800a514:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a516:	1c5a      	adds	r2, r3, #1
 800a518:	921b      	str	r2, [sp, #108]	; 0x6c
 800a51a:	785b      	ldrb	r3, [r3, #1]
 800a51c:	2b30      	cmp	r3, #48	; 0x30
 800a51e:	d0f9      	beq.n	800a514 <_strtod_l+0x124>
 800a520:	2b00      	cmp	r3, #0
 800a522:	d0a4      	beq.n	800a46e <_strtod_l+0x7e>
 800a524:	2301      	movs	r3, #1
 800a526:	2500      	movs	r5, #0
 800a528:	220a      	movs	r2, #10
 800a52a:	9307      	str	r3, [sp, #28]
 800a52c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a52e:	9506      	str	r5, [sp, #24]
 800a530:	9308      	str	r3, [sp, #32]
 800a532:	9504      	str	r5, [sp, #16]
 800a534:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a536:	7807      	ldrb	r7, [r0, #0]
 800a538:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a53c:	b2d9      	uxtb	r1, r3
 800a53e:	2909      	cmp	r1, #9
 800a540:	d929      	bls.n	800a596 <_strtod_l+0x1a6>
 800a542:	4622      	mov	r2, r4
 800a544:	f8d8 1000 	ldr.w	r1, [r8]
 800a548:	f003 fd15 	bl	800df76 <strncmp>
 800a54c:	2800      	cmp	r0, #0
 800a54e:	d031      	beq.n	800a5b4 <_strtod_l+0x1c4>
 800a550:	2000      	movs	r0, #0
 800a552:	463b      	mov	r3, r7
 800a554:	4602      	mov	r2, r0
 800a556:	9c04      	ldr	r4, [sp, #16]
 800a558:	9005      	str	r0, [sp, #20]
 800a55a:	2b65      	cmp	r3, #101	; 0x65
 800a55c:	d001      	beq.n	800a562 <_strtod_l+0x172>
 800a55e:	2b45      	cmp	r3, #69	; 0x45
 800a560:	d114      	bne.n	800a58c <_strtod_l+0x19c>
 800a562:	b924      	cbnz	r4, 800a56e <_strtod_l+0x17e>
 800a564:	b910      	cbnz	r0, 800a56c <_strtod_l+0x17c>
 800a566:	9b07      	ldr	r3, [sp, #28]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d09e      	beq.n	800a4aa <_strtod_l+0xba>
 800a56c:	2400      	movs	r4, #0
 800a56e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a570:	1c73      	adds	r3, r6, #1
 800a572:	931b      	str	r3, [sp, #108]	; 0x6c
 800a574:	7873      	ldrb	r3, [r6, #1]
 800a576:	2b2b      	cmp	r3, #43	; 0x2b
 800a578:	d078      	beq.n	800a66c <_strtod_l+0x27c>
 800a57a:	2b2d      	cmp	r3, #45	; 0x2d
 800a57c:	d070      	beq.n	800a660 <_strtod_l+0x270>
 800a57e:	f04f 0c00 	mov.w	ip, #0
 800a582:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800a586:	2f09      	cmp	r7, #9
 800a588:	d97c      	bls.n	800a684 <_strtod_l+0x294>
 800a58a:	961b      	str	r6, [sp, #108]	; 0x6c
 800a58c:	f04f 0e00 	mov.w	lr, #0
 800a590:	e09a      	b.n	800a6c8 <_strtod_l+0x2d8>
 800a592:	2300      	movs	r3, #0
 800a594:	e7c7      	b.n	800a526 <_strtod_l+0x136>
 800a596:	9904      	ldr	r1, [sp, #16]
 800a598:	3001      	adds	r0, #1
 800a59a:	2908      	cmp	r1, #8
 800a59c:	bfd7      	itett	le
 800a59e:	9906      	ldrle	r1, [sp, #24]
 800a5a0:	fb02 3505 	mlagt	r5, r2, r5, r3
 800a5a4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a5a8:	9306      	strle	r3, [sp, #24]
 800a5aa:	9b04      	ldr	r3, [sp, #16]
 800a5ac:	901b      	str	r0, [sp, #108]	; 0x6c
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	9304      	str	r3, [sp, #16]
 800a5b2:	e7bf      	b.n	800a534 <_strtod_l+0x144>
 800a5b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5b6:	191a      	adds	r2, r3, r4
 800a5b8:	921b      	str	r2, [sp, #108]	; 0x6c
 800a5ba:	9a04      	ldr	r2, [sp, #16]
 800a5bc:	5d1b      	ldrb	r3, [r3, r4]
 800a5be:	2a00      	cmp	r2, #0
 800a5c0:	d037      	beq.n	800a632 <_strtod_l+0x242>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	9c04      	ldr	r4, [sp, #16]
 800a5c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a5ca:	2909      	cmp	r1, #9
 800a5cc:	d913      	bls.n	800a5f6 <_strtod_l+0x206>
 800a5ce:	2101      	movs	r1, #1
 800a5d0:	9105      	str	r1, [sp, #20]
 800a5d2:	e7c2      	b.n	800a55a <_strtod_l+0x16a>
 800a5d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5d6:	3001      	adds	r0, #1
 800a5d8:	1c5a      	adds	r2, r3, #1
 800a5da:	921b      	str	r2, [sp, #108]	; 0x6c
 800a5dc:	785b      	ldrb	r3, [r3, #1]
 800a5de:	2b30      	cmp	r3, #48	; 0x30
 800a5e0:	d0f8      	beq.n	800a5d4 <_strtod_l+0x1e4>
 800a5e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a5e6:	2a08      	cmp	r2, #8
 800a5e8:	f200 84f0 	bhi.w	800afcc <_strtod_l+0xbdc>
 800a5ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a5ee:	9208      	str	r2, [sp, #32]
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	2000      	movs	r0, #0
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a5fa:	f100 0101 	add.w	r1, r0, #1
 800a5fe:	d012      	beq.n	800a626 <_strtod_l+0x236>
 800a600:	440a      	add	r2, r1
 800a602:	270a      	movs	r7, #10
 800a604:	4621      	mov	r1, r4
 800a606:	eb00 0c04 	add.w	ip, r0, r4
 800a60a:	458c      	cmp	ip, r1
 800a60c:	d113      	bne.n	800a636 <_strtod_l+0x246>
 800a60e:	1821      	adds	r1, r4, r0
 800a610:	2908      	cmp	r1, #8
 800a612:	f104 0401 	add.w	r4, r4, #1
 800a616:	4404      	add	r4, r0
 800a618:	dc19      	bgt.n	800a64e <_strtod_l+0x25e>
 800a61a:	210a      	movs	r1, #10
 800a61c:	9b06      	ldr	r3, [sp, #24]
 800a61e:	fb01 e303 	mla	r3, r1, r3, lr
 800a622:	9306      	str	r3, [sp, #24]
 800a624:	2100      	movs	r1, #0
 800a626:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a628:	1c58      	adds	r0, r3, #1
 800a62a:	901b      	str	r0, [sp, #108]	; 0x6c
 800a62c:	785b      	ldrb	r3, [r3, #1]
 800a62e:	4608      	mov	r0, r1
 800a630:	e7c9      	b.n	800a5c6 <_strtod_l+0x1d6>
 800a632:	9804      	ldr	r0, [sp, #16]
 800a634:	e7d3      	b.n	800a5de <_strtod_l+0x1ee>
 800a636:	2908      	cmp	r1, #8
 800a638:	f101 0101 	add.w	r1, r1, #1
 800a63c:	dc03      	bgt.n	800a646 <_strtod_l+0x256>
 800a63e:	9b06      	ldr	r3, [sp, #24]
 800a640:	437b      	muls	r3, r7
 800a642:	9306      	str	r3, [sp, #24]
 800a644:	e7e1      	b.n	800a60a <_strtod_l+0x21a>
 800a646:	2910      	cmp	r1, #16
 800a648:	bfd8      	it	le
 800a64a:	437d      	mulle	r5, r7
 800a64c:	e7dd      	b.n	800a60a <_strtod_l+0x21a>
 800a64e:	2c10      	cmp	r4, #16
 800a650:	bfdc      	itt	le
 800a652:	210a      	movle	r1, #10
 800a654:	fb01 e505 	mlale	r5, r1, r5, lr
 800a658:	e7e4      	b.n	800a624 <_strtod_l+0x234>
 800a65a:	2301      	movs	r3, #1
 800a65c:	9305      	str	r3, [sp, #20]
 800a65e:	e781      	b.n	800a564 <_strtod_l+0x174>
 800a660:	f04f 0c01 	mov.w	ip, #1
 800a664:	1cb3      	adds	r3, r6, #2
 800a666:	931b      	str	r3, [sp, #108]	; 0x6c
 800a668:	78b3      	ldrb	r3, [r6, #2]
 800a66a:	e78a      	b.n	800a582 <_strtod_l+0x192>
 800a66c:	f04f 0c00 	mov.w	ip, #0
 800a670:	e7f8      	b.n	800a664 <_strtod_l+0x274>
 800a672:	bf00      	nop
 800a674:	0800e374 	.word	0x0800e374
 800a678:	7ff00000 	.word	0x7ff00000
 800a67c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a67e:	1c5f      	adds	r7, r3, #1
 800a680:	971b      	str	r7, [sp, #108]	; 0x6c
 800a682:	785b      	ldrb	r3, [r3, #1]
 800a684:	2b30      	cmp	r3, #48	; 0x30
 800a686:	d0f9      	beq.n	800a67c <_strtod_l+0x28c>
 800a688:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a68c:	2f08      	cmp	r7, #8
 800a68e:	f63f af7d 	bhi.w	800a58c <_strtod_l+0x19c>
 800a692:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a696:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a698:	9309      	str	r3, [sp, #36]	; 0x24
 800a69a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a69c:	1c5f      	adds	r7, r3, #1
 800a69e:	971b      	str	r7, [sp, #108]	; 0x6c
 800a6a0:	785b      	ldrb	r3, [r3, #1]
 800a6a2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a6a6:	f1b8 0f09 	cmp.w	r8, #9
 800a6aa:	d937      	bls.n	800a71c <_strtod_l+0x32c>
 800a6ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6ae:	1a7f      	subs	r7, r7, r1
 800a6b0:	2f08      	cmp	r7, #8
 800a6b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a6b6:	dc37      	bgt.n	800a728 <_strtod_l+0x338>
 800a6b8:	45be      	cmp	lr, r7
 800a6ba:	bfa8      	it	ge
 800a6bc:	46be      	movge	lr, r7
 800a6be:	f1bc 0f00 	cmp.w	ip, #0
 800a6c2:	d001      	beq.n	800a6c8 <_strtod_l+0x2d8>
 800a6c4:	f1ce 0e00 	rsb	lr, lr, #0
 800a6c8:	2c00      	cmp	r4, #0
 800a6ca:	d151      	bne.n	800a770 <_strtod_l+0x380>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	f47f aece 	bne.w	800a46e <_strtod_l+0x7e>
 800a6d2:	9a07      	ldr	r2, [sp, #28]
 800a6d4:	2a00      	cmp	r2, #0
 800a6d6:	f47f aeca 	bne.w	800a46e <_strtod_l+0x7e>
 800a6da:	9a05      	ldr	r2, [sp, #20]
 800a6dc:	2a00      	cmp	r2, #0
 800a6de:	f47f aee4 	bne.w	800a4aa <_strtod_l+0xba>
 800a6e2:	2b4e      	cmp	r3, #78	; 0x4e
 800a6e4:	d027      	beq.n	800a736 <_strtod_l+0x346>
 800a6e6:	dc21      	bgt.n	800a72c <_strtod_l+0x33c>
 800a6e8:	2b49      	cmp	r3, #73	; 0x49
 800a6ea:	f47f aede 	bne.w	800a4aa <_strtod_l+0xba>
 800a6ee:	49a4      	ldr	r1, [pc, #656]	; (800a980 <_strtod_l+0x590>)
 800a6f0:	a81b      	add	r0, sp, #108	; 0x6c
 800a6f2:	f002 f83f 	bl	800c774 <__match>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	f43f aed7 	beq.w	800a4aa <_strtod_l+0xba>
 800a6fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6fe:	49a1      	ldr	r1, [pc, #644]	; (800a984 <_strtod_l+0x594>)
 800a700:	3b01      	subs	r3, #1
 800a702:	a81b      	add	r0, sp, #108	; 0x6c
 800a704:	931b      	str	r3, [sp, #108]	; 0x6c
 800a706:	f002 f835 	bl	800c774 <__match>
 800a70a:	b910      	cbnz	r0, 800a712 <_strtod_l+0x322>
 800a70c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a70e:	3301      	adds	r3, #1
 800a710:	931b      	str	r3, [sp, #108]	; 0x6c
 800a712:	f8df a284 	ldr.w	sl, [pc, #644]	; 800a998 <_strtod_l+0x5a8>
 800a716:	f04f 0900 	mov.w	r9, #0
 800a71a:	e6a8      	b.n	800a46e <_strtod_l+0x7e>
 800a71c:	210a      	movs	r1, #10
 800a71e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a722:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a726:	e7b8      	b.n	800a69a <_strtod_l+0x2aa>
 800a728:	46be      	mov	lr, r7
 800a72a:	e7c8      	b.n	800a6be <_strtod_l+0x2ce>
 800a72c:	2b69      	cmp	r3, #105	; 0x69
 800a72e:	d0de      	beq.n	800a6ee <_strtod_l+0x2fe>
 800a730:	2b6e      	cmp	r3, #110	; 0x6e
 800a732:	f47f aeba 	bne.w	800a4aa <_strtod_l+0xba>
 800a736:	4994      	ldr	r1, [pc, #592]	; (800a988 <_strtod_l+0x598>)
 800a738:	a81b      	add	r0, sp, #108	; 0x6c
 800a73a:	f002 f81b 	bl	800c774 <__match>
 800a73e:	2800      	cmp	r0, #0
 800a740:	f43f aeb3 	beq.w	800a4aa <_strtod_l+0xba>
 800a744:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	2b28      	cmp	r3, #40	; 0x28
 800a74a:	d10e      	bne.n	800a76a <_strtod_l+0x37a>
 800a74c:	aa1e      	add	r2, sp, #120	; 0x78
 800a74e:	498f      	ldr	r1, [pc, #572]	; (800a98c <_strtod_l+0x59c>)
 800a750:	a81b      	add	r0, sp, #108	; 0x6c
 800a752:	f002 f823 	bl	800c79c <__hexnan>
 800a756:	2805      	cmp	r0, #5
 800a758:	d107      	bne.n	800a76a <_strtod_l+0x37a>
 800a75a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a75c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800a760:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800a764:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800a768:	e681      	b.n	800a46e <_strtod_l+0x7e>
 800a76a:	f8df a234 	ldr.w	sl, [pc, #564]	; 800a9a0 <_strtod_l+0x5b0>
 800a76e:	e7d2      	b.n	800a716 <_strtod_l+0x326>
 800a770:	ebae 0302 	sub.w	r3, lr, r2
 800a774:	9307      	str	r3, [sp, #28]
 800a776:	9b04      	ldr	r3, [sp, #16]
 800a778:	9806      	ldr	r0, [sp, #24]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	bf08      	it	eq
 800a77e:	4623      	moveq	r3, r4
 800a780:	2c10      	cmp	r4, #16
 800a782:	9304      	str	r3, [sp, #16]
 800a784:	46a0      	mov	r8, r4
 800a786:	bfa8      	it	ge
 800a788:	f04f 0810 	movge.w	r8, #16
 800a78c:	f7f5 fe2a 	bl	80003e4 <__aeabi_ui2d>
 800a790:	2c09      	cmp	r4, #9
 800a792:	4681      	mov	r9, r0
 800a794:	468a      	mov	sl, r1
 800a796:	dc13      	bgt.n	800a7c0 <_strtod_l+0x3d0>
 800a798:	9b07      	ldr	r3, [sp, #28]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	f43f ae67 	beq.w	800a46e <_strtod_l+0x7e>
 800a7a0:	9b07      	ldr	r3, [sp, #28]
 800a7a2:	dd7e      	ble.n	800a8a2 <_strtod_l+0x4b2>
 800a7a4:	2b16      	cmp	r3, #22
 800a7a6:	dc65      	bgt.n	800a874 <_strtod_l+0x484>
 800a7a8:	4a79      	ldr	r2, [pc, #484]	; (800a990 <_strtod_l+0x5a0>)
 800a7aa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a7ae:	464a      	mov	r2, r9
 800a7b0:	e9de 0100 	ldrd	r0, r1, [lr]
 800a7b4:	4653      	mov	r3, sl
 800a7b6:	f7f5 fe8f 	bl	80004d8 <__aeabi_dmul>
 800a7ba:	4681      	mov	r9, r0
 800a7bc:	468a      	mov	sl, r1
 800a7be:	e656      	b.n	800a46e <_strtod_l+0x7e>
 800a7c0:	4b73      	ldr	r3, [pc, #460]	; (800a990 <_strtod_l+0x5a0>)
 800a7c2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a7c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a7ca:	f7f5 fe85 	bl	80004d8 <__aeabi_dmul>
 800a7ce:	4606      	mov	r6, r0
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	460f      	mov	r7, r1
 800a7d4:	f7f5 fe06 	bl	80003e4 <__aeabi_ui2d>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	460b      	mov	r3, r1
 800a7dc:	4630      	mov	r0, r6
 800a7de:	4639      	mov	r1, r7
 800a7e0:	f7f5 fcc4 	bl	800016c <__adddf3>
 800a7e4:	2c0f      	cmp	r4, #15
 800a7e6:	4681      	mov	r9, r0
 800a7e8:	468a      	mov	sl, r1
 800a7ea:	ddd5      	ble.n	800a798 <_strtod_l+0x3a8>
 800a7ec:	9b07      	ldr	r3, [sp, #28]
 800a7ee:	eba4 0808 	sub.w	r8, r4, r8
 800a7f2:	4498      	add	r8, r3
 800a7f4:	f1b8 0f00 	cmp.w	r8, #0
 800a7f8:	f340 809a 	ble.w	800a930 <_strtod_l+0x540>
 800a7fc:	f018 030f 	ands.w	r3, r8, #15
 800a800:	d00a      	beq.n	800a818 <_strtod_l+0x428>
 800a802:	4963      	ldr	r1, [pc, #396]	; (800a990 <_strtod_l+0x5a0>)
 800a804:	464a      	mov	r2, r9
 800a806:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a80a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a80e:	4653      	mov	r3, sl
 800a810:	f7f5 fe62 	bl	80004d8 <__aeabi_dmul>
 800a814:	4681      	mov	r9, r0
 800a816:	468a      	mov	sl, r1
 800a818:	f038 080f 	bics.w	r8, r8, #15
 800a81c:	d077      	beq.n	800a90e <_strtod_l+0x51e>
 800a81e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a822:	dd4b      	ble.n	800a8bc <_strtod_l+0x4cc>
 800a824:	f04f 0800 	mov.w	r8, #0
 800a828:	f8cd 8010 	str.w	r8, [sp, #16]
 800a82c:	f8cd 8020 	str.w	r8, [sp, #32]
 800a830:	f8cd 8018 	str.w	r8, [sp, #24]
 800a834:	2322      	movs	r3, #34	; 0x22
 800a836:	f04f 0900 	mov.w	r9, #0
 800a83a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800a998 <_strtod_l+0x5a8>
 800a83e:	f8cb 3000 	str.w	r3, [fp]
 800a842:	9b08      	ldr	r3, [sp, #32]
 800a844:	2b00      	cmp	r3, #0
 800a846:	f43f ae12 	beq.w	800a46e <_strtod_l+0x7e>
 800a84a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a84c:	4658      	mov	r0, fp
 800a84e:	f002 f934 	bl	800caba <_Bfree>
 800a852:	9906      	ldr	r1, [sp, #24]
 800a854:	4658      	mov	r0, fp
 800a856:	f002 f930 	bl	800caba <_Bfree>
 800a85a:	9904      	ldr	r1, [sp, #16]
 800a85c:	4658      	mov	r0, fp
 800a85e:	f002 f92c 	bl	800caba <_Bfree>
 800a862:	9908      	ldr	r1, [sp, #32]
 800a864:	4658      	mov	r0, fp
 800a866:	f002 f928 	bl	800caba <_Bfree>
 800a86a:	4641      	mov	r1, r8
 800a86c:	4658      	mov	r0, fp
 800a86e:	f002 f924 	bl	800caba <_Bfree>
 800a872:	e5fc      	b.n	800a46e <_strtod_l+0x7e>
 800a874:	9a07      	ldr	r2, [sp, #28]
 800a876:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a87a:	4293      	cmp	r3, r2
 800a87c:	dbb6      	blt.n	800a7ec <_strtod_l+0x3fc>
 800a87e:	4d44      	ldr	r5, [pc, #272]	; (800a990 <_strtod_l+0x5a0>)
 800a880:	f1c4 040f 	rsb	r4, r4, #15
 800a884:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a888:	464a      	mov	r2, r9
 800a88a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a88e:	4653      	mov	r3, sl
 800a890:	f7f5 fe22 	bl	80004d8 <__aeabi_dmul>
 800a894:	9b07      	ldr	r3, [sp, #28]
 800a896:	1b1c      	subs	r4, r3, r4
 800a898:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a89c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a8a0:	e789      	b.n	800a7b6 <_strtod_l+0x3c6>
 800a8a2:	f113 0f16 	cmn.w	r3, #22
 800a8a6:	dba1      	blt.n	800a7ec <_strtod_l+0x3fc>
 800a8a8:	4a39      	ldr	r2, [pc, #228]	; (800a990 <_strtod_l+0x5a0>)
 800a8aa:	4648      	mov	r0, r9
 800a8ac:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a8b0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a8b4:	4651      	mov	r1, sl
 800a8b6:	f7f5 ff39 	bl	800072c <__aeabi_ddiv>
 800a8ba:	e77e      	b.n	800a7ba <_strtod_l+0x3ca>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	4648      	mov	r0, r9
 800a8c0:	4651      	mov	r1, sl
 800a8c2:	461d      	mov	r5, r3
 800a8c4:	4e33      	ldr	r6, [pc, #204]	; (800a994 <_strtod_l+0x5a4>)
 800a8c6:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a8ca:	f1b8 0f01 	cmp.w	r8, #1
 800a8ce:	dc21      	bgt.n	800a914 <_strtod_l+0x524>
 800a8d0:	b10b      	cbz	r3, 800a8d6 <_strtod_l+0x4e6>
 800a8d2:	4681      	mov	r9, r0
 800a8d4:	468a      	mov	sl, r1
 800a8d6:	4b2f      	ldr	r3, [pc, #188]	; (800a994 <_strtod_l+0x5a4>)
 800a8d8:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800a8dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a8e0:	464a      	mov	r2, r9
 800a8e2:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a8e6:	4653      	mov	r3, sl
 800a8e8:	f7f5 fdf6 	bl	80004d8 <__aeabi_dmul>
 800a8ec:	4b2a      	ldr	r3, [pc, #168]	; (800a998 <_strtod_l+0x5a8>)
 800a8ee:	460a      	mov	r2, r1
 800a8f0:	400b      	ands	r3, r1
 800a8f2:	492a      	ldr	r1, [pc, #168]	; (800a99c <_strtod_l+0x5ac>)
 800a8f4:	4681      	mov	r9, r0
 800a8f6:	428b      	cmp	r3, r1
 800a8f8:	d894      	bhi.n	800a824 <_strtod_l+0x434>
 800a8fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a8fe:	428b      	cmp	r3, r1
 800a900:	bf86      	itte	hi
 800a902:	f04f 39ff 	movhi.w	r9, #4294967295
 800a906:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800a9a4 <_strtod_l+0x5b4>
 800a90a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800a90e:	2300      	movs	r3, #0
 800a910:	9305      	str	r3, [sp, #20]
 800a912:	e07b      	b.n	800aa0c <_strtod_l+0x61c>
 800a914:	f018 0f01 	tst.w	r8, #1
 800a918:	d006      	beq.n	800a928 <_strtod_l+0x538>
 800a91a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a922:	f7f5 fdd9 	bl	80004d8 <__aeabi_dmul>
 800a926:	2301      	movs	r3, #1
 800a928:	3501      	adds	r5, #1
 800a92a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a92e:	e7cc      	b.n	800a8ca <_strtod_l+0x4da>
 800a930:	d0ed      	beq.n	800a90e <_strtod_l+0x51e>
 800a932:	f1c8 0800 	rsb	r8, r8, #0
 800a936:	f018 020f 	ands.w	r2, r8, #15
 800a93a:	d00a      	beq.n	800a952 <_strtod_l+0x562>
 800a93c:	4b14      	ldr	r3, [pc, #80]	; (800a990 <_strtod_l+0x5a0>)
 800a93e:	4648      	mov	r0, r9
 800a940:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a944:	4651      	mov	r1, sl
 800a946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94a:	f7f5 feef 	bl	800072c <__aeabi_ddiv>
 800a94e:	4681      	mov	r9, r0
 800a950:	468a      	mov	sl, r1
 800a952:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a956:	d0da      	beq.n	800a90e <_strtod_l+0x51e>
 800a958:	f1b8 0f1f 	cmp.w	r8, #31
 800a95c:	dd24      	ble.n	800a9a8 <_strtod_l+0x5b8>
 800a95e:	f04f 0800 	mov.w	r8, #0
 800a962:	f8cd 8010 	str.w	r8, [sp, #16]
 800a966:	f8cd 8020 	str.w	r8, [sp, #32]
 800a96a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a96e:	2322      	movs	r3, #34	; 0x22
 800a970:	f04f 0900 	mov.w	r9, #0
 800a974:	f04f 0a00 	mov.w	sl, #0
 800a978:	f8cb 3000 	str.w	r3, [fp]
 800a97c:	e761      	b.n	800a842 <_strtod_l+0x452>
 800a97e:	bf00      	nop
 800a980:	0800e341 	.word	0x0800e341
 800a984:	0800e3cb 	.word	0x0800e3cb
 800a988:	0800e349 	.word	0x0800e349
 800a98c:	0800e388 	.word	0x0800e388
 800a990:	0800e470 	.word	0x0800e470
 800a994:	0800e448 	.word	0x0800e448
 800a998:	7ff00000 	.word	0x7ff00000
 800a99c:	7ca00000 	.word	0x7ca00000
 800a9a0:	fff80000 	.word	0xfff80000
 800a9a4:	7fefffff 	.word	0x7fefffff
 800a9a8:	f018 0310 	ands.w	r3, r8, #16
 800a9ac:	bf18      	it	ne
 800a9ae:	236a      	movne	r3, #106	; 0x6a
 800a9b0:	4648      	mov	r0, r9
 800a9b2:	9305      	str	r3, [sp, #20]
 800a9b4:	4651      	mov	r1, sl
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	4da1      	ldr	r5, [pc, #644]	; (800ac40 <_strtod_l+0x850>)
 800a9ba:	f1b8 0f00 	cmp.w	r8, #0
 800a9be:	f300 8113 	bgt.w	800abe8 <_strtod_l+0x7f8>
 800a9c2:	b10b      	cbz	r3, 800a9c8 <_strtod_l+0x5d8>
 800a9c4:	4681      	mov	r9, r0
 800a9c6:	468a      	mov	sl, r1
 800a9c8:	9b05      	ldr	r3, [sp, #20]
 800a9ca:	b1bb      	cbz	r3, 800a9fc <_strtod_l+0x60c>
 800a9cc:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800a9d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	4651      	mov	r1, sl
 800a9d8:	dd10      	ble.n	800a9fc <_strtod_l+0x60c>
 800a9da:	2b1f      	cmp	r3, #31
 800a9dc:	f340 8110 	ble.w	800ac00 <_strtod_l+0x810>
 800a9e0:	2b34      	cmp	r3, #52	; 0x34
 800a9e2:	bfd8      	it	le
 800a9e4:	f04f 32ff 	movle.w	r2, #4294967295
 800a9e8:	f04f 0900 	mov.w	r9, #0
 800a9ec:	bfcf      	iteee	gt
 800a9ee:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800a9f2:	3b20      	suble	r3, #32
 800a9f4:	fa02 f303 	lslle.w	r3, r2, r3
 800a9f8:	ea03 0a01 	andle.w	sl, r3, r1
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	2300      	movs	r3, #0
 800aa00:	4648      	mov	r0, r9
 800aa02:	4651      	mov	r1, sl
 800aa04:	f7f5 ffd0 	bl	80009a8 <__aeabi_dcmpeq>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d1a8      	bne.n	800a95e <_strtod_l+0x56e>
 800aa0c:	9b06      	ldr	r3, [sp, #24]
 800aa0e:	9a04      	ldr	r2, [sp, #16]
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	9908      	ldr	r1, [sp, #32]
 800aa14:	4623      	mov	r3, r4
 800aa16:	4658      	mov	r0, fp
 800aa18:	f002 f8a1 	bl	800cb5e <__s2b>
 800aa1c:	9008      	str	r0, [sp, #32]
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	f43f af00 	beq.w	800a824 <_strtod_l+0x434>
 800aa24:	9a07      	ldr	r2, [sp, #28]
 800aa26:	9b07      	ldr	r3, [sp, #28]
 800aa28:	2a00      	cmp	r2, #0
 800aa2a:	f1c3 0300 	rsb	r3, r3, #0
 800aa2e:	bfa8      	it	ge
 800aa30:	2300      	movge	r3, #0
 800aa32:	f04f 0800 	mov.w	r8, #0
 800aa36:	930e      	str	r3, [sp, #56]	; 0x38
 800aa38:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aa3c:	9316      	str	r3, [sp, #88]	; 0x58
 800aa3e:	f8cd 8010 	str.w	r8, [sp, #16]
 800aa42:	9b08      	ldr	r3, [sp, #32]
 800aa44:	4658      	mov	r0, fp
 800aa46:	6859      	ldr	r1, [r3, #4]
 800aa48:	f002 f803 	bl	800ca52 <_Balloc>
 800aa4c:	9006      	str	r0, [sp, #24]
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	f43f aef0 	beq.w	800a834 <_strtod_l+0x444>
 800aa54:	9b08      	ldr	r3, [sp, #32]
 800aa56:	300c      	adds	r0, #12
 800aa58:	691a      	ldr	r2, [r3, #16]
 800aa5a:	f103 010c 	add.w	r1, r3, #12
 800aa5e:	3202      	adds	r2, #2
 800aa60:	0092      	lsls	r2, r2, #2
 800aa62:	f001 ffeb 	bl	800ca3c <memcpy>
 800aa66:	ab1e      	add	r3, sp, #120	; 0x78
 800aa68:	9301      	str	r3, [sp, #4]
 800aa6a:	ab1d      	add	r3, sp, #116	; 0x74
 800aa6c:	9300      	str	r3, [sp, #0]
 800aa6e:	464a      	mov	r2, r9
 800aa70:	4653      	mov	r3, sl
 800aa72:	4658      	mov	r0, fp
 800aa74:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800aa78:	f002 fb2c 	bl	800d0d4 <__d2b>
 800aa7c:	901c      	str	r0, [sp, #112]	; 0x70
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	f43f aed8 	beq.w	800a834 <_strtod_l+0x444>
 800aa84:	2101      	movs	r1, #1
 800aa86:	4658      	mov	r0, fp
 800aa88:	f002 f8f5 	bl	800cc76 <__i2b>
 800aa8c:	9004      	str	r0, [sp, #16]
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2800      	cmp	r0, #0
 800aa92:	f43f aecf 	beq.w	800a834 <_strtod_l+0x444>
 800aa96:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800aa98:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aa9a:	2d00      	cmp	r5, #0
 800aa9c:	bfab      	itete	ge
 800aa9e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800aaa0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800aaa2:	18ee      	addge	r6, r5, r3
 800aaa4:	1b5c      	sublt	r4, r3, r5
 800aaa6:	9b05      	ldr	r3, [sp, #20]
 800aaa8:	bfa8      	it	ge
 800aaaa:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800aaac:	eba5 0503 	sub.w	r5, r5, r3
 800aab0:	4415      	add	r5, r2
 800aab2:	4b64      	ldr	r3, [pc, #400]	; (800ac44 <_strtod_l+0x854>)
 800aab4:	f105 35ff 	add.w	r5, r5, #4294967295
 800aab8:	bfb8      	it	lt
 800aaba:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800aabc:	429d      	cmp	r5, r3
 800aabe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aac2:	f280 80af 	bge.w	800ac24 <_strtod_l+0x834>
 800aac6:	1b5b      	subs	r3, r3, r5
 800aac8:	2b1f      	cmp	r3, #31
 800aaca:	eba2 0203 	sub.w	r2, r2, r3
 800aace:	f04f 0701 	mov.w	r7, #1
 800aad2:	f300 809c 	bgt.w	800ac0e <_strtod_l+0x81e>
 800aad6:	2500      	movs	r5, #0
 800aad8:	fa07 f303 	lsl.w	r3, r7, r3
 800aadc:	930f      	str	r3, [sp, #60]	; 0x3c
 800aade:	18b7      	adds	r7, r6, r2
 800aae0:	9b05      	ldr	r3, [sp, #20]
 800aae2:	42be      	cmp	r6, r7
 800aae4:	4414      	add	r4, r2
 800aae6:	441c      	add	r4, r3
 800aae8:	4633      	mov	r3, r6
 800aaea:	bfa8      	it	ge
 800aaec:	463b      	movge	r3, r7
 800aaee:	42a3      	cmp	r3, r4
 800aaf0:	bfa8      	it	ge
 800aaf2:	4623      	movge	r3, r4
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	bfc2      	ittt	gt
 800aaf8:	1aff      	subgt	r7, r7, r3
 800aafa:	1ae4      	subgt	r4, r4, r3
 800aafc:	1af6      	subgt	r6, r6, r3
 800aafe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab00:	b1bb      	cbz	r3, 800ab32 <_strtod_l+0x742>
 800ab02:	461a      	mov	r2, r3
 800ab04:	9904      	ldr	r1, [sp, #16]
 800ab06:	4658      	mov	r0, fp
 800ab08:	f002 f954 	bl	800cdb4 <__pow5mult>
 800ab0c:	9004      	str	r0, [sp, #16]
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	f43f ae90 	beq.w	800a834 <_strtod_l+0x444>
 800ab14:	4601      	mov	r1, r0
 800ab16:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ab18:	4658      	mov	r0, fp
 800ab1a:	f002 f8b5 	bl	800cc88 <__multiply>
 800ab1e:	9009      	str	r0, [sp, #36]	; 0x24
 800ab20:	2800      	cmp	r0, #0
 800ab22:	f43f ae87 	beq.w	800a834 <_strtod_l+0x444>
 800ab26:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ab28:	4658      	mov	r0, fp
 800ab2a:	f001 ffc6 	bl	800caba <_Bfree>
 800ab2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab30:	931c      	str	r3, [sp, #112]	; 0x70
 800ab32:	2f00      	cmp	r7, #0
 800ab34:	dc7a      	bgt.n	800ac2c <_strtod_l+0x83c>
 800ab36:	9b07      	ldr	r3, [sp, #28]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	dd08      	ble.n	800ab4e <_strtod_l+0x75e>
 800ab3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab3e:	9906      	ldr	r1, [sp, #24]
 800ab40:	4658      	mov	r0, fp
 800ab42:	f002 f937 	bl	800cdb4 <__pow5mult>
 800ab46:	9006      	str	r0, [sp, #24]
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	f43f ae73 	beq.w	800a834 <_strtod_l+0x444>
 800ab4e:	2c00      	cmp	r4, #0
 800ab50:	dd08      	ble.n	800ab64 <_strtod_l+0x774>
 800ab52:	4622      	mov	r2, r4
 800ab54:	9906      	ldr	r1, [sp, #24]
 800ab56:	4658      	mov	r0, fp
 800ab58:	f002 f97a 	bl	800ce50 <__lshift>
 800ab5c:	9006      	str	r0, [sp, #24]
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	f43f ae68 	beq.w	800a834 <_strtod_l+0x444>
 800ab64:	2e00      	cmp	r6, #0
 800ab66:	dd08      	ble.n	800ab7a <_strtod_l+0x78a>
 800ab68:	4632      	mov	r2, r6
 800ab6a:	9904      	ldr	r1, [sp, #16]
 800ab6c:	4658      	mov	r0, fp
 800ab6e:	f002 f96f 	bl	800ce50 <__lshift>
 800ab72:	9004      	str	r0, [sp, #16]
 800ab74:	2800      	cmp	r0, #0
 800ab76:	f43f ae5d 	beq.w	800a834 <_strtod_l+0x444>
 800ab7a:	9a06      	ldr	r2, [sp, #24]
 800ab7c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ab7e:	4658      	mov	r0, fp
 800ab80:	f002 f9d4 	bl	800cf2c <__mdiff>
 800ab84:	4680      	mov	r8, r0
 800ab86:	2800      	cmp	r0, #0
 800ab88:	f43f ae54 	beq.w	800a834 <_strtod_l+0x444>
 800ab8c:	2400      	movs	r4, #0
 800ab8e:	68c3      	ldr	r3, [r0, #12]
 800ab90:	9904      	ldr	r1, [sp, #16]
 800ab92:	60c4      	str	r4, [r0, #12]
 800ab94:	930c      	str	r3, [sp, #48]	; 0x30
 800ab96:	f002 f9af 	bl	800cef8 <__mcmp>
 800ab9a:	42a0      	cmp	r0, r4
 800ab9c:	da54      	bge.n	800ac48 <_strtod_l+0x858>
 800ab9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aba0:	b9f3      	cbnz	r3, 800abe0 <_strtod_l+0x7f0>
 800aba2:	f1b9 0f00 	cmp.w	r9, #0
 800aba6:	d11b      	bne.n	800abe0 <_strtod_l+0x7f0>
 800aba8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800abac:	b9c3      	cbnz	r3, 800abe0 <_strtod_l+0x7f0>
 800abae:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800abb2:	0d1b      	lsrs	r3, r3, #20
 800abb4:	051b      	lsls	r3, r3, #20
 800abb6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800abba:	d911      	bls.n	800abe0 <_strtod_l+0x7f0>
 800abbc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800abc0:	b91b      	cbnz	r3, 800abca <_strtod_l+0x7da>
 800abc2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	dd0a      	ble.n	800abe0 <_strtod_l+0x7f0>
 800abca:	4641      	mov	r1, r8
 800abcc:	2201      	movs	r2, #1
 800abce:	4658      	mov	r0, fp
 800abd0:	f002 f93e 	bl	800ce50 <__lshift>
 800abd4:	9904      	ldr	r1, [sp, #16]
 800abd6:	4680      	mov	r8, r0
 800abd8:	f002 f98e 	bl	800cef8 <__mcmp>
 800abdc:	2800      	cmp	r0, #0
 800abde:	dc68      	bgt.n	800acb2 <_strtod_l+0x8c2>
 800abe0:	9b05      	ldr	r3, [sp, #20]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d172      	bne.n	800accc <_strtod_l+0x8dc>
 800abe6:	e630      	b.n	800a84a <_strtod_l+0x45a>
 800abe8:	f018 0f01 	tst.w	r8, #1
 800abec:	d004      	beq.n	800abf8 <_strtod_l+0x808>
 800abee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800abf2:	f7f5 fc71 	bl	80004d8 <__aeabi_dmul>
 800abf6:	2301      	movs	r3, #1
 800abf8:	ea4f 0868 	mov.w	r8, r8, asr #1
 800abfc:	3508      	adds	r5, #8
 800abfe:	e6dc      	b.n	800a9ba <_strtod_l+0x5ca>
 800ac00:	f04f 32ff 	mov.w	r2, #4294967295
 800ac04:	fa02 f303 	lsl.w	r3, r2, r3
 800ac08:	ea03 0909 	and.w	r9, r3, r9
 800ac0c:	e6f6      	b.n	800a9fc <_strtod_l+0x60c>
 800ac0e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ac12:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ac16:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ac1a:	35e2      	adds	r5, #226	; 0xe2
 800ac1c:	fa07 f505 	lsl.w	r5, r7, r5
 800ac20:	970f      	str	r7, [sp, #60]	; 0x3c
 800ac22:	e75c      	b.n	800aade <_strtod_l+0x6ee>
 800ac24:	2301      	movs	r3, #1
 800ac26:	2500      	movs	r5, #0
 800ac28:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac2a:	e758      	b.n	800aade <_strtod_l+0x6ee>
 800ac2c:	463a      	mov	r2, r7
 800ac2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ac30:	4658      	mov	r0, fp
 800ac32:	f002 f90d 	bl	800ce50 <__lshift>
 800ac36:	901c      	str	r0, [sp, #112]	; 0x70
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	f47f af7c 	bne.w	800ab36 <_strtod_l+0x746>
 800ac3e:	e5f9      	b.n	800a834 <_strtod_l+0x444>
 800ac40:	0800e3a0 	.word	0x0800e3a0
 800ac44:	fffffc02 	.word	0xfffffc02
 800ac48:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ac4c:	f040 8089 	bne.w	800ad62 <_strtod_l+0x972>
 800ac50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac52:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800ac56:	b342      	cbz	r2, 800acaa <_strtod_l+0x8ba>
 800ac58:	4aaf      	ldr	r2, [pc, #700]	; (800af18 <_strtod_l+0xb28>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d156      	bne.n	800ad0c <_strtod_l+0x91c>
 800ac5e:	9b05      	ldr	r3, [sp, #20]
 800ac60:	4648      	mov	r0, r9
 800ac62:	b1eb      	cbz	r3, 800aca0 <_strtod_l+0x8b0>
 800ac64:	4653      	mov	r3, sl
 800ac66:	4aad      	ldr	r2, [pc, #692]	; (800af1c <_strtod_l+0xb2c>)
 800ac68:	f04f 31ff 	mov.w	r1, #4294967295
 800ac6c:	401a      	ands	r2, r3
 800ac6e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ac72:	d818      	bhi.n	800aca6 <_strtod_l+0x8b6>
 800ac74:	0d12      	lsrs	r2, r2, #20
 800ac76:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ac7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac7e:	4298      	cmp	r0, r3
 800ac80:	d144      	bne.n	800ad0c <_strtod_l+0x91c>
 800ac82:	4ba7      	ldr	r3, [pc, #668]	; (800af20 <_strtod_l+0xb30>)
 800ac84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d102      	bne.n	800ac90 <_strtod_l+0x8a0>
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	f43f add2 	beq.w	800a834 <_strtod_l+0x444>
 800ac90:	4ba2      	ldr	r3, [pc, #648]	; (800af1c <_strtod_l+0xb2c>)
 800ac92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac94:	f04f 0900 	mov.w	r9, #0
 800ac98:	401a      	ands	r2, r3
 800ac9a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800ac9e:	e79f      	b.n	800abe0 <_strtod_l+0x7f0>
 800aca0:	f04f 33ff 	mov.w	r3, #4294967295
 800aca4:	e7eb      	b.n	800ac7e <_strtod_l+0x88e>
 800aca6:	460b      	mov	r3, r1
 800aca8:	e7e9      	b.n	800ac7e <_strtod_l+0x88e>
 800acaa:	bb7b      	cbnz	r3, 800ad0c <_strtod_l+0x91c>
 800acac:	f1b9 0f00 	cmp.w	r9, #0
 800acb0:	d12c      	bne.n	800ad0c <_strtod_l+0x91c>
 800acb2:	9905      	ldr	r1, [sp, #20]
 800acb4:	4653      	mov	r3, sl
 800acb6:	4a99      	ldr	r2, [pc, #612]	; (800af1c <_strtod_l+0xb2c>)
 800acb8:	b1f1      	cbz	r1, 800acf8 <_strtod_l+0x908>
 800acba:	ea02 010a 	and.w	r1, r2, sl
 800acbe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800acc2:	dc19      	bgt.n	800acf8 <_strtod_l+0x908>
 800acc4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800acc8:	f77f ae51 	ble.w	800a96e <_strtod_l+0x57e>
 800accc:	2300      	movs	r3, #0
 800acce:	4a95      	ldr	r2, [pc, #596]	; (800af24 <_strtod_l+0xb34>)
 800acd0:	4648      	mov	r0, r9
 800acd2:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800acd6:	4651      	mov	r1, sl
 800acd8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800acdc:	f7f5 fbfc 	bl	80004d8 <__aeabi_dmul>
 800ace0:	4681      	mov	r9, r0
 800ace2:	468a      	mov	sl, r1
 800ace4:	2900      	cmp	r1, #0
 800ace6:	f47f adb0 	bne.w	800a84a <_strtod_l+0x45a>
 800acea:	2800      	cmp	r0, #0
 800acec:	f47f adad 	bne.w	800a84a <_strtod_l+0x45a>
 800acf0:	2322      	movs	r3, #34	; 0x22
 800acf2:	f8cb 3000 	str.w	r3, [fp]
 800acf6:	e5a8      	b.n	800a84a <_strtod_l+0x45a>
 800acf8:	4013      	ands	r3, r2
 800acfa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800acfe:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800ad02:	f04f 39ff 	mov.w	r9, #4294967295
 800ad06:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800ad0a:	e769      	b.n	800abe0 <_strtod_l+0x7f0>
 800ad0c:	b19d      	cbz	r5, 800ad36 <_strtod_l+0x946>
 800ad0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad10:	421d      	tst	r5, r3
 800ad12:	f43f af65 	beq.w	800abe0 <_strtod_l+0x7f0>
 800ad16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad18:	9a05      	ldr	r2, [sp, #20]
 800ad1a:	4648      	mov	r0, r9
 800ad1c:	4651      	mov	r1, sl
 800ad1e:	b173      	cbz	r3, 800ad3e <_strtod_l+0x94e>
 800ad20:	f7ff fb42 	bl	800a3a8 <sulp>
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad2c:	f7f5 fa1e 	bl	800016c <__adddf3>
 800ad30:	4681      	mov	r9, r0
 800ad32:	468a      	mov	sl, r1
 800ad34:	e754      	b.n	800abe0 <_strtod_l+0x7f0>
 800ad36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad38:	ea13 0f09 	tst.w	r3, r9
 800ad3c:	e7e9      	b.n	800ad12 <_strtod_l+0x922>
 800ad3e:	f7ff fb33 	bl	800a3a8 <sulp>
 800ad42:	4602      	mov	r2, r0
 800ad44:	460b      	mov	r3, r1
 800ad46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad4a:	f7f5 fa0d 	bl	8000168 <__aeabi_dsub>
 800ad4e:	2200      	movs	r2, #0
 800ad50:	2300      	movs	r3, #0
 800ad52:	4681      	mov	r9, r0
 800ad54:	468a      	mov	sl, r1
 800ad56:	f7f5 fe27 	bl	80009a8 <__aeabi_dcmpeq>
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	f47f ae07 	bne.w	800a96e <_strtod_l+0x57e>
 800ad60:	e73e      	b.n	800abe0 <_strtod_l+0x7f0>
 800ad62:	9904      	ldr	r1, [sp, #16]
 800ad64:	4640      	mov	r0, r8
 800ad66:	f002 fa04 	bl	800d172 <__ratio>
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad70:	4606      	mov	r6, r0
 800ad72:	460f      	mov	r7, r1
 800ad74:	f7f5 fe2c 	bl	80009d0 <__aeabi_dcmple>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	d075      	beq.n	800ae68 <_strtod_l+0xa78>
 800ad7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d047      	beq.n	800ae12 <_strtod_l+0xa22>
 800ad82:	2600      	movs	r6, #0
 800ad84:	4f68      	ldr	r7, [pc, #416]	; (800af28 <_strtod_l+0xb38>)
 800ad86:	4d68      	ldr	r5, [pc, #416]	; (800af28 <_strtod_l+0xb38>)
 800ad88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad8e:	0d1b      	lsrs	r3, r3, #20
 800ad90:	051b      	lsls	r3, r3, #20
 800ad92:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad96:	4b65      	ldr	r3, [pc, #404]	; (800af2c <_strtod_l+0xb3c>)
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	f040 80cf 	bne.w	800af3c <_strtod_l+0xb4c>
 800ad9e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ada2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ada6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ada8:	4648      	mov	r0, r9
 800adaa:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800adae:	4651      	mov	r1, sl
 800adb0:	f002 f91a 	bl	800cfe8 <__ulp>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	4630      	mov	r0, r6
 800adba:	4639      	mov	r1, r7
 800adbc:	f7f5 fb8c 	bl	80004d8 <__aeabi_dmul>
 800adc0:	464a      	mov	r2, r9
 800adc2:	4653      	mov	r3, sl
 800adc4:	f7f5 f9d2 	bl	800016c <__adddf3>
 800adc8:	460b      	mov	r3, r1
 800adca:	4954      	ldr	r1, [pc, #336]	; (800af1c <_strtod_l+0xb2c>)
 800adcc:	4a58      	ldr	r2, [pc, #352]	; (800af30 <_strtod_l+0xb40>)
 800adce:	4019      	ands	r1, r3
 800add0:	4291      	cmp	r1, r2
 800add2:	4681      	mov	r9, r0
 800add4:	d95e      	bls.n	800ae94 <_strtod_l+0xaa4>
 800add6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800add8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800addc:	4293      	cmp	r3, r2
 800adde:	d103      	bne.n	800ade8 <_strtod_l+0x9f8>
 800ade0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ade2:	3301      	adds	r3, #1
 800ade4:	f43f ad26 	beq.w	800a834 <_strtod_l+0x444>
 800ade8:	f04f 39ff 	mov.w	r9, #4294967295
 800adec:	f8df a130 	ldr.w	sl, [pc, #304]	; 800af20 <_strtod_l+0xb30>
 800adf0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800adf2:	4658      	mov	r0, fp
 800adf4:	f001 fe61 	bl	800caba <_Bfree>
 800adf8:	9906      	ldr	r1, [sp, #24]
 800adfa:	4658      	mov	r0, fp
 800adfc:	f001 fe5d 	bl	800caba <_Bfree>
 800ae00:	9904      	ldr	r1, [sp, #16]
 800ae02:	4658      	mov	r0, fp
 800ae04:	f001 fe59 	bl	800caba <_Bfree>
 800ae08:	4641      	mov	r1, r8
 800ae0a:	4658      	mov	r0, fp
 800ae0c:	f001 fe55 	bl	800caba <_Bfree>
 800ae10:	e617      	b.n	800aa42 <_strtod_l+0x652>
 800ae12:	f1b9 0f00 	cmp.w	r9, #0
 800ae16:	d119      	bne.n	800ae4c <_strtod_l+0xa5c>
 800ae18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae1e:	b9e3      	cbnz	r3, 800ae5a <_strtod_l+0xa6a>
 800ae20:	2200      	movs	r2, #0
 800ae22:	4b41      	ldr	r3, [pc, #260]	; (800af28 <_strtod_l+0xb38>)
 800ae24:	4630      	mov	r0, r6
 800ae26:	4639      	mov	r1, r7
 800ae28:	f7f5 fdc8 	bl	80009bc <__aeabi_dcmplt>
 800ae2c:	b9c8      	cbnz	r0, 800ae62 <_strtod_l+0xa72>
 800ae2e:	2200      	movs	r2, #0
 800ae30:	4b40      	ldr	r3, [pc, #256]	; (800af34 <_strtod_l+0xb44>)
 800ae32:	4630      	mov	r0, r6
 800ae34:	4639      	mov	r1, r7
 800ae36:	f7f5 fb4f 	bl	80004d8 <__aeabi_dmul>
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	460d      	mov	r5, r1
 800ae3e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ae42:	9418      	str	r4, [sp, #96]	; 0x60
 800ae44:	9319      	str	r3, [sp, #100]	; 0x64
 800ae46:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800ae4a:	e79d      	b.n	800ad88 <_strtod_l+0x998>
 800ae4c:	f1b9 0f01 	cmp.w	r9, #1
 800ae50:	d103      	bne.n	800ae5a <_strtod_l+0xa6a>
 800ae52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f43f ad8a 	beq.w	800a96e <_strtod_l+0x57e>
 800ae5a:	2600      	movs	r6, #0
 800ae5c:	4f36      	ldr	r7, [pc, #216]	; (800af38 <_strtod_l+0xb48>)
 800ae5e:	2400      	movs	r4, #0
 800ae60:	e791      	b.n	800ad86 <_strtod_l+0x996>
 800ae62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ae64:	4d33      	ldr	r5, [pc, #204]	; (800af34 <_strtod_l+0xb44>)
 800ae66:	e7ea      	b.n	800ae3e <_strtod_l+0xa4e>
 800ae68:	4b32      	ldr	r3, [pc, #200]	; (800af34 <_strtod_l+0xb44>)
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	4639      	mov	r1, r7
 800ae70:	f7f5 fb32 	bl	80004d8 <__aeabi_dmul>
 800ae74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae76:	4604      	mov	r4, r0
 800ae78:	460d      	mov	r5, r1
 800ae7a:	b933      	cbnz	r3, 800ae8a <_strtod_l+0xa9a>
 800ae7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae80:	9010      	str	r0, [sp, #64]	; 0x40
 800ae82:	9311      	str	r3, [sp, #68]	; 0x44
 800ae84:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ae88:	e77e      	b.n	800ad88 <_strtod_l+0x998>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ae92:	e7f7      	b.n	800ae84 <_strtod_l+0xa94>
 800ae94:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800ae98:	9b05      	ldr	r3, [sp, #20]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1a8      	bne.n	800adf0 <_strtod_l+0xa00>
 800ae9e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800aea2:	0d1b      	lsrs	r3, r3, #20
 800aea4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aea6:	051b      	lsls	r3, r3, #20
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	4656      	mov	r6, sl
 800aeac:	d1a0      	bne.n	800adf0 <_strtod_l+0xa00>
 800aeae:	4629      	mov	r1, r5
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f7f5 fdc1 	bl	8000a38 <__aeabi_d2iz>
 800aeb6:	f7f5 faa5 	bl	8000404 <__aeabi_i2d>
 800aeba:	460b      	mov	r3, r1
 800aebc:	4602      	mov	r2, r0
 800aebe:	4629      	mov	r1, r5
 800aec0:	4620      	mov	r0, r4
 800aec2:	f7f5 f951 	bl	8000168 <__aeabi_dsub>
 800aec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aec8:	4604      	mov	r4, r0
 800aeca:	460d      	mov	r5, r1
 800aecc:	b933      	cbnz	r3, 800aedc <_strtod_l+0xaec>
 800aece:	f1b9 0f00 	cmp.w	r9, #0
 800aed2:	d103      	bne.n	800aedc <_strtod_l+0xaec>
 800aed4:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800aed8:	2e00      	cmp	r6, #0
 800aeda:	d06a      	beq.n	800afb2 <_strtod_l+0xbc2>
 800aedc:	a30a      	add	r3, pc, #40	; (adr r3, 800af08 <_strtod_l+0xb18>)
 800aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee2:	4620      	mov	r0, r4
 800aee4:	4629      	mov	r1, r5
 800aee6:	f7f5 fd69 	bl	80009bc <__aeabi_dcmplt>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	f47f acad 	bne.w	800a84a <_strtod_l+0x45a>
 800aef0:	a307      	add	r3, pc, #28	; (adr r3, 800af10 <_strtod_l+0xb20>)
 800aef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef6:	4620      	mov	r0, r4
 800aef8:	4629      	mov	r1, r5
 800aefa:	f7f5 fd7d 	bl	80009f8 <__aeabi_dcmpgt>
 800aefe:	2800      	cmp	r0, #0
 800af00:	f43f af76 	beq.w	800adf0 <_strtod_l+0xa00>
 800af04:	e4a1      	b.n	800a84a <_strtod_l+0x45a>
 800af06:	bf00      	nop
 800af08:	94a03595 	.word	0x94a03595
 800af0c:	3fdfffff 	.word	0x3fdfffff
 800af10:	35afe535 	.word	0x35afe535
 800af14:	3fe00000 	.word	0x3fe00000
 800af18:	000fffff 	.word	0x000fffff
 800af1c:	7ff00000 	.word	0x7ff00000
 800af20:	7fefffff 	.word	0x7fefffff
 800af24:	39500000 	.word	0x39500000
 800af28:	3ff00000 	.word	0x3ff00000
 800af2c:	7fe00000 	.word	0x7fe00000
 800af30:	7c9fffff 	.word	0x7c9fffff
 800af34:	3fe00000 	.word	0x3fe00000
 800af38:	bff00000 	.word	0xbff00000
 800af3c:	9b05      	ldr	r3, [sp, #20]
 800af3e:	b313      	cbz	r3, 800af86 <_strtod_l+0xb96>
 800af40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af42:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af46:	d81e      	bhi.n	800af86 <_strtod_l+0xb96>
 800af48:	a325      	add	r3, pc, #148	; (adr r3, 800afe0 <_strtod_l+0xbf0>)
 800af4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4e:	4620      	mov	r0, r4
 800af50:	4629      	mov	r1, r5
 800af52:	f7f5 fd3d 	bl	80009d0 <__aeabi_dcmple>
 800af56:	b190      	cbz	r0, 800af7e <_strtod_l+0xb8e>
 800af58:	4629      	mov	r1, r5
 800af5a:	4620      	mov	r0, r4
 800af5c:	f7f5 fd94 	bl	8000a88 <__aeabi_d2uiz>
 800af60:	2800      	cmp	r0, #0
 800af62:	bf08      	it	eq
 800af64:	2001      	moveq	r0, #1
 800af66:	f7f5 fa3d 	bl	80003e4 <__aeabi_ui2d>
 800af6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af6c:	4604      	mov	r4, r0
 800af6e:	460d      	mov	r5, r1
 800af70:	b9d3      	cbnz	r3, 800afa8 <_strtod_l+0xbb8>
 800af72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af76:	9012      	str	r0, [sp, #72]	; 0x48
 800af78:	9313      	str	r3, [sp, #76]	; 0x4c
 800af7a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800af7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af80:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800af84:	1a9f      	subs	r7, r3, r2
 800af86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af8a:	f002 f82d 	bl	800cfe8 <__ulp>
 800af8e:	4602      	mov	r2, r0
 800af90:	460b      	mov	r3, r1
 800af92:	4630      	mov	r0, r6
 800af94:	4639      	mov	r1, r7
 800af96:	f7f5 fa9f 	bl	80004d8 <__aeabi_dmul>
 800af9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af9e:	f7f5 f8e5 	bl	800016c <__adddf3>
 800afa2:	4681      	mov	r9, r0
 800afa4:	468a      	mov	sl, r1
 800afa6:	e777      	b.n	800ae98 <_strtod_l+0xaa8>
 800afa8:	4602      	mov	r2, r0
 800afaa:	460b      	mov	r3, r1
 800afac:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800afb0:	e7e3      	b.n	800af7a <_strtod_l+0xb8a>
 800afb2:	a30d      	add	r3, pc, #52	; (adr r3, 800afe8 <_strtod_l+0xbf8>)
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	f7f5 fd00 	bl	80009bc <__aeabi_dcmplt>
 800afbc:	e79f      	b.n	800aefe <_strtod_l+0xb0e>
 800afbe:	2300      	movs	r3, #0
 800afc0:	930d      	str	r3, [sp, #52]	; 0x34
 800afc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800afc6:	6013      	str	r3, [r2, #0]
 800afc8:	f7ff ba55 	b.w	800a476 <_strtod_l+0x86>
 800afcc:	2b65      	cmp	r3, #101	; 0x65
 800afce:	f04f 0200 	mov.w	r2, #0
 800afd2:	f43f ab42 	beq.w	800a65a <_strtod_l+0x26a>
 800afd6:	2101      	movs	r1, #1
 800afd8:	4614      	mov	r4, r2
 800afda:	9105      	str	r1, [sp, #20]
 800afdc:	f7ff babf 	b.w	800a55e <_strtod_l+0x16e>
 800afe0:	ffc00000 	.word	0xffc00000
 800afe4:	41dfffff 	.word	0x41dfffff
 800afe8:	94a03595 	.word	0x94a03595
 800afec:	3fcfffff 	.word	0x3fcfffff

0800aff0 <_strtod_r>:
 800aff0:	4b05      	ldr	r3, [pc, #20]	; (800b008 <_strtod_r+0x18>)
 800aff2:	b410      	push	{r4}
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4c05      	ldr	r4, [pc, #20]	; (800b00c <_strtod_r+0x1c>)
 800aff8:	6a1b      	ldr	r3, [r3, #32]
 800affa:	2b00      	cmp	r3, #0
 800affc:	bf08      	it	eq
 800affe:	4623      	moveq	r3, r4
 800b000:	bc10      	pop	{r4}
 800b002:	f7ff b9f5 	b.w	800a3f0 <_strtod_l>
 800b006:	bf00      	nop
 800b008:	2000017c 	.word	0x2000017c
 800b00c:	200001e0 	.word	0x200001e0

0800b010 <_strtol_l.isra.0>:
 800b010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b014:	4680      	mov	r8, r0
 800b016:	4689      	mov	r9, r1
 800b018:	4692      	mov	sl, r2
 800b01a:	461e      	mov	r6, r3
 800b01c:	460f      	mov	r7, r1
 800b01e:	463d      	mov	r5, r7
 800b020:	9808      	ldr	r0, [sp, #32]
 800b022:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b026:	f001 fc49 	bl	800c8bc <__locale_ctype_ptr_l>
 800b02a:	4420      	add	r0, r4
 800b02c:	7843      	ldrb	r3, [r0, #1]
 800b02e:	f013 0308 	ands.w	r3, r3, #8
 800b032:	d132      	bne.n	800b09a <_strtol_l.isra.0+0x8a>
 800b034:	2c2d      	cmp	r4, #45	; 0x2d
 800b036:	d132      	bne.n	800b09e <_strtol_l.isra.0+0x8e>
 800b038:	2201      	movs	r2, #1
 800b03a:	787c      	ldrb	r4, [r7, #1]
 800b03c:	1cbd      	adds	r5, r7, #2
 800b03e:	2e00      	cmp	r6, #0
 800b040:	d05d      	beq.n	800b0fe <_strtol_l.isra.0+0xee>
 800b042:	2e10      	cmp	r6, #16
 800b044:	d109      	bne.n	800b05a <_strtol_l.isra.0+0x4a>
 800b046:	2c30      	cmp	r4, #48	; 0x30
 800b048:	d107      	bne.n	800b05a <_strtol_l.isra.0+0x4a>
 800b04a:	782b      	ldrb	r3, [r5, #0]
 800b04c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b050:	2b58      	cmp	r3, #88	; 0x58
 800b052:	d14f      	bne.n	800b0f4 <_strtol_l.isra.0+0xe4>
 800b054:	2610      	movs	r6, #16
 800b056:	786c      	ldrb	r4, [r5, #1]
 800b058:	3502      	adds	r5, #2
 800b05a:	2a00      	cmp	r2, #0
 800b05c:	bf14      	ite	ne
 800b05e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b062:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b066:	2700      	movs	r7, #0
 800b068:	fbb1 fcf6 	udiv	ip, r1, r6
 800b06c:	4638      	mov	r0, r7
 800b06e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b072:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b076:	2b09      	cmp	r3, #9
 800b078:	d817      	bhi.n	800b0aa <_strtol_l.isra.0+0x9a>
 800b07a:	461c      	mov	r4, r3
 800b07c:	42a6      	cmp	r6, r4
 800b07e:	dd23      	ble.n	800b0c8 <_strtol_l.isra.0+0xb8>
 800b080:	1c7b      	adds	r3, r7, #1
 800b082:	d007      	beq.n	800b094 <_strtol_l.isra.0+0x84>
 800b084:	4584      	cmp	ip, r0
 800b086:	d31c      	bcc.n	800b0c2 <_strtol_l.isra.0+0xb2>
 800b088:	d101      	bne.n	800b08e <_strtol_l.isra.0+0x7e>
 800b08a:	45a6      	cmp	lr, r4
 800b08c:	db19      	blt.n	800b0c2 <_strtol_l.isra.0+0xb2>
 800b08e:	2701      	movs	r7, #1
 800b090:	fb00 4006 	mla	r0, r0, r6, r4
 800b094:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b098:	e7eb      	b.n	800b072 <_strtol_l.isra.0+0x62>
 800b09a:	462f      	mov	r7, r5
 800b09c:	e7bf      	b.n	800b01e <_strtol_l.isra.0+0xe>
 800b09e:	2c2b      	cmp	r4, #43	; 0x2b
 800b0a0:	bf04      	itt	eq
 800b0a2:	1cbd      	addeq	r5, r7, #2
 800b0a4:	787c      	ldrbeq	r4, [r7, #1]
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	e7c9      	b.n	800b03e <_strtol_l.isra.0+0x2e>
 800b0aa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b0ae:	2b19      	cmp	r3, #25
 800b0b0:	d801      	bhi.n	800b0b6 <_strtol_l.isra.0+0xa6>
 800b0b2:	3c37      	subs	r4, #55	; 0x37
 800b0b4:	e7e2      	b.n	800b07c <_strtol_l.isra.0+0x6c>
 800b0b6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b0ba:	2b19      	cmp	r3, #25
 800b0bc:	d804      	bhi.n	800b0c8 <_strtol_l.isra.0+0xb8>
 800b0be:	3c57      	subs	r4, #87	; 0x57
 800b0c0:	e7dc      	b.n	800b07c <_strtol_l.isra.0+0x6c>
 800b0c2:	f04f 37ff 	mov.w	r7, #4294967295
 800b0c6:	e7e5      	b.n	800b094 <_strtol_l.isra.0+0x84>
 800b0c8:	1c7b      	adds	r3, r7, #1
 800b0ca:	d108      	bne.n	800b0de <_strtol_l.isra.0+0xce>
 800b0cc:	2322      	movs	r3, #34	; 0x22
 800b0ce:	4608      	mov	r0, r1
 800b0d0:	f8c8 3000 	str.w	r3, [r8]
 800b0d4:	f1ba 0f00 	cmp.w	sl, #0
 800b0d8:	d107      	bne.n	800b0ea <_strtol_l.isra.0+0xda>
 800b0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0de:	b102      	cbz	r2, 800b0e2 <_strtol_l.isra.0+0xd2>
 800b0e0:	4240      	negs	r0, r0
 800b0e2:	f1ba 0f00 	cmp.w	sl, #0
 800b0e6:	d0f8      	beq.n	800b0da <_strtol_l.isra.0+0xca>
 800b0e8:	b10f      	cbz	r7, 800b0ee <_strtol_l.isra.0+0xde>
 800b0ea:	f105 39ff 	add.w	r9, r5, #4294967295
 800b0ee:	f8ca 9000 	str.w	r9, [sl]
 800b0f2:	e7f2      	b.n	800b0da <_strtol_l.isra.0+0xca>
 800b0f4:	2430      	movs	r4, #48	; 0x30
 800b0f6:	2e00      	cmp	r6, #0
 800b0f8:	d1af      	bne.n	800b05a <_strtol_l.isra.0+0x4a>
 800b0fa:	2608      	movs	r6, #8
 800b0fc:	e7ad      	b.n	800b05a <_strtol_l.isra.0+0x4a>
 800b0fe:	2c30      	cmp	r4, #48	; 0x30
 800b100:	d0a3      	beq.n	800b04a <_strtol_l.isra.0+0x3a>
 800b102:	260a      	movs	r6, #10
 800b104:	e7a9      	b.n	800b05a <_strtol_l.isra.0+0x4a>
	...

0800b108 <_strtol_r>:
 800b108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b10a:	4c06      	ldr	r4, [pc, #24]	; (800b124 <_strtol_r+0x1c>)
 800b10c:	4d06      	ldr	r5, [pc, #24]	; (800b128 <_strtol_r+0x20>)
 800b10e:	6824      	ldr	r4, [r4, #0]
 800b110:	6a24      	ldr	r4, [r4, #32]
 800b112:	2c00      	cmp	r4, #0
 800b114:	bf08      	it	eq
 800b116:	462c      	moveq	r4, r5
 800b118:	9400      	str	r4, [sp, #0]
 800b11a:	f7ff ff79 	bl	800b010 <_strtol_l.isra.0>
 800b11e:	b003      	add	sp, #12
 800b120:	bd30      	pop	{r4, r5, pc}
 800b122:	bf00      	nop
 800b124:	2000017c 	.word	0x2000017c
 800b128:	200001e0 	.word	0x200001e0

0800b12c <__swbuf_r>:
 800b12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12e:	460e      	mov	r6, r1
 800b130:	4614      	mov	r4, r2
 800b132:	4605      	mov	r5, r0
 800b134:	b118      	cbz	r0, 800b13e <__swbuf_r+0x12>
 800b136:	6983      	ldr	r3, [r0, #24]
 800b138:	b90b      	cbnz	r3, 800b13e <__swbuf_r+0x12>
 800b13a:	f001 f80d 	bl	800c158 <__sinit>
 800b13e:	4b21      	ldr	r3, [pc, #132]	; (800b1c4 <__swbuf_r+0x98>)
 800b140:	429c      	cmp	r4, r3
 800b142:	d12a      	bne.n	800b19a <__swbuf_r+0x6e>
 800b144:	686c      	ldr	r4, [r5, #4]
 800b146:	69a3      	ldr	r3, [r4, #24]
 800b148:	60a3      	str	r3, [r4, #8]
 800b14a:	89a3      	ldrh	r3, [r4, #12]
 800b14c:	071a      	lsls	r2, r3, #28
 800b14e:	d52e      	bpl.n	800b1ae <__swbuf_r+0x82>
 800b150:	6923      	ldr	r3, [r4, #16]
 800b152:	b363      	cbz	r3, 800b1ae <__swbuf_r+0x82>
 800b154:	6923      	ldr	r3, [r4, #16]
 800b156:	6820      	ldr	r0, [r4, #0]
 800b158:	b2f6      	uxtb	r6, r6
 800b15a:	1ac0      	subs	r0, r0, r3
 800b15c:	6963      	ldr	r3, [r4, #20]
 800b15e:	4637      	mov	r7, r6
 800b160:	4283      	cmp	r3, r0
 800b162:	dc04      	bgt.n	800b16e <__swbuf_r+0x42>
 800b164:	4621      	mov	r1, r4
 800b166:	4628      	mov	r0, r5
 800b168:	f000 ff8c 	bl	800c084 <_fflush_r>
 800b16c:	bb28      	cbnz	r0, 800b1ba <__swbuf_r+0x8e>
 800b16e:	68a3      	ldr	r3, [r4, #8]
 800b170:	3001      	adds	r0, #1
 800b172:	3b01      	subs	r3, #1
 800b174:	60a3      	str	r3, [r4, #8]
 800b176:	6823      	ldr	r3, [r4, #0]
 800b178:	1c5a      	adds	r2, r3, #1
 800b17a:	6022      	str	r2, [r4, #0]
 800b17c:	701e      	strb	r6, [r3, #0]
 800b17e:	6963      	ldr	r3, [r4, #20]
 800b180:	4283      	cmp	r3, r0
 800b182:	d004      	beq.n	800b18e <__swbuf_r+0x62>
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	07db      	lsls	r3, r3, #31
 800b188:	d519      	bpl.n	800b1be <__swbuf_r+0x92>
 800b18a:	2e0a      	cmp	r6, #10
 800b18c:	d117      	bne.n	800b1be <__swbuf_r+0x92>
 800b18e:	4621      	mov	r1, r4
 800b190:	4628      	mov	r0, r5
 800b192:	f000 ff77 	bl	800c084 <_fflush_r>
 800b196:	b190      	cbz	r0, 800b1be <__swbuf_r+0x92>
 800b198:	e00f      	b.n	800b1ba <__swbuf_r+0x8e>
 800b19a:	4b0b      	ldr	r3, [pc, #44]	; (800b1c8 <__swbuf_r+0x9c>)
 800b19c:	429c      	cmp	r4, r3
 800b19e:	d101      	bne.n	800b1a4 <__swbuf_r+0x78>
 800b1a0:	68ac      	ldr	r4, [r5, #8]
 800b1a2:	e7d0      	b.n	800b146 <__swbuf_r+0x1a>
 800b1a4:	4b09      	ldr	r3, [pc, #36]	; (800b1cc <__swbuf_r+0xa0>)
 800b1a6:	429c      	cmp	r4, r3
 800b1a8:	bf08      	it	eq
 800b1aa:	68ec      	ldreq	r4, [r5, #12]
 800b1ac:	e7cb      	b.n	800b146 <__swbuf_r+0x1a>
 800b1ae:	4621      	mov	r1, r4
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	f000 f81f 	bl	800b1f4 <__swsetup_r>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	d0cc      	beq.n	800b154 <__swbuf_r+0x28>
 800b1ba:	f04f 37ff 	mov.w	r7, #4294967295
 800b1be:	4638      	mov	r0, r7
 800b1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	0800e3f8 	.word	0x0800e3f8
 800b1c8:	0800e418 	.word	0x0800e418
 800b1cc:	0800e3d8 	.word	0x0800e3d8

0800b1d0 <_write_r>:
 800b1d0:	b538      	push	{r3, r4, r5, lr}
 800b1d2:	4605      	mov	r5, r0
 800b1d4:	4608      	mov	r0, r1
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	2200      	movs	r2, #0
 800b1da:	4c05      	ldr	r4, [pc, #20]	; (800b1f0 <_write_r+0x20>)
 800b1dc:	6022      	str	r2, [r4, #0]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	f7f5 ff9c 	bl	800111c <_write>
 800b1e4:	1c43      	adds	r3, r0, #1
 800b1e6:	d102      	bne.n	800b1ee <_write_r+0x1e>
 800b1e8:	6823      	ldr	r3, [r4, #0]
 800b1ea:	b103      	cbz	r3, 800b1ee <_write_r+0x1e>
 800b1ec:	602b      	str	r3, [r5, #0]
 800b1ee:	bd38      	pop	{r3, r4, r5, pc}
 800b1f0:	20001074 	.word	0x20001074

0800b1f4 <__swsetup_r>:
 800b1f4:	4b32      	ldr	r3, [pc, #200]	; (800b2c0 <__swsetup_r+0xcc>)
 800b1f6:	b570      	push	{r4, r5, r6, lr}
 800b1f8:	681d      	ldr	r5, [r3, #0]
 800b1fa:	4606      	mov	r6, r0
 800b1fc:	460c      	mov	r4, r1
 800b1fe:	b125      	cbz	r5, 800b20a <__swsetup_r+0x16>
 800b200:	69ab      	ldr	r3, [r5, #24]
 800b202:	b913      	cbnz	r3, 800b20a <__swsetup_r+0x16>
 800b204:	4628      	mov	r0, r5
 800b206:	f000 ffa7 	bl	800c158 <__sinit>
 800b20a:	4b2e      	ldr	r3, [pc, #184]	; (800b2c4 <__swsetup_r+0xd0>)
 800b20c:	429c      	cmp	r4, r3
 800b20e:	d10f      	bne.n	800b230 <__swsetup_r+0x3c>
 800b210:	686c      	ldr	r4, [r5, #4]
 800b212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b216:	b29a      	uxth	r2, r3
 800b218:	0715      	lsls	r5, r2, #28
 800b21a:	d42c      	bmi.n	800b276 <__swsetup_r+0x82>
 800b21c:	06d0      	lsls	r0, r2, #27
 800b21e:	d411      	bmi.n	800b244 <__swsetup_r+0x50>
 800b220:	2209      	movs	r2, #9
 800b222:	6032      	str	r2, [r6, #0]
 800b224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b228:	81a3      	strh	r3, [r4, #12]
 800b22a:	f04f 30ff 	mov.w	r0, #4294967295
 800b22e:	e03e      	b.n	800b2ae <__swsetup_r+0xba>
 800b230:	4b25      	ldr	r3, [pc, #148]	; (800b2c8 <__swsetup_r+0xd4>)
 800b232:	429c      	cmp	r4, r3
 800b234:	d101      	bne.n	800b23a <__swsetup_r+0x46>
 800b236:	68ac      	ldr	r4, [r5, #8]
 800b238:	e7eb      	b.n	800b212 <__swsetup_r+0x1e>
 800b23a:	4b24      	ldr	r3, [pc, #144]	; (800b2cc <__swsetup_r+0xd8>)
 800b23c:	429c      	cmp	r4, r3
 800b23e:	bf08      	it	eq
 800b240:	68ec      	ldreq	r4, [r5, #12]
 800b242:	e7e6      	b.n	800b212 <__swsetup_r+0x1e>
 800b244:	0751      	lsls	r1, r2, #29
 800b246:	d512      	bpl.n	800b26e <__swsetup_r+0x7a>
 800b248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b24a:	b141      	cbz	r1, 800b25e <__swsetup_r+0x6a>
 800b24c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b250:	4299      	cmp	r1, r3
 800b252:	d002      	beq.n	800b25a <__swsetup_r+0x66>
 800b254:	4630      	mov	r0, r6
 800b256:	f002 f803 	bl	800d260 <_free_r>
 800b25a:	2300      	movs	r3, #0
 800b25c:	6363      	str	r3, [r4, #52]	; 0x34
 800b25e:	89a3      	ldrh	r3, [r4, #12]
 800b260:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b264:	81a3      	strh	r3, [r4, #12]
 800b266:	2300      	movs	r3, #0
 800b268:	6063      	str	r3, [r4, #4]
 800b26a:	6923      	ldr	r3, [r4, #16]
 800b26c:	6023      	str	r3, [r4, #0]
 800b26e:	89a3      	ldrh	r3, [r4, #12]
 800b270:	f043 0308 	orr.w	r3, r3, #8
 800b274:	81a3      	strh	r3, [r4, #12]
 800b276:	6923      	ldr	r3, [r4, #16]
 800b278:	b94b      	cbnz	r3, 800b28e <__swsetup_r+0x9a>
 800b27a:	89a3      	ldrh	r3, [r4, #12]
 800b27c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b284:	d003      	beq.n	800b28e <__swsetup_r+0x9a>
 800b286:	4621      	mov	r1, r4
 800b288:	4630      	mov	r0, r6
 800b28a:	f001 fb6f 	bl	800c96c <__smakebuf_r>
 800b28e:	89a2      	ldrh	r2, [r4, #12]
 800b290:	f012 0301 	ands.w	r3, r2, #1
 800b294:	d00c      	beq.n	800b2b0 <__swsetup_r+0xbc>
 800b296:	2300      	movs	r3, #0
 800b298:	60a3      	str	r3, [r4, #8]
 800b29a:	6963      	ldr	r3, [r4, #20]
 800b29c:	425b      	negs	r3, r3
 800b29e:	61a3      	str	r3, [r4, #24]
 800b2a0:	6923      	ldr	r3, [r4, #16]
 800b2a2:	b953      	cbnz	r3, 800b2ba <__swsetup_r+0xc6>
 800b2a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b2ac:	d1ba      	bne.n	800b224 <__swsetup_r+0x30>
 800b2ae:	bd70      	pop	{r4, r5, r6, pc}
 800b2b0:	0792      	lsls	r2, r2, #30
 800b2b2:	bf58      	it	pl
 800b2b4:	6963      	ldrpl	r3, [r4, #20]
 800b2b6:	60a3      	str	r3, [r4, #8]
 800b2b8:	e7f2      	b.n	800b2a0 <__swsetup_r+0xac>
 800b2ba:	2000      	movs	r0, #0
 800b2bc:	e7f7      	b.n	800b2ae <__swsetup_r+0xba>
 800b2be:	bf00      	nop
 800b2c0:	2000017c 	.word	0x2000017c
 800b2c4:	0800e3f8 	.word	0x0800e3f8
 800b2c8:	0800e418 	.word	0x0800e418
 800b2cc:	0800e3d8 	.word	0x0800e3d8

0800b2d0 <_close_r>:
 800b2d0:	b538      	push	{r3, r4, r5, lr}
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	4c05      	ldr	r4, [pc, #20]	; (800b2ec <_close_r+0x1c>)
 800b2d6:	4605      	mov	r5, r0
 800b2d8:	4608      	mov	r0, r1
 800b2da:	6023      	str	r3, [r4, #0]
 800b2dc:	f7f6 fa21 	bl	8001722 <_close>
 800b2e0:	1c43      	adds	r3, r0, #1
 800b2e2:	d102      	bne.n	800b2ea <_close_r+0x1a>
 800b2e4:	6823      	ldr	r3, [r4, #0]
 800b2e6:	b103      	cbz	r3, 800b2ea <_close_r+0x1a>
 800b2e8:	602b      	str	r3, [r5, #0]
 800b2ea:	bd38      	pop	{r3, r4, r5, pc}
 800b2ec:	20001074 	.word	0x20001074

0800b2f0 <quorem>:
 800b2f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f4:	6903      	ldr	r3, [r0, #16]
 800b2f6:	690c      	ldr	r4, [r1, #16]
 800b2f8:	4680      	mov	r8, r0
 800b2fa:	42a3      	cmp	r3, r4
 800b2fc:	f2c0 8084 	blt.w	800b408 <quorem+0x118>
 800b300:	3c01      	subs	r4, #1
 800b302:	f101 0714 	add.w	r7, r1, #20
 800b306:	f100 0614 	add.w	r6, r0, #20
 800b30a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b30e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b312:	3501      	adds	r5, #1
 800b314:	fbb0 f5f5 	udiv	r5, r0, r5
 800b318:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b31c:	eb06 030c 	add.w	r3, r6, ip
 800b320:	eb07 090c 	add.w	r9, r7, ip
 800b324:	9301      	str	r3, [sp, #4]
 800b326:	b39d      	cbz	r5, 800b390 <quorem+0xa0>
 800b328:	f04f 0a00 	mov.w	sl, #0
 800b32c:	4638      	mov	r0, r7
 800b32e:	46b6      	mov	lr, r6
 800b330:	46d3      	mov	fp, sl
 800b332:	f850 2b04 	ldr.w	r2, [r0], #4
 800b336:	b293      	uxth	r3, r2
 800b338:	fb05 a303 	mla	r3, r5, r3, sl
 800b33c:	0c12      	lsrs	r2, r2, #16
 800b33e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b342:	fb05 a202 	mla	r2, r5, r2, sl
 800b346:	b29b      	uxth	r3, r3
 800b348:	ebab 0303 	sub.w	r3, fp, r3
 800b34c:	f8de b000 	ldr.w	fp, [lr]
 800b350:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b354:	fa1f fb8b 	uxth.w	fp, fp
 800b358:	445b      	add	r3, fp
 800b35a:	fa1f fb82 	uxth.w	fp, r2
 800b35e:	f8de 2000 	ldr.w	r2, [lr]
 800b362:	4581      	cmp	r9, r0
 800b364:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b368:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b372:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b376:	f84e 3b04 	str.w	r3, [lr], #4
 800b37a:	d2da      	bcs.n	800b332 <quorem+0x42>
 800b37c:	f856 300c 	ldr.w	r3, [r6, ip]
 800b380:	b933      	cbnz	r3, 800b390 <quorem+0xa0>
 800b382:	9b01      	ldr	r3, [sp, #4]
 800b384:	3b04      	subs	r3, #4
 800b386:	429e      	cmp	r6, r3
 800b388:	461a      	mov	r2, r3
 800b38a:	d331      	bcc.n	800b3f0 <quorem+0x100>
 800b38c:	f8c8 4010 	str.w	r4, [r8, #16]
 800b390:	4640      	mov	r0, r8
 800b392:	f001 fdb1 	bl	800cef8 <__mcmp>
 800b396:	2800      	cmp	r0, #0
 800b398:	db26      	blt.n	800b3e8 <quorem+0xf8>
 800b39a:	4630      	mov	r0, r6
 800b39c:	f04f 0c00 	mov.w	ip, #0
 800b3a0:	3501      	adds	r5, #1
 800b3a2:	f857 1b04 	ldr.w	r1, [r7], #4
 800b3a6:	f8d0 e000 	ldr.w	lr, [r0]
 800b3aa:	b28b      	uxth	r3, r1
 800b3ac:	ebac 0303 	sub.w	r3, ip, r3
 800b3b0:	fa1f f28e 	uxth.w	r2, lr
 800b3b4:	4413      	add	r3, r2
 800b3b6:	0c0a      	lsrs	r2, r1, #16
 800b3b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b3bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3c6:	45b9      	cmp	r9, r7
 800b3c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b3cc:	f840 3b04 	str.w	r3, [r0], #4
 800b3d0:	d2e7      	bcs.n	800b3a2 <quorem+0xb2>
 800b3d2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b3d6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b3da:	b92a      	cbnz	r2, 800b3e8 <quorem+0xf8>
 800b3dc:	3b04      	subs	r3, #4
 800b3de:	429e      	cmp	r6, r3
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	d30b      	bcc.n	800b3fc <quorem+0x10c>
 800b3e4:	f8c8 4010 	str.w	r4, [r8, #16]
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	b003      	add	sp, #12
 800b3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f0:	6812      	ldr	r2, [r2, #0]
 800b3f2:	3b04      	subs	r3, #4
 800b3f4:	2a00      	cmp	r2, #0
 800b3f6:	d1c9      	bne.n	800b38c <quorem+0x9c>
 800b3f8:	3c01      	subs	r4, #1
 800b3fa:	e7c4      	b.n	800b386 <quorem+0x96>
 800b3fc:	6812      	ldr	r2, [r2, #0]
 800b3fe:	3b04      	subs	r3, #4
 800b400:	2a00      	cmp	r2, #0
 800b402:	d1ef      	bne.n	800b3e4 <quorem+0xf4>
 800b404:	3c01      	subs	r4, #1
 800b406:	e7ea      	b.n	800b3de <quorem+0xee>
 800b408:	2000      	movs	r0, #0
 800b40a:	e7ee      	b.n	800b3ea <quorem+0xfa>
 800b40c:	0000      	movs	r0, r0
	...

0800b410 <_dtoa_r>:
 800b410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b414:	4616      	mov	r6, r2
 800b416:	461f      	mov	r7, r3
 800b418:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b41a:	b095      	sub	sp, #84	; 0x54
 800b41c:	4604      	mov	r4, r0
 800b41e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800b422:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b426:	b93d      	cbnz	r5, 800b438 <_dtoa_r+0x28>
 800b428:	2010      	movs	r0, #16
 800b42a:	f001 fadf 	bl	800c9ec <malloc>
 800b42e:	6260      	str	r0, [r4, #36]	; 0x24
 800b430:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b434:	6005      	str	r5, [r0, #0]
 800b436:	60c5      	str	r5, [r0, #12]
 800b438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b43a:	6819      	ldr	r1, [r3, #0]
 800b43c:	b151      	cbz	r1, 800b454 <_dtoa_r+0x44>
 800b43e:	685a      	ldr	r2, [r3, #4]
 800b440:	2301      	movs	r3, #1
 800b442:	4093      	lsls	r3, r2
 800b444:	604a      	str	r2, [r1, #4]
 800b446:	608b      	str	r3, [r1, #8]
 800b448:	4620      	mov	r0, r4
 800b44a:	f001 fb36 	bl	800caba <_Bfree>
 800b44e:	2200      	movs	r2, #0
 800b450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b452:	601a      	str	r2, [r3, #0]
 800b454:	1e3b      	subs	r3, r7, #0
 800b456:	bfaf      	iteee	ge
 800b458:	2300      	movge	r3, #0
 800b45a:	2201      	movlt	r2, #1
 800b45c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b460:	9303      	strlt	r3, [sp, #12]
 800b462:	bfac      	ite	ge
 800b464:	f8c8 3000 	strge.w	r3, [r8]
 800b468:	f8c8 2000 	strlt.w	r2, [r8]
 800b46c:	4bae      	ldr	r3, [pc, #696]	; (800b728 <_dtoa_r+0x318>)
 800b46e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b472:	ea33 0308 	bics.w	r3, r3, r8
 800b476:	d11b      	bne.n	800b4b0 <_dtoa_r+0xa0>
 800b478:	f242 730f 	movw	r3, #9999	; 0x270f
 800b47c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b47e:	6013      	str	r3, [r2, #0]
 800b480:	9b02      	ldr	r3, [sp, #8]
 800b482:	b923      	cbnz	r3, 800b48e <_dtoa_r+0x7e>
 800b484:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b488:	2800      	cmp	r0, #0
 800b48a:	f000 8545 	beq.w	800bf18 <_dtoa_r+0xb08>
 800b48e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b490:	b953      	cbnz	r3, 800b4a8 <_dtoa_r+0x98>
 800b492:	4ba6      	ldr	r3, [pc, #664]	; (800b72c <_dtoa_r+0x31c>)
 800b494:	e021      	b.n	800b4da <_dtoa_r+0xca>
 800b496:	4ba6      	ldr	r3, [pc, #664]	; (800b730 <_dtoa_r+0x320>)
 800b498:	9306      	str	r3, [sp, #24]
 800b49a:	3308      	adds	r3, #8
 800b49c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b49e:	6013      	str	r3, [r2, #0]
 800b4a0:	9806      	ldr	r0, [sp, #24]
 800b4a2:	b015      	add	sp, #84	; 0x54
 800b4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a8:	4ba0      	ldr	r3, [pc, #640]	; (800b72c <_dtoa_r+0x31c>)
 800b4aa:	9306      	str	r3, [sp, #24]
 800b4ac:	3303      	adds	r3, #3
 800b4ae:	e7f5      	b.n	800b49c <_dtoa_r+0x8c>
 800b4b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	4630      	mov	r0, r6
 800b4ba:	4639      	mov	r1, r7
 800b4bc:	f7f5 fa74 	bl	80009a8 <__aeabi_dcmpeq>
 800b4c0:	4682      	mov	sl, r0
 800b4c2:	b160      	cbz	r0, 800b4de <_dtoa_r+0xce>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b4c8:	6013      	str	r3, [r2, #0]
 800b4ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	f000 8520 	beq.w	800bf12 <_dtoa_r+0xb02>
 800b4d2:	4b98      	ldr	r3, [pc, #608]	; (800b734 <_dtoa_r+0x324>)
 800b4d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b4d6:	6013      	str	r3, [r2, #0]
 800b4d8:	3b01      	subs	r3, #1
 800b4da:	9306      	str	r3, [sp, #24]
 800b4dc:	e7e0      	b.n	800b4a0 <_dtoa_r+0x90>
 800b4de:	ab12      	add	r3, sp, #72	; 0x48
 800b4e0:	9301      	str	r3, [sp, #4]
 800b4e2:	ab13      	add	r3, sp, #76	; 0x4c
 800b4e4:	9300      	str	r3, [sp, #0]
 800b4e6:	4632      	mov	r2, r6
 800b4e8:	463b      	mov	r3, r7
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f001 fdf2 	bl	800d0d4 <__d2b>
 800b4f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b4f4:	4683      	mov	fp, r0
 800b4f6:	2d00      	cmp	r5, #0
 800b4f8:	d07d      	beq.n	800b5f6 <_dtoa_r+0x1e6>
 800b4fa:	46b0      	mov	r8, r6
 800b4fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b500:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800b504:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800b508:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b50c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800b510:	2200      	movs	r2, #0
 800b512:	4b89      	ldr	r3, [pc, #548]	; (800b738 <_dtoa_r+0x328>)
 800b514:	4640      	mov	r0, r8
 800b516:	4649      	mov	r1, r9
 800b518:	f7f4 fe26 	bl	8000168 <__aeabi_dsub>
 800b51c:	a37c      	add	r3, pc, #496	; (adr r3, 800b710 <_dtoa_r+0x300>)
 800b51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b522:	f7f4 ffd9 	bl	80004d8 <__aeabi_dmul>
 800b526:	a37c      	add	r3, pc, #496	; (adr r3, 800b718 <_dtoa_r+0x308>)
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	f7f4 fe1e 	bl	800016c <__adddf3>
 800b530:	4606      	mov	r6, r0
 800b532:	4628      	mov	r0, r5
 800b534:	460f      	mov	r7, r1
 800b536:	f7f4 ff65 	bl	8000404 <__aeabi_i2d>
 800b53a:	a379      	add	r3, pc, #484	; (adr r3, 800b720 <_dtoa_r+0x310>)
 800b53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b540:	f7f4 ffca 	bl	80004d8 <__aeabi_dmul>
 800b544:	4602      	mov	r2, r0
 800b546:	460b      	mov	r3, r1
 800b548:	4630      	mov	r0, r6
 800b54a:	4639      	mov	r1, r7
 800b54c:	f7f4 fe0e 	bl	800016c <__adddf3>
 800b550:	4606      	mov	r6, r0
 800b552:	460f      	mov	r7, r1
 800b554:	f7f5 fa70 	bl	8000a38 <__aeabi_d2iz>
 800b558:	2200      	movs	r2, #0
 800b55a:	4682      	mov	sl, r0
 800b55c:	2300      	movs	r3, #0
 800b55e:	4630      	mov	r0, r6
 800b560:	4639      	mov	r1, r7
 800b562:	f7f5 fa2b 	bl	80009bc <__aeabi_dcmplt>
 800b566:	b148      	cbz	r0, 800b57c <_dtoa_r+0x16c>
 800b568:	4650      	mov	r0, sl
 800b56a:	f7f4 ff4b 	bl	8000404 <__aeabi_i2d>
 800b56e:	4632      	mov	r2, r6
 800b570:	463b      	mov	r3, r7
 800b572:	f7f5 fa19 	bl	80009a8 <__aeabi_dcmpeq>
 800b576:	b908      	cbnz	r0, 800b57c <_dtoa_r+0x16c>
 800b578:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b57c:	f1ba 0f16 	cmp.w	sl, #22
 800b580:	d85a      	bhi.n	800b638 <_dtoa_r+0x228>
 800b582:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b586:	496d      	ldr	r1, [pc, #436]	; (800b73c <_dtoa_r+0x32c>)
 800b588:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b58c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b590:	f7f5 fa32 	bl	80009f8 <__aeabi_dcmpgt>
 800b594:	2800      	cmp	r0, #0
 800b596:	d051      	beq.n	800b63c <_dtoa_r+0x22c>
 800b598:	2300      	movs	r3, #0
 800b59a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b59e:	930d      	str	r3, [sp, #52]	; 0x34
 800b5a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b5a2:	1b5d      	subs	r5, r3, r5
 800b5a4:	1e6b      	subs	r3, r5, #1
 800b5a6:	9307      	str	r3, [sp, #28]
 800b5a8:	bf43      	ittte	mi
 800b5aa:	2300      	movmi	r3, #0
 800b5ac:	f1c5 0901 	rsbmi	r9, r5, #1
 800b5b0:	9307      	strmi	r3, [sp, #28]
 800b5b2:	f04f 0900 	movpl.w	r9, #0
 800b5b6:	f1ba 0f00 	cmp.w	sl, #0
 800b5ba:	db41      	blt.n	800b640 <_dtoa_r+0x230>
 800b5bc:	9b07      	ldr	r3, [sp, #28]
 800b5be:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800b5c2:	4453      	add	r3, sl
 800b5c4:	9307      	str	r3, [sp, #28]
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	9308      	str	r3, [sp, #32]
 800b5ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b5cc:	2b09      	cmp	r3, #9
 800b5ce:	f200 808f 	bhi.w	800b6f0 <_dtoa_r+0x2e0>
 800b5d2:	2b05      	cmp	r3, #5
 800b5d4:	bfc4      	itt	gt
 800b5d6:	3b04      	subgt	r3, #4
 800b5d8:	931e      	strgt	r3, [sp, #120]	; 0x78
 800b5da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b5dc:	bfc8      	it	gt
 800b5de:	2500      	movgt	r5, #0
 800b5e0:	f1a3 0302 	sub.w	r3, r3, #2
 800b5e4:	bfd8      	it	le
 800b5e6:	2501      	movle	r5, #1
 800b5e8:	2b03      	cmp	r3, #3
 800b5ea:	f200 808d 	bhi.w	800b708 <_dtoa_r+0x2f8>
 800b5ee:	e8df f003 	tbb	[pc, r3]
 800b5f2:	7d7b      	.short	0x7d7b
 800b5f4:	6f2f      	.short	0x6f2f
 800b5f6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b5fa:	441d      	add	r5, r3
 800b5fc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b600:	2820      	cmp	r0, #32
 800b602:	dd13      	ble.n	800b62c <_dtoa_r+0x21c>
 800b604:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b608:	9b02      	ldr	r3, [sp, #8]
 800b60a:	fa08 f800 	lsl.w	r8, r8, r0
 800b60e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b612:	fa23 f000 	lsr.w	r0, r3, r0
 800b616:	ea48 0000 	orr.w	r0, r8, r0
 800b61a:	f7f4 fee3 	bl	80003e4 <__aeabi_ui2d>
 800b61e:	2301      	movs	r3, #1
 800b620:	4680      	mov	r8, r0
 800b622:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800b626:	3d01      	subs	r5, #1
 800b628:	9310      	str	r3, [sp, #64]	; 0x40
 800b62a:	e771      	b.n	800b510 <_dtoa_r+0x100>
 800b62c:	9b02      	ldr	r3, [sp, #8]
 800b62e:	f1c0 0020 	rsb	r0, r0, #32
 800b632:	fa03 f000 	lsl.w	r0, r3, r0
 800b636:	e7f0      	b.n	800b61a <_dtoa_r+0x20a>
 800b638:	2301      	movs	r3, #1
 800b63a:	e7b0      	b.n	800b59e <_dtoa_r+0x18e>
 800b63c:	900d      	str	r0, [sp, #52]	; 0x34
 800b63e:	e7af      	b.n	800b5a0 <_dtoa_r+0x190>
 800b640:	f1ca 0300 	rsb	r3, sl, #0
 800b644:	9308      	str	r3, [sp, #32]
 800b646:	2300      	movs	r3, #0
 800b648:	eba9 090a 	sub.w	r9, r9, sl
 800b64c:	930c      	str	r3, [sp, #48]	; 0x30
 800b64e:	e7bc      	b.n	800b5ca <_dtoa_r+0x1ba>
 800b650:	2301      	movs	r3, #1
 800b652:	9309      	str	r3, [sp, #36]	; 0x24
 800b654:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b656:	2b00      	cmp	r3, #0
 800b658:	dd74      	ble.n	800b744 <_dtoa_r+0x334>
 800b65a:	4698      	mov	r8, r3
 800b65c:	9304      	str	r3, [sp, #16]
 800b65e:	2200      	movs	r2, #0
 800b660:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b662:	6072      	str	r2, [r6, #4]
 800b664:	2204      	movs	r2, #4
 800b666:	f102 0014 	add.w	r0, r2, #20
 800b66a:	4298      	cmp	r0, r3
 800b66c:	6871      	ldr	r1, [r6, #4]
 800b66e:	d96e      	bls.n	800b74e <_dtoa_r+0x33e>
 800b670:	4620      	mov	r0, r4
 800b672:	f001 f9ee 	bl	800ca52 <_Balloc>
 800b676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b678:	6030      	str	r0, [r6, #0]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f1b8 0f0e 	cmp.w	r8, #14
 800b680:	9306      	str	r3, [sp, #24]
 800b682:	f200 80ed 	bhi.w	800b860 <_dtoa_r+0x450>
 800b686:	2d00      	cmp	r5, #0
 800b688:	f000 80ea 	beq.w	800b860 <_dtoa_r+0x450>
 800b68c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b690:	f1ba 0f00 	cmp.w	sl, #0
 800b694:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b698:	dd77      	ble.n	800b78a <_dtoa_r+0x37a>
 800b69a:	4a28      	ldr	r2, [pc, #160]	; (800b73c <_dtoa_r+0x32c>)
 800b69c:	f00a 030f 	and.w	r3, sl, #15
 800b6a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b6a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b6a8:	06f0      	lsls	r0, r6, #27
 800b6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b6b2:	d568      	bpl.n	800b786 <_dtoa_r+0x376>
 800b6b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b6b8:	4b21      	ldr	r3, [pc, #132]	; (800b740 <_dtoa_r+0x330>)
 800b6ba:	2503      	movs	r5, #3
 800b6bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b6c0:	f7f5 f834 	bl	800072c <__aeabi_ddiv>
 800b6c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6c8:	f006 060f 	and.w	r6, r6, #15
 800b6cc:	4f1c      	ldr	r7, [pc, #112]	; (800b740 <_dtoa_r+0x330>)
 800b6ce:	e04f      	b.n	800b770 <_dtoa_r+0x360>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b6d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b6d6:	4453      	add	r3, sl
 800b6d8:	f103 0801 	add.w	r8, r3, #1
 800b6dc:	9304      	str	r3, [sp, #16]
 800b6de:	4643      	mov	r3, r8
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	bfb8      	it	lt
 800b6e4:	2301      	movlt	r3, #1
 800b6e6:	e7ba      	b.n	800b65e <_dtoa_r+0x24e>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	e7b2      	b.n	800b652 <_dtoa_r+0x242>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	e7f0      	b.n	800b6d2 <_dtoa_r+0x2c2>
 800b6f0:	2501      	movs	r5, #1
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	9509      	str	r5, [sp, #36]	; 0x24
 800b6f6:	931e      	str	r3, [sp, #120]	; 0x78
 800b6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	9304      	str	r3, [sp, #16]
 800b700:	4698      	mov	r8, r3
 800b702:	2312      	movs	r3, #18
 800b704:	921f      	str	r2, [sp, #124]	; 0x7c
 800b706:	e7aa      	b.n	800b65e <_dtoa_r+0x24e>
 800b708:	2301      	movs	r3, #1
 800b70a:	9309      	str	r3, [sp, #36]	; 0x24
 800b70c:	e7f4      	b.n	800b6f8 <_dtoa_r+0x2e8>
 800b70e:	bf00      	nop
 800b710:	636f4361 	.word	0x636f4361
 800b714:	3fd287a7 	.word	0x3fd287a7
 800b718:	8b60c8b3 	.word	0x8b60c8b3
 800b71c:	3fc68a28 	.word	0x3fc68a28
 800b720:	509f79fb 	.word	0x509f79fb
 800b724:	3fd34413 	.word	0x3fd34413
 800b728:	7ff00000 	.word	0x7ff00000
 800b72c:	0800e3d1 	.word	0x0800e3d1
 800b730:	0800e3c8 	.word	0x0800e3c8
 800b734:	0800e56c 	.word	0x0800e56c
 800b738:	3ff80000 	.word	0x3ff80000
 800b73c:	0800e470 	.word	0x0800e470
 800b740:	0800e448 	.word	0x0800e448
 800b744:	2301      	movs	r3, #1
 800b746:	9304      	str	r3, [sp, #16]
 800b748:	4698      	mov	r8, r3
 800b74a:	461a      	mov	r2, r3
 800b74c:	e7da      	b.n	800b704 <_dtoa_r+0x2f4>
 800b74e:	3101      	adds	r1, #1
 800b750:	6071      	str	r1, [r6, #4]
 800b752:	0052      	lsls	r2, r2, #1
 800b754:	e787      	b.n	800b666 <_dtoa_r+0x256>
 800b756:	07f1      	lsls	r1, r6, #31
 800b758:	d508      	bpl.n	800b76c <_dtoa_r+0x35c>
 800b75a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b75e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b762:	f7f4 feb9 	bl	80004d8 <__aeabi_dmul>
 800b766:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b76a:	3501      	adds	r5, #1
 800b76c:	1076      	asrs	r6, r6, #1
 800b76e:	3708      	adds	r7, #8
 800b770:	2e00      	cmp	r6, #0
 800b772:	d1f0      	bne.n	800b756 <_dtoa_r+0x346>
 800b774:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b77c:	f7f4 ffd6 	bl	800072c <__aeabi_ddiv>
 800b780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b784:	e01b      	b.n	800b7be <_dtoa_r+0x3ae>
 800b786:	2502      	movs	r5, #2
 800b788:	e7a0      	b.n	800b6cc <_dtoa_r+0x2bc>
 800b78a:	f000 80a4 	beq.w	800b8d6 <_dtoa_r+0x4c6>
 800b78e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b792:	f1ca 0600 	rsb	r6, sl, #0
 800b796:	4ba0      	ldr	r3, [pc, #640]	; (800ba18 <_dtoa_r+0x608>)
 800b798:	f006 020f 	and.w	r2, r6, #15
 800b79c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a4:	f7f4 fe98 	bl	80004d8 <__aeabi_dmul>
 800b7a8:	2502      	movs	r5, #2
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7b0:	4f9a      	ldr	r7, [pc, #616]	; (800ba1c <_dtoa_r+0x60c>)
 800b7b2:	1136      	asrs	r6, r6, #4
 800b7b4:	2e00      	cmp	r6, #0
 800b7b6:	f040 8083 	bne.w	800b8c0 <_dtoa_r+0x4b0>
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d1e0      	bne.n	800b780 <_dtoa_r+0x370>
 800b7be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f000 808a 	beq.w	800b8da <_dtoa_r+0x4ca>
 800b7c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b7ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	4b92      	ldr	r3, [pc, #584]	; (800ba20 <_dtoa_r+0x610>)
 800b7d6:	f7f5 f8f1 	bl	80009bc <__aeabi_dcmplt>
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	d07d      	beq.n	800b8da <_dtoa_r+0x4ca>
 800b7de:	f1b8 0f00 	cmp.w	r8, #0
 800b7e2:	d07a      	beq.n	800b8da <_dtoa_r+0x4ca>
 800b7e4:	9b04      	ldr	r3, [sp, #16]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	dd36      	ble.n	800b858 <_dtoa_r+0x448>
 800b7ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	4b8c      	ldr	r3, [pc, #560]	; (800ba24 <_dtoa_r+0x614>)
 800b7f2:	f7f4 fe71 	bl	80004d8 <__aeabi_dmul>
 800b7f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7fa:	9e04      	ldr	r6, [sp, #16]
 800b7fc:	f10a 37ff 	add.w	r7, sl, #4294967295
 800b800:	3501      	adds	r5, #1
 800b802:	4628      	mov	r0, r5
 800b804:	f7f4 fdfe 	bl	8000404 <__aeabi_i2d>
 800b808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b80c:	f7f4 fe64 	bl	80004d8 <__aeabi_dmul>
 800b810:	2200      	movs	r2, #0
 800b812:	4b85      	ldr	r3, [pc, #532]	; (800ba28 <_dtoa_r+0x618>)
 800b814:	f7f4 fcaa 	bl	800016c <__adddf3>
 800b818:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800b81c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b820:	950b      	str	r5, [sp, #44]	; 0x2c
 800b822:	2e00      	cmp	r6, #0
 800b824:	d15c      	bne.n	800b8e0 <_dtoa_r+0x4d0>
 800b826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b82a:	2200      	movs	r2, #0
 800b82c:	4b7f      	ldr	r3, [pc, #508]	; (800ba2c <_dtoa_r+0x61c>)
 800b82e:	f7f4 fc9b 	bl	8000168 <__aeabi_dsub>
 800b832:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b834:	462b      	mov	r3, r5
 800b836:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b83a:	f7f5 f8dd 	bl	80009f8 <__aeabi_dcmpgt>
 800b83e:	2800      	cmp	r0, #0
 800b840:	f040 8281 	bne.w	800bd46 <_dtoa_r+0x936>
 800b844:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b84a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b84e:	f7f5 f8b5 	bl	80009bc <__aeabi_dcmplt>
 800b852:	2800      	cmp	r0, #0
 800b854:	f040 8275 	bne.w	800bd42 <_dtoa_r+0x932>
 800b858:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b85c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b860:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b862:	2b00      	cmp	r3, #0
 800b864:	f2c0 814b 	blt.w	800bafe <_dtoa_r+0x6ee>
 800b868:	f1ba 0f0e 	cmp.w	sl, #14
 800b86c:	f300 8147 	bgt.w	800bafe <_dtoa_r+0x6ee>
 800b870:	4b69      	ldr	r3, [pc, #420]	; (800ba18 <_dtoa_r+0x608>)
 800b872:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b87e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b880:	2b00      	cmp	r3, #0
 800b882:	f280 80d7 	bge.w	800ba34 <_dtoa_r+0x624>
 800b886:	f1b8 0f00 	cmp.w	r8, #0
 800b88a:	f300 80d3 	bgt.w	800ba34 <_dtoa_r+0x624>
 800b88e:	f040 8257 	bne.w	800bd40 <_dtoa_r+0x930>
 800b892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b896:	2200      	movs	r2, #0
 800b898:	4b64      	ldr	r3, [pc, #400]	; (800ba2c <_dtoa_r+0x61c>)
 800b89a:	f7f4 fe1d 	bl	80004d8 <__aeabi_dmul>
 800b89e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8a2:	f7f5 f89f 	bl	80009e4 <__aeabi_dcmpge>
 800b8a6:	4646      	mov	r6, r8
 800b8a8:	4647      	mov	r7, r8
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	f040 822d 	bne.w	800bd0a <_dtoa_r+0x8fa>
 800b8b0:	9b06      	ldr	r3, [sp, #24]
 800b8b2:	9a06      	ldr	r2, [sp, #24]
 800b8b4:	1c5d      	adds	r5, r3, #1
 800b8b6:	2331      	movs	r3, #49	; 0x31
 800b8b8:	f10a 0a01 	add.w	sl, sl, #1
 800b8bc:	7013      	strb	r3, [r2, #0]
 800b8be:	e228      	b.n	800bd12 <_dtoa_r+0x902>
 800b8c0:	07f2      	lsls	r2, r6, #31
 800b8c2:	d505      	bpl.n	800b8d0 <_dtoa_r+0x4c0>
 800b8c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8c8:	f7f4 fe06 	bl	80004d8 <__aeabi_dmul>
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	3501      	adds	r5, #1
 800b8d0:	1076      	asrs	r6, r6, #1
 800b8d2:	3708      	adds	r7, #8
 800b8d4:	e76e      	b.n	800b7b4 <_dtoa_r+0x3a4>
 800b8d6:	2502      	movs	r5, #2
 800b8d8:	e771      	b.n	800b7be <_dtoa_r+0x3ae>
 800b8da:	4657      	mov	r7, sl
 800b8dc:	4646      	mov	r6, r8
 800b8de:	e790      	b.n	800b802 <_dtoa_r+0x3f2>
 800b8e0:	4b4d      	ldr	r3, [pc, #308]	; (800ba18 <_dtoa_r+0x608>)
 800b8e2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b8e6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d048      	beq.n	800b982 <_dtoa_r+0x572>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	494e      	ldr	r1, [pc, #312]	; (800ba30 <_dtoa_r+0x620>)
 800b8f8:	f7f4 ff18 	bl	800072c <__aeabi_ddiv>
 800b8fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b900:	f7f4 fc32 	bl	8000168 <__aeabi_dsub>
 800b904:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b908:	9d06      	ldr	r5, [sp, #24]
 800b90a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b90e:	f7f5 f893 	bl	8000a38 <__aeabi_d2iz>
 800b912:	9011      	str	r0, [sp, #68]	; 0x44
 800b914:	f7f4 fd76 	bl	8000404 <__aeabi_i2d>
 800b918:	4602      	mov	r2, r0
 800b91a:	460b      	mov	r3, r1
 800b91c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b920:	f7f4 fc22 	bl	8000168 <__aeabi_dsub>
 800b924:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b926:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b92a:	3330      	adds	r3, #48	; 0x30
 800b92c:	f805 3b01 	strb.w	r3, [r5], #1
 800b930:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b934:	f7f5 f842 	bl	80009bc <__aeabi_dcmplt>
 800b938:	2800      	cmp	r0, #0
 800b93a:	d163      	bne.n	800ba04 <_dtoa_r+0x5f4>
 800b93c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b940:	2000      	movs	r0, #0
 800b942:	4937      	ldr	r1, [pc, #220]	; (800ba20 <_dtoa_r+0x610>)
 800b944:	f7f4 fc10 	bl	8000168 <__aeabi_dsub>
 800b948:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b94c:	f7f5 f836 	bl	80009bc <__aeabi_dcmplt>
 800b950:	2800      	cmp	r0, #0
 800b952:	f040 80b5 	bne.w	800bac0 <_dtoa_r+0x6b0>
 800b956:	9b06      	ldr	r3, [sp, #24]
 800b958:	1aeb      	subs	r3, r5, r3
 800b95a:	429e      	cmp	r6, r3
 800b95c:	f77f af7c 	ble.w	800b858 <_dtoa_r+0x448>
 800b960:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b964:	2200      	movs	r2, #0
 800b966:	4b2f      	ldr	r3, [pc, #188]	; (800ba24 <_dtoa_r+0x614>)
 800b968:	f7f4 fdb6 	bl	80004d8 <__aeabi_dmul>
 800b96c:	2200      	movs	r2, #0
 800b96e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b976:	4b2b      	ldr	r3, [pc, #172]	; (800ba24 <_dtoa_r+0x614>)
 800b978:	f7f4 fdae 	bl	80004d8 <__aeabi_dmul>
 800b97c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b980:	e7c3      	b.n	800b90a <_dtoa_r+0x4fa>
 800b982:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b986:	f7f4 fda7 	bl	80004d8 <__aeabi_dmul>
 800b98a:	9b06      	ldr	r3, [sp, #24]
 800b98c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b990:	199d      	adds	r5, r3, r6
 800b992:	461e      	mov	r6, r3
 800b994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b998:	f7f5 f84e 	bl	8000a38 <__aeabi_d2iz>
 800b99c:	9011      	str	r0, [sp, #68]	; 0x44
 800b99e:	f7f4 fd31 	bl	8000404 <__aeabi_i2d>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9aa:	f7f4 fbdd 	bl	8000168 <__aeabi_dsub>
 800b9ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9b4:	3330      	adds	r3, #48	; 0x30
 800b9b6:	f806 3b01 	strb.w	r3, [r6], #1
 800b9ba:	42ae      	cmp	r6, r5
 800b9bc:	f04f 0200 	mov.w	r2, #0
 800b9c0:	d124      	bne.n	800ba0c <_dtoa_r+0x5fc>
 800b9c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b9c6:	4b1a      	ldr	r3, [pc, #104]	; (800ba30 <_dtoa_r+0x620>)
 800b9c8:	f7f4 fbd0 	bl	800016c <__adddf3>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9d4:	f7f5 f810 	bl	80009f8 <__aeabi_dcmpgt>
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d171      	bne.n	800bac0 <_dtoa_r+0x6b0>
 800b9dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	4913      	ldr	r1, [pc, #76]	; (800ba30 <_dtoa_r+0x620>)
 800b9e4:	f7f4 fbc0 	bl	8000168 <__aeabi_dsub>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9f0:	f7f4 ffe4 	bl	80009bc <__aeabi_dcmplt>
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	f43f af2f 	beq.w	800b858 <_dtoa_r+0x448>
 800b9fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b9fe:	1e6a      	subs	r2, r5, #1
 800ba00:	2b30      	cmp	r3, #48	; 0x30
 800ba02:	d001      	beq.n	800ba08 <_dtoa_r+0x5f8>
 800ba04:	46ba      	mov	sl, r7
 800ba06:	e04a      	b.n	800ba9e <_dtoa_r+0x68e>
 800ba08:	4615      	mov	r5, r2
 800ba0a:	e7f6      	b.n	800b9fa <_dtoa_r+0x5ea>
 800ba0c:	4b05      	ldr	r3, [pc, #20]	; (800ba24 <_dtoa_r+0x614>)
 800ba0e:	f7f4 fd63 	bl	80004d8 <__aeabi_dmul>
 800ba12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba16:	e7bd      	b.n	800b994 <_dtoa_r+0x584>
 800ba18:	0800e470 	.word	0x0800e470
 800ba1c:	0800e448 	.word	0x0800e448
 800ba20:	3ff00000 	.word	0x3ff00000
 800ba24:	40240000 	.word	0x40240000
 800ba28:	401c0000 	.word	0x401c0000
 800ba2c:	40140000 	.word	0x40140000
 800ba30:	3fe00000 	.word	0x3fe00000
 800ba34:	9d06      	ldr	r5, [sp, #24]
 800ba36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ba3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba3e:	4630      	mov	r0, r6
 800ba40:	4639      	mov	r1, r7
 800ba42:	f7f4 fe73 	bl	800072c <__aeabi_ddiv>
 800ba46:	f7f4 fff7 	bl	8000a38 <__aeabi_d2iz>
 800ba4a:	4681      	mov	r9, r0
 800ba4c:	f7f4 fcda 	bl	8000404 <__aeabi_i2d>
 800ba50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba54:	f7f4 fd40 	bl	80004d8 <__aeabi_dmul>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	4639      	mov	r1, r7
 800ba60:	f7f4 fb82 	bl	8000168 <__aeabi_dsub>
 800ba64:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800ba68:	f805 6b01 	strb.w	r6, [r5], #1
 800ba6c:	9e06      	ldr	r6, [sp, #24]
 800ba6e:	4602      	mov	r2, r0
 800ba70:	1bae      	subs	r6, r5, r6
 800ba72:	45b0      	cmp	r8, r6
 800ba74:	460b      	mov	r3, r1
 800ba76:	d135      	bne.n	800bae4 <_dtoa_r+0x6d4>
 800ba78:	f7f4 fb78 	bl	800016c <__adddf3>
 800ba7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba80:	4606      	mov	r6, r0
 800ba82:	460f      	mov	r7, r1
 800ba84:	f7f4 ffb8 	bl	80009f8 <__aeabi_dcmpgt>
 800ba88:	b9c8      	cbnz	r0, 800babe <_dtoa_r+0x6ae>
 800ba8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba8e:	4630      	mov	r0, r6
 800ba90:	4639      	mov	r1, r7
 800ba92:	f7f4 ff89 	bl	80009a8 <__aeabi_dcmpeq>
 800ba96:	b110      	cbz	r0, 800ba9e <_dtoa_r+0x68e>
 800ba98:	f019 0f01 	tst.w	r9, #1
 800ba9c:	d10f      	bne.n	800babe <_dtoa_r+0x6ae>
 800ba9e:	4659      	mov	r1, fp
 800baa0:	4620      	mov	r0, r4
 800baa2:	f001 f80a 	bl	800caba <_Bfree>
 800baa6:	2300      	movs	r3, #0
 800baa8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800baaa:	702b      	strb	r3, [r5, #0]
 800baac:	f10a 0301 	add.w	r3, sl, #1
 800bab0:	6013      	str	r3, [r2, #0]
 800bab2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f43f acf3 	beq.w	800b4a0 <_dtoa_r+0x90>
 800baba:	601d      	str	r5, [r3, #0]
 800babc:	e4f0      	b.n	800b4a0 <_dtoa_r+0x90>
 800babe:	4657      	mov	r7, sl
 800bac0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bac4:	1e6b      	subs	r3, r5, #1
 800bac6:	2a39      	cmp	r2, #57	; 0x39
 800bac8:	d106      	bne.n	800bad8 <_dtoa_r+0x6c8>
 800baca:	9a06      	ldr	r2, [sp, #24]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d107      	bne.n	800bae0 <_dtoa_r+0x6d0>
 800bad0:	2330      	movs	r3, #48	; 0x30
 800bad2:	7013      	strb	r3, [r2, #0]
 800bad4:	4613      	mov	r3, r2
 800bad6:	3701      	adds	r7, #1
 800bad8:	781a      	ldrb	r2, [r3, #0]
 800bada:	3201      	adds	r2, #1
 800badc:	701a      	strb	r2, [r3, #0]
 800bade:	e791      	b.n	800ba04 <_dtoa_r+0x5f4>
 800bae0:	461d      	mov	r5, r3
 800bae2:	e7ed      	b.n	800bac0 <_dtoa_r+0x6b0>
 800bae4:	2200      	movs	r2, #0
 800bae6:	4b99      	ldr	r3, [pc, #612]	; (800bd4c <_dtoa_r+0x93c>)
 800bae8:	f7f4 fcf6 	bl	80004d8 <__aeabi_dmul>
 800baec:	2200      	movs	r2, #0
 800baee:	2300      	movs	r3, #0
 800baf0:	4606      	mov	r6, r0
 800baf2:	460f      	mov	r7, r1
 800baf4:	f7f4 ff58 	bl	80009a8 <__aeabi_dcmpeq>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	d09e      	beq.n	800ba3a <_dtoa_r+0x62a>
 800bafc:	e7cf      	b.n	800ba9e <_dtoa_r+0x68e>
 800bafe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb00:	2a00      	cmp	r2, #0
 800bb02:	f000 8088 	beq.w	800bc16 <_dtoa_r+0x806>
 800bb06:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bb08:	2a01      	cmp	r2, #1
 800bb0a:	dc6d      	bgt.n	800bbe8 <_dtoa_r+0x7d8>
 800bb0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bb0e:	2a00      	cmp	r2, #0
 800bb10:	d066      	beq.n	800bbe0 <_dtoa_r+0x7d0>
 800bb12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bb16:	464d      	mov	r5, r9
 800bb18:	9e08      	ldr	r6, [sp, #32]
 800bb1a:	9a07      	ldr	r2, [sp, #28]
 800bb1c:	2101      	movs	r1, #1
 800bb1e:	441a      	add	r2, r3
 800bb20:	4620      	mov	r0, r4
 800bb22:	4499      	add	r9, r3
 800bb24:	9207      	str	r2, [sp, #28]
 800bb26:	f001 f8a6 	bl	800cc76 <__i2b>
 800bb2a:	4607      	mov	r7, r0
 800bb2c:	2d00      	cmp	r5, #0
 800bb2e:	dd0b      	ble.n	800bb48 <_dtoa_r+0x738>
 800bb30:	9b07      	ldr	r3, [sp, #28]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	dd08      	ble.n	800bb48 <_dtoa_r+0x738>
 800bb36:	42ab      	cmp	r3, r5
 800bb38:	bfa8      	it	ge
 800bb3a:	462b      	movge	r3, r5
 800bb3c:	9a07      	ldr	r2, [sp, #28]
 800bb3e:	eba9 0903 	sub.w	r9, r9, r3
 800bb42:	1aed      	subs	r5, r5, r3
 800bb44:	1ad3      	subs	r3, r2, r3
 800bb46:	9307      	str	r3, [sp, #28]
 800bb48:	9b08      	ldr	r3, [sp, #32]
 800bb4a:	b1eb      	cbz	r3, 800bb88 <_dtoa_r+0x778>
 800bb4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d065      	beq.n	800bc1e <_dtoa_r+0x80e>
 800bb52:	b18e      	cbz	r6, 800bb78 <_dtoa_r+0x768>
 800bb54:	4639      	mov	r1, r7
 800bb56:	4632      	mov	r2, r6
 800bb58:	4620      	mov	r0, r4
 800bb5a:	f001 f92b 	bl	800cdb4 <__pow5mult>
 800bb5e:	465a      	mov	r2, fp
 800bb60:	4601      	mov	r1, r0
 800bb62:	4607      	mov	r7, r0
 800bb64:	4620      	mov	r0, r4
 800bb66:	f001 f88f 	bl	800cc88 <__multiply>
 800bb6a:	4659      	mov	r1, fp
 800bb6c:	900a      	str	r0, [sp, #40]	; 0x28
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f000 ffa3 	bl	800caba <_Bfree>
 800bb74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb76:	469b      	mov	fp, r3
 800bb78:	9b08      	ldr	r3, [sp, #32]
 800bb7a:	1b9a      	subs	r2, r3, r6
 800bb7c:	d004      	beq.n	800bb88 <_dtoa_r+0x778>
 800bb7e:	4659      	mov	r1, fp
 800bb80:	4620      	mov	r0, r4
 800bb82:	f001 f917 	bl	800cdb4 <__pow5mult>
 800bb86:	4683      	mov	fp, r0
 800bb88:	2101      	movs	r1, #1
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f001 f873 	bl	800cc76 <__i2b>
 800bb90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb92:	4606      	mov	r6, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f000 81c6 	beq.w	800bf26 <_dtoa_r+0xb16>
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	4601      	mov	r1, r0
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f001 f908 	bl	800cdb4 <__pow5mult>
 800bba4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bba6:	4606      	mov	r6, r0
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	dc3e      	bgt.n	800bc2a <_dtoa_r+0x81a>
 800bbac:	9b02      	ldr	r3, [sp, #8]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d137      	bne.n	800bc22 <_dtoa_r+0x812>
 800bbb2:	9b03      	ldr	r3, [sp, #12]
 800bbb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d134      	bne.n	800bc26 <_dtoa_r+0x816>
 800bbbc:	9b03      	ldr	r3, [sp, #12]
 800bbbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bbc2:	0d1b      	lsrs	r3, r3, #20
 800bbc4:	051b      	lsls	r3, r3, #20
 800bbc6:	b12b      	cbz	r3, 800bbd4 <_dtoa_r+0x7c4>
 800bbc8:	9b07      	ldr	r3, [sp, #28]
 800bbca:	f109 0901 	add.w	r9, r9, #1
 800bbce:	3301      	adds	r3, #1
 800bbd0:	9307      	str	r3, [sp, #28]
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	9308      	str	r3, [sp, #32]
 800bbd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d128      	bne.n	800bc2e <_dtoa_r+0x81e>
 800bbdc:	2001      	movs	r0, #1
 800bbde:	e02e      	b.n	800bc3e <_dtoa_r+0x82e>
 800bbe0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bbe2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bbe6:	e796      	b.n	800bb16 <_dtoa_r+0x706>
 800bbe8:	9b08      	ldr	r3, [sp, #32]
 800bbea:	f108 36ff 	add.w	r6, r8, #4294967295
 800bbee:	42b3      	cmp	r3, r6
 800bbf0:	bfb7      	itett	lt
 800bbf2:	9b08      	ldrlt	r3, [sp, #32]
 800bbf4:	1b9e      	subge	r6, r3, r6
 800bbf6:	1af2      	sublt	r2, r6, r3
 800bbf8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800bbfa:	bfbf      	itttt	lt
 800bbfc:	9608      	strlt	r6, [sp, #32]
 800bbfe:	189b      	addlt	r3, r3, r2
 800bc00:	930c      	strlt	r3, [sp, #48]	; 0x30
 800bc02:	2600      	movlt	r6, #0
 800bc04:	f1b8 0f00 	cmp.w	r8, #0
 800bc08:	bfb9      	ittee	lt
 800bc0a:	eba9 0508 	sublt.w	r5, r9, r8
 800bc0e:	2300      	movlt	r3, #0
 800bc10:	464d      	movge	r5, r9
 800bc12:	4643      	movge	r3, r8
 800bc14:	e781      	b.n	800bb1a <_dtoa_r+0x70a>
 800bc16:	9e08      	ldr	r6, [sp, #32]
 800bc18:	464d      	mov	r5, r9
 800bc1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bc1c:	e786      	b.n	800bb2c <_dtoa_r+0x71c>
 800bc1e:	9a08      	ldr	r2, [sp, #32]
 800bc20:	e7ad      	b.n	800bb7e <_dtoa_r+0x76e>
 800bc22:	2300      	movs	r3, #0
 800bc24:	e7d6      	b.n	800bbd4 <_dtoa_r+0x7c4>
 800bc26:	9b02      	ldr	r3, [sp, #8]
 800bc28:	e7d4      	b.n	800bbd4 <_dtoa_r+0x7c4>
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	9308      	str	r3, [sp, #32]
 800bc2e:	6933      	ldr	r3, [r6, #16]
 800bc30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bc34:	6918      	ldr	r0, [r3, #16]
 800bc36:	f000 ffd0 	bl	800cbda <__hi0bits>
 800bc3a:	f1c0 0020 	rsb	r0, r0, #32
 800bc3e:	9b07      	ldr	r3, [sp, #28]
 800bc40:	4418      	add	r0, r3
 800bc42:	f010 001f 	ands.w	r0, r0, #31
 800bc46:	d047      	beq.n	800bcd8 <_dtoa_r+0x8c8>
 800bc48:	f1c0 0320 	rsb	r3, r0, #32
 800bc4c:	2b04      	cmp	r3, #4
 800bc4e:	dd3b      	ble.n	800bcc8 <_dtoa_r+0x8b8>
 800bc50:	9b07      	ldr	r3, [sp, #28]
 800bc52:	f1c0 001c 	rsb	r0, r0, #28
 800bc56:	4481      	add	r9, r0
 800bc58:	4405      	add	r5, r0
 800bc5a:	4403      	add	r3, r0
 800bc5c:	9307      	str	r3, [sp, #28]
 800bc5e:	f1b9 0f00 	cmp.w	r9, #0
 800bc62:	dd05      	ble.n	800bc70 <_dtoa_r+0x860>
 800bc64:	4659      	mov	r1, fp
 800bc66:	464a      	mov	r2, r9
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f001 f8f1 	bl	800ce50 <__lshift>
 800bc6e:	4683      	mov	fp, r0
 800bc70:	9b07      	ldr	r3, [sp, #28]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	dd05      	ble.n	800bc82 <_dtoa_r+0x872>
 800bc76:	4631      	mov	r1, r6
 800bc78:	461a      	mov	r2, r3
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f001 f8e8 	bl	800ce50 <__lshift>
 800bc80:	4606      	mov	r6, r0
 800bc82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc84:	b353      	cbz	r3, 800bcdc <_dtoa_r+0x8cc>
 800bc86:	4631      	mov	r1, r6
 800bc88:	4658      	mov	r0, fp
 800bc8a:	f001 f935 	bl	800cef8 <__mcmp>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	da24      	bge.n	800bcdc <_dtoa_r+0x8cc>
 800bc92:	2300      	movs	r3, #0
 800bc94:	4659      	mov	r1, fp
 800bc96:	220a      	movs	r2, #10
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f000 ff25 	bl	800cae8 <__multadd>
 800bc9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bca0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bca4:	4683      	mov	fp, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f000 8144 	beq.w	800bf34 <_dtoa_r+0xb24>
 800bcac:	2300      	movs	r3, #0
 800bcae:	4639      	mov	r1, r7
 800bcb0:	220a      	movs	r2, #10
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f000 ff18 	bl	800cae8 <__multadd>
 800bcb8:	9b04      	ldr	r3, [sp, #16]
 800bcba:	4607      	mov	r7, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	dc4d      	bgt.n	800bd5c <_dtoa_r+0x94c>
 800bcc0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bcc2:	2b02      	cmp	r3, #2
 800bcc4:	dd4a      	ble.n	800bd5c <_dtoa_r+0x94c>
 800bcc6:	e011      	b.n	800bcec <_dtoa_r+0x8dc>
 800bcc8:	d0c9      	beq.n	800bc5e <_dtoa_r+0x84e>
 800bcca:	9a07      	ldr	r2, [sp, #28]
 800bccc:	331c      	adds	r3, #28
 800bcce:	441a      	add	r2, r3
 800bcd0:	4499      	add	r9, r3
 800bcd2:	441d      	add	r5, r3
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	e7c1      	b.n	800bc5c <_dtoa_r+0x84c>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	e7f6      	b.n	800bcca <_dtoa_r+0x8ba>
 800bcdc:	f1b8 0f00 	cmp.w	r8, #0
 800bce0:	dc36      	bgt.n	800bd50 <_dtoa_r+0x940>
 800bce2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bce4:	2b02      	cmp	r3, #2
 800bce6:	dd33      	ble.n	800bd50 <_dtoa_r+0x940>
 800bce8:	f8cd 8010 	str.w	r8, [sp, #16]
 800bcec:	9b04      	ldr	r3, [sp, #16]
 800bcee:	b963      	cbnz	r3, 800bd0a <_dtoa_r+0x8fa>
 800bcf0:	4631      	mov	r1, r6
 800bcf2:	2205      	movs	r2, #5
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f000 fef7 	bl	800cae8 <__multadd>
 800bcfa:	4601      	mov	r1, r0
 800bcfc:	4606      	mov	r6, r0
 800bcfe:	4658      	mov	r0, fp
 800bd00:	f001 f8fa 	bl	800cef8 <__mcmp>
 800bd04:	2800      	cmp	r0, #0
 800bd06:	f73f add3 	bgt.w	800b8b0 <_dtoa_r+0x4a0>
 800bd0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bd0c:	9d06      	ldr	r5, [sp, #24]
 800bd0e:	ea6f 0a03 	mvn.w	sl, r3
 800bd12:	f04f 0900 	mov.w	r9, #0
 800bd16:	4631      	mov	r1, r6
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f000 fece 	bl	800caba <_Bfree>
 800bd1e:	2f00      	cmp	r7, #0
 800bd20:	f43f aebd 	beq.w	800ba9e <_dtoa_r+0x68e>
 800bd24:	f1b9 0f00 	cmp.w	r9, #0
 800bd28:	d005      	beq.n	800bd36 <_dtoa_r+0x926>
 800bd2a:	45b9      	cmp	r9, r7
 800bd2c:	d003      	beq.n	800bd36 <_dtoa_r+0x926>
 800bd2e:	4649      	mov	r1, r9
 800bd30:	4620      	mov	r0, r4
 800bd32:	f000 fec2 	bl	800caba <_Bfree>
 800bd36:	4639      	mov	r1, r7
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f000 febe 	bl	800caba <_Bfree>
 800bd3e:	e6ae      	b.n	800ba9e <_dtoa_r+0x68e>
 800bd40:	2600      	movs	r6, #0
 800bd42:	4637      	mov	r7, r6
 800bd44:	e7e1      	b.n	800bd0a <_dtoa_r+0x8fa>
 800bd46:	46ba      	mov	sl, r7
 800bd48:	4637      	mov	r7, r6
 800bd4a:	e5b1      	b.n	800b8b0 <_dtoa_r+0x4a0>
 800bd4c:	40240000 	.word	0x40240000
 800bd50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd52:	f8cd 8010 	str.w	r8, [sp, #16]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	f000 80f3 	beq.w	800bf42 <_dtoa_r+0xb32>
 800bd5c:	2d00      	cmp	r5, #0
 800bd5e:	dd05      	ble.n	800bd6c <_dtoa_r+0x95c>
 800bd60:	4639      	mov	r1, r7
 800bd62:	462a      	mov	r2, r5
 800bd64:	4620      	mov	r0, r4
 800bd66:	f001 f873 	bl	800ce50 <__lshift>
 800bd6a:	4607      	mov	r7, r0
 800bd6c:	9b08      	ldr	r3, [sp, #32]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d04c      	beq.n	800be0c <_dtoa_r+0x9fc>
 800bd72:	6879      	ldr	r1, [r7, #4]
 800bd74:	4620      	mov	r0, r4
 800bd76:	f000 fe6c 	bl	800ca52 <_Balloc>
 800bd7a:	4605      	mov	r5, r0
 800bd7c:	693a      	ldr	r2, [r7, #16]
 800bd7e:	f107 010c 	add.w	r1, r7, #12
 800bd82:	3202      	adds	r2, #2
 800bd84:	0092      	lsls	r2, r2, #2
 800bd86:	300c      	adds	r0, #12
 800bd88:	f000 fe58 	bl	800ca3c <memcpy>
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	4629      	mov	r1, r5
 800bd90:	4620      	mov	r0, r4
 800bd92:	f001 f85d 	bl	800ce50 <__lshift>
 800bd96:	46b9      	mov	r9, r7
 800bd98:	4607      	mov	r7, r0
 800bd9a:	9b06      	ldr	r3, [sp, #24]
 800bd9c:	9307      	str	r3, [sp, #28]
 800bd9e:	9b02      	ldr	r3, [sp, #8]
 800bda0:	f003 0301 	and.w	r3, r3, #1
 800bda4:	9308      	str	r3, [sp, #32]
 800bda6:	4631      	mov	r1, r6
 800bda8:	4658      	mov	r0, fp
 800bdaa:	f7ff faa1 	bl	800b2f0 <quorem>
 800bdae:	4649      	mov	r1, r9
 800bdb0:	4605      	mov	r5, r0
 800bdb2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bdb6:	4658      	mov	r0, fp
 800bdb8:	f001 f89e 	bl	800cef8 <__mcmp>
 800bdbc:	463a      	mov	r2, r7
 800bdbe:	9002      	str	r0, [sp, #8]
 800bdc0:	4631      	mov	r1, r6
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f001 f8b2 	bl	800cf2c <__mdiff>
 800bdc8:	68c3      	ldr	r3, [r0, #12]
 800bdca:	4602      	mov	r2, r0
 800bdcc:	bb03      	cbnz	r3, 800be10 <_dtoa_r+0xa00>
 800bdce:	4601      	mov	r1, r0
 800bdd0:	9009      	str	r0, [sp, #36]	; 0x24
 800bdd2:	4658      	mov	r0, fp
 800bdd4:	f001 f890 	bl	800cef8 <__mcmp>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bddc:	4611      	mov	r1, r2
 800bdde:	4620      	mov	r0, r4
 800bde0:	9309      	str	r3, [sp, #36]	; 0x24
 800bde2:	f000 fe6a 	bl	800caba <_Bfree>
 800bde6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bde8:	b9a3      	cbnz	r3, 800be14 <_dtoa_r+0xa04>
 800bdea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bdec:	b992      	cbnz	r2, 800be14 <_dtoa_r+0xa04>
 800bdee:	9a08      	ldr	r2, [sp, #32]
 800bdf0:	b982      	cbnz	r2, 800be14 <_dtoa_r+0xa04>
 800bdf2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bdf6:	d029      	beq.n	800be4c <_dtoa_r+0xa3c>
 800bdf8:	9b02      	ldr	r3, [sp, #8]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	dd01      	ble.n	800be02 <_dtoa_r+0x9f2>
 800bdfe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800be02:	9b07      	ldr	r3, [sp, #28]
 800be04:	1c5d      	adds	r5, r3, #1
 800be06:	f883 8000 	strb.w	r8, [r3]
 800be0a:	e784      	b.n	800bd16 <_dtoa_r+0x906>
 800be0c:	4638      	mov	r0, r7
 800be0e:	e7c2      	b.n	800bd96 <_dtoa_r+0x986>
 800be10:	2301      	movs	r3, #1
 800be12:	e7e3      	b.n	800bddc <_dtoa_r+0x9cc>
 800be14:	9a02      	ldr	r2, [sp, #8]
 800be16:	2a00      	cmp	r2, #0
 800be18:	db04      	blt.n	800be24 <_dtoa_r+0xa14>
 800be1a:	d123      	bne.n	800be64 <_dtoa_r+0xa54>
 800be1c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800be1e:	bb0a      	cbnz	r2, 800be64 <_dtoa_r+0xa54>
 800be20:	9a08      	ldr	r2, [sp, #32]
 800be22:	b9fa      	cbnz	r2, 800be64 <_dtoa_r+0xa54>
 800be24:	2b00      	cmp	r3, #0
 800be26:	ddec      	ble.n	800be02 <_dtoa_r+0x9f2>
 800be28:	4659      	mov	r1, fp
 800be2a:	2201      	movs	r2, #1
 800be2c:	4620      	mov	r0, r4
 800be2e:	f001 f80f 	bl	800ce50 <__lshift>
 800be32:	4631      	mov	r1, r6
 800be34:	4683      	mov	fp, r0
 800be36:	f001 f85f 	bl	800cef8 <__mcmp>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	dc03      	bgt.n	800be46 <_dtoa_r+0xa36>
 800be3e:	d1e0      	bne.n	800be02 <_dtoa_r+0x9f2>
 800be40:	f018 0f01 	tst.w	r8, #1
 800be44:	d0dd      	beq.n	800be02 <_dtoa_r+0x9f2>
 800be46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800be4a:	d1d8      	bne.n	800bdfe <_dtoa_r+0x9ee>
 800be4c:	9b07      	ldr	r3, [sp, #28]
 800be4e:	9a07      	ldr	r2, [sp, #28]
 800be50:	1c5d      	adds	r5, r3, #1
 800be52:	2339      	movs	r3, #57	; 0x39
 800be54:	7013      	strb	r3, [r2, #0]
 800be56:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be5a:	1e6a      	subs	r2, r5, #1
 800be5c:	2b39      	cmp	r3, #57	; 0x39
 800be5e:	d04d      	beq.n	800befc <_dtoa_r+0xaec>
 800be60:	3301      	adds	r3, #1
 800be62:	e052      	b.n	800bf0a <_dtoa_r+0xafa>
 800be64:	9a07      	ldr	r2, [sp, #28]
 800be66:	2b00      	cmp	r3, #0
 800be68:	f102 0501 	add.w	r5, r2, #1
 800be6c:	dd06      	ble.n	800be7c <_dtoa_r+0xa6c>
 800be6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800be72:	d0eb      	beq.n	800be4c <_dtoa_r+0xa3c>
 800be74:	f108 0801 	add.w	r8, r8, #1
 800be78:	9b07      	ldr	r3, [sp, #28]
 800be7a:	e7c4      	b.n	800be06 <_dtoa_r+0x9f6>
 800be7c:	9b06      	ldr	r3, [sp, #24]
 800be7e:	9a04      	ldr	r2, [sp, #16]
 800be80:	1aeb      	subs	r3, r5, r3
 800be82:	4293      	cmp	r3, r2
 800be84:	f805 8c01 	strb.w	r8, [r5, #-1]
 800be88:	d021      	beq.n	800bece <_dtoa_r+0xabe>
 800be8a:	4659      	mov	r1, fp
 800be8c:	2300      	movs	r3, #0
 800be8e:	220a      	movs	r2, #10
 800be90:	4620      	mov	r0, r4
 800be92:	f000 fe29 	bl	800cae8 <__multadd>
 800be96:	45b9      	cmp	r9, r7
 800be98:	4683      	mov	fp, r0
 800be9a:	f04f 0300 	mov.w	r3, #0
 800be9e:	f04f 020a 	mov.w	r2, #10
 800bea2:	4649      	mov	r1, r9
 800bea4:	4620      	mov	r0, r4
 800bea6:	d105      	bne.n	800beb4 <_dtoa_r+0xaa4>
 800bea8:	f000 fe1e 	bl	800cae8 <__multadd>
 800beac:	4681      	mov	r9, r0
 800beae:	4607      	mov	r7, r0
 800beb0:	9507      	str	r5, [sp, #28]
 800beb2:	e778      	b.n	800bda6 <_dtoa_r+0x996>
 800beb4:	f000 fe18 	bl	800cae8 <__multadd>
 800beb8:	4639      	mov	r1, r7
 800beba:	4681      	mov	r9, r0
 800bebc:	2300      	movs	r3, #0
 800bebe:	220a      	movs	r2, #10
 800bec0:	4620      	mov	r0, r4
 800bec2:	f000 fe11 	bl	800cae8 <__multadd>
 800bec6:	4607      	mov	r7, r0
 800bec8:	e7f2      	b.n	800beb0 <_dtoa_r+0xaa0>
 800beca:	f04f 0900 	mov.w	r9, #0
 800bece:	4659      	mov	r1, fp
 800bed0:	2201      	movs	r2, #1
 800bed2:	4620      	mov	r0, r4
 800bed4:	f000 ffbc 	bl	800ce50 <__lshift>
 800bed8:	4631      	mov	r1, r6
 800beda:	4683      	mov	fp, r0
 800bedc:	f001 f80c 	bl	800cef8 <__mcmp>
 800bee0:	2800      	cmp	r0, #0
 800bee2:	dcb8      	bgt.n	800be56 <_dtoa_r+0xa46>
 800bee4:	d102      	bne.n	800beec <_dtoa_r+0xadc>
 800bee6:	f018 0f01 	tst.w	r8, #1
 800beea:	d1b4      	bne.n	800be56 <_dtoa_r+0xa46>
 800beec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bef0:	1e6a      	subs	r2, r5, #1
 800bef2:	2b30      	cmp	r3, #48	; 0x30
 800bef4:	f47f af0f 	bne.w	800bd16 <_dtoa_r+0x906>
 800bef8:	4615      	mov	r5, r2
 800befa:	e7f7      	b.n	800beec <_dtoa_r+0xadc>
 800befc:	9b06      	ldr	r3, [sp, #24]
 800befe:	4293      	cmp	r3, r2
 800bf00:	d105      	bne.n	800bf0e <_dtoa_r+0xafe>
 800bf02:	2331      	movs	r3, #49	; 0x31
 800bf04:	9a06      	ldr	r2, [sp, #24]
 800bf06:	f10a 0a01 	add.w	sl, sl, #1
 800bf0a:	7013      	strb	r3, [r2, #0]
 800bf0c:	e703      	b.n	800bd16 <_dtoa_r+0x906>
 800bf0e:	4615      	mov	r5, r2
 800bf10:	e7a1      	b.n	800be56 <_dtoa_r+0xa46>
 800bf12:	4b17      	ldr	r3, [pc, #92]	; (800bf70 <_dtoa_r+0xb60>)
 800bf14:	f7ff bae1 	b.w	800b4da <_dtoa_r+0xca>
 800bf18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f47f aabb 	bne.w	800b496 <_dtoa_r+0x86>
 800bf20:	4b14      	ldr	r3, [pc, #80]	; (800bf74 <_dtoa_r+0xb64>)
 800bf22:	f7ff bada 	b.w	800b4da <_dtoa_r+0xca>
 800bf26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	f77f ae3f 	ble.w	800bbac <_dtoa_r+0x79c>
 800bf2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf30:	9308      	str	r3, [sp, #32]
 800bf32:	e653      	b.n	800bbdc <_dtoa_r+0x7cc>
 800bf34:	9b04      	ldr	r3, [sp, #16]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	dc03      	bgt.n	800bf42 <_dtoa_r+0xb32>
 800bf3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bf3c:	2b02      	cmp	r3, #2
 800bf3e:	f73f aed5 	bgt.w	800bcec <_dtoa_r+0x8dc>
 800bf42:	9d06      	ldr	r5, [sp, #24]
 800bf44:	4631      	mov	r1, r6
 800bf46:	4658      	mov	r0, fp
 800bf48:	f7ff f9d2 	bl	800b2f0 <quorem>
 800bf4c:	9b06      	ldr	r3, [sp, #24]
 800bf4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bf52:	f805 8b01 	strb.w	r8, [r5], #1
 800bf56:	9a04      	ldr	r2, [sp, #16]
 800bf58:	1aeb      	subs	r3, r5, r3
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	ddb5      	ble.n	800beca <_dtoa_r+0xaba>
 800bf5e:	4659      	mov	r1, fp
 800bf60:	2300      	movs	r3, #0
 800bf62:	220a      	movs	r2, #10
 800bf64:	4620      	mov	r0, r4
 800bf66:	f000 fdbf 	bl	800cae8 <__multadd>
 800bf6a:	4683      	mov	fp, r0
 800bf6c:	e7ea      	b.n	800bf44 <_dtoa_r+0xb34>
 800bf6e:	bf00      	nop
 800bf70:	0800e56b 	.word	0x0800e56b
 800bf74:	0800e3c8 	.word	0x0800e3c8

0800bf78 <__sflush_r>:
 800bf78:	898a      	ldrh	r2, [r1, #12]
 800bf7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf7e:	4605      	mov	r5, r0
 800bf80:	0710      	lsls	r0, r2, #28
 800bf82:	460c      	mov	r4, r1
 800bf84:	d458      	bmi.n	800c038 <__sflush_r+0xc0>
 800bf86:	684b      	ldr	r3, [r1, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	dc05      	bgt.n	800bf98 <__sflush_r+0x20>
 800bf8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	dc02      	bgt.n	800bf98 <__sflush_r+0x20>
 800bf92:	2000      	movs	r0, #0
 800bf94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf9a:	2e00      	cmp	r6, #0
 800bf9c:	d0f9      	beq.n	800bf92 <__sflush_r+0x1a>
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfa4:	682f      	ldr	r7, [r5, #0]
 800bfa6:	6a21      	ldr	r1, [r4, #32]
 800bfa8:	602b      	str	r3, [r5, #0]
 800bfaa:	d032      	beq.n	800c012 <__sflush_r+0x9a>
 800bfac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfae:	89a3      	ldrh	r3, [r4, #12]
 800bfb0:	075a      	lsls	r2, r3, #29
 800bfb2:	d505      	bpl.n	800bfc0 <__sflush_r+0x48>
 800bfb4:	6863      	ldr	r3, [r4, #4]
 800bfb6:	1ac0      	subs	r0, r0, r3
 800bfb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfba:	b10b      	cbz	r3, 800bfc0 <__sflush_r+0x48>
 800bfbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfbe:	1ac0      	subs	r0, r0, r3
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfc6:	6a21      	ldr	r1, [r4, #32]
 800bfc8:	4628      	mov	r0, r5
 800bfca:	47b0      	blx	r6
 800bfcc:	1c43      	adds	r3, r0, #1
 800bfce:	89a3      	ldrh	r3, [r4, #12]
 800bfd0:	d106      	bne.n	800bfe0 <__sflush_r+0x68>
 800bfd2:	6829      	ldr	r1, [r5, #0]
 800bfd4:	291d      	cmp	r1, #29
 800bfd6:	d848      	bhi.n	800c06a <__sflush_r+0xf2>
 800bfd8:	4a29      	ldr	r2, [pc, #164]	; (800c080 <__sflush_r+0x108>)
 800bfda:	40ca      	lsrs	r2, r1
 800bfdc:	07d6      	lsls	r6, r2, #31
 800bfde:	d544      	bpl.n	800c06a <__sflush_r+0xf2>
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	6062      	str	r2, [r4, #4]
 800bfe4:	6922      	ldr	r2, [r4, #16]
 800bfe6:	04d9      	lsls	r1, r3, #19
 800bfe8:	6022      	str	r2, [r4, #0]
 800bfea:	d504      	bpl.n	800bff6 <__sflush_r+0x7e>
 800bfec:	1c42      	adds	r2, r0, #1
 800bfee:	d101      	bne.n	800bff4 <__sflush_r+0x7c>
 800bff0:	682b      	ldr	r3, [r5, #0]
 800bff2:	b903      	cbnz	r3, 800bff6 <__sflush_r+0x7e>
 800bff4:	6560      	str	r0, [r4, #84]	; 0x54
 800bff6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bff8:	602f      	str	r7, [r5, #0]
 800bffa:	2900      	cmp	r1, #0
 800bffc:	d0c9      	beq.n	800bf92 <__sflush_r+0x1a>
 800bffe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c002:	4299      	cmp	r1, r3
 800c004:	d002      	beq.n	800c00c <__sflush_r+0x94>
 800c006:	4628      	mov	r0, r5
 800c008:	f001 f92a 	bl	800d260 <_free_r>
 800c00c:	2000      	movs	r0, #0
 800c00e:	6360      	str	r0, [r4, #52]	; 0x34
 800c010:	e7c0      	b.n	800bf94 <__sflush_r+0x1c>
 800c012:	2301      	movs	r3, #1
 800c014:	4628      	mov	r0, r5
 800c016:	47b0      	blx	r6
 800c018:	1c41      	adds	r1, r0, #1
 800c01a:	d1c8      	bne.n	800bfae <__sflush_r+0x36>
 800c01c:	682b      	ldr	r3, [r5, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d0c5      	beq.n	800bfae <__sflush_r+0x36>
 800c022:	2b1d      	cmp	r3, #29
 800c024:	d001      	beq.n	800c02a <__sflush_r+0xb2>
 800c026:	2b16      	cmp	r3, #22
 800c028:	d101      	bne.n	800c02e <__sflush_r+0xb6>
 800c02a:	602f      	str	r7, [r5, #0]
 800c02c:	e7b1      	b.n	800bf92 <__sflush_r+0x1a>
 800c02e:	89a3      	ldrh	r3, [r4, #12]
 800c030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c034:	81a3      	strh	r3, [r4, #12]
 800c036:	e7ad      	b.n	800bf94 <__sflush_r+0x1c>
 800c038:	690f      	ldr	r7, [r1, #16]
 800c03a:	2f00      	cmp	r7, #0
 800c03c:	d0a9      	beq.n	800bf92 <__sflush_r+0x1a>
 800c03e:	0793      	lsls	r3, r2, #30
 800c040:	bf18      	it	ne
 800c042:	2300      	movne	r3, #0
 800c044:	680e      	ldr	r6, [r1, #0]
 800c046:	bf08      	it	eq
 800c048:	694b      	ldreq	r3, [r1, #20]
 800c04a:	eba6 0807 	sub.w	r8, r6, r7
 800c04e:	600f      	str	r7, [r1, #0]
 800c050:	608b      	str	r3, [r1, #8]
 800c052:	f1b8 0f00 	cmp.w	r8, #0
 800c056:	dd9c      	ble.n	800bf92 <__sflush_r+0x1a>
 800c058:	4643      	mov	r3, r8
 800c05a:	463a      	mov	r2, r7
 800c05c:	6a21      	ldr	r1, [r4, #32]
 800c05e:	4628      	mov	r0, r5
 800c060:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c062:	47b0      	blx	r6
 800c064:	2800      	cmp	r0, #0
 800c066:	dc06      	bgt.n	800c076 <__sflush_r+0xfe>
 800c068:	89a3      	ldrh	r3, [r4, #12]
 800c06a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c06e:	81a3      	strh	r3, [r4, #12]
 800c070:	f04f 30ff 	mov.w	r0, #4294967295
 800c074:	e78e      	b.n	800bf94 <__sflush_r+0x1c>
 800c076:	4407      	add	r7, r0
 800c078:	eba8 0800 	sub.w	r8, r8, r0
 800c07c:	e7e9      	b.n	800c052 <__sflush_r+0xda>
 800c07e:	bf00      	nop
 800c080:	20400001 	.word	0x20400001

0800c084 <_fflush_r>:
 800c084:	b538      	push	{r3, r4, r5, lr}
 800c086:	690b      	ldr	r3, [r1, #16]
 800c088:	4605      	mov	r5, r0
 800c08a:	460c      	mov	r4, r1
 800c08c:	b1db      	cbz	r3, 800c0c6 <_fflush_r+0x42>
 800c08e:	b118      	cbz	r0, 800c098 <_fflush_r+0x14>
 800c090:	6983      	ldr	r3, [r0, #24]
 800c092:	b90b      	cbnz	r3, 800c098 <_fflush_r+0x14>
 800c094:	f000 f860 	bl	800c158 <__sinit>
 800c098:	4b0c      	ldr	r3, [pc, #48]	; (800c0cc <_fflush_r+0x48>)
 800c09a:	429c      	cmp	r4, r3
 800c09c:	d109      	bne.n	800c0b2 <_fflush_r+0x2e>
 800c09e:	686c      	ldr	r4, [r5, #4]
 800c0a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0a4:	b17b      	cbz	r3, 800c0c6 <_fflush_r+0x42>
 800c0a6:	4621      	mov	r1, r4
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0ae:	f7ff bf63 	b.w	800bf78 <__sflush_r>
 800c0b2:	4b07      	ldr	r3, [pc, #28]	; (800c0d0 <_fflush_r+0x4c>)
 800c0b4:	429c      	cmp	r4, r3
 800c0b6:	d101      	bne.n	800c0bc <_fflush_r+0x38>
 800c0b8:	68ac      	ldr	r4, [r5, #8]
 800c0ba:	e7f1      	b.n	800c0a0 <_fflush_r+0x1c>
 800c0bc:	4b05      	ldr	r3, [pc, #20]	; (800c0d4 <_fflush_r+0x50>)
 800c0be:	429c      	cmp	r4, r3
 800c0c0:	bf08      	it	eq
 800c0c2:	68ec      	ldreq	r4, [r5, #12]
 800c0c4:	e7ec      	b.n	800c0a0 <_fflush_r+0x1c>
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	bd38      	pop	{r3, r4, r5, pc}
 800c0ca:	bf00      	nop
 800c0cc:	0800e3f8 	.word	0x0800e3f8
 800c0d0:	0800e418 	.word	0x0800e418
 800c0d4:	0800e3d8 	.word	0x0800e3d8

0800c0d8 <std>:
 800c0d8:	2300      	movs	r3, #0
 800c0da:	b510      	push	{r4, lr}
 800c0dc:	4604      	mov	r4, r0
 800c0de:	e9c0 3300 	strd	r3, r3, [r0]
 800c0e2:	6083      	str	r3, [r0, #8]
 800c0e4:	8181      	strh	r1, [r0, #12]
 800c0e6:	6643      	str	r3, [r0, #100]	; 0x64
 800c0e8:	81c2      	strh	r2, [r0, #14]
 800c0ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c0ee:	6183      	str	r3, [r0, #24]
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	2208      	movs	r2, #8
 800c0f4:	305c      	adds	r0, #92	; 0x5c
 800c0f6:	f7fd f9fb 	bl	80094f0 <memset>
 800c0fa:	4b05      	ldr	r3, [pc, #20]	; (800c110 <std+0x38>)
 800c0fc:	6224      	str	r4, [r4, #32]
 800c0fe:	6263      	str	r3, [r4, #36]	; 0x24
 800c100:	4b04      	ldr	r3, [pc, #16]	; (800c114 <std+0x3c>)
 800c102:	62a3      	str	r3, [r4, #40]	; 0x28
 800c104:	4b04      	ldr	r3, [pc, #16]	; (800c118 <std+0x40>)
 800c106:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c108:	4b04      	ldr	r3, [pc, #16]	; (800c11c <std+0x44>)
 800c10a:	6323      	str	r3, [r4, #48]	; 0x30
 800c10c:	bd10      	pop	{r4, pc}
 800c10e:	bf00      	nop
 800c110:	0800a2f5 	.word	0x0800a2f5
 800c114:	0800a31b 	.word	0x0800a31b
 800c118:	0800a353 	.word	0x0800a353
 800c11c:	0800a377 	.word	0x0800a377

0800c120 <_cleanup_r>:
 800c120:	4901      	ldr	r1, [pc, #4]	; (800c128 <_cleanup_r+0x8>)
 800c122:	f000 b885 	b.w	800c230 <_fwalk_reent>
 800c126:	bf00      	nop
 800c128:	0800c085 	.word	0x0800c085

0800c12c <__sfmoreglue>:
 800c12c:	b570      	push	{r4, r5, r6, lr}
 800c12e:	2568      	movs	r5, #104	; 0x68
 800c130:	1e4a      	subs	r2, r1, #1
 800c132:	4355      	muls	r5, r2
 800c134:	460e      	mov	r6, r1
 800c136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c13a:	f001 f8dd 	bl	800d2f8 <_malloc_r>
 800c13e:	4604      	mov	r4, r0
 800c140:	b140      	cbz	r0, 800c154 <__sfmoreglue+0x28>
 800c142:	2100      	movs	r1, #0
 800c144:	e9c0 1600 	strd	r1, r6, [r0]
 800c148:	300c      	adds	r0, #12
 800c14a:	60a0      	str	r0, [r4, #8]
 800c14c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c150:	f7fd f9ce 	bl	80094f0 <memset>
 800c154:	4620      	mov	r0, r4
 800c156:	bd70      	pop	{r4, r5, r6, pc}

0800c158 <__sinit>:
 800c158:	6983      	ldr	r3, [r0, #24]
 800c15a:	b510      	push	{r4, lr}
 800c15c:	4604      	mov	r4, r0
 800c15e:	bb33      	cbnz	r3, 800c1ae <__sinit+0x56>
 800c160:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c164:	6503      	str	r3, [r0, #80]	; 0x50
 800c166:	4b12      	ldr	r3, [pc, #72]	; (800c1b0 <__sinit+0x58>)
 800c168:	4a12      	ldr	r2, [pc, #72]	; (800c1b4 <__sinit+0x5c>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	6282      	str	r2, [r0, #40]	; 0x28
 800c16e:	4298      	cmp	r0, r3
 800c170:	bf04      	itt	eq
 800c172:	2301      	moveq	r3, #1
 800c174:	6183      	streq	r3, [r0, #24]
 800c176:	f000 f81f 	bl	800c1b8 <__sfp>
 800c17a:	6060      	str	r0, [r4, #4]
 800c17c:	4620      	mov	r0, r4
 800c17e:	f000 f81b 	bl	800c1b8 <__sfp>
 800c182:	60a0      	str	r0, [r4, #8]
 800c184:	4620      	mov	r0, r4
 800c186:	f000 f817 	bl	800c1b8 <__sfp>
 800c18a:	2200      	movs	r2, #0
 800c18c:	60e0      	str	r0, [r4, #12]
 800c18e:	2104      	movs	r1, #4
 800c190:	6860      	ldr	r0, [r4, #4]
 800c192:	f7ff ffa1 	bl	800c0d8 <std>
 800c196:	2201      	movs	r2, #1
 800c198:	2109      	movs	r1, #9
 800c19a:	68a0      	ldr	r0, [r4, #8]
 800c19c:	f7ff ff9c 	bl	800c0d8 <std>
 800c1a0:	2202      	movs	r2, #2
 800c1a2:	2112      	movs	r1, #18
 800c1a4:	68e0      	ldr	r0, [r4, #12]
 800c1a6:	f7ff ff97 	bl	800c0d8 <std>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	61a3      	str	r3, [r4, #24]
 800c1ae:	bd10      	pop	{r4, pc}
 800c1b0:	0800e338 	.word	0x0800e338
 800c1b4:	0800c121 	.word	0x0800c121

0800c1b8 <__sfp>:
 800c1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ba:	4b1b      	ldr	r3, [pc, #108]	; (800c228 <__sfp+0x70>)
 800c1bc:	4607      	mov	r7, r0
 800c1be:	681e      	ldr	r6, [r3, #0]
 800c1c0:	69b3      	ldr	r3, [r6, #24]
 800c1c2:	b913      	cbnz	r3, 800c1ca <__sfp+0x12>
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	f7ff ffc7 	bl	800c158 <__sinit>
 800c1ca:	3648      	adds	r6, #72	; 0x48
 800c1cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	d503      	bpl.n	800c1dc <__sfp+0x24>
 800c1d4:	6833      	ldr	r3, [r6, #0]
 800c1d6:	b133      	cbz	r3, 800c1e6 <__sfp+0x2e>
 800c1d8:	6836      	ldr	r6, [r6, #0]
 800c1da:	e7f7      	b.n	800c1cc <__sfp+0x14>
 800c1dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c1e0:	b16d      	cbz	r5, 800c1fe <__sfp+0x46>
 800c1e2:	3468      	adds	r4, #104	; 0x68
 800c1e4:	e7f4      	b.n	800c1d0 <__sfp+0x18>
 800c1e6:	2104      	movs	r1, #4
 800c1e8:	4638      	mov	r0, r7
 800c1ea:	f7ff ff9f 	bl	800c12c <__sfmoreglue>
 800c1ee:	6030      	str	r0, [r6, #0]
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	d1f1      	bne.n	800c1d8 <__sfp+0x20>
 800c1f4:	230c      	movs	r3, #12
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	603b      	str	r3, [r7, #0]
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1fe:	4b0b      	ldr	r3, [pc, #44]	; (800c22c <__sfp+0x74>)
 800c200:	6665      	str	r5, [r4, #100]	; 0x64
 800c202:	e9c4 5500 	strd	r5, r5, [r4]
 800c206:	60a5      	str	r5, [r4, #8]
 800c208:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c20c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c210:	2208      	movs	r2, #8
 800c212:	4629      	mov	r1, r5
 800c214:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c218:	f7fd f96a 	bl	80094f0 <memset>
 800c21c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c220:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c224:	e7e9      	b.n	800c1fa <__sfp+0x42>
 800c226:	bf00      	nop
 800c228:	0800e338 	.word	0x0800e338
 800c22c:	ffff0001 	.word	0xffff0001

0800c230 <_fwalk_reent>:
 800c230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c234:	4680      	mov	r8, r0
 800c236:	4689      	mov	r9, r1
 800c238:	2600      	movs	r6, #0
 800c23a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c23e:	b914      	cbnz	r4, 800c246 <_fwalk_reent+0x16>
 800c240:	4630      	mov	r0, r6
 800c242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c246:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c24a:	3f01      	subs	r7, #1
 800c24c:	d501      	bpl.n	800c252 <_fwalk_reent+0x22>
 800c24e:	6824      	ldr	r4, [r4, #0]
 800c250:	e7f5      	b.n	800c23e <_fwalk_reent+0xe>
 800c252:	89ab      	ldrh	r3, [r5, #12]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d907      	bls.n	800c268 <_fwalk_reent+0x38>
 800c258:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c25c:	3301      	adds	r3, #1
 800c25e:	d003      	beq.n	800c268 <_fwalk_reent+0x38>
 800c260:	4629      	mov	r1, r5
 800c262:	4640      	mov	r0, r8
 800c264:	47c8      	blx	r9
 800c266:	4306      	orrs	r6, r0
 800c268:	3568      	adds	r5, #104	; 0x68
 800c26a:	e7ee      	b.n	800c24a <_fwalk_reent+0x1a>

0800c26c <rshift>:
 800c26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c26e:	6906      	ldr	r6, [r0, #16]
 800c270:	114b      	asrs	r3, r1, #5
 800c272:	429e      	cmp	r6, r3
 800c274:	f100 0414 	add.w	r4, r0, #20
 800c278:	dd31      	ble.n	800c2de <rshift+0x72>
 800c27a:	f011 011f 	ands.w	r1, r1, #31
 800c27e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c282:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c286:	d108      	bne.n	800c29a <rshift+0x2e>
 800c288:	4621      	mov	r1, r4
 800c28a:	42b2      	cmp	r2, r6
 800c28c:	460b      	mov	r3, r1
 800c28e:	d211      	bcs.n	800c2b4 <rshift+0x48>
 800c290:	f852 3b04 	ldr.w	r3, [r2], #4
 800c294:	f841 3b04 	str.w	r3, [r1], #4
 800c298:	e7f7      	b.n	800c28a <rshift+0x1e>
 800c29a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c29e:	4623      	mov	r3, r4
 800c2a0:	f1c1 0c20 	rsb	ip, r1, #32
 800c2a4:	40cd      	lsrs	r5, r1
 800c2a6:	3204      	adds	r2, #4
 800c2a8:	42b2      	cmp	r2, r6
 800c2aa:	4617      	mov	r7, r2
 800c2ac:	d30d      	bcc.n	800c2ca <rshift+0x5e>
 800c2ae:	601d      	str	r5, [r3, #0]
 800c2b0:	b105      	cbz	r5, 800c2b4 <rshift+0x48>
 800c2b2:	3304      	adds	r3, #4
 800c2b4:	42a3      	cmp	r3, r4
 800c2b6:	eba3 0204 	sub.w	r2, r3, r4
 800c2ba:	bf08      	it	eq
 800c2bc:	2300      	moveq	r3, #0
 800c2be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c2c2:	6102      	str	r2, [r0, #16]
 800c2c4:	bf08      	it	eq
 800c2c6:	6143      	streq	r3, [r0, #20]
 800c2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2ca:	683f      	ldr	r7, [r7, #0]
 800c2cc:	fa07 f70c 	lsl.w	r7, r7, ip
 800c2d0:	433d      	orrs	r5, r7
 800c2d2:	f843 5b04 	str.w	r5, [r3], #4
 800c2d6:	f852 5b04 	ldr.w	r5, [r2], #4
 800c2da:	40cd      	lsrs	r5, r1
 800c2dc:	e7e4      	b.n	800c2a8 <rshift+0x3c>
 800c2de:	4623      	mov	r3, r4
 800c2e0:	e7e8      	b.n	800c2b4 <rshift+0x48>

0800c2e2 <__hexdig_fun>:
 800c2e2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c2e6:	2b09      	cmp	r3, #9
 800c2e8:	d802      	bhi.n	800c2f0 <__hexdig_fun+0xe>
 800c2ea:	3820      	subs	r0, #32
 800c2ec:	b2c0      	uxtb	r0, r0
 800c2ee:	4770      	bx	lr
 800c2f0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c2f4:	2b05      	cmp	r3, #5
 800c2f6:	d801      	bhi.n	800c2fc <__hexdig_fun+0x1a>
 800c2f8:	3847      	subs	r0, #71	; 0x47
 800c2fa:	e7f7      	b.n	800c2ec <__hexdig_fun+0xa>
 800c2fc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c300:	2b05      	cmp	r3, #5
 800c302:	d801      	bhi.n	800c308 <__hexdig_fun+0x26>
 800c304:	3827      	subs	r0, #39	; 0x27
 800c306:	e7f1      	b.n	800c2ec <__hexdig_fun+0xa>
 800c308:	2000      	movs	r0, #0
 800c30a:	4770      	bx	lr

0800c30c <__gethex>:
 800c30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c310:	b08b      	sub	sp, #44	; 0x2c
 800c312:	9002      	str	r0, [sp, #8]
 800c314:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c316:	468a      	mov	sl, r1
 800c318:	4690      	mov	r8, r2
 800c31a:	9306      	str	r3, [sp, #24]
 800c31c:	f000 fae0 	bl	800c8e0 <__localeconv_l>
 800c320:	6803      	ldr	r3, [r0, #0]
 800c322:	f04f 0b00 	mov.w	fp, #0
 800c326:	4618      	mov	r0, r3
 800c328:	9303      	str	r3, [sp, #12]
 800c32a:	f7f3 ff11 	bl	8000150 <strlen>
 800c32e:	9b03      	ldr	r3, [sp, #12]
 800c330:	9001      	str	r0, [sp, #4]
 800c332:	4403      	add	r3, r0
 800c334:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c338:	9307      	str	r3, [sp, #28]
 800c33a:	f8da 3000 	ldr.w	r3, [sl]
 800c33e:	3302      	adds	r3, #2
 800c340:	461f      	mov	r7, r3
 800c342:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c346:	2830      	cmp	r0, #48	; 0x30
 800c348:	d06c      	beq.n	800c424 <__gethex+0x118>
 800c34a:	f7ff ffca 	bl	800c2e2 <__hexdig_fun>
 800c34e:	4604      	mov	r4, r0
 800c350:	2800      	cmp	r0, #0
 800c352:	d16a      	bne.n	800c42a <__gethex+0x11e>
 800c354:	9a01      	ldr	r2, [sp, #4]
 800c356:	9903      	ldr	r1, [sp, #12]
 800c358:	4638      	mov	r0, r7
 800c35a:	f001 fe0c 	bl	800df76 <strncmp>
 800c35e:	2800      	cmp	r0, #0
 800c360:	d166      	bne.n	800c430 <__gethex+0x124>
 800c362:	9b01      	ldr	r3, [sp, #4]
 800c364:	5cf8      	ldrb	r0, [r7, r3]
 800c366:	18fe      	adds	r6, r7, r3
 800c368:	f7ff ffbb 	bl	800c2e2 <__hexdig_fun>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d062      	beq.n	800c436 <__gethex+0x12a>
 800c370:	4633      	mov	r3, r6
 800c372:	7818      	ldrb	r0, [r3, #0]
 800c374:	461f      	mov	r7, r3
 800c376:	2830      	cmp	r0, #48	; 0x30
 800c378:	f103 0301 	add.w	r3, r3, #1
 800c37c:	d0f9      	beq.n	800c372 <__gethex+0x66>
 800c37e:	f7ff ffb0 	bl	800c2e2 <__hexdig_fun>
 800c382:	fab0 f580 	clz	r5, r0
 800c386:	4634      	mov	r4, r6
 800c388:	f04f 0b01 	mov.w	fp, #1
 800c38c:	096d      	lsrs	r5, r5, #5
 800c38e:	463a      	mov	r2, r7
 800c390:	4616      	mov	r6, r2
 800c392:	7830      	ldrb	r0, [r6, #0]
 800c394:	3201      	adds	r2, #1
 800c396:	f7ff ffa4 	bl	800c2e2 <__hexdig_fun>
 800c39a:	2800      	cmp	r0, #0
 800c39c:	d1f8      	bne.n	800c390 <__gethex+0x84>
 800c39e:	9a01      	ldr	r2, [sp, #4]
 800c3a0:	9903      	ldr	r1, [sp, #12]
 800c3a2:	4630      	mov	r0, r6
 800c3a4:	f001 fde7 	bl	800df76 <strncmp>
 800c3a8:	b950      	cbnz	r0, 800c3c0 <__gethex+0xb4>
 800c3aa:	b954      	cbnz	r4, 800c3c2 <__gethex+0xb6>
 800c3ac:	9b01      	ldr	r3, [sp, #4]
 800c3ae:	18f4      	adds	r4, r6, r3
 800c3b0:	4622      	mov	r2, r4
 800c3b2:	4616      	mov	r6, r2
 800c3b4:	7830      	ldrb	r0, [r6, #0]
 800c3b6:	3201      	adds	r2, #1
 800c3b8:	f7ff ff93 	bl	800c2e2 <__hexdig_fun>
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	d1f8      	bne.n	800c3b2 <__gethex+0xa6>
 800c3c0:	b10c      	cbz	r4, 800c3c6 <__gethex+0xba>
 800c3c2:	1ba4      	subs	r4, r4, r6
 800c3c4:	00a4      	lsls	r4, r4, #2
 800c3c6:	7833      	ldrb	r3, [r6, #0]
 800c3c8:	2b50      	cmp	r3, #80	; 0x50
 800c3ca:	d001      	beq.n	800c3d0 <__gethex+0xc4>
 800c3cc:	2b70      	cmp	r3, #112	; 0x70
 800c3ce:	d140      	bne.n	800c452 <__gethex+0x146>
 800c3d0:	7873      	ldrb	r3, [r6, #1]
 800c3d2:	2b2b      	cmp	r3, #43	; 0x2b
 800c3d4:	d031      	beq.n	800c43a <__gethex+0x12e>
 800c3d6:	2b2d      	cmp	r3, #45	; 0x2d
 800c3d8:	d033      	beq.n	800c442 <__gethex+0x136>
 800c3da:	f04f 0900 	mov.w	r9, #0
 800c3de:	1c71      	adds	r1, r6, #1
 800c3e0:	7808      	ldrb	r0, [r1, #0]
 800c3e2:	f7ff ff7e 	bl	800c2e2 <__hexdig_fun>
 800c3e6:	1e43      	subs	r3, r0, #1
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	2b18      	cmp	r3, #24
 800c3ec:	d831      	bhi.n	800c452 <__gethex+0x146>
 800c3ee:	f1a0 0210 	sub.w	r2, r0, #16
 800c3f2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c3f6:	f7ff ff74 	bl	800c2e2 <__hexdig_fun>
 800c3fa:	1e43      	subs	r3, r0, #1
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	2b18      	cmp	r3, #24
 800c400:	d922      	bls.n	800c448 <__gethex+0x13c>
 800c402:	f1b9 0f00 	cmp.w	r9, #0
 800c406:	d000      	beq.n	800c40a <__gethex+0xfe>
 800c408:	4252      	negs	r2, r2
 800c40a:	4414      	add	r4, r2
 800c40c:	f8ca 1000 	str.w	r1, [sl]
 800c410:	b30d      	cbz	r5, 800c456 <__gethex+0x14a>
 800c412:	f1bb 0f00 	cmp.w	fp, #0
 800c416:	bf0c      	ite	eq
 800c418:	2706      	moveq	r7, #6
 800c41a:	2700      	movne	r7, #0
 800c41c:	4638      	mov	r0, r7
 800c41e:	b00b      	add	sp, #44	; 0x2c
 800c420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c424:	f10b 0b01 	add.w	fp, fp, #1
 800c428:	e78a      	b.n	800c340 <__gethex+0x34>
 800c42a:	2500      	movs	r5, #0
 800c42c:	462c      	mov	r4, r5
 800c42e:	e7ae      	b.n	800c38e <__gethex+0x82>
 800c430:	463e      	mov	r6, r7
 800c432:	2501      	movs	r5, #1
 800c434:	e7c7      	b.n	800c3c6 <__gethex+0xba>
 800c436:	4604      	mov	r4, r0
 800c438:	e7fb      	b.n	800c432 <__gethex+0x126>
 800c43a:	f04f 0900 	mov.w	r9, #0
 800c43e:	1cb1      	adds	r1, r6, #2
 800c440:	e7ce      	b.n	800c3e0 <__gethex+0xd4>
 800c442:	f04f 0901 	mov.w	r9, #1
 800c446:	e7fa      	b.n	800c43e <__gethex+0x132>
 800c448:	230a      	movs	r3, #10
 800c44a:	fb03 0202 	mla	r2, r3, r2, r0
 800c44e:	3a10      	subs	r2, #16
 800c450:	e7cf      	b.n	800c3f2 <__gethex+0xe6>
 800c452:	4631      	mov	r1, r6
 800c454:	e7da      	b.n	800c40c <__gethex+0x100>
 800c456:	4629      	mov	r1, r5
 800c458:	1bf3      	subs	r3, r6, r7
 800c45a:	3b01      	subs	r3, #1
 800c45c:	2b07      	cmp	r3, #7
 800c45e:	dc49      	bgt.n	800c4f4 <__gethex+0x1e8>
 800c460:	9802      	ldr	r0, [sp, #8]
 800c462:	f000 faf6 	bl	800ca52 <_Balloc>
 800c466:	f04f 0b00 	mov.w	fp, #0
 800c46a:	4605      	mov	r5, r0
 800c46c:	46da      	mov	sl, fp
 800c46e:	9b01      	ldr	r3, [sp, #4]
 800c470:	f100 0914 	add.w	r9, r0, #20
 800c474:	f1c3 0301 	rsb	r3, r3, #1
 800c478:	f8cd 9010 	str.w	r9, [sp, #16]
 800c47c:	9308      	str	r3, [sp, #32]
 800c47e:	42b7      	cmp	r7, r6
 800c480:	d33b      	bcc.n	800c4fa <__gethex+0x1ee>
 800c482:	9804      	ldr	r0, [sp, #16]
 800c484:	f840 ab04 	str.w	sl, [r0], #4
 800c488:	eba0 0009 	sub.w	r0, r0, r9
 800c48c:	1080      	asrs	r0, r0, #2
 800c48e:	6128      	str	r0, [r5, #16]
 800c490:	0147      	lsls	r7, r0, #5
 800c492:	4650      	mov	r0, sl
 800c494:	f000 fba1 	bl	800cbda <__hi0bits>
 800c498:	f8d8 6000 	ldr.w	r6, [r8]
 800c49c:	1a3f      	subs	r7, r7, r0
 800c49e:	42b7      	cmp	r7, r6
 800c4a0:	dd64      	ble.n	800c56c <__gethex+0x260>
 800c4a2:	1bbf      	subs	r7, r7, r6
 800c4a4:	4639      	mov	r1, r7
 800c4a6:	4628      	mov	r0, r5
 800c4a8:	f000 feab 	bl	800d202 <__any_on>
 800c4ac:	4682      	mov	sl, r0
 800c4ae:	b178      	cbz	r0, 800c4d0 <__gethex+0x1c4>
 800c4b0:	f04f 0a01 	mov.w	sl, #1
 800c4b4:	1e7b      	subs	r3, r7, #1
 800c4b6:	1159      	asrs	r1, r3, #5
 800c4b8:	f003 021f 	and.w	r2, r3, #31
 800c4bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c4c0:	fa0a f202 	lsl.w	r2, sl, r2
 800c4c4:	420a      	tst	r2, r1
 800c4c6:	d003      	beq.n	800c4d0 <__gethex+0x1c4>
 800c4c8:	4553      	cmp	r3, sl
 800c4ca:	dc46      	bgt.n	800c55a <__gethex+0x24e>
 800c4cc:	f04f 0a02 	mov.w	sl, #2
 800c4d0:	4639      	mov	r1, r7
 800c4d2:	4628      	mov	r0, r5
 800c4d4:	f7ff feca 	bl	800c26c <rshift>
 800c4d8:	443c      	add	r4, r7
 800c4da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c4de:	42a3      	cmp	r3, r4
 800c4e0:	da52      	bge.n	800c588 <__gethex+0x27c>
 800c4e2:	4629      	mov	r1, r5
 800c4e4:	9802      	ldr	r0, [sp, #8]
 800c4e6:	f000 fae8 	bl	800caba <_Bfree>
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c4ee:	27a3      	movs	r7, #163	; 0xa3
 800c4f0:	6013      	str	r3, [r2, #0]
 800c4f2:	e793      	b.n	800c41c <__gethex+0x110>
 800c4f4:	3101      	adds	r1, #1
 800c4f6:	105b      	asrs	r3, r3, #1
 800c4f8:	e7b0      	b.n	800c45c <__gethex+0x150>
 800c4fa:	1e73      	subs	r3, r6, #1
 800c4fc:	9305      	str	r3, [sp, #20]
 800c4fe:	9a07      	ldr	r2, [sp, #28]
 800c500:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c504:	4293      	cmp	r3, r2
 800c506:	d018      	beq.n	800c53a <__gethex+0x22e>
 800c508:	f1bb 0f20 	cmp.w	fp, #32
 800c50c:	d107      	bne.n	800c51e <__gethex+0x212>
 800c50e:	9b04      	ldr	r3, [sp, #16]
 800c510:	f8c3 a000 	str.w	sl, [r3]
 800c514:	f04f 0a00 	mov.w	sl, #0
 800c518:	46d3      	mov	fp, sl
 800c51a:	3304      	adds	r3, #4
 800c51c:	9304      	str	r3, [sp, #16]
 800c51e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c522:	f7ff fede 	bl	800c2e2 <__hexdig_fun>
 800c526:	f000 000f 	and.w	r0, r0, #15
 800c52a:	fa00 f00b 	lsl.w	r0, r0, fp
 800c52e:	ea4a 0a00 	orr.w	sl, sl, r0
 800c532:	f10b 0b04 	add.w	fp, fp, #4
 800c536:	9b05      	ldr	r3, [sp, #20]
 800c538:	e00d      	b.n	800c556 <__gethex+0x24a>
 800c53a:	9b05      	ldr	r3, [sp, #20]
 800c53c:	9a08      	ldr	r2, [sp, #32]
 800c53e:	4413      	add	r3, r2
 800c540:	42bb      	cmp	r3, r7
 800c542:	d3e1      	bcc.n	800c508 <__gethex+0x1fc>
 800c544:	4618      	mov	r0, r3
 800c546:	9a01      	ldr	r2, [sp, #4]
 800c548:	9903      	ldr	r1, [sp, #12]
 800c54a:	9309      	str	r3, [sp, #36]	; 0x24
 800c54c:	f001 fd13 	bl	800df76 <strncmp>
 800c550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c552:	2800      	cmp	r0, #0
 800c554:	d1d8      	bne.n	800c508 <__gethex+0x1fc>
 800c556:	461e      	mov	r6, r3
 800c558:	e791      	b.n	800c47e <__gethex+0x172>
 800c55a:	1eb9      	subs	r1, r7, #2
 800c55c:	4628      	mov	r0, r5
 800c55e:	f000 fe50 	bl	800d202 <__any_on>
 800c562:	2800      	cmp	r0, #0
 800c564:	d0b2      	beq.n	800c4cc <__gethex+0x1c0>
 800c566:	f04f 0a03 	mov.w	sl, #3
 800c56a:	e7b1      	b.n	800c4d0 <__gethex+0x1c4>
 800c56c:	da09      	bge.n	800c582 <__gethex+0x276>
 800c56e:	1bf7      	subs	r7, r6, r7
 800c570:	4629      	mov	r1, r5
 800c572:	463a      	mov	r2, r7
 800c574:	9802      	ldr	r0, [sp, #8]
 800c576:	f000 fc6b 	bl	800ce50 <__lshift>
 800c57a:	4605      	mov	r5, r0
 800c57c:	1be4      	subs	r4, r4, r7
 800c57e:	f100 0914 	add.w	r9, r0, #20
 800c582:	f04f 0a00 	mov.w	sl, #0
 800c586:	e7a8      	b.n	800c4da <__gethex+0x1ce>
 800c588:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c58c:	42a0      	cmp	r0, r4
 800c58e:	dd6b      	ble.n	800c668 <__gethex+0x35c>
 800c590:	1b04      	subs	r4, r0, r4
 800c592:	42a6      	cmp	r6, r4
 800c594:	dc2e      	bgt.n	800c5f4 <__gethex+0x2e8>
 800c596:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c59a:	2b02      	cmp	r3, #2
 800c59c:	d022      	beq.n	800c5e4 <__gethex+0x2d8>
 800c59e:	2b03      	cmp	r3, #3
 800c5a0:	d024      	beq.n	800c5ec <__gethex+0x2e0>
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d115      	bne.n	800c5d2 <__gethex+0x2c6>
 800c5a6:	42a6      	cmp	r6, r4
 800c5a8:	d113      	bne.n	800c5d2 <__gethex+0x2c6>
 800c5aa:	2e01      	cmp	r6, #1
 800c5ac:	dc0b      	bgt.n	800c5c6 <__gethex+0x2ba>
 800c5ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c5b2:	9a06      	ldr	r2, [sp, #24]
 800c5b4:	2762      	movs	r7, #98	; 0x62
 800c5b6:	6013      	str	r3, [r2, #0]
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	612b      	str	r3, [r5, #16]
 800c5bc:	f8c9 3000 	str.w	r3, [r9]
 800c5c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c5c2:	601d      	str	r5, [r3, #0]
 800c5c4:	e72a      	b.n	800c41c <__gethex+0x110>
 800c5c6:	1e71      	subs	r1, r6, #1
 800c5c8:	4628      	mov	r0, r5
 800c5ca:	f000 fe1a 	bl	800d202 <__any_on>
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	d1ed      	bne.n	800c5ae <__gethex+0x2a2>
 800c5d2:	4629      	mov	r1, r5
 800c5d4:	9802      	ldr	r0, [sp, #8]
 800c5d6:	f000 fa70 	bl	800caba <_Bfree>
 800c5da:	2300      	movs	r3, #0
 800c5dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c5de:	2750      	movs	r7, #80	; 0x50
 800c5e0:	6013      	str	r3, [r2, #0]
 800c5e2:	e71b      	b.n	800c41c <__gethex+0x110>
 800c5e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d0e1      	beq.n	800c5ae <__gethex+0x2a2>
 800c5ea:	e7f2      	b.n	800c5d2 <__gethex+0x2c6>
 800c5ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1dd      	bne.n	800c5ae <__gethex+0x2a2>
 800c5f2:	e7ee      	b.n	800c5d2 <__gethex+0x2c6>
 800c5f4:	1e67      	subs	r7, r4, #1
 800c5f6:	f1ba 0f00 	cmp.w	sl, #0
 800c5fa:	d132      	bne.n	800c662 <__gethex+0x356>
 800c5fc:	b127      	cbz	r7, 800c608 <__gethex+0x2fc>
 800c5fe:	4639      	mov	r1, r7
 800c600:	4628      	mov	r0, r5
 800c602:	f000 fdfe 	bl	800d202 <__any_on>
 800c606:	4682      	mov	sl, r0
 800c608:	2301      	movs	r3, #1
 800c60a:	117a      	asrs	r2, r7, #5
 800c60c:	f007 071f 	and.w	r7, r7, #31
 800c610:	fa03 f707 	lsl.w	r7, r3, r7
 800c614:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c618:	4621      	mov	r1, r4
 800c61a:	421f      	tst	r7, r3
 800c61c:	f04f 0702 	mov.w	r7, #2
 800c620:	4628      	mov	r0, r5
 800c622:	bf18      	it	ne
 800c624:	f04a 0a02 	orrne.w	sl, sl, #2
 800c628:	1b36      	subs	r6, r6, r4
 800c62a:	f7ff fe1f 	bl	800c26c <rshift>
 800c62e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c632:	f1ba 0f00 	cmp.w	sl, #0
 800c636:	d048      	beq.n	800c6ca <__gethex+0x3be>
 800c638:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c63c:	2b02      	cmp	r3, #2
 800c63e:	d015      	beq.n	800c66c <__gethex+0x360>
 800c640:	2b03      	cmp	r3, #3
 800c642:	d017      	beq.n	800c674 <__gethex+0x368>
 800c644:	2b01      	cmp	r3, #1
 800c646:	d109      	bne.n	800c65c <__gethex+0x350>
 800c648:	f01a 0f02 	tst.w	sl, #2
 800c64c:	d006      	beq.n	800c65c <__gethex+0x350>
 800c64e:	f8d9 3000 	ldr.w	r3, [r9]
 800c652:	ea4a 0a03 	orr.w	sl, sl, r3
 800c656:	f01a 0f01 	tst.w	sl, #1
 800c65a:	d10e      	bne.n	800c67a <__gethex+0x36e>
 800c65c:	f047 0710 	orr.w	r7, r7, #16
 800c660:	e033      	b.n	800c6ca <__gethex+0x3be>
 800c662:	f04f 0a01 	mov.w	sl, #1
 800c666:	e7cf      	b.n	800c608 <__gethex+0x2fc>
 800c668:	2701      	movs	r7, #1
 800c66a:	e7e2      	b.n	800c632 <__gethex+0x326>
 800c66c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c66e:	f1c3 0301 	rsb	r3, r3, #1
 800c672:	9315      	str	r3, [sp, #84]	; 0x54
 800c674:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c676:	2b00      	cmp	r3, #0
 800c678:	d0f0      	beq.n	800c65c <__gethex+0x350>
 800c67a:	f04f 0c00 	mov.w	ip, #0
 800c67e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c682:	f105 0314 	add.w	r3, r5, #20
 800c686:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800c68a:	eb03 010a 	add.w	r1, r3, sl
 800c68e:	4618      	mov	r0, r3
 800c690:	f853 2b04 	ldr.w	r2, [r3], #4
 800c694:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c698:	d01c      	beq.n	800c6d4 <__gethex+0x3c8>
 800c69a:	3201      	adds	r2, #1
 800c69c:	6002      	str	r2, [r0, #0]
 800c69e:	2f02      	cmp	r7, #2
 800c6a0:	f105 0314 	add.w	r3, r5, #20
 800c6a4:	d138      	bne.n	800c718 <__gethex+0x40c>
 800c6a6:	f8d8 2000 	ldr.w	r2, [r8]
 800c6aa:	3a01      	subs	r2, #1
 800c6ac:	42b2      	cmp	r2, r6
 800c6ae:	d10a      	bne.n	800c6c6 <__gethex+0x3ba>
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	1171      	asrs	r1, r6, #5
 800c6b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c6b8:	f006 061f 	and.w	r6, r6, #31
 800c6bc:	fa02 f606 	lsl.w	r6, r2, r6
 800c6c0:	421e      	tst	r6, r3
 800c6c2:	bf18      	it	ne
 800c6c4:	4617      	movne	r7, r2
 800c6c6:	f047 0720 	orr.w	r7, r7, #32
 800c6ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c6cc:	601d      	str	r5, [r3, #0]
 800c6ce:	9b06      	ldr	r3, [sp, #24]
 800c6d0:	601c      	str	r4, [r3, #0]
 800c6d2:	e6a3      	b.n	800c41c <__gethex+0x110>
 800c6d4:	4299      	cmp	r1, r3
 800c6d6:	f843 cc04 	str.w	ip, [r3, #-4]
 800c6da:	d8d8      	bhi.n	800c68e <__gethex+0x382>
 800c6dc:	68ab      	ldr	r3, [r5, #8]
 800c6de:	4599      	cmp	r9, r3
 800c6e0:	db12      	blt.n	800c708 <__gethex+0x3fc>
 800c6e2:	6869      	ldr	r1, [r5, #4]
 800c6e4:	9802      	ldr	r0, [sp, #8]
 800c6e6:	3101      	adds	r1, #1
 800c6e8:	f000 f9b3 	bl	800ca52 <_Balloc>
 800c6ec:	4683      	mov	fp, r0
 800c6ee:	692a      	ldr	r2, [r5, #16]
 800c6f0:	f105 010c 	add.w	r1, r5, #12
 800c6f4:	3202      	adds	r2, #2
 800c6f6:	0092      	lsls	r2, r2, #2
 800c6f8:	300c      	adds	r0, #12
 800c6fa:	f000 f99f 	bl	800ca3c <memcpy>
 800c6fe:	4629      	mov	r1, r5
 800c700:	9802      	ldr	r0, [sp, #8]
 800c702:	f000 f9da 	bl	800caba <_Bfree>
 800c706:	465d      	mov	r5, fp
 800c708:	692b      	ldr	r3, [r5, #16]
 800c70a:	1c5a      	adds	r2, r3, #1
 800c70c:	612a      	str	r2, [r5, #16]
 800c70e:	2201      	movs	r2, #1
 800c710:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c714:	615a      	str	r2, [r3, #20]
 800c716:	e7c2      	b.n	800c69e <__gethex+0x392>
 800c718:	692a      	ldr	r2, [r5, #16]
 800c71a:	454a      	cmp	r2, r9
 800c71c:	dd0b      	ble.n	800c736 <__gethex+0x42a>
 800c71e:	2101      	movs	r1, #1
 800c720:	4628      	mov	r0, r5
 800c722:	f7ff fda3 	bl	800c26c <rshift>
 800c726:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c72a:	3401      	adds	r4, #1
 800c72c:	42a3      	cmp	r3, r4
 800c72e:	f6ff aed8 	blt.w	800c4e2 <__gethex+0x1d6>
 800c732:	2701      	movs	r7, #1
 800c734:	e7c7      	b.n	800c6c6 <__gethex+0x3ba>
 800c736:	f016 061f 	ands.w	r6, r6, #31
 800c73a:	d0fa      	beq.n	800c732 <__gethex+0x426>
 800c73c:	449a      	add	sl, r3
 800c73e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c742:	f000 fa4a 	bl	800cbda <__hi0bits>
 800c746:	f1c6 0620 	rsb	r6, r6, #32
 800c74a:	42b0      	cmp	r0, r6
 800c74c:	dbe7      	blt.n	800c71e <__gethex+0x412>
 800c74e:	e7f0      	b.n	800c732 <__gethex+0x426>

0800c750 <L_shift>:
 800c750:	f1c2 0208 	rsb	r2, r2, #8
 800c754:	0092      	lsls	r2, r2, #2
 800c756:	b570      	push	{r4, r5, r6, lr}
 800c758:	f1c2 0620 	rsb	r6, r2, #32
 800c75c:	6843      	ldr	r3, [r0, #4]
 800c75e:	6804      	ldr	r4, [r0, #0]
 800c760:	fa03 f506 	lsl.w	r5, r3, r6
 800c764:	432c      	orrs	r4, r5
 800c766:	40d3      	lsrs	r3, r2
 800c768:	6004      	str	r4, [r0, #0]
 800c76a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c76e:	4288      	cmp	r0, r1
 800c770:	d3f4      	bcc.n	800c75c <L_shift+0xc>
 800c772:	bd70      	pop	{r4, r5, r6, pc}

0800c774 <__match>:
 800c774:	b530      	push	{r4, r5, lr}
 800c776:	6803      	ldr	r3, [r0, #0]
 800c778:	3301      	adds	r3, #1
 800c77a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c77e:	b914      	cbnz	r4, 800c786 <__match+0x12>
 800c780:	6003      	str	r3, [r0, #0]
 800c782:	2001      	movs	r0, #1
 800c784:	bd30      	pop	{r4, r5, pc}
 800c786:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c78a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c78e:	2d19      	cmp	r5, #25
 800c790:	bf98      	it	ls
 800c792:	3220      	addls	r2, #32
 800c794:	42a2      	cmp	r2, r4
 800c796:	d0f0      	beq.n	800c77a <__match+0x6>
 800c798:	2000      	movs	r0, #0
 800c79a:	e7f3      	b.n	800c784 <__match+0x10>

0800c79c <__hexnan>:
 800c79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a0:	2500      	movs	r5, #0
 800c7a2:	680b      	ldr	r3, [r1, #0]
 800c7a4:	4682      	mov	sl, r0
 800c7a6:	115f      	asrs	r7, r3, #5
 800c7a8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c7ac:	f013 031f 	ands.w	r3, r3, #31
 800c7b0:	bf18      	it	ne
 800c7b2:	3704      	addne	r7, #4
 800c7b4:	1f3e      	subs	r6, r7, #4
 800c7b6:	4690      	mov	r8, r2
 800c7b8:	46b1      	mov	r9, r6
 800c7ba:	4634      	mov	r4, r6
 800c7bc:	46ab      	mov	fp, r5
 800c7be:	b087      	sub	sp, #28
 800c7c0:	6801      	ldr	r1, [r0, #0]
 800c7c2:	9301      	str	r3, [sp, #4]
 800c7c4:	f847 5c04 	str.w	r5, [r7, #-4]
 800c7c8:	9502      	str	r5, [sp, #8]
 800c7ca:	784a      	ldrb	r2, [r1, #1]
 800c7cc:	1c4b      	adds	r3, r1, #1
 800c7ce:	9303      	str	r3, [sp, #12]
 800c7d0:	b342      	cbz	r2, 800c824 <__hexnan+0x88>
 800c7d2:	4610      	mov	r0, r2
 800c7d4:	9105      	str	r1, [sp, #20]
 800c7d6:	9204      	str	r2, [sp, #16]
 800c7d8:	f7ff fd83 	bl	800c2e2 <__hexdig_fun>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d143      	bne.n	800c868 <__hexnan+0xcc>
 800c7e0:	9a04      	ldr	r2, [sp, #16]
 800c7e2:	9905      	ldr	r1, [sp, #20]
 800c7e4:	2a20      	cmp	r2, #32
 800c7e6:	d818      	bhi.n	800c81a <__hexnan+0x7e>
 800c7e8:	9b02      	ldr	r3, [sp, #8]
 800c7ea:	459b      	cmp	fp, r3
 800c7ec:	dd13      	ble.n	800c816 <__hexnan+0x7a>
 800c7ee:	454c      	cmp	r4, r9
 800c7f0:	d206      	bcs.n	800c800 <__hexnan+0x64>
 800c7f2:	2d07      	cmp	r5, #7
 800c7f4:	dc04      	bgt.n	800c800 <__hexnan+0x64>
 800c7f6:	462a      	mov	r2, r5
 800c7f8:	4649      	mov	r1, r9
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f7ff ffa8 	bl	800c750 <L_shift>
 800c800:	4544      	cmp	r4, r8
 800c802:	d944      	bls.n	800c88e <__hexnan+0xf2>
 800c804:	2300      	movs	r3, #0
 800c806:	f1a4 0904 	sub.w	r9, r4, #4
 800c80a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c80e:	461d      	mov	r5, r3
 800c810:	464c      	mov	r4, r9
 800c812:	f8cd b008 	str.w	fp, [sp, #8]
 800c816:	9903      	ldr	r1, [sp, #12]
 800c818:	e7d7      	b.n	800c7ca <__hexnan+0x2e>
 800c81a:	2a29      	cmp	r2, #41	; 0x29
 800c81c:	d14a      	bne.n	800c8b4 <__hexnan+0x118>
 800c81e:	3102      	adds	r1, #2
 800c820:	f8ca 1000 	str.w	r1, [sl]
 800c824:	f1bb 0f00 	cmp.w	fp, #0
 800c828:	d044      	beq.n	800c8b4 <__hexnan+0x118>
 800c82a:	454c      	cmp	r4, r9
 800c82c:	d206      	bcs.n	800c83c <__hexnan+0xa0>
 800c82e:	2d07      	cmp	r5, #7
 800c830:	dc04      	bgt.n	800c83c <__hexnan+0xa0>
 800c832:	462a      	mov	r2, r5
 800c834:	4649      	mov	r1, r9
 800c836:	4620      	mov	r0, r4
 800c838:	f7ff ff8a 	bl	800c750 <L_shift>
 800c83c:	4544      	cmp	r4, r8
 800c83e:	d928      	bls.n	800c892 <__hexnan+0xf6>
 800c840:	4643      	mov	r3, r8
 800c842:	f854 2b04 	ldr.w	r2, [r4], #4
 800c846:	42a6      	cmp	r6, r4
 800c848:	f843 2b04 	str.w	r2, [r3], #4
 800c84c:	d2f9      	bcs.n	800c842 <__hexnan+0xa6>
 800c84e:	2200      	movs	r2, #0
 800c850:	f843 2b04 	str.w	r2, [r3], #4
 800c854:	429e      	cmp	r6, r3
 800c856:	d2fb      	bcs.n	800c850 <__hexnan+0xb4>
 800c858:	6833      	ldr	r3, [r6, #0]
 800c85a:	b91b      	cbnz	r3, 800c864 <__hexnan+0xc8>
 800c85c:	4546      	cmp	r6, r8
 800c85e:	d127      	bne.n	800c8b0 <__hexnan+0x114>
 800c860:	2301      	movs	r3, #1
 800c862:	6033      	str	r3, [r6, #0]
 800c864:	2005      	movs	r0, #5
 800c866:	e026      	b.n	800c8b6 <__hexnan+0x11a>
 800c868:	3501      	adds	r5, #1
 800c86a:	2d08      	cmp	r5, #8
 800c86c:	f10b 0b01 	add.w	fp, fp, #1
 800c870:	dd06      	ble.n	800c880 <__hexnan+0xe4>
 800c872:	4544      	cmp	r4, r8
 800c874:	d9cf      	bls.n	800c816 <__hexnan+0x7a>
 800c876:	2300      	movs	r3, #0
 800c878:	2501      	movs	r5, #1
 800c87a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c87e:	3c04      	subs	r4, #4
 800c880:	6822      	ldr	r2, [r4, #0]
 800c882:	f000 000f 	and.w	r0, r0, #15
 800c886:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c88a:	6020      	str	r0, [r4, #0]
 800c88c:	e7c3      	b.n	800c816 <__hexnan+0x7a>
 800c88e:	2508      	movs	r5, #8
 800c890:	e7c1      	b.n	800c816 <__hexnan+0x7a>
 800c892:	9b01      	ldr	r3, [sp, #4]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d0df      	beq.n	800c858 <__hexnan+0xbc>
 800c898:	f04f 32ff 	mov.w	r2, #4294967295
 800c89c:	f1c3 0320 	rsb	r3, r3, #32
 800c8a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c8a4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c8a8:	401a      	ands	r2, r3
 800c8aa:	f847 2c04 	str.w	r2, [r7, #-4]
 800c8ae:	e7d3      	b.n	800c858 <__hexnan+0xbc>
 800c8b0:	3e04      	subs	r6, #4
 800c8b2:	e7d1      	b.n	800c858 <__hexnan+0xbc>
 800c8b4:	2004      	movs	r0, #4
 800c8b6:	b007      	add	sp, #28
 800c8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c8bc <__locale_ctype_ptr_l>:
 800c8bc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c8c0:	4770      	bx	lr
	...

0800c8c4 <__locale_ctype_ptr>:
 800c8c4:	4b04      	ldr	r3, [pc, #16]	; (800c8d8 <__locale_ctype_ptr+0x14>)
 800c8c6:	4a05      	ldr	r2, [pc, #20]	; (800c8dc <__locale_ctype_ptr+0x18>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	6a1b      	ldr	r3, [r3, #32]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	bf08      	it	eq
 800c8d0:	4613      	moveq	r3, r2
 800c8d2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800c8d6:	4770      	bx	lr
 800c8d8:	2000017c 	.word	0x2000017c
 800c8dc:	200001e0 	.word	0x200001e0

0800c8e0 <__localeconv_l>:
 800c8e0:	30f0      	adds	r0, #240	; 0xf0
 800c8e2:	4770      	bx	lr

0800c8e4 <_localeconv_r>:
 800c8e4:	4b04      	ldr	r3, [pc, #16]	; (800c8f8 <_localeconv_r+0x14>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	6a18      	ldr	r0, [r3, #32]
 800c8ea:	4b04      	ldr	r3, [pc, #16]	; (800c8fc <_localeconv_r+0x18>)
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	bf08      	it	eq
 800c8f0:	4618      	moveq	r0, r3
 800c8f2:	30f0      	adds	r0, #240	; 0xf0
 800c8f4:	4770      	bx	lr
 800c8f6:	bf00      	nop
 800c8f8:	2000017c 	.word	0x2000017c
 800c8fc:	200001e0 	.word	0x200001e0

0800c900 <_lseek_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	4605      	mov	r5, r0
 800c904:	4608      	mov	r0, r1
 800c906:	4611      	mov	r1, r2
 800c908:	2200      	movs	r2, #0
 800c90a:	4c05      	ldr	r4, [pc, #20]	; (800c920 <_lseek_r+0x20>)
 800c90c:	6022      	str	r2, [r4, #0]
 800c90e:	461a      	mov	r2, r3
 800c910:	f7f4 ff2b 	bl	800176a <_lseek>
 800c914:	1c43      	adds	r3, r0, #1
 800c916:	d102      	bne.n	800c91e <_lseek_r+0x1e>
 800c918:	6823      	ldr	r3, [r4, #0]
 800c91a:	b103      	cbz	r3, 800c91e <_lseek_r+0x1e>
 800c91c:	602b      	str	r3, [r5, #0]
 800c91e:	bd38      	pop	{r3, r4, r5, pc}
 800c920:	20001074 	.word	0x20001074

0800c924 <__swhatbuf_r>:
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	460e      	mov	r6, r1
 800c928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c92c:	b096      	sub	sp, #88	; 0x58
 800c92e:	2900      	cmp	r1, #0
 800c930:	4614      	mov	r4, r2
 800c932:	461d      	mov	r5, r3
 800c934:	da07      	bge.n	800c946 <__swhatbuf_r+0x22>
 800c936:	2300      	movs	r3, #0
 800c938:	602b      	str	r3, [r5, #0]
 800c93a:	89b3      	ldrh	r3, [r6, #12]
 800c93c:	061a      	lsls	r2, r3, #24
 800c93e:	d410      	bmi.n	800c962 <__swhatbuf_r+0x3e>
 800c940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c944:	e00e      	b.n	800c964 <__swhatbuf_r+0x40>
 800c946:	466a      	mov	r2, sp
 800c948:	f001 fbfa 	bl	800e140 <_fstat_r>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	dbf2      	blt.n	800c936 <__swhatbuf_r+0x12>
 800c950:	9a01      	ldr	r2, [sp, #4]
 800c952:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c956:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c95a:	425a      	negs	r2, r3
 800c95c:	415a      	adcs	r2, r3
 800c95e:	602a      	str	r2, [r5, #0]
 800c960:	e7ee      	b.n	800c940 <__swhatbuf_r+0x1c>
 800c962:	2340      	movs	r3, #64	; 0x40
 800c964:	2000      	movs	r0, #0
 800c966:	6023      	str	r3, [r4, #0]
 800c968:	b016      	add	sp, #88	; 0x58
 800c96a:	bd70      	pop	{r4, r5, r6, pc}

0800c96c <__smakebuf_r>:
 800c96c:	898b      	ldrh	r3, [r1, #12]
 800c96e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c970:	079d      	lsls	r5, r3, #30
 800c972:	4606      	mov	r6, r0
 800c974:	460c      	mov	r4, r1
 800c976:	d507      	bpl.n	800c988 <__smakebuf_r+0x1c>
 800c978:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	6123      	str	r3, [r4, #16]
 800c980:	2301      	movs	r3, #1
 800c982:	6163      	str	r3, [r4, #20]
 800c984:	b002      	add	sp, #8
 800c986:	bd70      	pop	{r4, r5, r6, pc}
 800c988:	ab01      	add	r3, sp, #4
 800c98a:	466a      	mov	r2, sp
 800c98c:	f7ff ffca 	bl	800c924 <__swhatbuf_r>
 800c990:	9900      	ldr	r1, [sp, #0]
 800c992:	4605      	mov	r5, r0
 800c994:	4630      	mov	r0, r6
 800c996:	f000 fcaf 	bl	800d2f8 <_malloc_r>
 800c99a:	b948      	cbnz	r0, 800c9b0 <__smakebuf_r+0x44>
 800c99c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9a0:	059a      	lsls	r2, r3, #22
 800c9a2:	d4ef      	bmi.n	800c984 <__smakebuf_r+0x18>
 800c9a4:	f023 0303 	bic.w	r3, r3, #3
 800c9a8:	f043 0302 	orr.w	r3, r3, #2
 800c9ac:	81a3      	strh	r3, [r4, #12]
 800c9ae:	e7e3      	b.n	800c978 <__smakebuf_r+0xc>
 800c9b0:	4b0d      	ldr	r3, [pc, #52]	; (800c9e8 <__smakebuf_r+0x7c>)
 800c9b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c9b4:	89a3      	ldrh	r3, [r4, #12]
 800c9b6:	6020      	str	r0, [r4, #0]
 800c9b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9bc:	81a3      	strh	r3, [r4, #12]
 800c9be:	9b00      	ldr	r3, [sp, #0]
 800c9c0:	6120      	str	r0, [r4, #16]
 800c9c2:	6163      	str	r3, [r4, #20]
 800c9c4:	9b01      	ldr	r3, [sp, #4]
 800c9c6:	b15b      	cbz	r3, 800c9e0 <__smakebuf_r+0x74>
 800c9c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	f001 fbc9 	bl	800e164 <_isatty_r>
 800c9d2:	b128      	cbz	r0, 800c9e0 <__smakebuf_r+0x74>
 800c9d4:	89a3      	ldrh	r3, [r4, #12]
 800c9d6:	f023 0303 	bic.w	r3, r3, #3
 800c9da:	f043 0301 	orr.w	r3, r3, #1
 800c9de:	81a3      	strh	r3, [r4, #12]
 800c9e0:	89a3      	ldrh	r3, [r4, #12]
 800c9e2:	431d      	orrs	r5, r3
 800c9e4:	81a5      	strh	r5, [r4, #12]
 800c9e6:	e7cd      	b.n	800c984 <__smakebuf_r+0x18>
 800c9e8:	0800c121 	.word	0x0800c121

0800c9ec <malloc>:
 800c9ec:	4b02      	ldr	r3, [pc, #8]	; (800c9f8 <malloc+0xc>)
 800c9ee:	4601      	mov	r1, r0
 800c9f0:	6818      	ldr	r0, [r3, #0]
 800c9f2:	f000 bc81 	b.w	800d2f8 <_malloc_r>
 800c9f6:	bf00      	nop
 800c9f8:	2000017c 	.word	0x2000017c

0800c9fc <__ascii_mbtowc>:
 800c9fc:	b082      	sub	sp, #8
 800c9fe:	b901      	cbnz	r1, 800ca02 <__ascii_mbtowc+0x6>
 800ca00:	a901      	add	r1, sp, #4
 800ca02:	b142      	cbz	r2, 800ca16 <__ascii_mbtowc+0x1a>
 800ca04:	b14b      	cbz	r3, 800ca1a <__ascii_mbtowc+0x1e>
 800ca06:	7813      	ldrb	r3, [r2, #0]
 800ca08:	600b      	str	r3, [r1, #0]
 800ca0a:	7812      	ldrb	r2, [r2, #0]
 800ca0c:	1c10      	adds	r0, r2, #0
 800ca0e:	bf18      	it	ne
 800ca10:	2001      	movne	r0, #1
 800ca12:	b002      	add	sp, #8
 800ca14:	4770      	bx	lr
 800ca16:	4610      	mov	r0, r2
 800ca18:	e7fb      	b.n	800ca12 <__ascii_mbtowc+0x16>
 800ca1a:	f06f 0001 	mvn.w	r0, #1
 800ca1e:	e7f8      	b.n	800ca12 <__ascii_mbtowc+0x16>

0800ca20 <memchr>:
 800ca20:	b510      	push	{r4, lr}
 800ca22:	b2c9      	uxtb	r1, r1
 800ca24:	4402      	add	r2, r0
 800ca26:	4290      	cmp	r0, r2
 800ca28:	4603      	mov	r3, r0
 800ca2a:	d101      	bne.n	800ca30 <memchr+0x10>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	e003      	b.n	800ca38 <memchr+0x18>
 800ca30:	781c      	ldrb	r4, [r3, #0]
 800ca32:	3001      	adds	r0, #1
 800ca34:	428c      	cmp	r4, r1
 800ca36:	d1f6      	bne.n	800ca26 <memchr+0x6>
 800ca38:	4618      	mov	r0, r3
 800ca3a:	bd10      	pop	{r4, pc}

0800ca3c <memcpy>:
 800ca3c:	b510      	push	{r4, lr}
 800ca3e:	1e43      	subs	r3, r0, #1
 800ca40:	440a      	add	r2, r1
 800ca42:	4291      	cmp	r1, r2
 800ca44:	d100      	bne.n	800ca48 <memcpy+0xc>
 800ca46:	bd10      	pop	{r4, pc}
 800ca48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca50:	e7f7      	b.n	800ca42 <memcpy+0x6>

0800ca52 <_Balloc>:
 800ca52:	b570      	push	{r4, r5, r6, lr}
 800ca54:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ca56:	4604      	mov	r4, r0
 800ca58:	460e      	mov	r6, r1
 800ca5a:	b93d      	cbnz	r5, 800ca6c <_Balloc+0x1a>
 800ca5c:	2010      	movs	r0, #16
 800ca5e:	f7ff ffc5 	bl	800c9ec <malloc>
 800ca62:	6260      	str	r0, [r4, #36]	; 0x24
 800ca64:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ca68:	6005      	str	r5, [r0, #0]
 800ca6a:	60c5      	str	r5, [r0, #12]
 800ca6c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ca6e:	68eb      	ldr	r3, [r5, #12]
 800ca70:	b183      	cbz	r3, 800ca94 <_Balloc+0x42>
 800ca72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ca7a:	b9b8      	cbnz	r0, 800caac <_Balloc+0x5a>
 800ca7c:	2101      	movs	r1, #1
 800ca7e:	fa01 f506 	lsl.w	r5, r1, r6
 800ca82:	1d6a      	adds	r2, r5, #5
 800ca84:	0092      	lsls	r2, r2, #2
 800ca86:	4620      	mov	r0, r4
 800ca88:	f000 fbdc 	bl	800d244 <_calloc_r>
 800ca8c:	b160      	cbz	r0, 800caa8 <_Balloc+0x56>
 800ca8e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ca92:	e00e      	b.n	800cab2 <_Balloc+0x60>
 800ca94:	2221      	movs	r2, #33	; 0x21
 800ca96:	2104      	movs	r1, #4
 800ca98:	4620      	mov	r0, r4
 800ca9a:	f000 fbd3 	bl	800d244 <_calloc_r>
 800ca9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800caa0:	60e8      	str	r0, [r5, #12]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d1e4      	bne.n	800ca72 <_Balloc+0x20>
 800caa8:	2000      	movs	r0, #0
 800caaa:	bd70      	pop	{r4, r5, r6, pc}
 800caac:	6802      	ldr	r2, [r0, #0]
 800caae:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800cab2:	2300      	movs	r3, #0
 800cab4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cab8:	e7f7      	b.n	800caaa <_Balloc+0x58>

0800caba <_Bfree>:
 800caba:	b570      	push	{r4, r5, r6, lr}
 800cabc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cabe:	4606      	mov	r6, r0
 800cac0:	460d      	mov	r5, r1
 800cac2:	b93c      	cbnz	r4, 800cad4 <_Bfree+0x1a>
 800cac4:	2010      	movs	r0, #16
 800cac6:	f7ff ff91 	bl	800c9ec <malloc>
 800caca:	6270      	str	r0, [r6, #36]	; 0x24
 800cacc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cad0:	6004      	str	r4, [r0, #0]
 800cad2:	60c4      	str	r4, [r0, #12]
 800cad4:	b13d      	cbz	r5, 800cae6 <_Bfree+0x2c>
 800cad6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cad8:	686a      	ldr	r2, [r5, #4]
 800cada:	68db      	ldr	r3, [r3, #12]
 800cadc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cae0:	6029      	str	r1, [r5, #0]
 800cae2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cae6:	bd70      	pop	{r4, r5, r6, pc}

0800cae8 <__multadd>:
 800cae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caec:	461f      	mov	r7, r3
 800caee:	4606      	mov	r6, r0
 800caf0:	460c      	mov	r4, r1
 800caf2:	2300      	movs	r3, #0
 800caf4:	690d      	ldr	r5, [r1, #16]
 800caf6:	f101 0c14 	add.w	ip, r1, #20
 800cafa:	f8dc 0000 	ldr.w	r0, [ip]
 800cafe:	3301      	adds	r3, #1
 800cb00:	b281      	uxth	r1, r0
 800cb02:	fb02 7101 	mla	r1, r2, r1, r7
 800cb06:	0c00      	lsrs	r0, r0, #16
 800cb08:	0c0f      	lsrs	r7, r1, #16
 800cb0a:	fb02 7000 	mla	r0, r2, r0, r7
 800cb0e:	b289      	uxth	r1, r1
 800cb10:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800cb14:	429d      	cmp	r5, r3
 800cb16:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800cb1a:	f84c 1b04 	str.w	r1, [ip], #4
 800cb1e:	dcec      	bgt.n	800cafa <__multadd+0x12>
 800cb20:	b1d7      	cbz	r7, 800cb58 <__multadd+0x70>
 800cb22:	68a3      	ldr	r3, [r4, #8]
 800cb24:	42ab      	cmp	r3, r5
 800cb26:	dc12      	bgt.n	800cb4e <__multadd+0x66>
 800cb28:	6861      	ldr	r1, [r4, #4]
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	3101      	adds	r1, #1
 800cb2e:	f7ff ff90 	bl	800ca52 <_Balloc>
 800cb32:	4680      	mov	r8, r0
 800cb34:	6922      	ldr	r2, [r4, #16]
 800cb36:	f104 010c 	add.w	r1, r4, #12
 800cb3a:	3202      	adds	r2, #2
 800cb3c:	0092      	lsls	r2, r2, #2
 800cb3e:	300c      	adds	r0, #12
 800cb40:	f7ff ff7c 	bl	800ca3c <memcpy>
 800cb44:	4621      	mov	r1, r4
 800cb46:	4630      	mov	r0, r6
 800cb48:	f7ff ffb7 	bl	800caba <_Bfree>
 800cb4c:	4644      	mov	r4, r8
 800cb4e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb52:	3501      	adds	r5, #1
 800cb54:	615f      	str	r7, [r3, #20]
 800cb56:	6125      	str	r5, [r4, #16]
 800cb58:	4620      	mov	r0, r4
 800cb5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cb5e <__s2b>:
 800cb5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb62:	4615      	mov	r5, r2
 800cb64:	2209      	movs	r2, #9
 800cb66:	461f      	mov	r7, r3
 800cb68:	3308      	adds	r3, #8
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb70:	4606      	mov	r6, r0
 800cb72:	2201      	movs	r2, #1
 800cb74:	2100      	movs	r1, #0
 800cb76:	429a      	cmp	r2, r3
 800cb78:	db20      	blt.n	800cbbc <__s2b+0x5e>
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	f7ff ff69 	bl	800ca52 <_Balloc>
 800cb80:	9b08      	ldr	r3, [sp, #32]
 800cb82:	2d09      	cmp	r5, #9
 800cb84:	6143      	str	r3, [r0, #20]
 800cb86:	f04f 0301 	mov.w	r3, #1
 800cb8a:	6103      	str	r3, [r0, #16]
 800cb8c:	dd19      	ble.n	800cbc2 <__s2b+0x64>
 800cb8e:	f104 0809 	add.w	r8, r4, #9
 800cb92:	46c1      	mov	r9, r8
 800cb94:	442c      	add	r4, r5
 800cb96:	f819 3b01 	ldrb.w	r3, [r9], #1
 800cb9a:	4601      	mov	r1, r0
 800cb9c:	3b30      	subs	r3, #48	; 0x30
 800cb9e:	220a      	movs	r2, #10
 800cba0:	4630      	mov	r0, r6
 800cba2:	f7ff ffa1 	bl	800cae8 <__multadd>
 800cba6:	45a1      	cmp	r9, r4
 800cba8:	d1f5      	bne.n	800cb96 <__s2b+0x38>
 800cbaa:	eb08 0405 	add.w	r4, r8, r5
 800cbae:	3c08      	subs	r4, #8
 800cbb0:	1b2d      	subs	r5, r5, r4
 800cbb2:	1963      	adds	r3, r4, r5
 800cbb4:	42bb      	cmp	r3, r7
 800cbb6:	db07      	blt.n	800cbc8 <__s2b+0x6a>
 800cbb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbbc:	0052      	lsls	r2, r2, #1
 800cbbe:	3101      	adds	r1, #1
 800cbc0:	e7d9      	b.n	800cb76 <__s2b+0x18>
 800cbc2:	340a      	adds	r4, #10
 800cbc4:	2509      	movs	r5, #9
 800cbc6:	e7f3      	b.n	800cbb0 <__s2b+0x52>
 800cbc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cbcc:	4601      	mov	r1, r0
 800cbce:	3b30      	subs	r3, #48	; 0x30
 800cbd0:	220a      	movs	r2, #10
 800cbd2:	4630      	mov	r0, r6
 800cbd4:	f7ff ff88 	bl	800cae8 <__multadd>
 800cbd8:	e7eb      	b.n	800cbb2 <__s2b+0x54>

0800cbda <__hi0bits>:
 800cbda:	0c02      	lsrs	r2, r0, #16
 800cbdc:	0412      	lsls	r2, r2, #16
 800cbde:	4603      	mov	r3, r0
 800cbe0:	b9b2      	cbnz	r2, 800cc10 <__hi0bits+0x36>
 800cbe2:	0403      	lsls	r3, r0, #16
 800cbe4:	2010      	movs	r0, #16
 800cbe6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cbea:	bf04      	itt	eq
 800cbec:	021b      	lsleq	r3, r3, #8
 800cbee:	3008      	addeq	r0, #8
 800cbf0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cbf4:	bf04      	itt	eq
 800cbf6:	011b      	lsleq	r3, r3, #4
 800cbf8:	3004      	addeq	r0, #4
 800cbfa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cbfe:	bf04      	itt	eq
 800cc00:	009b      	lsleq	r3, r3, #2
 800cc02:	3002      	addeq	r0, #2
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	db06      	blt.n	800cc16 <__hi0bits+0x3c>
 800cc08:	005b      	lsls	r3, r3, #1
 800cc0a:	d503      	bpl.n	800cc14 <__hi0bits+0x3a>
 800cc0c:	3001      	adds	r0, #1
 800cc0e:	4770      	bx	lr
 800cc10:	2000      	movs	r0, #0
 800cc12:	e7e8      	b.n	800cbe6 <__hi0bits+0xc>
 800cc14:	2020      	movs	r0, #32
 800cc16:	4770      	bx	lr

0800cc18 <__lo0bits>:
 800cc18:	6803      	ldr	r3, [r0, #0]
 800cc1a:	4601      	mov	r1, r0
 800cc1c:	f013 0207 	ands.w	r2, r3, #7
 800cc20:	d00b      	beq.n	800cc3a <__lo0bits+0x22>
 800cc22:	07da      	lsls	r2, r3, #31
 800cc24:	d423      	bmi.n	800cc6e <__lo0bits+0x56>
 800cc26:	0798      	lsls	r0, r3, #30
 800cc28:	bf49      	itett	mi
 800cc2a:	085b      	lsrmi	r3, r3, #1
 800cc2c:	089b      	lsrpl	r3, r3, #2
 800cc2e:	2001      	movmi	r0, #1
 800cc30:	600b      	strmi	r3, [r1, #0]
 800cc32:	bf5c      	itt	pl
 800cc34:	600b      	strpl	r3, [r1, #0]
 800cc36:	2002      	movpl	r0, #2
 800cc38:	4770      	bx	lr
 800cc3a:	b298      	uxth	r0, r3
 800cc3c:	b9a8      	cbnz	r0, 800cc6a <__lo0bits+0x52>
 800cc3e:	2010      	movs	r0, #16
 800cc40:	0c1b      	lsrs	r3, r3, #16
 800cc42:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cc46:	bf04      	itt	eq
 800cc48:	0a1b      	lsreq	r3, r3, #8
 800cc4a:	3008      	addeq	r0, #8
 800cc4c:	071a      	lsls	r2, r3, #28
 800cc4e:	bf04      	itt	eq
 800cc50:	091b      	lsreq	r3, r3, #4
 800cc52:	3004      	addeq	r0, #4
 800cc54:	079a      	lsls	r2, r3, #30
 800cc56:	bf04      	itt	eq
 800cc58:	089b      	lsreq	r3, r3, #2
 800cc5a:	3002      	addeq	r0, #2
 800cc5c:	07da      	lsls	r2, r3, #31
 800cc5e:	d402      	bmi.n	800cc66 <__lo0bits+0x4e>
 800cc60:	085b      	lsrs	r3, r3, #1
 800cc62:	d006      	beq.n	800cc72 <__lo0bits+0x5a>
 800cc64:	3001      	adds	r0, #1
 800cc66:	600b      	str	r3, [r1, #0]
 800cc68:	4770      	bx	lr
 800cc6a:	4610      	mov	r0, r2
 800cc6c:	e7e9      	b.n	800cc42 <__lo0bits+0x2a>
 800cc6e:	2000      	movs	r0, #0
 800cc70:	4770      	bx	lr
 800cc72:	2020      	movs	r0, #32
 800cc74:	4770      	bx	lr

0800cc76 <__i2b>:
 800cc76:	b510      	push	{r4, lr}
 800cc78:	460c      	mov	r4, r1
 800cc7a:	2101      	movs	r1, #1
 800cc7c:	f7ff fee9 	bl	800ca52 <_Balloc>
 800cc80:	2201      	movs	r2, #1
 800cc82:	6144      	str	r4, [r0, #20]
 800cc84:	6102      	str	r2, [r0, #16]
 800cc86:	bd10      	pop	{r4, pc}

0800cc88 <__multiply>:
 800cc88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc8c:	4614      	mov	r4, r2
 800cc8e:	690a      	ldr	r2, [r1, #16]
 800cc90:	6923      	ldr	r3, [r4, #16]
 800cc92:	4688      	mov	r8, r1
 800cc94:	429a      	cmp	r2, r3
 800cc96:	bfbe      	ittt	lt
 800cc98:	460b      	movlt	r3, r1
 800cc9a:	46a0      	movlt	r8, r4
 800cc9c:	461c      	movlt	r4, r3
 800cc9e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cca2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cca6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ccaa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ccae:	eb07 0609 	add.w	r6, r7, r9
 800ccb2:	42b3      	cmp	r3, r6
 800ccb4:	bfb8      	it	lt
 800ccb6:	3101      	addlt	r1, #1
 800ccb8:	f7ff fecb 	bl	800ca52 <_Balloc>
 800ccbc:	f100 0514 	add.w	r5, r0, #20
 800ccc0:	462b      	mov	r3, r5
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ccc8:	4573      	cmp	r3, lr
 800ccca:	d316      	bcc.n	800ccfa <__multiply+0x72>
 800cccc:	f104 0214 	add.w	r2, r4, #20
 800ccd0:	f108 0114 	add.w	r1, r8, #20
 800ccd4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ccd8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ccdc:	9300      	str	r3, [sp, #0]
 800ccde:	9b00      	ldr	r3, [sp, #0]
 800cce0:	9201      	str	r2, [sp, #4]
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d80c      	bhi.n	800cd00 <__multiply+0x78>
 800cce6:	2e00      	cmp	r6, #0
 800cce8:	dd03      	ble.n	800ccf2 <__multiply+0x6a>
 800ccea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d05d      	beq.n	800cdae <__multiply+0x126>
 800ccf2:	6106      	str	r6, [r0, #16]
 800ccf4:	b003      	add	sp, #12
 800ccf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfa:	f843 2b04 	str.w	r2, [r3], #4
 800ccfe:	e7e3      	b.n	800ccc8 <__multiply+0x40>
 800cd00:	f8b2 b000 	ldrh.w	fp, [r2]
 800cd04:	f1bb 0f00 	cmp.w	fp, #0
 800cd08:	d023      	beq.n	800cd52 <__multiply+0xca>
 800cd0a:	4689      	mov	r9, r1
 800cd0c:	46ac      	mov	ip, r5
 800cd0e:	f04f 0800 	mov.w	r8, #0
 800cd12:	f859 4b04 	ldr.w	r4, [r9], #4
 800cd16:	f8dc a000 	ldr.w	sl, [ip]
 800cd1a:	b2a3      	uxth	r3, r4
 800cd1c:	fa1f fa8a 	uxth.w	sl, sl
 800cd20:	fb0b a303 	mla	r3, fp, r3, sl
 800cd24:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cd28:	f8dc 4000 	ldr.w	r4, [ip]
 800cd2c:	4443      	add	r3, r8
 800cd2e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cd32:	fb0b 840a 	mla	r4, fp, sl, r8
 800cd36:	46e2      	mov	sl, ip
 800cd38:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cd42:	454f      	cmp	r7, r9
 800cd44:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cd48:	f84a 3b04 	str.w	r3, [sl], #4
 800cd4c:	d82b      	bhi.n	800cda6 <__multiply+0x11e>
 800cd4e:	f8cc 8004 	str.w	r8, [ip, #4]
 800cd52:	9b01      	ldr	r3, [sp, #4]
 800cd54:	3204      	adds	r2, #4
 800cd56:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cd5a:	f1ba 0f00 	cmp.w	sl, #0
 800cd5e:	d020      	beq.n	800cda2 <__multiply+0x11a>
 800cd60:	4689      	mov	r9, r1
 800cd62:	46a8      	mov	r8, r5
 800cd64:	f04f 0b00 	mov.w	fp, #0
 800cd68:	682b      	ldr	r3, [r5, #0]
 800cd6a:	f8b9 c000 	ldrh.w	ip, [r9]
 800cd6e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	fb0a 440c 	mla	r4, sl, ip, r4
 800cd78:	46c4      	mov	ip, r8
 800cd7a:	445c      	add	r4, fp
 800cd7c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cd80:	f84c 3b04 	str.w	r3, [ip], #4
 800cd84:	f859 3b04 	ldr.w	r3, [r9], #4
 800cd88:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800cd8c:	0c1b      	lsrs	r3, r3, #16
 800cd8e:	fb0a b303 	mla	r3, sl, r3, fp
 800cd92:	454f      	cmp	r7, r9
 800cd94:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cd98:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800cd9c:	d805      	bhi.n	800cdaa <__multiply+0x122>
 800cd9e:	f8c8 3004 	str.w	r3, [r8, #4]
 800cda2:	3504      	adds	r5, #4
 800cda4:	e79b      	b.n	800ccde <__multiply+0x56>
 800cda6:	46d4      	mov	ip, sl
 800cda8:	e7b3      	b.n	800cd12 <__multiply+0x8a>
 800cdaa:	46e0      	mov	r8, ip
 800cdac:	e7dd      	b.n	800cd6a <__multiply+0xe2>
 800cdae:	3e01      	subs	r6, #1
 800cdb0:	e799      	b.n	800cce6 <__multiply+0x5e>
	...

0800cdb4 <__pow5mult>:
 800cdb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdb8:	4615      	mov	r5, r2
 800cdba:	f012 0203 	ands.w	r2, r2, #3
 800cdbe:	4606      	mov	r6, r0
 800cdc0:	460f      	mov	r7, r1
 800cdc2:	d007      	beq.n	800cdd4 <__pow5mult+0x20>
 800cdc4:	4c21      	ldr	r4, [pc, #132]	; (800ce4c <__pow5mult+0x98>)
 800cdc6:	3a01      	subs	r2, #1
 800cdc8:	2300      	movs	r3, #0
 800cdca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cdce:	f7ff fe8b 	bl	800cae8 <__multadd>
 800cdd2:	4607      	mov	r7, r0
 800cdd4:	10ad      	asrs	r5, r5, #2
 800cdd6:	d035      	beq.n	800ce44 <__pow5mult+0x90>
 800cdd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cdda:	b93c      	cbnz	r4, 800cdec <__pow5mult+0x38>
 800cddc:	2010      	movs	r0, #16
 800cdde:	f7ff fe05 	bl	800c9ec <malloc>
 800cde2:	6270      	str	r0, [r6, #36]	; 0x24
 800cde4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cde8:	6004      	str	r4, [r0, #0]
 800cdea:	60c4      	str	r4, [r0, #12]
 800cdec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cdf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cdf4:	b94c      	cbnz	r4, 800ce0a <__pow5mult+0x56>
 800cdf6:	f240 2171 	movw	r1, #625	; 0x271
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	f7ff ff3b 	bl	800cc76 <__i2b>
 800ce00:	2300      	movs	r3, #0
 800ce02:	4604      	mov	r4, r0
 800ce04:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce08:	6003      	str	r3, [r0, #0]
 800ce0a:	f04f 0800 	mov.w	r8, #0
 800ce0e:	07eb      	lsls	r3, r5, #31
 800ce10:	d50a      	bpl.n	800ce28 <__pow5mult+0x74>
 800ce12:	4639      	mov	r1, r7
 800ce14:	4622      	mov	r2, r4
 800ce16:	4630      	mov	r0, r6
 800ce18:	f7ff ff36 	bl	800cc88 <__multiply>
 800ce1c:	4681      	mov	r9, r0
 800ce1e:	4639      	mov	r1, r7
 800ce20:	4630      	mov	r0, r6
 800ce22:	f7ff fe4a 	bl	800caba <_Bfree>
 800ce26:	464f      	mov	r7, r9
 800ce28:	106d      	asrs	r5, r5, #1
 800ce2a:	d00b      	beq.n	800ce44 <__pow5mult+0x90>
 800ce2c:	6820      	ldr	r0, [r4, #0]
 800ce2e:	b938      	cbnz	r0, 800ce40 <__pow5mult+0x8c>
 800ce30:	4622      	mov	r2, r4
 800ce32:	4621      	mov	r1, r4
 800ce34:	4630      	mov	r0, r6
 800ce36:	f7ff ff27 	bl	800cc88 <__multiply>
 800ce3a:	6020      	str	r0, [r4, #0]
 800ce3c:	f8c0 8000 	str.w	r8, [r0]
 800ce40:	4604      	mov	r4, r0
 800ce42:	e7e4      	b.n	800ce0e <__pow5mult+0x5a>
 800ce44:	4638      	mov	r0, r7
 800ce46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce4a:	bf00      	nop
 800ce4c:	0800e538 	.word	0x0800e538

0800ce50 <__lshift>:
 800ce50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce54:	460c      	mov	r4, r1
 800ce56:	4607      	mov	r7, r0
 800ce58:	4616      	mov	r6, r2
 800ce5a:	6923      	ldr	r3, [r4, #16]
 800ce5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce60:	eb0a 0903 	add.w	r9, sl, r3
 800ce64:	6849      	ldr	r1, [r1, #4]
 800ce66:	68a3      	ldr	r3, [r4, #8]
 800ce68:	f109 0501 	add.w	r5, r9, #1
 800ce6c:	42ab      	cmp	r3, r5
 800ce6e:	db32      	blt.n	800ced6 <__lshift+0x86>
 800ce70:	4638      	mov	r0, r7
 800ce72:	f7ff fdee 	bl	800ca52 <_Balloc>
 800ce76:	2300      	movs	r3, #0
 800ce78:	4680      	mov	r8, r0
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	f100 0114 	add.w	r1, r0, #20
 800ce80:	4553      	cmp	r3, sl
 800ce82:	db2b      	blt.n	800cedc <__lshift+0x8c>
 800ce84:	6920      	ldr	r0, [r4, #16]
 800ce86:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce8a:	f104 0314 	add.w	r3, r4, #20
 800ce8e:	f016 021f 	ands.w	r2, r6, #31
 800ce92:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce96:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce9a:	d025      	beq.n	800cee8 <__lshift+0x98>
 800ce9c:	2000      	movs	r0, #0
 800ce9e:	f1c2 0e20 	rsb	lr, r2, #32
 800cea2:	468a      	mov	sl, r1
 800cea4:	681e      	ldr	r6, [r3, #0]
 800cea6:	4096      	lsls	r6, r2
 800cea8:	4330      	orrs	r0, r6
 800ceaa:	f84a 0b04 	str.w	r0, [sl], #4
 800ceae:	f853 0b04 	ldr.w	r0, [r3], #4
 800ceb2:	459c      	cmp	ip, r3
 800ceb4:	fa20 f00e 	lsr.w	r0, r0, lr
 800ceb8:	d814      	bhi.n	800cee4 <__lshift+0x94>
 800ceba:	6048      	str	r0, [r1, #4]
 800cebc:	b108      	cbz	r0, 800cec2 <__lshift+0x72>
 800cebe:	f109 0502 	add.w	r5, r9, #2
 800cec2:	3d01      	subs	r5, #1
 800cec4:	4638      	mov	r0, r7
 800cec6:	f8c8 5010 	str.w	r5, [r8, #16]
 800ceca:	4621      	mov	r1, r4
 800cecc:	f7ff fdf5 	bl	800caba <_Bfree>
 800ced0:	4640      	mov	r0, r8
 800ced2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ced6:	3101      	adds	r1, #1
 800ced8:	005b      	lsls	r3, r3, #1
 800ceda:	e7c7      	b.n	800ce6c <__lshift+0x1c>
 800cedc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cee0:	3301      	adds	r3, #1
 800cee2:	e7cd      	b.n	800ce80 <__lshift+0x30>
 800cee4:	4651      	mov	r1, sl
 800cee6:	e7dc      	b.n	800cea2 <__lshift+0x52>
 800cee8:	3904      	subs	r1, #4
 800ceea:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceee:	459c      	cmp	ip, r3
 800cef0:	f841 2f04 	str.w	r2, [r1, #4]!
 800cef4:	d8f9      	bhi.n	800ceea <__lshift+0x9a>
 800cef6:	e7e4      	b.n	800cec2 <__lshift+0x72>

0800cef8 <__mcmp>:
 800cef8:	6903      	ldr	r3, [r0, #16]
 800cefa:	690a      	ldr	r2, [r1, #16]
 800cefc:	b530      	push	{r4, r5, lr}
 800cefe:	1a9b      	subs	r3, r3, r2
 800cf00:	d10c      	bne.n	800cf1c <__mcmp+0x24>
 800cf02:	0092      	lsls	r2, r2, #2
 800cf04:	3014      	adds	r0, #20
 800cf06:	3114      	adds	r1, #20
 800cf08:	1884      	adds	r4, r0, r2
 800cf0a:	4411      	add	r1, r2
 800cf0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf14:	4295      	cmp	r5, r2
 800cf16:	d003      	beq.n	800cf20 <__mcmp+0x28>
 800cf18:	d305      	bcc.n	800cf26 <__mcmp+0x2e>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	bd30      	pop	{r4, r5, pc}
 800cf20:	42a0      	cmp	r0, r4
 800cf22:	d3f3      	bcc.n	800cf0c <__mcmp+0x14>
 800cf24:	e7fa      	b.n	800cf1c <__mcmp+0x24>
 800cf26:	f04f 33ff 	mov.w	r3, #4294967295
 800cf2a:	e7f7      	b.n	800cf1c <__mcmp+0x24>

0800cf2c <__mdiff>:
 800cf2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf30:	460d      	mov	r5, r1
 800cf32:	4607      	mov	r7, r0
 800cf34:	4611      	mov	r1, r2
 800cf36:	4628      	mov	r0, r5
 800cf38:	4614      	mov	r4, r2
 800cf3a:	f7ff ffdd 	bl	800cef8 <__mcmp>
 800cf3e:	1e06      	subs	r6, r0, #0
 800cf40:	d108      	bne.n	800cf54 <__mdiff+0x28>
 800cf42:	4631      	mov	r1, r6
 800cf44:	4638      	mov	r0, r7
 800cf46:	f7ff fd84 	bl	800ca52 <_Balloc>
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cf50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf54:	bfa4      	itt	ge
 800cf56:	4623      	movge	r3, r4
 800cf58:	462c      	movge	r4, r5
 800cf5a:	4638      	mov	r0, r7
 800cf5c:	6861      	ldr	r1, [r4, #4]
 800cf5e:	bfa6      	itte	ge
 800cf60:	461d      	movge	r5, r3
 800cf62:	2600      	movge	r6, #0
 800cf64:	2601      	movlt	r6, #1
 800cf66:	f7ff fd74 	bl	800ca52 <_Balloc>
 800cf6a:	f04f 0e00 	mov.w	lr, #0
 800cf6e:	60c6      	str	r6, [r0, #12]
 800cf70:	692b      	ldr	r3, [r5, #16]
 800cf72:	6926      	ldr	r6, [r4, #16]
 800cf74:	f104 0214 	add.w	r2, r4, #20
 800cf78:	f105 0914 	add.w	r9, r5, #20
 800cf7c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cf80:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800cf84:	f100 0114 	add.w	r1, r0, #20
 800cf88:	f852 ab04 	ldr.w	sl, [r2], #4
 800cf8c:	f859 5b04 	ldr.w	r5, [r9], #4
 800cf90:	fa1f f38a 	uxth.w	r3, sl
 800cf94:	4473      	add	r3, lr
 800cf96:	b2ac      	uxth	r4, r5
 800cf98:	1b1b      	subs	r3, r3, r4
 800cf9a:	0c2c      	lsrs	r4, r5, #16
 800cf9c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800cfa0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800cfaa:	45c8      	cmp	r8, r9
 800cfac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800cfb0:	4694      	mov	ip, r2
 800cfb2:	f841 4b04 	str.w	r4, [r1], #4
 800cfb6:	d8e7      	bhi.n	800cf88 <__mdiff+0x5c>
 800cfb8:	45bc      	cmp	ip, r7
 800cfba:	d304      	bcc.n	800cfc6 <__mdiff+0x9a>
 800cfbc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800cfc0:	b183      	cbz	r3, 800cfe4 <__mdiff+0xb8>
 800cfc2:	6106      	str	r6, [r0, #16]
 800cfc4:	e7c4      	b.n	800cf50 <__mdiff+0x24>
 800cfc6:	f85c 4b04 	ldr.w	r4, [ip], #4
 800cfca:	b2a2      	uxth	r2, r4
 800cfcc:	4472      	add	r2, lr
 800cfce:	1413      	asrs	r3, r2, #16
 800cfd0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cfd4:	b292      	uxth	r2, r2
 800cfd6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cfda:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cfde:	f841 2b04 	str.w	r2, [r1], #4
 800cfe2:	e7e9      	b.n	800cfb8 <__mdiff+0x8c>
 800cfe4:	3e01      	subs	r6, #1
 800cfe6:	e7e9      	b.n	800cfbc <__mdiff+0x90>

0800cfe8 <__ulp>:
 800cfe8:	4b10      	ldr	r3, [pc, #64]	; (800d02c <__ulp+0x44>)
 800cfea:	400b      	ands	r3, r1
 800cfec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	dd02      	ble.n	800cffa <__ulp+0x12>
 800cff4:	2000      	movs	r0, #0
 800cff6:	4619      	mov	r1, r3
 800cff8:	4770      	bx	lr
 800cffa:	425b      	negs	r3, r3
 800cffc:	151b      	asrs	r3, r3, #20
 800cffe:	2b13      	cmp	r3, #19
 800d000:	f04f 0000 	mov.w	r0, #0
 800d004:	f04f 0100 	mov.w	r1, #0
 800d008:	dc04      	bgt.n	800d014 <__ulp+0x2c>
 800d00a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d00e:	fa42 f103 	asr.w	r1, r2, r3
 800d012:	4770      	bx	lr
 800d014:	2201      	movs	r2, #1
 800d016:	3b14      	subs	r3, #20
 800d018:	2b1e      	cmp	r3, #30
 800d01a:	bfce      	itee	gt
 800d01c:	4613      	movgt	r3, r2
 800d01e:	f1c3 031f 	rsble	r3, r3, #31
 800d022:	fa02 f303 	lslle.w	r3, r2, r3
 800d026:	4618      	mov	r0, r3
 800d028:	4770      	bx	lr
 800d02a:	bf00      	nop
 800d02c:	7ff00000 	.word	0x7ff00000

0800d030 <__b2d>:
 800d030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d034:	6907      	ldr	r7, [r0, #16]
 800d036:	f100 0914 	add.w	r9, r0, #20
 800d03a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d03e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d042:	f1a7 0804 	sub.w	r8, r7, #4
 800d046:	4630      	mov	r0, r6
 800d048:	f7ff fdc7 	bl	800cbda <__hi0bits>
 800d04c:	f1c0 0320 	rsb	r3, r0, #32
 800d050:	280a      	cmp	r0, #10
 800d052:	600b      	str	r3, [r1, #0]
 800d054:	491e      	ldr	r1, [pc, #120]	; (800d0d0 <__b2d+0xa0>)
 800d056:	dc17      	bgt.n	800d088 <__b2d+0x58>
 800d058:	45c1      	cmp	r9, r8
 800d05a:	bf28      	it	cs
 800d05c:	2200      	movcs	r2, #0
 800d05e:	f1c0 0c0b 	rsb	ip, r0, #11
 800d062:	fa26 f30c 	lsr.w	r3, r6, ip
 800d066:	bf38      	it	cc
 800d068:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d06c:	ea43 0501 	orr.w	r5, r3, r1
 800d070:	f100 0315 	add.w	r3, r0, #21
 800d074:	fa06 f303 	lsl.w	r3, r6, r3
 800d078:	fa22 f20c 	lsr.w	r2, r2, ip
 800d07c:	ea43 0402 	orr.w	r4, r3, r2
 800d080:	4620      	mov	r0, r4
 800d082:	4629      	mov	r1, r5
 800d084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d088:	45c1      	cmp	r9, r8
 800d08a:	bf3a      	itte	cc
 800d08c:	f1a7 0808 	subcc.w	r8, r7, #8
 800d090:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d094:	2200      	movcs	r2, #0
 800d096:	f1b0 030b 	subs.w	r3, r0, #11
 800d09a:	d015      	beq.n	800d0c8 <__b2d+0x98>
 800d09c:	409e      	lsls	r6, r3
 800d09e:	f1c3 0720 	rsb	r7, r3, #32
 800d0a2:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800d0a6:	fa22 f107 	lsr.w	r1, r2, r7
 800d0aa:	45c8      	cmp	r8, r9
 800d0ac:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800d0b0:	ea46 0501 	orr.w	r5, r6, r1
 800d0b4:	bf94      	ite	ls
 800d0b6:	2100      	movls	r1, #0
 800d0b8:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d0bc:	fa02 f003 	lsl.w	r0, r2, r3
 800d0c0:	40f9      	lsrs	r1, r7
 800d0c2:	ea40 0401 	orr.w	r4, r0, r1
 800d0c6:	e7db      	b.n	800d080 <__b2d+0x50>
 800d0c8:	ea46 0501 	orr.w	r5, r6, r1
 800d0cc:	4614      	mov	r4, r2
 800d0ce:	e7d7      	b.n	800d080 <__b2d+0x50>
 800d0d0:	3ff00000 	.word	0x3ff00000

0800d0d4 <__d2b>:
 800d0d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d0d8:	461c      	mov	r4, r3
 800d0da:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800d0de:	2101      	movs	r1, #1
 800d0e0:	4690      	mov	r8, r2
 800d0e2:	f7ff fcb6 	bl	800ca52 <_Balloc>
 800d0e6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800d0ea:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800d0ee:	4607      	mov	r7, r0
 800d0f0:	bb34      	cbnz	r4, 800d140 <__d2b+0x6c>
 800d0f2:	9201      	str	r2, [sp, #4]
 800d0f4:	f1b8 0200 	subs.w	r2, r8, #0
 800d0f8:	d027      	beq.n	800d14a <__d2b+0x76>
 800d0fa:	a802      	add	r0, sp, #8
 800d0fc:	f840 2d08 	str.w	r2, [r0, #-8]!
 800d100:	f7ff fd8a 	bl	800cc18 <__lo0bits>
 800d104:	9900      	ldr	r1, [sp, #0]
 800d106:	b1f0      	cbz	r0, 800d146 <__d2b+0x72>
 800d108:	9a01      	ldr	r2, [sp, #4]
 800d10a:	f1c0 0320 	rsb	r3, r0, #32
 800d10e:	fa02 f303 	lsl.w	r3, r2, r3
 800d112:	430b      	orrs	r3, r1
 800d114:	40c2      	lsrs	r2, r0
 800d116:	617b      	str	r3, [r7, #20]
 800d118:	9201      	str	r2, [sp, #4]
 800d11a:	9b01      	ldr	r3, [sp, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	bf14      	ite	ne
 800d120:	2102      	movne	r1, #2
 800d122:	2101      	moveq	r1, #1
 800d124:	61bb      	str	r3, [r7, #24]
 800d126:	6139      	str	r1, [r7, #16]
 800d128:	b1c4      	cbz	r4, 800d15c <__d2b+0x88>
 800d12a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d12e:	4404      	add	r4, r0
 800d130:	6034      	str	r4, [r6, #0]
 800d132:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d136:	6028      	str	r0, [r5, #0]
 800d138:	4638      	mov	r0, r7
 800d13a:	b002      	add	sp, #8
 800d13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d140:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d144:	e7d5      	b.n	800d0f2 <__d2b+0x1e>
 800d146:	6179      	str	r1, [r7, #20]
 800d148:	e7e7      	b.n	800d11a <__d2b+0x46>
 800d14a:	a801      	add	r0, sp, #4
 800d14c:	f7ff fd64 	bl	800cc18 <__lo0bits>
 800d150:	2101      	movs	r1, #1
 800d152:	9b01      	ldr	r3, [sp, #4]
 800d154:	6139      	str	r1, [r7, #16]
 800d156:	617b      	str	r3, [r7, #20]
 800d158:	3020      	adds	r0, #32
 800d15a:	e7e5      	b.n	800d128 <__d2b+0x54>
 800d15c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d160:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d164:	6030      	str	r0, [r6, #0]
 800d166:	6918      	ldr	r0, [r3, #16]
 800d168:	f7ff fd37 	bl	800cbda <__hi0bits>
 800d16c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d170:	e7e1      	b.n	800d136 <__d2b+0x62>

0800d172 <__ratio>:
 800d172:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d176:	4688      	mov	r8, r1
 800d178:	4669      	mov	r1, sp
 800d17a:	4681      	mov	r9, r0
 800d17c:	f7ff ff58 	bl	800d030 <__b2d>
 800d180:	468b      	mov	fp, r1
 800d182:	4606      	mov	r6, r0
 800d184:	460f      	mov	r7, r1
 800d186:	4640      	mov	r0, r8
 800d188:	a901      	add	r1, sp, #4
 800d18a:	f7ff ff51 	bl	800d030 <__b2d>
 800d18e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d192:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d196:	460d      	mov	r5, r1
 800d198:	eba3 0c02 	sub.w	ip, r3, r2
 800d19c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d1a0:	1a9b      	subs	r3, r3, r2
 800d1a2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	bfd5      	itete	le
 800d1aa:	460a      	movle	r2, r1
 800d1ac:	463a      	movgt	r2, r7
 800d1ae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d1b2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d1b6:	bfd8      	it	le
 800d1b8:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800d1bc:	462b      	mov	r3, r5
 800d1be:	4602      	mov	r2, r0
 800d1c0:	4659      	mov	r1, fp
 800d1c2:	4630      	mov	r0, r6
 800d1c4:	f7f3 fab2 	bl	800072c <__aeabi_ddiv>
 800d1c8:	b003      	add	sp, #12
 800d1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d1ce <__copybits>:
 800d1ce:	3901      	subs	r1, #1
 800d1d0:	b510      	push	{r4, lr}
 800d1d2:	1149      	asrs	r1, r1, #5
 800d1d4:	6914      	ldr	r4, [r2, #16]
 800d1d6:	3101      	adds	r1, #1
 800d1d8:	f102 0314 	add.w	r3, r2, #20
 800d1dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d1e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d1e4:	42a3      	cmp	r3, r4
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	d303      	bcc.n	800d1f2 <__copybits+0x24>
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	428a      	cmp	r2, r1
 800d1ee:	d305      	bcc.n	800d1fc <__copybits+0x2e>
 800d1f0:	bd10      	pop	{r4, pc}
 800d1f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1f6:	f840 2b04 	str.w	r2, [r0], #4
 800d1fa:	e7f3      	b.n	800d1e4 <__copybits+0x16>
 800d1fc:	f842 3b04 	str.w	r3, [r2], #4
 800d200:	e7f4      	b.n	800d1ec <__copybits+0x1e>

0800d202 <__any_on>:
 800d202:	f100 0214 	add.w	r2, r0, #20
 800d206:	6900      	ldr	r0, [r0, #16]
 800d208:	114b      	asrs	r3, r1, #5
 800d20a:	4298      	cmp	r0, r3
 800d20c:	b510      	push	{r4, lr}
 800d20e:	db11      	blt.n	800d234 <__any_on+0x32>
 800d210:	dd0a      	ble.n	800d228 <__any_on+0x26>
 800d212:	f011 011f 	ands.w	r1, r1, #31
 800d216:	d007      	beq.n	800d228 <__any_on+0x26>
 800d218:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d21c:	fa24 f001 	lsr.w	r0, r4, r1
 800d220:	fa00 f101 	lsl.w	r1, r0, r1
 800d224:	428c      	cmp	r4, r1
 800d226:	d10b      	bne.n	800d240 <__any_on+0x3e>
 800d228:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d803      	bhi.n	800d238 <__any_on+0x36>
 800d230:	2000      	movs	r0, #0
 800d232:	bd10      	pop	{r4, pc}
 800d234:	4603      	mov	r3, r0
 800d236:	e7f7      	b.n	800d228 <__any_on+0x26>
 800d238:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d23c:	2900      	cmp	r1, #0
 800d23e:	d0f5      	beq.n	800d22c <__any_on+0x2a>
 800d240:	2001      	movs	r0, #1
 800d242:	e7f6      	b.n	800d232 <__any_on+0x30>

0800d244 <_calloc_r>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	fb02 f401 	mul.w	r4, r2, r1
 800d24a:	4621      	mov	r1, r4
 800d24c:	f000 f854 	bl	800d2f8 <_malloc_r>
 800d250:	4605      	mov	r5, r0
 800d252:	b118      	cbz	r0, 800d25c <_calloc_r+0x18>
 800d254:	4622      	mov	r2, r4
 800d256:	2100      	movs	r1, #0
 800d258:	f7fc f94a 	bl	80094f0 <memset>
 800d25c:	4628      	mov	r0, r5
 800d25e:	bd38      	pop	{r3, r4, r5, pc}

0800d260 <_free_r>:
 800d260:	b538      	push	{r3, r4, r5, lr}
 800d262:	4605      	mov	r5, r0
 800d264:	2900      	cmp	r1, #0
 800d266:	d043      	beq.n	800d2f0 <_free_r+0x90>
 800d268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d26c:	1f0c      	subs	r4, r1, #4
 800d26e:	2b00      	cmp	r3, #0
 800d270:	bfb8      	it	lt
 800d272:	18e4      	addlt	r4, r4, r3
 800d274:	f000 ff9f 	bl	800e1b6 <__malloc_lock>
 800d278:	4a1e      	ldr	r2, [pc, #120]	; (800d2f4 <_free_r+0x94>)
 800d27a:	6813      	ldr	r3, [r2, #0]
 800d27c:	4610      	mov	r0, r2
 800d27e:	b933      	cbnz	r3, 800d28e <_free_r+0x2e>
 800d280:	6063      	str	r3, [r4, #4]
 800d282:	6014      	str	r4, [r2, #0]
 800d284:	4628      	mov	r0, r5
 800d286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d28a:	f000 bf95 	b.w	800e1b8 <__malloc_unlock>
 800d28e:	42a3      	cmp	r3, r4
 800d290:	d90b      	bls.n	800d2aa <_free_r+0x4a>
 800d292:	6821      	ldr	r1, [r4, #0]
 800d294:	1862      	adds	r2, r4, r1
 800d296:	4293      	cmp	r3, r2
 800d298:	bf01      	itttt	eq
 800d29a:	681a      	ldreq	r2, [r3, #0]
 800d29c:	685b      	ldreq	r3, [r3, #4]
 800d29e:	1852      	addeq	r2, r2, r1
 800d2a0:	6022      	streq	r2, [r4, #0]
 800d2a2:	6063      	str	r3, [r4, #4]
 800d2a4:	6004      	str	r4, [r0, #0]
 800d2a6:	e7ed      	b.n	800d284 <_free_r+0x24>
 800d2a8:	4613      	mov	r3, r2
 800d2aa:	685a      	ldr	r2, [r3, #4]
 800d2ac:	b10a      	cbz	r2, 800d2b2 <_free_r+0x52>
 800d2ae:	42a2      	cmp	r2, r4
 800d2b0:	d9fa      	bls.n	800d2a8 <_free_r+0x48>
 800d2b2:	6819      	ldr	r1, [r3, #0]
 800d2b4:	1858      	adds	r0, r3, r1
 800d2b6:	42a0      	cmp	r0, r4
 800d2b8:	d10b      	bne.n	800d2d2 <_free_r+0x72>
 800d2ba:	6820      	ldr	r0, [r4, #0]
 800d2bc:	4401      	add	r1, r0
 800d2be:	1858      	adds	r0, r3, r1
 800d2c0:	4282      	cmp	r2, r0
 800d2c2:	6019      	str	r1, [r3, #0]
 800d2c4:	d1de      	bne.n	800d284 <_free_r+0x24>
 800d2c6:	6810      	ldr	r0, [r2, #0]
 800d2c8:	6852      	ldr	r2, [r2, #4]
 800d2ca:	4401      	add	r1, r0
 800d2cc:	6019      	str	r1, [r3, #0]
 800d2ce:	605a      	str	r2, [r3, #4]
 800d2d0:	e7d8      	b.n	800d284 <_free_r+0x24>
 800d2d2:	d902      	bls.n	800d2da <_free_r+0x7a>
 800d2d4:	230c      	movs	r3, #12
 800d2d6:	602b      	str	r3, [r5, #0]
 800d2d8:	e7d4      	b.n	800d284 <_free_r+0x24>
 800d2da:	6820      	ldr	r0, [r4, #0]
 800d2dc:	1821      	adds	r1, r4, r0
 800d2de:	428a      	cmp	r2, r1
 800d2e0:	bf01      	itttt	eq
 800d2e2:	6811      	ldreq	r1, [r2, #0]
 800d2e4:	6852      	ldreq	r2, [r2, #4]
 800d2e6:	1809      	addeq	r1, r1, r0
 800d2e8:	6021      	streq	r1, [r4, #0]
 800d2ea:	6062      	str	r2, [r4, #4]
 800d2ec:	605c      	str	r4, [r3, #4]
 800d2ee:	e7c9      	b.n	800d284 <_free_r+0x24>
 800d2f0:	bd38      	pop	{r3, r4, r5, pc}
 800d2f2:	bf00      	nop
 800d2f4:	20000594 	.word	0x20000594

0800d2f8 <_malloc_r>:
 800d2f8:	b570      	push	{r4, r5, r6, lr}
 800d2fa:	1ccd      	adds	r5, r1, #3
 800d2fc:	f025 0503 	bic.w	r5, r5, #3
 800d300:	3508      	adds	r5, #8
 800d302:	2d0c      	cmp	r5, #12
 800d304:	bf38      	it	cc
 800d306:	250c      	movcc	r5, #12
 800d308:	2d00      	cmp	r5, #0
 800d30a:	4606      	mov	r6, r0
 800d30c:	db01      	blt.n	800d312 <_malloc_r+0x1a>
 800d30e:	42a9      	cmp	r1, r5
 800d310:	d903      	bls.n	800d31a <_malloc_r+0x22>
 800d312:	230c      	movs	r3, #12
 800d314:	6033      	str	r3, [r6, #0]
 800d316:	2000      	movs	r0, #0
 800d318:	bd70      	pop	{r4, r5, r6, pc}
 800d31a:	f000 ff4c 	bl	800e1b6 <__malloc_lock>
 800d31e:	4a21      	ldr	r2, [pc, #132]	; (800d3a4 <_malloc_r+0xac>)
 800d320:	6814      	ldr	r4, [r2, #0]
 800d322:	4621      	mov	r1, r4
 800d324:	b991      	cbnz	r1, 800d34c <_malloc_r+0x54>
 800d326:	4c20      	ldr	r4, [pc, #128]	; (800d3a8 <_malloc_r+0xb0>)
 800d328:	6823      	ldr	r3, [r4, #0]
 800d32a:	b91b      	cbnz	r3, 800d334 <_malloc_r+0x3c>
 800d32c:	4630      	mov	r0, r6
 800d32e:	f000 fde1 	bl	800def4 <_sbrk_r>
 800d332:	6020      	str	r0, [r4, #0]
 800d334:	4629      	mov	r1, r5
 800d336:	4630      	mov	r0, r6
 800d338:	f000 fddc 	bl	800def4 <_sbrk_r>
 800d33c:	1c43      	adds	r3, r0, #1
 800d33e:	d124      	bne.n	800d38a <_malloc_r+0x92>
 800d340:	230c      	movs	r3, #12
 800d342:	4630      	mov	r0, r6
 800d344:	6033      	str	r3, [r6, #0]
 800d346:	f000 ff37 	bl	800e1b8 <__malloc_unlock>
 800d34a:	e7e4      	b.n	800d316 <_malloc_r+0x1e>
 800d34c:	680b      	ldr	r3, [r1, #0]
 800d34e:	1b5b      	subs	r3, r3, r5
 800d350:	d418      	bmi.n	800d384 <_malloc_r+0x8c>
 800d352:	2b0b      	cmp	r3, #11
 800d354:	d90f      	bls.n	800d376 <_malloc_r+0x7e>
 800d356:	600b      	str	r3, [r1, #0]
 800d358:	18cc      	adds	r4, r1, r3
 800d35a:	50cd      	str	r5, [r1, r3]
 800d35c:	4630      	mov	r0, r6
 800d35e:	f000 ff2b 	bl	800e1b8 <__malloc_unlock>
 800d362:	f104 000b 	add.w	r0, r4, #11
 800d366:	1d23      	adds	r3, r4, #4
 800d368:	f020 0007 	bic.w	r0, r0, #7
 800d36c:	1ac3      	subs	r3, r0, r3
 800d36e:	d0d3      	beq.n	800d318 <_malloc_r+0x20>
 800d370:	425a      	negs	r2, r3
 800d372:	50e2      	str	r2, [r4, r3]
 800d374:	e7d0      	b.n	800d318 <_malloc_r+0x20>
 800d376:	684b      	ldr	r3, [r1, #4]
 800d378:	428c      	cmp	r4, r1
 800d37a:	bf16      	itet	ne
 800d37c:	6063      	strne	r3, [r4, #4]
 800d37e:	6013      	streq	r3, [r2, #0]
 800d380:	460c      	movne	r4, r1
 800d382:	e7eb      	b.n	800d35c <_malloc_r+0x64>
 800d384:	460c      	mov	r4, r1
 800d386:	6849      	ldr	r1, [r1, #4]
 800d388:	e7cc      	b.n	800d324 <_malloc_r+0x2c>
 800d38a:	1cc4      	adds	r4, r0, #3
 800d38c:	f024 0403 	bic.w	r4, r4, #3
 800d390:	42a0      	cmp	r0, r4
 800d392:	d005      	beq.n	800d3a0 <_malloc_r+0xa8>
 800d394:	1a21      	subs	r1, r4, r0
 800d396:	4630      	mov	r0, r6
 800d398:	f000 fdac 	bl	800def4 <_sbrk_r>
 800d39c:	3001      	adds	r0, #1
 800d39e:	d0cf      	beq.n	800d340 <_malloc_r+0x48>
 800d3a0:	6025      	str	r5, [r4, #0]
 800d3a2:	e7db      	b.n	800d35c <_malloc_r+0x64>
 800d3a4:	20000594 	.word	0x20000594
 800d3a8:	20000598 	.word	0x20000598

0800d3ac <__ssputs_r>:
 800d3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3b0:	688e      	ldr	r6, [r1, #8]
 800d3b2:	4682      	mov	sl, r0
 800d3b4:	429e      	cmp	r6, r3
 800d3b6:	460c      	mov	r4, r1
 800d3b8:	4690      	mov	r8, r2
 800d3ba:	4699      	mov	r9, r3
 800d3bc:	d837      	bhi.n	800d42e <__ssputs_r+0x82>
 800d3be:	898a      	ldrh	r2, [r1, #12]
 800d3c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d3c4:	d031      	beq.n	800d42a <__ssputs_r+0x7e>
 800d3c6:	2302      	movs	r3, #2
 800d3c8:	6825      	ldr	r5, [r4, #0]
 800d3ca:	6909      	ldr	r1, [r1, #16]
 800d3cc:	1a6f      	subs	r7, r5, r1
 800d3ce:	6965      	ldr	r5, [r4, #20]
 800d3d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3d4:	fb95 f5f3 	sdiv	r5, r5, r3
 800d3d8:	f109 0301 	add.w	r3, r9, #1
 800d3dc:	443b      	add	r3, r7
 800d3de:	429d      	cmp	r5, r3
 800d3e0:	bf38      	it	cc
 800d3e2:	461d      	movcc	r5, r3
 800d3e4:	0553      	lsls	r3, r2, #21
 800d3e6:	d530      	bpl.n	800d44a <__ssputs_r+0x9e>
 800d3e8:	4629      	mov	r1, r5
 800d3ea:	f7ff ff85 	bl	800d2f8 <_malloc_r>
 800d3ee:	4606      	mov	r6, r0
 800d3f0:	b950      	cbnz	r0, 800d408 <__ssputs_r+0x5c>
 800d3f2:	230c      	movs	r3, #12
 800d3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f8:	f8ca 3000 	str.w	r3, [sl]
 800d3fc:	89a3      	ldrh	r3, [r4, #12]
 800d3fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d402:	81a3      	strh	r3, [r4, #12]
 800d404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d408:	463a      	mov	r2, r7
 800d40a:	6921      	ldr	r1, [r4, #16]
 800d40c:	f7ff fb16 	bl	800ca3c <memcpy>
 800d410:	89a3      	ldrh	r3, [r4, #12]
 800d412:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d41a:	81a3      	strh	r3, [r4, #12]
 800d41c:	6126      	str	r6, [r4, #16]
 800d41e:	443e      	add	r6, r7
 800d420:	6026      	str	r6, [r4, #0]
 800d422:	464e      	mov	r6, r9
 800d424:	6165      	str	r5, [r4, #20]
 800d426:	1bed      	subs	r5, r5, r7
 800d428:	60a5      	str	r5, [r4, #8]
 800d42a:	454e      	cmp	r6, r9
 800d42c:	d900      	bls.n	800d430 <__ssputs_r+0x84>
 800d42e:	464e      	mov	r6, r9
 800d430:	4632      	mov	r2, r6
 800d432:	4641      	mov	r1, r8
 800d434:	6820      	ldr	r0, [r4, #0]
 800d436:	f000 fea5 	bl	800e184 <memmove>
 800d43a:	68a3      	ldr	r3, [r4, #8]
 800d43c:	2000      	movs	r0, #0
 800d43e:	1b9b      	subs	r3, r3, r6
 800d440:	60a3      	str	r3, [r4, #8]
 800d442:	6823      	ldr	r3, [r4, #0]
 800d444:	441e      	add	r6, r3
 800d446:	6026      	str	r6, [r4, #0]
 800d448:	e7dc      	b.n	800d404 <__ssputs_r+0x58>
 800d44a:	462a      	mov	r2, r5
 800d44c:	f000 feb5 	bl	800e1ba <_realloc_r>
 800d450:	4606      	mov	r6, r0
 800d452:	2800      	cmp	r0, #0
 800d454:	d1e2      	bne.n	800d41c <__ssputs_r+0x70>
 800d456:	6921      	ldr	r1, [r4, #16]
 800d458:	4650      	mov	r0, sl
 800d45a:	f7ff ff01 	bl	800d260 <_free_r>
 800d45e:	e7c8      	b.n	800d3f2 <__ssputs_r+0x46>

0800d460 <_svfiprintf_r>:
 800d460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d464:	461d      	mov	r5, r3
 800d466:	898b      	ldrh	r3, [r1, #12]
 800d468:	b09d      	sub	sp, #116	; 0x74
 800d46a:	061f      	lsls	r7, r3, #24
 800d46c:	4680      	mov	r8, r0
 800d46e:	460c      	mov	r4, r1
 800d470:	4616      	mov	r6, r2
 800d472:	d50f      	bpl.n	800d494 <_svfiprintf_r+0x34>
 800d474:	690b      	ldr	r3, [r1, #16]
 800d476:	b96b      	cbnz	r3, 800d494 <_svfiprintf_r+0x34>
 800d478:	2140      	movs	r1, #64	; 0x40
 800d47a:	f7ff ff3d 	bl	800d2f8 <_malloc_r>
 800d47e:	6020      	str	r0, [r4, #0]
 800d480:	6120      	str	r0, [r4, #16]
 800d482:	b928      	cbnz	r0, 800d490 <_svfiprintf_r+0x30>
 800d484:	230c      	movs	r3, #12
 800d486:	f8c8 3000 	str.w	r3, [r8]
 800d48a:	f04f 30ff 	mov.w	r0, #4294967295
 800d48e:	e0c8      	b.n	800d622 <_svfiprintf_r+0x1c2>
 800d490:	2340      	movs	r3, #64	; 0x40
 800d492:	6163      	str	r3, [r4, #20]
 800d494:	2300      	movs	r3, #0
 800d496:	9309      	str	r3, [sp, #36]	; 0x24
 800d498:	2320      	movs	r3, #32
 800d49a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d49e:	2330      	movs	r3, #48	; 0x30
 800d4a0:	f04f 0b01 	mov.w	fp, #1
 800d4a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4a8:	9503      	str	r5, [sp, #12]
 800d4aa:	4637      	mov	r7, r6
 800d4ac:	463d      	mov	r5, r7
 800d4ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d4b2:	b10b      	cbz	r3, 800d4b8 <_svfiprintf_r+0x58>
 800d4b4:	2b25      	cmp	r3, #37	; 0x25
 800d4b6:	d13e      	bne.n	800d536 <_svfiprintf_r+0xd6>
 800d4b8:	ebb7 0a06 	subs.w	sl, r7, r6
 800d4bc:	d00b      	beq.n	800d4d6 <_svfiprintf_r+0x76>
 800d4be:	4653      	mov	r3, sl
 800d4c0:	4632      	mov	r2, r6
 800d4c2:	4621      	mov	r1, r4
 800d4c4:	4640      	mov	r0, r8
 800d4c6:	f7ff ff71 	bl	800d3ac <__ssputs_r>
 800d4ca:	3001      	adds	r0, #1
 800d4cc:	f000 80a4 	beq.w	800d618 <_svfiprintf_r+0x1b8>
 800d4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4d2:	4453      	add	r3, sl
 800d4d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d4d6:	783b      	ldrb	r3, [r7, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	f000 809d 	beq.w	800d618 <_svfiprintf_r+0x1b8>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	f04f 32ff 	mov.w	r2, #4294967295
 800d4e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4e8:	9304      	str	r3, [sp, #16]
 800d4ea:	9307      	str	r3, [sp, #28]
 800d4ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4f0:	931a      	str	r3, [sp, #104]	; 0x68
 800d4f2:	462f      	mov	r7, r5
 800d4f4:	2205      	movs	r2, #5
 800d4f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d4fa:	4850      	ldr	r0, [pc, #320]	; (800d63c <_svfiprintf_r+0x1dc>)
 800d4fc:	f7ff fa90 	bl	800ca20 <memchr>
 800d500:	9b04      	ldr	r3, [sp, #16]
 800d502:	b9d0      	cbnz	r0, 800d53a <_svfiprintf_r+0xda>
 800d504:	06d9      	lsls	r1, r3, #27
 800d506:	bf44      	itt	mi
 800d508:	2220      	movmi	r2, #32
 800d50a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d50e:	071a      	lsls	r2, r3, #28
 800d510:	bf44      	itt	mi
 800d512:	222b      	movmi	r2, #43	; 0x2b
 800d514:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d518:	782a      	ldrb	r2, [r5, #0]
 800d51a:	2a2a      	cmp	r2, #42	; 0x2a
 800d51c:	d015      	beq.n	800d54a <_svfiprintf_r+0xea>
 800d51e:	462f      	mov	r7, r5
 800d520:	2000      	movs	r0, #0
 800d522:	250a      	movs	r5, #10
 800d524:	9a07      	ldr	r2, [sp, #28]
 800d526:	4639      	mov	r1, r7
 800d528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d52c:	3b30      	subs	r3, #48	; 0x30
 800d52e:	2b09      	cmp	r3, #9
 800d530:	d94d      	bls.n	800d5ce <_svfiprintf_r+0x16e>
 800d532:	b1b8      	cbz	r0, 800d564 <_svfiprintf_r+0x104>
 800d534:	e00f      	b.n	800d556 <_svfiprintf_r+0xf6>
 800d536:	462f      	mov	r7, r5
 800d538:	e7b8      	b.n	800d4ac <_svfiprintf_r+0x4c>
 800d53a:	4a40      	ldr	r2, [pc, #256]	; (800d63c <_svfiprintf_r+0x1dc>)
 800d53c:	463d      	mov	r5, r7
 800d53e:	1a80      	subs	r0, r0, r2
 800d540:	fa0b f000 	lsl.w	r0, fp, r0
 800d544:	4318      	orrs	r0, r3
 800d546:	9004      	str	r0, [sp, #16]
 800d548:	e7d3      	b.n	800d4f2 <_svfiprintf_r+0x92>
 800d54a:	9a03      	ldr	r2, [sp, #12]
 800d54c:	1d11      	adds	r1, r2, #4
 800d54e:	6812      	ldr	r2, [r2, #0]
 800d550:	9103      	str	r1, [sp, #12]
 800d552:	2a00      	cmp	r2, #0
 800d554:	db01      	blt.n	800d55a <_svfiprintf_r+0xfa>
 800d556:	9207      	str	r2, [sp, #28]
 800d558:	e004      	b.n	800d564 <_svfiprintf_r+0x104>
 800d55a:	4252      	negs	r2, r2
 800d55c:	f043 0302 	orr.w	r3, r3, #2
 800d560:	9207      	str	r2, [sp, #28]
 800d562:	9304      	str	r3, [sp, #16]
 800d564:	783b      	ldrb	r3, [r7, #0]
 800d566:	2b2e      	cmp	r3, #46	; 0x2e
 800d568:	d10c      	bne.n	800d584 <_svfiprintf_r+0x124>
 800d56a:	787b      	ldrb	r3, [r7, #1]
 800d56c:	2b2a      	cmp	r3, #42	; 0x2a
 800d56e:	d133      	bne.n	800d5d8 <_svfiprintf_r+0x178>
 800d570:	9b03      	ldr	r3, [sp, #12]
 800d572:	3702      	adds	r7, #2
 800d574:	1d1a      	adds	r2, r3, #4
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	9203      	str	r2, [sp, #12]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	bfb8      	it	lt
 800d57e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d582:	9305      	str	r3, [sp, #20]
 800d584:	4d2e      	ldr	r5, [pc, #184]	; (800d640 <_svfiprintf_r+0x1e0>)
 800d586:	2203      	movs	r2, #3
 800d588:	7839      	ldrb	r1, [r7, #0]
 800d58a:	4628      	mov	r0, r5
 800d58c:	f7ff fa48 	bl	800ca20 <memchr>
 800d590:	b138      	cbz	r0, 800d5a2 <_svfiprintf_r+0x142>
 800d592:	2340      	movs	r3, #64	; 0x40
 800d594:	1b40      	subs	r0, r0, r5
 800d596:	fa03 f000 	lsl.w	r0, r3, r0
 800d59a:	9b04      	ldr	r3, [sp, #16]
 800d59c:	3701      	adds	r7, #1
 800d59e:	4303      	orrs	r3, r0
 800d5a0:	9304      	str	r3, [sp, #16]
 800d5a2:	7839      	ldrb	r1, [r7, #0]
 800d5a4:	2206      	movs	r2, #6
 800d5a6:	4827      	ldr	r0, [pc, #156]	; (800d644 <_svfiprintf_r+0x1e4>)
 800d5a8:	1c7e      	adds	r6, r7, #1
 800d5aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5ae:	f7ff fa37 	bl	800ca20 <memchr>
 800d5b2:	2800      	cmp	r0, #0
 800d5b4:	d038      	beq.n	800d628 <_svfiprintf_r+0x1c8>
 800d5b6:	4b24      	ldr	r3, [pc, #144]	; (800d648 <_svfiprintf_r+0x1e8>)
 800d5b8:	bb13      	cbnz	r3, 800d600 <_svfiprintf_r+0x1a0>
 800d5ba:	9b03      	ldr	r3, [sp, #12]
 800d5bc:	3307      	adds	r3, #7
 800d5be:	f023 0307 	bic.w	r3, r3, #7
 800d5c2:	3308      	adds	r3, #8
 800d5c4:	9303      	str	r3, [sp, #12]
 800d5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5c8:	444b      	add	r3, r9
 800d5ca:	9309      	str	r3, [sp, #36]	; 0x24
 800d5cc:	e76d      	b.n	800d4aa <_svfiprintf_r+0x4a>
 800d5ce:	fb05 3202 	mla	r2, r5, r2, r3
 800d5d2:	2001      	movs	r0, #1
 800d5d4:	460f      	mov	r7, r1
 800d5d6:	e7a6      	b.n	800d526 <_svfiprintf_r+0xc6>
 800d5d8:	2300      	movs	r3, #0
 800d5da:	250a      	movs	r5, #10
 800d5dc:	4619      	mov	r1, r3
 800d5de:	3701      	adds	r7, #1
 800d5e0:	9305      	str	r3, [sp, #20]
 800d5e2:	4638      	mov	r0, r7
 800d5e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5e8:	3a30      	subs	r2, #48	; 0x30
 800d5ea:	2a09      	cmp	r2, #9
 800d5ec:	d903      	bls.n	800d5f6 <_svfiprintf_r+0x196>
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d0c8      	beq.n	800d584 <_svfiprintf_r+0x124>
 800d5f2:	9105      	str	r1, [sp, #20]
 800d5f4:	e7c6      	b.n	800d584 <_svfiprintf_r+0x124>
 800d5f6:	fb05 2101 	mla	r1, r5, r1, r2
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	4607      	mov	r7, r0
 800d5fe:	e7f0      	b.n	800d5e2 <_svfiprintf_r+0x182>
 800d600:	ab03      	add	r3, sp, #12
 800d602:	9300      	str	r3, [sp, #0]
 800d604:	4622      	mov	r2, r4
 800d606:	4b11      	ldr	r3, [pc, #68]	; (800d64c <_svfiprintf_r+0x1ec>)
 800d608:	a904      	add	r1, sp, #16
 800d60a:	4640      	mov	r0, r8
 800d60c:	f7fc f80a 	bl	8009624 <_printf_float>
 800d610:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d614:	4681      	mov	r9, r0
 800d616:	d1d6      	bne.n	800d5c6 <_svfiprintf_r+0x166>
 800d618:	89a3      	ldrh	r3, [r4, #12]
 800d61a:	065b      	lsls	r3, r3, #25
 800d61c:	f53f af35 	bmi.w	800d48a <_svfiprintf_r+0x2a>
 800d620:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d622:	b01d      	add	sp, #116	; 0x74
 800d624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d628:	ab03      	add	r3, sp, #12
 800d62a:	9300      	str	r3, [sp, #0]
 800d62c:	4622      	mov	r2, r4
 800d62e:	4b07      	ldr	r3, [pc, #28]	; (800d64c <_svfiprintf_r+0x1ec>)
 800d630:	a904      	add	r1, sp, #16
 800d632:	4640      	mov	r0, r8
 800d634:	f7fc faa2 	bl	8009b7c <_printf_i>
 800d638:	e7ea      	b.n	800d610 <_svfiprintf_r+0x1b0>
 800d63a:	bf00      	nop
 800d63c:	0800e544 	.word	0x0800e544
 800d640:	0800e54a 	.word	0x0800e54a
 800d644:	0800e54e 	.word	0x0800e54e
 800d648:	08009625 	.word	0x08009625
 800d64c:	0800d3ad 	.word	0x0800d3ad

0800d650 <_sungetc_r>:
 800d650:	b538      	push	{r3, r4, r5, lr}
 800d652:	1c4b      	adds	r3, r1, #1
 800d654:	4614      	mov	r4, r2
 800d656:	d103      	bne.n	800d660 <_sungetc_r+0x10>
 800d658:	f04f 35ff 	mov.w	r5, #4294967295
 800d65c:	4628      	mov	r0, r5
 800d65e:	bd38      	pop	{r3, r4, r5, pc}
 800d660:	8993      	ldrh	r3, [r2, #12]
 800d662:	b2cd      	uxtb	r5, r1
 800d664:	f023 0320 	bic.w	r3, r3, #32
 800d668:	8193      	strh	r3, [r2, #12]
 800d66a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d66c:	6852      	ldr	r2, [r2, #4]
 800d66e:	b18b      	cbz	r3, 800d694 <_sungetc_r+0x44>
 800d670:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d672:	4293      	cmp	r3, r2
 800d674:	dd08      	ble.n	800d688 <_sungetc_r+0x38>
 800d676:	6823      	ldr	r3, [r4, #0]
 800d678:	1e5a      	subs	r2, r3, #1
 800d67a:	6022      	str	r2, [r4, #0]
 800d67c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d680:	6863      	ldr	r3, [r4, #4]
 800d682:	3301      	adds	r3, #1
 800d684:	6063      	str	r3, [r4, #4]
 800d686:	e7e9      	b.n	800d65c <_sungetc_r+0xc>
 800d688:	4621      	mov	r1, r4
 800d68a:	f000 fd13 	bl	800e0b4 <__submore>
 800d68e:	2800      	cmp	r0, #0
 800d690:	d0f1      	beq.n	800d676 <_sungetc_r+0x26>
 800d692:	e7e1      	b.n	800d658 <_sungetc_r+0x8>
 800d694:	6921      	ldr	r1, [r4, #16]
 800d696:	6823      	ldr	r3, [r4, #0]
 800d698:	b151      	cbz	r1, 800d6b0 <_sungetc_r+0x60>
 800d69a:	4299      	cmp	r1, r3
 800d69c:	d208      	bcs.n	800d6b0 <_sungetc_r+0x60>
 800d69e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d6a2:	42a9      	cmp	r1, r5
 800d6a4:	d104      	bne.n	800d6b0 <_sungetc_r+0x60>
 800d6a6:	3b01      	subs	r3, #1
 800d6a8:	3201      	adds	r2, #1
 800d6aa:	6023      	str	r3, [r4, #0]
 800d6ac:	6062      	str	r2, [r4, #4]
 800d6ae:	e7d5      	b.n	800d65c <_sungetc_r+0xc>
 800d6b0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d6b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6b8:	6363      	str	r3, [r4, #52]	; 0x34
 800d6ba:	2303      	movs	r3, #3
 800d6bc:	63a3      	str	r3, [r4, #56]	; 0x38
 800d6be:	4623      	mov	r3, r4
 800d6c0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d6c4:	6023      	str	r3, [r4, #0]
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e7dc      	b.n	800d684 <_sungetc_r+0x34>

0800d6ca <__ssrefill_r>:
 800d6ca:	b510      	push	{r4, lr}
 800d6cc:	460c      	mov	r4, r1
 800d6ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d6d0:	b169      	cbz	r1, 800d6ee <__ssrefill_r+0x24>
 800d6d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6d6:	4299      	cmp	r1, r3
 800d6d8:	d001      	beq.n	800d6de <__ssrefill_r+0x14>
 800d6da:	f7ff fdc1 	bl	800d260 <_free_r>
 800d6de:	2000      	movs	r0, #0
 800d6e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6e2:	6360      	str	r0, [r4, #52]	; 0x34
 800d6e4:	6063      	str	r3, [r4, #4]
 800d6e6:	b113      	cbz	r3, 800d6ee <__ssrefill_r+0x24>
 800d6e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d6ea:	6023      	str	r3, [r4, #0]
 800d6ec:	bd10      	pop	{r4, pc}
 800d6ee:	6923      	ldr	r3, [r4, #16]
 800d6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f4:	6023      	str	r3, [r4, #0]
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	6063      	str	r3, [r4, #4]
 800d6fa:	89a3      	ldrh	r3, [r4, #12]
 800d6fc:	f043 0320 	orr.w	r3, r3, #32
 800d700:	81a3      	strh	r3, [r4, #12]
 800d702:	e7f3      	b.n	800d6ec <__ssrefill_r+0x22>

0800d704 <__ssvfiscanf_r>:
 800d704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d708:	460c      	mov	r4, r1
 800d70a:	2100      	movs	r1, #0
 800d70c:	4606      	mov	r6, r0
 800d70e:	4692      	mov	sl, r2
 800d710:	270a      	movs	r7, #10
 800d712:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800d716:	9144      	str	r1, [sp, #272]	; 0x110
 800d718:	9145      	str	r1, [sp, #276]	; 0x114
 800d71a:	499e      	ldr	r1, [pc, #632]	; (800d994 <__ssvfiscanf_r+0x290>)
 800d71c:	f10d 0804 	add.w	r8, sp, #4
 800d720:	91a0      	str	r1, [sp, #640]	; 0x280
 800d722:	499d      	ldr	r1, [pc, #628]	; (800d998 <__ssvfiscanf_r+0x294>)
 800d724:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800d99c <__ssvfiscanf_r+0x298>
 800d728:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d72c:	91a1      	str	r1, [sp, #644]	; 0x284
 800d72e:	9300      	str	r3, [sp, #0]
 800d730:	f89a 3000 	ldrb.w	r3, [sl]
 800d734:	2b00      	cmp	r3, #0
 800d736:	f000 812a 	beq.w	800d98e <__ssvfiscanf_r+0x28a>
 800d73a:	4655      	mov	r5, sl
 800d73c:	f7ff f8c2 	bl	800c8c4 <__locale_ctype_ptr>
 800d740:	f815 bb01 	ldrb.w	fp, [r5], #1
 800d744:	4458      	add	r0, fp
 800d746:	7843      	ldrb	r3, [r0, #1]
 800d748:	f013 0308 	ands.w	r3, r3, #8
 800d74c:	d01c      	beq.n	800d788 <__ssvfiscanf_r+0x84>
 800d74e:	6863      	ldr	r3, [r4, #4]
 800d750:	2b00      	cmp	r3, #0
 800d752:	dd12      	ble.n	800d77a <__ssvfiscanf_r+0x76>
 800d754:	f7ff f8b6 	bl	800c8c4 <__locale_ctype_ptr>
 800d758:	6823      	ldr	r3, [r4, #0]
 800d75a:	781a      	ldrb	r2, [r3, #0]
 800d75c:	4410      	add	r0, r2
 800d75e:	7842      	ldrb	r2, [r0, #1]
 800d760:	0712      	lsls	r2, r2, #28
 800d762:	d401      	bmi.n	800d768 <__ssvfiscanf_r+0x64>
 800d764:	46aa      	mov	sl, r5
 800d766:	e7e3      	b.n	800d730 <__ssvfiscanf_r+0x2c>
 800d768:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d76a:	3301      	adds	r3, #1
 800d76c:	3201      	adds	r2, #1
 800d76e:	9245      	str	r2, [sp, #276]	; 0x114
 800d770:	6862      	ldr	r2, [r4, #4]
 800d772:	6023      	str	r3, [r4, #0]
 800d774:	3a01      	subs	r2, #1
 800d776:	6062      	str	r2, [r4, #4]
 800d778:	e7e9      	b.n	800d74e <__ssvfiscanf_r+0x4a>
 800d77a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d77c:	4621      	mov	r1, r4
 800d77e:	4630      	mov	r0, r6
 800d780:	4798      	blx	r3
 800d782:	2800      	cmp	r0, #0
 800d784:	d0e6      	beq.n	800d754 <__ssvfiscanf_r+0x50>
 800d786:	e7ed      	b.n	800d764 <__ssvfiscanf_r+0x60>
 800d788:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800d78c:	f040 8082 	bne.w	800d894 <__ssvfiscanf_r+0x190>
 800d790:	9343      	str	r3, [sp, #268]	; 0x10c
 800d792:	9341      	str	r3, [sp, #260]	; 0x104
 800d794:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800d798:	2b2a      	cmp	r3, #42	; 0x2a
 800d79a:	d103      	bne.n	800d7a4 <__ssvfiscanf_r+0xa0>
 800d79c:	2310      	movs	r3, #16
 800d79e:	f10a 0502 	add.w	r5, sl, #2
 800d7a2:	9341      	str	r3, [sp, #260]	; 0x104
 800d7a4:	46aa      	mov	sl, r5
 800d7a6:	f815 1b01 	ldrb.w	r1, [r5], #1
 800d7aa:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800d7ae:	2a09      	cmp	r2, #9
 800d7b0:	d922      	bls.n	800d7f8 <__ssvfiscanf_r+0xf4>
 800d7b2:	2203      	movs	r2, #3
 800d7b4:	4879      	ldr	r0, [pc, #484]	; (800d99c <__ssvfiscanf_r+0x298>)
 800d7b6:	f7ff f933 	bl	800ca20 <memchr>
 800d7ba:	b138      	cbz	r0, 800d7cc <__ssvfiscanf_r+0xc8>
 800d7bc:	eba0 0309 	sub.w	r3, r0, r9
 800d7c0:	2001      	movs	r0, #1
 800d7c2:	46aa      	mov	sl, r5
 800d7c4:	4098      	lsls	r0, r3
 800d7c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d7c8:	4318      	orrs	r0, r3
 800d7ca:	9041      	str	r0, [sp, #260]	; 0x104
 800d7cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d7d0:	f10a 0501 	add.w	r5, sl, #1
 800d7d4:	2b67      	cmp	r3, #103	; 0x67
 800d7d6:	d82b      	bhi.n	800d830 <__ssvfiscanf_r+0x12c>
 800d7d8:	2b65      	cmp	r3, #101	; 0x65
 800d7da:	f080 809f 	bcs.w	800d91c <__ssvfiscanf_r+0x218>
 800d7de:	2b47      	cmp	r3, #71	; 0x47
 800d7e0:	d810      	bhi.n	800d804 <__ssvfiscanf_r+0x100>
 800d7e2:	2b45      	cmp	r3, #69	; 0x45
 800d7e4:	f080 809a 	bcs.w	800d91c <__ssvfiscanf_r+0x218>
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d06c      	beq.n	800d8c6 <__ssvfiscanf_r+0x1c2>
 800d7ec:	2b25      	cmp	r3, #37	; 0x25
 800d7ee:	d051      	beq.n	800d894 <__ssvfiscanf_r+0x190>
 800d7f0:	2303      	movs	r3, #3
 800d7f2:	9742      	str	r7, [sp, #264]	; 0x108
 800d7f4:	9347      	str	r3, [sp, #284]	; 0x11c
 800d7f6:	e027      	b.n	800d848 <__ssvfiscanf_r+0x144>
 800d7f8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d7fa:	fb07 1303 	mla	r3, r7, r3, r1
 800d7fe:	3b30      	subs	r3, #48	; 0x30
 800d800:	9343      	str	r3, [sp, #268]	; 0x10c
 800d802:	e7cf      	b.n	800d7a4 <__ssvfiscanf_r+0xa0>
 800d804:	2b5b      	cmp	r3, #91	; 0x5b
 800d806:	d06a      	beq.n	800d8de <__ssvfiscanf_r+0x1da>
 800d808:	d80c      	bhi.n	800d824 <__ssvfiscanf_r+0x120>
 800d80a:	2b58      	cmp	r3, #88	; 0x58
 800d80c:	d1f0      	bne.n	800d7f0 <__ssvfiscanf_r+0xec>
 800d80e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d814:	9241      	str	r2, [sp, #260]	; 0x104
 800d816:	2210      	movs	r2, #16
 800d818:	9242      	str	r2, [sp, #264]	; 0x108
 800d81a:	2b6e      	cmp	r3, #110	; 0x6e
 800d81c:	bf8c      	ite	hi
 800d81e:	2304      	movhi	r3, #4
 800d820:	2303      	movls	r3, #3
 800d822:	e010      	b.n	800d846 <__ssvfiscanf_r+0x142>
 800d824:	2b63      	cmp	r3, #99	; 0x63
 800d826:	d065      	beq.n	800d8f4 <__ssvfiscanf_r+0x1f0>
 800d828:	2b64      	cmp	r3, #100	; 0x64
 800d82a:	d1e1      	bne.n	800d7f0 <__ssvfiscanf_r+0xec>
 800d82c:	9742      	str	r7, [sp, #264]	; 0x108
 800d82e:	e7f4      	b.n	800d81a <__ssvfiscanf_r+0x116>
 800d830:	2b70      	cmp	r3, #112	; 0x70
 800d832:	d04b      	beq.n	800d8cc <__ssvfiscanf_r+0x1c8>
 800d834:	d826      	bhi.n	800d884 <__ssvfiscanf_r+0x180>
 800d836:	2b6e      	cmp	r3, #110	; 0x6e
 800d838:	d062      	beq.n	800d900 <__ssvfiscanf_r+0x1fc>
 800d83a:	d84c      	bhi.n	800d8d6 <__ssvfiscanf_r+0x1d2>
 800d83c:	2b69      	cmp	r3, #105	; 0x69
 800d83e:	d1d7      	bne.n	800d7f0 <__ssvfiscanf_r+0xec>
 800d840:	2300      	movs	r3, #0
 800d842:	9342      	str	r3, [sp, #264]	; 0x108
 800d844:	2303      	movs	r3, #3
 800d846:	9347      	str	r3, [sp, #284]	; 0x11c
 800d848:	6863      	ldr	r3, [r4, #4]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	dd68      	ble.n	800d920 <__ssvfiscanf_r+0x21c>
 800d84e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d850:	0659      	lsls	r1, r3, #25
 800d852:	d407      	bmi.n	800d864 <__ssvfiscanf_r+0x160>
 800d854:	f7ff f836 	bl	800c8c4 <__locale_ctype_ptr>
 800d858:	6823      	ldr	r3, [r4, #0]
 800d85a:	781a      	ldrb	r2, [r3, #0]
 800d85c:	4410      	add	r0, r2
 800d85e:	7842      	ldrb	r2, [r0, #1]
 800d860:	0712      	lsls	r2, r2, #28
 800d862:	d464      	bmi.n	800d92e <__ssvfiscanf_r+0x22a>
 800d864:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d866:	2b02      	cmp	r3, #2
 800d868:	dc73      	bgt.n	800d952 <__ssvfiscanf_r+0x24e>
 800d86a:	466b      	mov	r3, sp
 800d86c:	4622      	mov	r2, r4
 800d86e:	a941      	add	r1, sp, #260	; 0x104
 800d870:	4630      	mov	r0, r6
 800d872:	f000 f9d5 	bl	800dc20 <_scanf_chars>
 800d876:	2801      	cmp	r0, #1
 800d878:	f000 8089 	beq.w	800d98e <__ssvfiscanf_r+0x28a>
 800d87c:	2802      	cmp	r0, #2
 800d87e:	f47f af71 	bne.w	800d764 <__ssvfiscanf_r+0x60>
 800d882:	e01d      	b.n	800d8c0 <__ssvfiscanf_r+0x1bc>
 800d884:	2b75      	cmp	r3, #117	; 0x75
 800d886:	d0d1      	beq.n	800d82c <__ssvfiscanf_r+0x128>
 800d888:	2b78      	cmp	r3, #120	; 0x78
 800d88a:	d0c0      	beq.n	800d80e <__ssvfiscanf_r+0x10a>
 800d88c:	2b73      	cmp	r3, #115	; 0x73
 800d88e:	d1af      	bne.n	800d7f0 <__ssvfiscanf_r+0xec>
 800d890:	2302      	movs	r3, #2
 800d892:	e7d8      	b.n	800d846 <__ssvfiscanf_r+0x142>
 800d894:	6863      	ldr	r3, [r4, #4]
 800d896:	2b00      	cmp	r3, #0
 800d898:	dd0c      	ble.n	800d8b4 <__ssvfiscanf_r+0x1b0>
 800d89a:	6823      	ldr	r3, [r4, #0]
 800d89c:	781a      	ldrb	r2, [r3, #0]
 800d89e:	455a      	cmp	r2, fp
 800d8a0:	d175      	bne.n	800d98e <__ssvfiscanf_r+0x28a>
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	6862      	ldr	r2, [r4, #4]
 800d8a6:	6023      	str	r3, [r4, #0]
 800d8a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d8aa:	3a01      	subs	r2, #1
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	6062      	str	r2, [r4, #4]
 800d8b0:	9345      	str	r3, [sp, #276]	; 0x114
 800d8b2:	e757      	b.n	800d764 <__ssvfiscanf_r+0x60>
 800d8b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	4630      	mov	r0, r6
 800d8ba:	4798      	blx	r3
 800d8bc:	2800      	cmp	r0, #0
 800d8be:	d0ec      	beq.n	800d89a <__ssvfiscanf_r+0x196>
 800d8c0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d8c2:	2800      	cmp	r0, #0
 800d8c4:	d159      	bne.n	800d97a <__ssvfiscanf_r+0x276>
 800d8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ca:	e05c      	b.n	800d986 <__ssvfiscanf_r+0x282>
 800d8cc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d8ce:	f042 0220 	orr.w	r2, r2, #32
 800d8d2:	9241      	str	r2, [sp, #260]	; 0x104
 800d8d4:	e79b      	b.n	800d80e <__ssvfiscanf_r+0x10a>
 800d8d6:	2308      	movs	r3, #8
 800d8d8:	9342      	str	r3, [sp, #264]	; 0x108
 800d8da:	2304      	movs	r3, #4
 800d8dc:	e7b3      	b.n	800d846 <__ssvfiscanf_r+0x142>
 800d8de:	4629      	mov	r1, r5
 800d8e0:	4640      	mov	r0, r8
 800d8e2:	f000 fb17 	bl	800df14 <__sccl>
 800d8e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d8e8:	4605      	mov	r5, r0
 800d8ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8ee:	9341      	str	r3, [sp, #260]	; 0x104
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e7a8      	b.n	800d846 <__ssvfiscanf_r+0x142>
 800d8f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d8f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8fa:	9341      	str	r3, [sp, #260]	; 0x104
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	e7a2      	b.n	800d846 <__ssvfiscanf_r+0x142>
 800d900:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d902:	06c3      	lsls	r3, r0, #27
 800d904:	f53f af2e 	bmi.w	800d764 <__ssvfiscanf_r+0x60>
 800d908:	9b00      	ldr	r3, [sp, #0]
 800d90a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d90c:	1d19      	adds	r1, r3, #4
 800d90e:	9100      	str	r1, [sp, #0]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	07c0      	lsls	r0, r0, #31
 800d914:	bf4c      	ite	mi
 800d916:	801a      	strhmi	r2, [r3, #0]
 800d918:	601a      	strpl	r2, [r3, #0]
 800d91a:	e723      	b.n	800d764 <__ssvfiscanf_r+0x60>
 800d91c:	2305      	movs	r3, #5
 800d91e:	e792      	b.n	800d846 <__ssvfiscanf_r+0x142>
 800d920:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d922:	4621      	mov	r1, r4
 800d924:	4630      	mov	r0, r6
 800d926:	4798      	blx	r3
 800d928:	2800      	cmp	r0, #0
 800d92a:	d090      	beq.n	800d84e <__ssvfiscanf_r+0x14a>
 800d92c:	e7c8      	b.n	800d8c0 <__ssvfiscanf_r+0x1bc>
 800d92e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d930:	3201      	adds	r2, #1
 800d932:	9245      	str	r2, [sp, #276]	; 0x114
 800d934:	6862      	ldr	r2, [r4, #4]
 800d936:	3a01      	subs	r2, #1
 800d938:	2a00      	cmp	r2, #0
 800d93a:	6062      	str	r2, [r4, #4]
 800d93c:	dd02      	ble.n	800d944 <__ssvfiscanf_r+0x240>
 800d93e:	3301      	adds	r3, #1
 800d940:	6023      	str	r3, [r4, #0]
 800d942:	e787      	b.n	800d854 <__ssvfiscanf_r+0x150>
 800d944:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d946:	4621      	mov	r1, r4
 800d948:	4630      	mov	r0, r6
 800d94a:	4798      	blx	r3
 800d94c:	2800      	cmp	r0, #0
 800d94e:	d081      	beq.n	800d854 <__ssvfiscanf_r+0x150>
 800d950:	e7b6      	b.n	800d8c0 <__ssvfiscanf_r+0x1bc>
 800d952:	2b04      	cmp	r3, #4
 800d954:	dc06      	bgt.n	800d964 <__ssvfiscanf_r+0x260>
 800d956:	466b      	mov	r3, sp
 800d958:	4622      	mov	r2, r4
 800d95a:	a941      	add	r1, sp, #260	; 0x104
 800d95c:	4630      	mov	r0, r6
 800d95e:	f000 f9c1 	bl	800dce4 <_scanf_i>
 800d962:	e788      	b.n	800d876 <__ssvfiscanf_r+0x172>
 800d964:	4b0e      	ldr	r3, [pc, #56]	; (800d9a0 <__ssvfiscanf_r+0x29c>)
 800d966:	2b00      	cmp	r3, #0
 800d968:	f43f aefc 	beq.w	800d764 <__ssvfiscanf_r+0x60>
 800d96c:	466b      	mov	r3, sp
 800d96e:	4622      	mov	r2, r4
 800d970:	a941      	add	r1, sp, #260	; 0x104
 800d972:	4630      	mov	r0, r6
 800d974:	f7fc fa14 	bl	8009da0 <_scanf_float>
 800d978:	e77d      	b.n	800d876 <__ssvfiscanf_r+0x172>
 800d97a:	89a3      	ldrh	r3, [r4, #12]
 800d97c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d980:	bf18      	it	ne
 800d982:	f04f 30ff 	movne.w	r0, #4294967295
 800d986:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800d98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d98e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d990:	e7f9      	b.n	800d986 <__ssvfiscanf_r+0x282>
 800d992:	bf00      	nop
 800d994:	0800d651 	.word	0x0800d651
 800d998:	0800d6cb 	.word	0x0800d6cb
 800d99c:	0800e54a 	.word	0x0800e54a
 800d9a0:	08009da1 	.word	0x08009da1

0800d9a4 <__sfputc_r>:
 800d9a4:	6893      	ldr	r3, [r2, #8]
 800d9a6:	b410      	push	{r4}
 800d9a8:	3b01      	subs	r3, #1
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	6093      	str	r3, [r2, #8]
 800d9ae:	da07      	bge.n	800d9c0 <__sfputc_r+0x1c>
 800d9b0:	6994      	ldr	r4, [r2, #24]
 800d9b2:	42a3      	cmp	r3, r4
 800d9b4:	db01      	blt.n	800d9ba <__sfputc_r+0x16>
 800d9b6:	290a      	cmp	r1, #10
 800d9b8:	d102      	bne.n	800d9c0 <__sfputc_r+0x1c>
 800d9ba:	bc10      	pop	{r4}
 800d9bc:	f7fd bbb6 	b.w	800b12c <__swbuf_r>
 800d9c0:	6813      	ldr	r3, [r2, #0]
 800d9c2:	1c58      	adds	r0, r3, #1
 800d9c4:	6010      	str	r0, [r2, #0]
 800d9c6:	7019      	strb	r1, [r3, #0]
 800d9c8:	4608      	mov	r0, r1
 800d9ca:	bc10      	pop	{r4}
 800d9cc:	4770      	bx	lr

0800d9ce <__sfputs_r>:
 800d9ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d0:	4606      	mov	r6, r0
 800d9d2:	460f      	mov	r7, r1
 800d9d4:	4614      	mov	r4, r2
 800d9d6:	18d5      	adds	r5, r2, r3
 800d9d8:	42ac      	cmp	r4, r5
 800d9da:	d101      	bne.n	800d9e0 <__sfputs_r+0x12>
 800d9dc:	2000      	movs	r0, #0
 800d9de:	e007      	b.n	800d9f0 <__sfputs_r+0x22>
 800d9e0:	463a      	mov	r2, r7
 800d9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9e6:	4630      	mov	r0, r6
 800d9e8:	f7ff ffdc 	bl	800d9a4 <__sfputc_r>
 800d9ec:	1c43      	adds	r3, r0, #1
 800d9ee:	d1f3      	bne.n	800d9d8 <__sfputs_r+0xa>
 800d9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d9f4 <_vfiprintf_r>:
 800d9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f8:	460c      	mov	r4, r1
 800d9fa:	b09d      	sub	sp, #116	; 0x74
 800d9fc:	4617      	mov	r7, r2
 800d9fe:	461d      	mov	r5, r3
 800da00:	4606      	mov	r6, r0
 800da02:	b118      	cbz	r0, 800da0c <_vfiprintf_r+0x18>
 800da04:	6983      	ldr	r3, [r0, #24]
 800da06:	b90b      	cbnz	r3, 800da0c <_vfiprintf_r+0x18>
 800da08:	f7fe fba6 	bl	800c158 <__sinit>
 800da0c:	4b7c      	ldr	r3, [pc, #496]	; (800dc00 <_vfiprintf_r+0x20c>)
 800da0e:	429c      	cmp	r4, r3
 800da10:	d158      	bne.n	800dac4 <_vfiprintf_r+0xd0>
 800da12:	6874      	ldr	r4, [r6, #4]
 800da14:	89a3      	ldrh	r3, [r4, #12]
 800da16:	0718      	lsls	r0, r3, #28
 800da18:	d55e      	bpl.n	800dad8 <_vfiprintf_r+0xe4>
 800da1a:	6923      	ldr	r3, [r4, #16]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d05b      	beq.n	800dad8 <_vfiprintf_r+0xe4>
 800da20:	2300      	movs	r3, #0
 800da22:	9309      	str	r3, [sp, #36]	; 0x24
 800da24:	2320      	movs	r3, #32
 800da26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da2a:	2330      	movs	r3, #48	; 0x30
 800da2c:	f04f 0b01 	mov.w	fp, #1
 800da30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da34:	9503      	str	r5, [sp, #12]
 800da36:	46b8      	mov	r8, r7
 800da38:	4645      	mov	r5, r8
 800da3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800da3e:	b10b      	cbz	r3, 800da44 <_vfiprintf_r+0x50>
 800da40:	2b25      	cmp	r3, #37	; 0x25
 800da42:	d154      	bne.n	800daee <_vfiprintf_r+0xfa>
 800da44:	ebb8 0a07 	subs.w	sl, r8, r7
 800da48:	d00b      	beq.n	800da62 <_vfiprintf_r+0x6e>
 800da4a:	4653      	mov	r3, sl
 800da4c:	463a      	mov	r2, r7
 800da4e:	4621      	mov	r1, r4
 800da50:	4630      	mov	r0, r6
 800da52:	f7ff ffbc 	bl	800d9ce <__sfputs_r>
 800da56:	3001      	adds	r0, #1
 800da58:	f000 80c2 	beq.w	800dbe0 <_vfiprintf_r+0x1ec>
 800da5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da5e:	4453      	add	r3, sl
 800da60:	9309      	str	r3, [sp, #36]	; 0x24
 800da62:	f898 3000 	ldrb.w	r3, [r8]
 800da66:	2b00      	cmp	r3, #0
 800da68:	f000 80ba 	beq.w	800dbe0 <_vfiprintf_r+0x1ec>
 800da6c:	2300      	movs	r3, #0
 800da6e:	f04f 32ff 	mov.w	r2, #4294967295
 800da72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da76:	9304      	str	r3, [sp, #16]
 800da78:	9307      	str	r3, [sp, #28]
 800da7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da7e:	931a      	str	r3, [sp, #104]	; 0x68
 800da80:	46a8      	mov	r8, r5
 800da82:	2205      	movs	r2, #5
 800da84:	f818 1b01 	ldrb.w	r1, [r8], #1
 800da88:	485e      	ldr	r0, [pc, #376]	; (800dc04 <_vfiprintf_r+0x210>)
 800da8a:	f7fe ffc9 	bl	800ca20 <memchr>
 800da8e:	9b04      	ldr	r3, [sp, #16]
 800da90:	bb78      	cbnz	r0, 800daf2 <_vfiprintf_r+0xfe>
 800da92:	06d9      	lsls	r1, r3, #27
 800da94:	bf44      	itt	mi
 800da96:	2220      	movmi	r2, #32
 800da98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800da9c:	071a      	lsls	r2, r3, #28
 800da9e:	bf44      	itt	mi
 800daa0:	222b      	movmi	r2, #43	; 0x2b
 800daa2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800daa6:	782a      	ldrb	r2, [r5, #0]
 800daa8:	2a2a      	cmp	r2, #42	; 0x2a
 800daaa:	d02a      	beq.n	800db02 <_vfiprintf_r+0x10e>
 800daac:	46a8      	mov	r8, r5
 800daae:	2000      	movs	r0, #0
 800dab0:	250a      	movs	r5, #10
 800dab2:	9a07      	ldr	r2, [sp, #28]
 800dab4:	4641      	mov	r1, r8
 800dab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800daba:	3b30      	subs	r3, #48	; 0x30
 800dabc:	2b09      	cmp	r3, #9
 800dabe:	d969      	bls.n	800db94 <_vfiprintf_r+0x1a0>
 800dac0:	b360      	cbz	r0, 800db1c <_vfiprintf_r+0x128>
 800dac2:	e024      	b.n	800db0e <_vfiprintf_r+0x11a>
 800dac4:	4b50      	ldr	r3, [pc, #320]	; (800dc08 <_vfiprintf_r+0x214>)
 800dac6:	429c      	cmp	r4, r3
 800dac8:	d101      	bne.n	800dace <_vfiprintf_r+0xda>
 800daca:	68b4      	ldr	r4, [r6, #8]
 800dacc:	e7a2      	b.n	800da14 <_vfiprintf_r+0x20>
 800dace:	4b4f      	ldr	r3, [pc, #316]	; (800dc0c <_vfiprintf_r+0x218>)
 800dad0:	429c      	cmp	r4, r3
 800dad2:	bf08      	it	eq
 800dad4:	68f4      	ldreq	r4, [r6, #12]
 800dad6:	e79d      	b.n	800da14 <_vfiprintf_r+0x20>
 800dad8:	4621      	mov	r1, r4
 800dada:	4630      	mov	r0, r6
 800dadc:	f7fd fb8a 	bl	800b1f4 <__swsetup_r>
 800dae0:	2800      	cmp	r0, #0
 800dae2:	d09d      	beq.n	800da20 <_vfiprintf_r+0x2c>
 800dae4:	f04f 30ff 	mov.w	r0, #4294967295
 800dae8:	b01d      	add	sp, #116	; 0x74
 800daea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daee:	46a8      	mov	r8, r5
 800daf0:	e7a2      	b.n	800da38 <_vfiprintf_r+0x44>
 800daf2:	4a44      	ldr	r2, [pc, #272]	; (800dc04 <_vfiprintf_r+0x210>)
 800daf4:	4645      	mov	r5, r8
 800daf6:	1a80      	subs	r0, r0, r2
 800daf8:	fa0b f000 	lsl.w	r0, fp, r0
 800dafc:	4318      	orrs	r0, r3
 800dafe:	9004      	str	r0, [sp, #16]
 800db00:	e7be      	b.n	800da80 <_vfiprintf_r+0x8c>
 800db02:	9a03      	ldr	r2, [sp, #12]
 800db04:	1d11      	adds	r1, r2, #4
 800db06:	6812      	ldr	r2, [r2, #0]
 800db08:	9103      	str	r1, [sp, #12]
 800db0a:	2a00      	cmp	r2, #0
 800db0c:	db01      	blt.n	800db12 <_vfiprintf_r+0x11e>
 800db0e:	9207      	str	r2, [sp, #28]
 800db10:	e004      	b.n	800db1c <_vfiprintf_r+0x128>
 800db12:	4252      	negs	r2, r2
 800db14:	f043 0302 	orr.w	r3, r3, #2
 800db18:	9207      	str	r2, [sp, #28]
 800db1a:	9304      	str	r3, [sp, #16]
 800db1c:	f898 3000 	ldrb.w	r3, [r8]
 800db20:	2b2e      	cmp	r3, #46	; 0x2e
 800db22:	d10e      	bne.n	800db42 <_vfiprintf_r+0x14e>
 800db24:	f898 3001 	ldrb.w	r3, [r8, #1]
 800db28:	2b2a      	cmp	r3, #42	; 0x2a
 800db2a:	d138      	bne.n	800db9e <_vfiprintf_r+0x1aa>
 800db2c:	9b03      	ldr	r3, [sp, #12]
 800db2e:	f108 0802 	add.w	r8, r8, #2
 800db32:	1d1a      	adds	r2, r3, #4
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	9203      	str	r2, [sp, #12]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	bfb8      	it	lt
 800db3c:	f04f 33ff 	movlt.w	r3, #4294967295
 800db40:	9305      	str	r3, [sp, #20]
 800db42:	4d33      	ldr	r5, [pc, #204]	; (800dc10 <_vfiprintf_r+0x21c>)
 800db44:	2203      	movs	r2, #3
 800db46:	f898 1000 	ldrb.w	r1, [r8]
 800db4a:	4628      	mov	r0, r5
 800db4c:	f7fe ff68 	bl	800ca20 <memchr>
 800db50:	b140      	cbz	r0, 800db64 <_vfiprintf_r+0x170>
 800db52:	2340      	movs	r3, #64	; 0x40
 800db54:	1b40      	subs	r0, r0, r5
 800db56:	fa03 f000 	lsl.w	r0, r3, r0
 800db5a:	9b04      	ldr	r3, [sp, #16]
 800db5c:	f108 0801 	add.w	r8, r8, #1
 800db60:	4303      	orrs	r3, r0
 800db62:	9304      	str	r3, [sp, #16]
 800db64:	f898 1000 	ldrb.w	r1, [r8]
 800db68:	2206      	movs	r2, #6
 800db6a:	482a      	ldr	r0, [pc, #168]	; (800dc14 <_vfiprintf_r+0x220>)
 800db6c:	f108 0701 	add.w	r7, r8, #1
 800db70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db74:	f7fe ff54 	bl	800ca20 <memchr>
 800db78:	2800      	cmp	r0, #0
 800db7a:	d037      	beq.n	800dbec <_vfiprintf_r+0x1f8>
 800db7c:	4b26      	ldr	r3, [pc, #152]	; (800dc18 <_vfiprintf_r+0x224>)
 800db7e:	bb1b      	cbnz	r3, 800dbc8 <_vfiprintf_r+0x1d4>
 800db80:	9b03      	ldr	r3, [sp, #12]
 800db82:	3307      	adds	r3, #7
 800db84:	f023 0307 	bic.w	r3, r3, #7
 800db88:	3308      	adds	r3, #8
 800db8a:	9303      	str	r3, [sp, #12]
 800db8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db8e:	444b      	add	r3, r9
 800db90:	9309      	str	r3, [sp, #36]	; 0x24
 800db92:	e750      	b.n	800da36 <_vfiprintf_r+0x42>
 800db94:	fb05 3202 	mla	r2, r5, r2, r3
 800db98:	2001      	movs	r0, #1
 800db9a:	4688      	mov	r8, r1
 800db9c:	e78a      	b.n	800dab4 <_vfiprintf_r+0xc0>
 800db9e:	2300      	movs	r3, #0
 800dba0:	250a      	movs	r5, #10
 800dba2:	4619      	mov	r1, r3
 800dba4:	f108 0801 	add.w	r8, r8, #1
 800dba8:	9305      	str	r3, [sp, #20]
 800dbaa:	4640      	mov	r0, r8
 800dbac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbb0:	3a30      	subs	r2, #48	; 0x30
 800dbb2:	2a09      	cmp	r2, #9
 800dbb4:	d903      	bls.n	800dbbe <_vfiprintf_r+0x1ca>
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d0c3      	beq.n	800db42 <_vfiprintf_r+0x14e>
 800dbba:	9105      	str	r1, [sp, #20]
 800dbbc:	e7c1      	b.n	800db42 <_vfiprintf_r+0x14e>
 800dbbe:	fb05 2101 	mla	r1, r5, r1, r2
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	4680      	mov	r8, r0
 800dbc6:	e7f0      	b.n	800dbaa <_vfiprintf_r+0x1b6>
 800dbc8:	ab03      	add	r3, sp, #12
 800dbca:	9300      	str	r3, [sp, #0]
 800dbcc:	4622      	mov	r2, r4
 800dbce:	4b13      	ldr	r3, [pc, #76]	; (800dc1c <_vfiprintf_r+0x228>)
 800dbd0:	a904      	add	r1, sp, #16
 800dbd2:	4630      	mov	r0, r6
 800dbd4:	f7fb fd26 	bl	8009624 <_printf_float>
 800dbd8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dbdc:	4681      	mov	r9, r0
 800dbde:	d1d5      	bne.n	800db8c <_vfiprintf_r+0x198>
 800dbe0:	89a3      	ldrh	r3, [r4, #12]
 800dbe2:	065b      	lsls	r3, r3, #25
 800dbe4:	f53f af7e 	bmi.w	800dae4 <_vfiprintf_r+0xf0>
 800dbe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbea:	e77d      	b.n	800dae8 <_vfiprintf_r+0xf4>
 800dbec:	ab03      	add	r3, sp, #12
 800dbee:	9300      	str	r3, [sp, #0]
 800dbf0:	4622      	mov	r2, r4
 800dbf2:	4b0a      	ldr	r3, [pc, #40]	; (800dc1c <_vfiprintf_r+0x228>)
 800dbf4:	a904      	add	r1, sp, #16
 800dbf6:	4630      	mov	r0, r6
 800dbf8:	f7fb ffc0 	bl	8009b7c <_printf_i>
 800dbfc:	e7ec      	b.n	800dbd8 <_vfiprintf_r+0x1e4>
 800dbfe:	bf00      	nop
 800dc00:	0800e3f8 	.word	0x0800e3f8
 800dc04:	0800e544 	.word	0x0800e544
 800dc08:	0800e418 	.word	0x0800e418
 800dc0c:	0800e3d8 	.word	0x0800e3d8
 800dc10:	0800e54a 	.word	0x0800e54a
 800dc14:	0800e54e 	.word	0x0800e54e
 800dc18:	08009625 	.word	0x08009625
 800dc1c:	0800d9cf 	.word	0x0800d9cf

0800dc20 <_scanf_chars>:
 800dc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc24:	4615      	mov	r5, r2
 800dc26:	688a      	ldr	r2, [r1, #8]
 800dc28:	4680      	mov	r8, r0
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	b932      	cbnz	r2, 800dc3c <_scanf_chars+0x1c>
 800dc2e:	698a      	ldr	r2, [r1, #24]
 800dc30:	2a00      	cmp	r2, #0
 800dc32:	bf14      	ite	ne
 800dc34:	f04f 32ff 	movne.w	r2, #4294967295
 800dc38:	2201      	moveq	r2, #1
 800dc3a:	608a      	str	r2, [r1, #8]
 800dc3c:	2600      	movs	r6, #0
 800dc3e:	6822      	ldr	r2, [r4, #0]
 800dc40:	06d1      	lsls	r1, r2, #27
 800dc42:	bf5f      	itttt	pl
 800dc44:	681a      	ldrpl	r2, [r3, #0]
 800dc46:	1d11      	addpl	r1, r2, #4
 800dc48:	6019      	strpl	r1, [r3, #0]
 800dc4a:	6817      	ldrpl	r7, [r2, #0]
 800dc4c:	69a3      	ldr	r3, [r4, #24]
 800dc4e:	b1db      	cbz	r3, 800dc88 <_scanf_chars+0x68>
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d107      	bne.n	800dc64 <_scanf_chars+0x44>
 800dc54:	682b      	ldr	r3, [r5, #0]
 800dc56:	6962      	ldr	r2, [r4, #20]
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	5cd3      	ldrb	r3, [r2, r3]
 800dc5c:	b9a3      	cbnz	r3, 800dc88 <_scanf_chars+0x68>
 800dc5e:	2e00      	cmp	r6, #0
 800dc60:	d131      	bne.n	800dcc6 <_scanf_chars+0xa6>
 800dc62:	e006      	b.n	800dc72 <_scanf_chars+0x52>
 800dc64:	2b02      	cmp	r3, #2
 800dc66:	d007      	beq.n	800dc78 <_scanf_chars+0x58>
 800dc68:	2e00      	cmp	r6, #0
 800dc6a:	d12c      	bne.n	800dcc6 <_scanf_chars+0xa6>
 800dc6c:	69a3      	ldr	r3, [r4, #24]
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d129      	bne.n	800dcc6 <_scanf_chars+0xa6>
 800dc72:	2001      	movs	r0, #1
 800dc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc78:	f7fe fe24 	bl	800c8c4 <__locale_ctype_ptr>
 800dc7c:	682b      	ldr	r3, [r5, #0]
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	4418      	add	r0, r3
 800dc82:	7843      	ldrb	r3, [r0, #1]
 800dc84:	071b      	lsls	r3, r3, #28
 800dc86:	d4ef      	bmi.n	800dc68 <_scanf_chars+0x48>
 800dc88:	6823      	ldr	r3, [r4, #0]
 800dc8a:	3601      	adds	r6, #1
 800dc8c:	06da      	lsls	r2, r3, #27
 800dc8e:	bf5e      	ittt	pl
 800dc90:	682b      	ldrpl	r3, [r5, #0]
 800dc92:	781b      	ldrbpl	r3, [r3, #0]
 800dc94:	703b      	strbpl	r3, [r7, #0]
 800dc96:	682a      	ldr	r2, [r5, #0]
 800dc98:	686b      	ldr	r3, [r5, #4]
 800dc9a:	f102 0201 	add.w	r2, r2, #1
 800dc9e:	602a      	str	r2, [r5, #0]
 800dca0:	68a2      	ldr	r2, [r4, #8]
 800dca2:	f103 33ff 	add.w	r3, r3, #4294967295
 800dca6:	f102 32ff 	add.w	r2, r2, #4294967295
 800dcaa:	606b      	str	r3, [r5, #4]
 800dcac:	bf58      	it	pl
 800dcae:	3701      	addpl	r7, #1
 800dcb0:	60a2      	str	r2, [r4, #8]
 800dcb2:	b142      	cbz	r2, 800dcc6 <_scanf_chars+0xa6>
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	dcc9      	bgt.n	800dc4c <_scanf_chars+0x2c>
 800dcb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dcbc:	4629      	mov	r1, r5
 800dcbe:	4640      	mov	r0, r8
 800dcc0:	4798      	blx	r3
 800dcc2:	2800      	cmp	r0, #0
 800dcc4:	d0c2      	beq.n	800dc4c <_scanf_chars+0x2c>
 800dcc6:	6823      	ldr	r3, [r4, #0]
 800dcc8:	f013 0310 	ands.w	r3, r3, #16
 800dccc:	d105      	bne.n	800dcda <_scanf_chars+0xba>
 800dcce:	68e2      	ldr	r2, [r4, #12]
 800dcd0:	3201      	adds	r2, #1
 800dcd2:	60e2      	str	r2, [r4, #12]
 800dcd4:	69a2      	ldr	r2, [r4, #24]
 800dcd6:	b102      	cbz	r2, 800dcda <_scanf_chars+0xba>
 800dcd8:	703b      	strb	r3, [r7, #0]
 800dcda:	6923      	ldr	r3, [r4, #16]
 800dcdc:	2000      	movs	r0, #0
 800dcde:	441e      	add	r6, r3
 800dce0:	6126      	str	r6, [r4, #16]
 800dce2:	e7c7      	b.n	800dc74 <_scanf_chars+0x54>

0800dce4 <_scanf_i>:
 800dce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce8:	460c      	mov	r4, r1
 800dcea:	469a      	mov	sl, r3
 800dcec:	4b74      	ldr	r3, [pc, #464]	; (800dec0 <_scanf_i+0x1dc>)
 800dcee:	b087      	sub	sp, #28
 800dcf0:	4683      	mov	fp, r0
 800dcf2:	4616      	mov	r6, r2
 800dcf4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dcf8:	ab03      	add	r3, sp, #12
 800dcfa:	68a7      	ldr	r7, [r4, #8]
 800dcfc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800dd00:	4b70      	ldr	r3, [pc, #448]	; (800dec4 <_scanf_i+0x1e0>)
 800dd02:	69a1      	ldr	r1, [r4, #24]
 800dd04:	4a70      	ldr	r2, [pc, #448]	; (800dec8 <_scanf_i+0x1e4>)
 800dd06:	f104 091c 	add.w	r9, r4, #28
 800dd0a:	2903      	cmp	r1, #3
 800dd0c:	bf08      	it	eq
 800dd0e:	461a      	moveq	r2, r3
 800dd10:	1e7b      	subs	r3, r7, #1
 800dd12:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800dd16:	bf84      	itt	hi
 800dd18:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dd1c:	60a3      	strhi	r3, [r4, #8]
 800dd1e:	6823      	ldr	r3, [r4, #0]
 800dd20:	bf88      	it	hi
 800dd22:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dd26:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800dd2a:	6023      	str	r3, [r4, #0]
 800dd2c:	bf98      	it	ls
 800dd2e:	2700      	movls	r7, #0
 800dd30:	464b      	mov	r3, r9
 800dd32:	f04f 0800 	mov.w	r8, #0
 800dd36:	9200      	str	r2, [sp, #0]
 800dd38:	bf88      	it	hi
 800dd3a:	197f      	addhi	r7, r7, r5
 800dd3c:	6831      	ldr	r1, [r6, #0]
 800dd3e:	9301      	str	r3, [sp, #4]
 800dd40:	ab03      	add	r3, sp, #12
 800dd42:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800dd46:	2202      	movs	r2, #2
 800dd48:	7809      	ldrb	r1, [r1, #0]
 800dd4a:	f7fe fe69 	bl	800ca20 <memchr>
 800dd4e:	9b01      	ldr	r3, [sp, #4]
 800dd50:	b330      	cbz	r0, 800dda0 <_scanf_i+0xbc>
 800dd52:	f1b8 0f01 	cmp.w	r8, #1
 800dd56:	d15a      	bne.n	800de0e <_scanf_i+0x12a>
 800dd58:	6862      	ldr	r2, [r4, #4]
 800dd5a:	b92a      	cbnz	r2, 800dd68 <_scanf_i+0x84>
 800dd5c:	2108      	movs	r1, #8
 800dd5e:	6822      	ldr	r2, [r4, #0]
 800dd60:	6061      	str	r1, [r4, #4]
 800dd62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd66:	6022      	str	r2, [r4, #0]
 800dd68:	6822      	ldr	r2, [r4, #0]
 800dd6a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800dd6e:	6022      	str	r2, [r4, #0]
 800dd70:	68a2      	ldr	r2, [r4, #8]
 800dd72:	1e51      	subs	r1, r2, #1
 800dd74:	60a1      	str	r1, [r4, #8]
 800dd76:	b19a      	cbz	r2, 800dda0 <_scanf_i+0xbc>
 800dd78:	6832      	ldr	r2, [r6, #0]
 800dd7a:	1c5d      	adds	r5, r3, #1
 800dd7c:	1c51      	adds	r1, r2, #1
 800dd7e:	6031      	str	r1, [r6, #0]
 800dd80:	7812      	ldrb	r2, [r2, #0]
 800dd82:	701a      	strb	r2, [r3, #0]
 800dd84:	6873      	ldr	r3, [r6, #4]
 800dd86:	3b01      	subs	r3, #1
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	6073      	str	r3, [r6, #4]
 800dd8c:	dc07      	bgt.n	800dd9e <_scanf_i+0xba>
 800dd8e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dd92:	4631      	mov	r1, r6
 800dd94:	4658      	mov	r0, fp
 800dd96:	4798      	blx	r3
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	f040 8087 	bne.w	800deac <_scanf_i+0x1c8>
 800dd9e:	462b      	mov	r3, r5
 800dda0:	f108 0801 	add.w	r8, r8, #1
 800dda4:	f1b8 0f03 	cmp.w	r8, #3
 800dda8:	d1c8      	bne.n	800dd3c <_scanf_i+0x58>
 800ddaa:	6862      	ldr	r2, [r4, #4]
 800ddac:	b90a      	cbnz	r2, 800ddb2 <_scanf_i+0xce>
 800ddae:	220a      	movs	r2, #10
 800ddb0:	6062      	str	r2, [r4, #4]
 800ddb2:	6862      	ldr	r2, [r4, #4]
 800ddb4:	4945      	ldr	r1, [pc, #276]	; (800decc <_scanf_i+0x1e8>)
 800ddb6:	6960      	ldr	r0, [r4, #20]
 800ddb8:	1a89      	subs	r1, r1, r2
 800ddba:	9301      	str	r3, [sp, #4]
 800ddbc:	f000 f8aa 	bl	800df14 <__sccl>
 800ddc0:	9b01      	ldr	r3, [sp, #4]
 800ddc2:	f04f 0800 	mov.w	r8, #0
 800ddc6:	461d      	mov	r5, r3
 800ddc8:	68a3      	ldr	r3, [r4, #8]
 800ddca:	6822      	ldr	r2, [r4, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d03b      	beq.n	800de48 <_scanf_i+0x164>
 800ddd0:	6831      	ldr	r1, [r6, #0]
 800ddd2:	6960      	ldr	r0, [r4, #20]
 800ddd4:	f891 c000 	ldrb.w	ip, [r1]
 800ddd8:	f810 000c 	ldrb.w	r0, [r0, ip]
 800dddc:	2800      	cmp	r0, #0
 800ddde:	d033      	beq.n	800de48 <_scanf_i+0x164>
 800dde0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800dde4:	d121      	bne.n	800de2a <_scanf_i+0x146>
 800dde6:	0510      	lsls	r0, r2, #20
 800dde8:	d51f      	bpl.n	800de2a <_scanf_i+0x146>
 800ddea:	f108 0801 	add.w	r8, r8, #1
 800ddee:	b117      	cbz	r7, 800ddf6 <_scanf_i+0x112>
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	3f01      	subs	r7, #1
 800ddf4:	60a3      	str	r3, [r4, #8]
 800ddf6:	6873      	ldr	r3, [r6, #4]
 800ddf8:	3b01      	subs	r3, #1
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	6073      	str	r3, [r6, #4]
 800ddfe:	dd1c      	ble.n	800de3a <_scanf_i+0x156>
 800de00:	6833      	ldr	r3, [r6, #0]
 800de02:	3301      	adds	r3, #1
 800de04:	6033      	str	r3, [r6, #0]
 800de06:	68a3      	ldr	r3, [r4, #8]
 800de08:	3b01      	subs	r3, #1
 800de0a:	60a3      	str	r3, [r4, #8]
 800de0c:	e7dc      	b.n	800ddc8 <_scanf_i+0xe4>
 800de0e:	f1b8 0f02 	cmp.w	r8, #2
 800de12:	d1ad      	bne.n	800dd70 <_scanf_i+0x8c>
 800de14:	6822      	ldr	r2, [r4, #0]
 800de16:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800de1a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800de1e:	d1bf      	bne.n	800dda0 <_scanf_i+0xbc>
 800de20:	2110      	movs	r1, #16
 800de22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de26:	6061      	str	r1, [r4, #4]
 800de28:	e7a1      	b.n	800dd6e <_scanf_i+0x8a>
 800de2a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800de2e:	6022      	str	r2, [r4, #0]
 800de30:	780b      	ldrb	r3, [r1, #0]
 800de32:	3501      	adds	r5, #1
 800de34:	f805 3c01 	strb.w	r3, [r5, #-1]
 800de38:	e7dd      	b.n	800ddf6 <_scanf_i+0x112>
 800de3a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800de3e:	4631      	mov	r1, r6
 800de40:	4658      	mov	r0, fp
 800de42:	4798      	blx	r3
 800de44:	2800      	cmp	r0, #0
 800de46:	d0de      	beq.n	800de06 <_scanf_i+0x122>
 800de48:	6823      	ldr	r3, [r4, #0]
 800de4a:	05d9      	lsls	r1, r3, #23
 800de4c:	d50c      	bpl.n	800de68 <_scanf_i+0x184>
 800de4e:	454d      	cmp	r5, r9
 800de50:	d908      	bls.n	800de64 <_scanf_i+0x180>
 800de52:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800de56:	1e6f      	subs	r7, r5, #1
 800de58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800de5c:	4632      	mov	r2, r6
 800de5e:	4658      	mov	r0, fp
 800de60:	4798      	blx	r3
 800de62:	463d      	mov	r5, r7
 800de64:	454d      	cmp	r5, r9
 800de66:	d029      	beq.n	800debc <_scanf_i+0x1d8>
 800de68:	6822      	ldr	r2, [r4, #0]
 800de6a:	f012 0210 	ands.w	r2, r2, #16
 800de6e:	d113      	bne.n	800de98 <_scanf_i+0x1b4>
 800de70:	702a      	strb	r2, [r5, #0]
 800de72:	6863      	ldr	r3, [r4, #4]
 800de74:	4649      	mov	r1, r9
 800de76:	4658      	mov	r0, fp
 800de78:	9e00      	ldr	r6, [sp, #0]
 800de7a:	47b0      	blx	r6
 800de7c:	f8da 3000 	ldr.w	r3, [sl]
 800de80:	6821      	ldr	r1, [r4, #0]
 800de82:	1d1a      	adds	r2, r3, #4
 800de84:	f8ca 2000 	str.w	r2, [sl]
 800de88:	f011 0f20 	tst.w	r1, #32
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	d010      	beq.n	800deb2 <_scanf_i+0x1ce>
 800de90:	6018      	str	r0, [r3, #0]
 800de92:	68e3      	ldr	r3, [r4, #12]
 800de94:	3301      	adds	r3, #1
 800de96:	60e3      	str	r3, [r4, #12]
 800de98:	2000      	movs	r0, #0
 800de9a:	eba5 0509 	sub.w	r5, r5, r9
 800de9e:	44a8      	add	r8, r5
 800dea0:	6925      	ldr	r5, [r4, #16]
 800dea2:	4445      	add	r5, r8
 800dea4:	6125      	str	r5, [r4, #16]
 800dea6:	b007      	add	sp, #28
 800dea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deac:	f04f 0800 	mov.w	r8, #0
 800deb0:	e7ca      	b.n	800de48 <_scanf_i+0x164>
 800deb2:	07ca      	lsls	r2, r1, #31
 800deb4:	bf4c      	ite	mi
 800deb6:	8018      	strhmi	r0, [r3, #0]
 800deb8:	6018      	strpl	r0, [r3, #0]
 800deba:	e7ea      	b.n	800de92 <_scanf_i+0x1ae>
 800debc:	2001      	movs	r0, #1
 800debe:	e7f2      	b.n	800dea6 <_scanf_i+0x1c2>
 800dec0:	0800e31c 	.word	0x0800e31c
 800dec4:	0800b109 	.word	0x0800b109
 800dec8:	0800e091 	.word	0x0800e091
 800decc:	0800e565 	.word	0x0800e565

0800ded0 <_read_r>:
 800ded0:	b538      	push	{r3, r4, r5, lr}
 800ded2:	4605      	mov	r5, r0
 800ded4:	4608      	mov	r0, r1
 800ded6:	4611      	mov	r1, r2
 800ded8:	2200      	movs	r2, #0
 800deda:	4c05      	ldr	r4, [pc, #20]	; (800def0 <_read_r+0x20>)
 800dedc:	6022      	str	r2, [r4, #0]
 800dede:	461a      	mov	r2, r3
 800dee0:	f7f3 fc02 	bl	80016e8 <_read>
 800dee4:	1c43      	adds	r3, r0, #1
 800dee6:	d102      	bne.n	800deee <_read_r+0x1e>
 800dee8:	6823      	ldr	r3, [r4, #0]
 800deea:	b103      	cbz	r3, 800deee <_read_r+0x1e>
 800deec:	602b      	str	r3, [r5, #0]
 800deee:	bd38      	pop	{r3, r4, r5, pc}
 800def0:	20001074 	.word	0x20001074

0800def4 <_sbrk_r>:
 800def4:	b538      	push	{r3, r4, r5, lr}
 800def6:	2300      	movs	r3, #0
 800def8:	4c05      	ldr	r4, [pc, #20]	; (800df10 <_sbrk_r+0x1c>)
 800defa:	4605      	mov	r5, r0
 800defc:	4608      	mov	r0, r1
 800defe:	6023      	str	r3, [r4, #0]
 800df00:	f7f3 fc40 	bl	8001784 <_sbrk>
 800df04:	1c43      	adds	r3, r0, #1
 800df06:	d102      	bne.n	800df0e <_sbrk_r+0x1a>
 800df08:	6823      	ldr	r3, [r4, #0]
 800df0a:	b103      	cbz	r3, 800df0e <_sbrk_r+0x1a>
 800df0c:	602b      	str	r3, [r5, #0]
 800df0e:	bd38      	pop	{r3, r4, r5, pc}
 800df10:	20001074 	.word	0x20001074

0800df14 <__sccl>:
 800df14:	b570      	push	{r4, r5, r6, lr}
 800df16:	780b      	ldrb	r3, [r1, #0]
 800df18:	1e44      	subs	r4, r0, #1
 800df1a:	2b5e      	cmp	r3, #94	; 0x5e
 800df1c:	bf13      	iteet	ne
 800df1e:	1c4a      	addne	r2, r1, #1
 800df20:	1c8a      	addeq	r2, r1, #2
 800df22:	784b      	ldrbeq	r3, [r1, #1]
 800df24:	2100      	movne	r1, #0
 800df26:	bf08      	it	eq
 800df28:	2101      	moveq	r1, #1
 800df2a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800df2e:	f804 1f01 	strb.w	r1, [r4, #1]!
 800df32:	42ac      	cmp	r4, r5
 800df34:	d1fb      	bne.n	800df2e <__sccl+0x1a>
 800df36:	b913      	cbnz	r3, 800df3e <__sccl+0x2a>
 800df38:	3a01      	subs	r2, #1
 800df3a:	4610      	mov	r0, r2
 800df3c:	bd70      	pop	{r4, r5, r6, pc}
 800df3e:	f081 0401 	eor.w	r4, r1, #1
 800df42:	54c4      	strb	r4, [r0, r3]
 800df44:	1c51      	adds	r1, r2, #1
 800df46:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800df4a:	1e4e      	subs	r6, r1, #1
 800df4c:	2d2d      	cmp	r5, #45	; 0x2d
 800df4e:	460a      	mov	r2, r1
 800df50:	d006      	beq.n	800df60 <__sccl+0x4c>
 800df52:	2d5d      	cmp	r5, #93	; 0x5d
 800df54:	d0f1      	beq.n	800df3a <__sccl+0x26>
 800df56:	b90d      	cbnz	r5, 800df5c <__sccl+0x48>
 800df58:	4632      	mov	r2, r6
 800df5a:	e7ee      	b.n	800df3a <__sccl+0x26>
 800df5c:	462b      	mov	r3, r5
 800df5e:	e7f0      	b.n	800df42 <__sccl+0x2e>
 800df60:	780e      	ldrb	r6, [r1, #0]
 800df62:	2e5d      	cmp	r6, #93	; 0x5d
 800df64:	d0fa      	beq.n	800df5c <__sccl+0x48>
 800df66:	42b3      	cmp	r3, r6
 800df68:	dcf8      	bgt.n	800df5c <__sccl+0x48>
 800df6a:	3301      	adds	r3, #1
 800df6c:	429e      	cmp	r6, r3
 800df6e:	54c4      	strb	r4, [r0, r3]
 800df70:	dcfb      	bgt.n	800df6a <__sccl+0x56>
 800df72:	3102      	adds	r1, #2
 800df74:	e7e7      	b.n	800df46 <__sccl+0x32>

0800df76 <strncmp>:
 800df76:	b510      	push	{r4, lr}
 800df78:	b16a      	cbz	r2, 800df96 <strncmp+0x20>
 800df7a:	3901      	subs	r1, #1
 800df7c:	1884      	adds	r4, r0, r2
 800df7e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800df82:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800df86:	4293      	cmp	r3, r2
 800df88:	d103      	bne.n	800df92 <strncmp+0x1c>
 800df8a:	42a0      	cmp	r0, r4
 800df8c:	d001      	beq.n	800df92 <strncmp+0x1c>
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d1f5      	bne.n	800df7e <strncmp+0x8>
 800df92:	1a98      	subs	r0, r3, r2
 800df94:	bd10      	pop	{r4, pc}
 800df96:	4610      	mov	r0, r2
 800df98:	e7fc      	b.n	800df94 <strncmp+0x1e>

0800df9a <_strtoul_l.isra.0>:
 800df9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df9e:	4680      	mov	r8, r0
 800dfa0:	4689      	mov	r9, r1
 800dfa2:	4692      	mov	sl, r2
 800dfa4:	461e      	mov	r6, r3
 800dfa6:	460f      	mov	r7, r1
 800dfa8:	463d      	mov	r5, r7
 800dfaa:	9808      	ldr	r0, [sp, #32]
 800dfac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfb0:	f7fe fc84 	bl	800c8bc <__locale_ctype_ptr_l>
 800dfb4:	4420      	add	r0, r4
 800dfb6:	7843      	ldrb	r3, [r0, #1]
 800dfb8:	f013 0308 	ands.w	r3, r3, #8
 800dfbc:	d130      	bne.n	800e020 <_strtoul_l.isra.0+0x86>
 800dfbe:	2c2d      	cmp	r4, #45	; 0x2d
 800dfc0:	d130      	bne.n	800e024 <_strtoul_l.isra.0+0x8a>
 800dfc2:	2101      	movs	r1, #1
 800dfc4:	787c      	ldrb	r4, [r7, #1]
 800dfc6:	1cbd      	adds	r5, r7, #2
 800dfc8:	2e00      	cmp	r6, #0
 800dfca:	d05c      	beq.n	800e086 <_strtoul_l.isra.0+0xec>
 800dfcc:	2e10      	cmp	r6, #16
 800dfce:	d109      	bne.n	800dfe4 <_strtoul_l.isra.0+0x4a>
 800dfd0:	2c30      	cmp	r4, #48	; 0x30
 800dfd2:	d107      	bne.n	800dfe4 <_strtoul_l.isra.0+0x4a>
 800dfd4:	782b      	ldrb	r3, [r5, #0]
 800dfd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dfda:	2b58      	cmp	r3, #88	; 0x58
 800dfdc:	d14e      	bne.n	800e07c <_strtoul_l.isra.0+0xe2>
 800dfde:	2610      	movs	r6, #16
 800dfe0:	786c      	ldrb	r4, [r5, #1]
 800dfe2:	3502      	adds	r5, #2
 800dfe4:	f04f 32ff 	mov.w	r2, #4294967295
 800dfe8:	fbb2 f2f6 	udiv	r2, r2, r6
 800dfec:	2300      	movs	r3, #0
 800dfee:	fb06 fc02 	mul.w	ip, r6, r2
 800dff2:	4618      	mov	r0, r3
 800dff4:	ea6f 0c0c 	mvn.w	ip, ip
 800dff8:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800dffc:	2f09      	cmp	r7, #9
 800dffe:	d817      	bhi.n	800e030 <_strtoul_l.isra.0+0x96>
 800e000:	463c      	mov	r4, r7
 800e002:	42a6      	cmp	r6, r4
 800e004:	dd23      	ble.n	800e04e <_strtoul_l.isra.0+0xb4>
 800e006:	2b00      	cmp	r3, #0
 800e008:	db1e      	blt.n	800e048 <_strtoul_l.isra.0+0xae>
 800e00a:	4282      	cmp	r2, r0
 800e00c:	d31c      	bcc.n	800e048 <_strtoul_l.isra.0+0xae>
 800e00e:	d101      	bne.n	800e014 <_strtoul_l.isra.0+0x7a>
 800e010:	45a4      	cmp	ip, r4
 800e012:	db19      	blt.n	800e048 <_strtoul_l.isra.0+0xae>
 800e014:	2301      	movs	r3, #1
 800e016:	fb00 4006 	mla	r0, r0, r6, r4
 800e01a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e01e:	e7eb      	b.n	800dff8 <_strtoul_l.isra.0+0x5e>
 800e020:	462f      	mov	r7, r5
 800e022:	e7c1      	b.n	800dfa8 <_strtoul_l.isra.0+0xe>
 800e024:	2c2b      	cmp	r4, #43	; 0x2b
 800e026:	bf04      	itt	eq
 800e028:	1cbd      	addeq	r5, r7, #2
 800e02a:	787c      	ldrbeq	r4, [r7, #1]
 800e02c:	4619      	mov	r1, r3
 800e02e:	e7cb      	b.n	800dfc8 <_strtoul_l.isra.0+0x2e>
 800e030:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e034:	2f19      	cmp	r7, #25
 800e036:	d801      	bhi.n	800e03c <_strtoul_l.isra.0+0xa2>
 800e038:	3c37      	subs	r4, #55	; 0x37
 800e03a:	e7e2      	b.n	800e002 <_strtoul_l.isra.0+0x68>
 800e03c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e040:	2f19      	cmp	r7, #25
 800e042:	d804      	bhi.n	800e04e <_strtoul_l.isra.0+0xb4>
 800e044:	3c57      	subs	r4, #87	; 0x57
 800e046:	e7dc      	b.n	800e002 <_strtoul_l.isra.0+0x68>
 800e048:	f04f 33ff 	mov.w	r3, #4294967295
 800e04c:	e7e5      	b.n	800e01a <_strtoul_l.isra.0+0x80>
 800e04e:	2b00      	cmp	r3, #0
 800e050:	da09      	bge.n	800e066 <_strtoul_l.isra.0+0xcc>
 800e052:	2322      	movs	r3, #34	; 0x22
 800e054:	f04f 30ff 	mov.w	r0, #4294967295
 800e058:	f8c8 3000 	str.w	r3, [r8]
 800e05c:	f1ba 0f00 	cmp.w	sl, #0
 800e060:	d107      	bne.n	800e072 <_strtoul_l.isra.0+0xd8>
 800e062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e066:	b101      	cbz	r1, 800e06a <_strtoul_l.isra.0+0xd0>
 800e068:	4240      	negs	r0, r0
 800e06a:	f1ba 0f00 	cmp.w	sl, #0
 800e06e:	d0f8      	beq.n	800e062 <_strtoul_l.isra.0+0xc8>
 800e070:	b10b      	cbz	r3, 800e076 <_strtoul_l.isra.0+0xdc>
 800e072:	f105 39ff 	add.w	r9, r5, #4294967295
 800e076:	f8ca 9000 	str.w	r9, [sl]
 800e07a:	e7f2      	b.n	800e062 <_strtoul_l.isra.0+0xc8>
 800e07c:	2430      	movs	r4, #48	; 0x30
 800e07e:	2e00      	cmp	r6, #0
 800e080:	d1b0      	bne.n	800dfe4 <_strtoul_l.isra.0+0x4a>
 800e082:	2608      	movs	r6, #8
 800e084:	e7ae      	b.n	800dfe4 <_strtoul_l.isra.0+0x4a>
 800e086:	2c30      	cmp	r4, #48	; 0x30
 800e088:	d0a4      	beq.n	800dfd4 <_strtoul_l.isra.0+0x3a>
 800e08a:	260a      	movs	r6, #10
 800e08c:	e7aa      	b.n	800dfe4 <_strtoul_l.isra.0+0x4a>
	...

0800e090 <_strtoul_r>:
 800e090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e092:	4c06      	ldr	r4, [pc, #24]	; (800e0ac <_strtoul_r+0x1c>)
 800e094:	4d06      	ldr	r5, [pc, #24]	; (800e0b0 <_strtoul_r+0x20>)
 800e096:	6824      	ldr	r4, [r4, #0]
 800e098:	6a24      	ldr	r4, [r4, #32]
 800e09a:	2c00      	cmp	r4, #0
 800e09c:	bf08      	it	eq
 800e09e:	462c      	moveq	r4, r5
 800e0a0:	9400      	str	r4, [sp, #0]
 800e0a2:	f7ff ff7a 	bl	800df9a <_strtoul_l.isra.0>
 800e0a6:	b003      	add	sp, #12
 800e0a8:	bd30      	pop	{r4, r5, pc}
 800e0aa:	bf00      	nop
 800e0ac:	2000017c 	.word	0x2000017c
 800e0b0:	200001e0 	.word	0x200001e0

0800e0b4 <__submore>:
 800e0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b8:	460c      	mov	r4, r1
 800e0ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e0bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0c0:	4299      	cmp	r1, r3
 800e0c2:	d11b      	bne.n	800e0fc <__submore+0x48>
 800e0c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e0c8:	f7ff f916 	bl	800d2f8 <_malloc_r>
 800e0cc:	b918      	cbnz	r0, 800e0d6 <__submore+0x22>
 800e0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0da:	63a3      	str	r3, [r4, #56]	; 0x38
 800e0dc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e0e0:	6360      	str	r0, [r4, #52]	; 0x34
 800e0e2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e0e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e0ea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e0ee:	7043      	strb	r3, [r0, #1]
 800e0f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e0f4:	7003      	strb	r3, [r0, #0]
 800e0f6:	6020      	str	r0, [r4, #0]
 800e0f8:	2000      	movs	r0, #0
 800e0fa:	e7ea      	b.n	800e0d2 <__submore+0x1e>
 800e0fc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e0fe:	0077      	lsls	r7, r6, #1
 800e100:	463a      	mov	r2, r7
 800e102:	f000 f85a 	bl	800e1ba <_realloc_r>
 800e106:	4605      	mov	r5, r0
 800e108:	2800      	cmp	r0, #0
 800e10a:	d0e0      	beq.n	800e0ce <__submore+0x1a>
 800e10c:	eb00 0806 	add.w	r8, r0, r6
 800e110:	4601      	mov	r1, r0
 800e112:	4632      	mov	r2, r6
 800e114:	4640      	mov	r0, r8
 800e116:	f7fe fc91 	bl	800ca3c <memcpy>
 800e11a:	f8c4 8000 	str.w	r8, [r4]
 800e11e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e122:	e7e9      	b.n	800e0f8 <__submore+0x44>

0800e124 <__ascii_wctomb>:
 800e124:	b149      	cbz	r1, 800e13a <__ascii_wctomb+0x16>
 800e126:	2aff      	cmp	r2, #255	; 0xff
 800e128:	bf8b      	itete	hi
 800e12a:	238a      	movhi	r3, #138	; 0x8a
 800e12c:	700a      	strbls	r2, [r1, #0]
 800e12e:	6003      	strhi	r3, [r0, #0]
 800e130:	2001      	movls	r0, #1
 800e132:	bf88      	it	hi
 800e134:	f04f 30ff 	movhi.w	r0, #4294967295
 800e138:	4770      	bx	lr
 800e13a:	4608      	mov	r0, r1
 800e13c:	4770      	bx	lr
	...

0800e140 <_fstat_r>:
 800e140:	b538      	push	{r3, r4, r5, lr}
 800e142:	2300      	movs	r3, #0
 800e144:	4c06      	ldr	r4, [pc, #24]	; (800e160 <_fstat_r+0x20>)
 800e146:	4605      	mov	r5, r0
 800e148:	4608      	mov	r0, r1
 800e14a:	4611      	mov	r1, r2
 800e14c:	6023      	str	r3, [r4, #0]
 800e14e:	f7f3 faf3 	bl	8001738 <_fstat>
 800e152:	1c43      	adds	r3, r0, #1
 800e154:	d102      	bne.n	800e15c <_fstat_r+0x1c>
 800e156:	6823      	ldr	r3, [r4, #0]
 800e158:	b103      	cbz	r3, 800e15c <_fstat_r+0x1c>
 800e15a:	602b      	str	r3, [r5, #0]
 800e15c:	bd38      	pop	{r3, r4, r5, pc}
 800e15e:	bf00      	nop
 800e160:	20001074 	.word	0x20001074

0800e164 <_isatty_r>:
 800e164:	b538      	push	{r3, r4, r5, lr}
 800e166:	2300      	movs	r3, #0
 800e168:	4c05      	ldr	r4, [pc, #20]	; (800e180 <_isatty_r+0x1c>)
 800e16a:	4605      	mov	r5, r0
 800e16c:	4608      	mov	r0, r1
 800e16e:	6023      	str	r3, [r4, #0]
 800e170:	f7f3 faf1 	bl	8001756 <_isatty>
 800e174:	1c43      	adds	r3, r0, #1
 800e176:	d102      	bne.n	800e17e <_isatty_r+0x1a>
 800e178:	6823      	ldr	r3, [r4, #0]
 800e17a:	b103      	cbz	r3, 800e17e <_isatty_r+0x1a>
 800e17c:	602b      	str	r3, [r5, #0]
 800e17e:	bd38      	pop	{r3, r4, r5, pc}
 800e180:	20001074 	.word	0x20001074

0800e184 <memmove>:
 800e184:	4288      	cmp	r0, r1
 800e186:	b510      	push	{r4, lr}
 800e188:	eb01 0302 	add.w	r3, r1, r2
 800e18c:	d807      	bhi.n	800e19e <memmove+0x1a>
 800e18e:	1e42      	subs	r2, r0, #1
 800e190:	4299      	cmp	r1, r3
 800e192:	d00a      	beq.n	800e1aa <memmove+0x26>
 800e194:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e198:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e19c:	e7f8      	b.n	800e190 <memmove+0xc>
 800e19e:	4283      	cmp	r3, r0
 800e1a0:	d9f5      	bls.n	800e18e <memmove+0xa>
 800e1a2:	1881      	adds	r1, r0, r2
 800e1a4:	1ad2      	subs	r2, r2, r3
 800e1a6:	42d3      	cmn	r3, r2
 800e1a8:	d100      	bne.n	800e1ac <memmove+0x28>
 800e1aa:	bd10      	pop	{r4, pc}
 800e1ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1b0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e1b4:	e7f7      	b.n	800e1a6 <memmove+0x22>

0800e1b6 <__malloc_lock>:
 800e1b6:	4770      	bx	lr

0800e1b8 <__malloc_unlock>:
 800e1b8:	4770      	bx	lr

0800e1ba <_realloc_r>:
 800e1ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1bc:	4607      	mov	r7, r0
 800e1be:	4614      	mov	r4, r2
 800e1c0:	460e      	mov	r6, r1
 800e1c2:	b921      	cbnz	r1, 800e1ce <_realloc_r+0x14>
 800e1c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	f7ff b895 	b.w	800d2f8 <_malloc_r>
 800e1ce:	b922      	cbnz	r2, 800e1da <_realloc_r+0x20>
 800e1d0:	f7ff f846 	bl	800d260 <_free_r>
 800e1d4:	4625      	mov	r5, r4
 800e1d6:	4628      	mov	r0, r5
 800e1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1da:	f000 f814 	bl	800e206 <_malloc_usable_size_r>
 800e1de:	42a0      	cmp	r0, r4
 800e1e0:	d20f      	bcs.n	800e202 <_realloc_r+0x48>
 800e1e2:	4621      	mov	r1, r4
 800e1e4:	4638      	mov	r0, r7
 800e1e6:	f7ff f887 	bl	800d2f8 <_malloc_r>
 800e1ea:	4605      	mov	r5, r0
 800e1ec:	2800      	cmp	r0, #0
 800e1ee:	d0f2      	beq.n	800e1d6 <_realloc_r+0x1c>
 800e1f0:	4631      	mov	r1, r6
 800e1f2:	4622      	mov	r2, r4
 800e1f4:	f7fe fc22 	bl	800ca3c <memcpy>
 800e1f8:	4631      	mov	r1, r6
 800e1fa:	4638      	mov	r0, r7
 800e1fc:	f7ff f830 	bl	800d260 <_free_r>
 800e200:	e7e9      	b.n	800e1d6 <_realloc_r+0x1c>
 800e202:	4635      	mov	r5, r6
 800e204:	e7e7      	b.n	800e1d6 <_realloc_r+0x1c>

0800e206 <_malloc_usable_size_r>:
 800e206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e20a:	1f18      	subs	r0, r3, #4
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	bfbc      	itt	lt
 800e210:	580b      	ldrlt	r3, [r1, r0]
 800e212:	18c0      	addlt	r0, r0, r3
 800e214:	4770      	bx	lr
	...

0800e218 <_init>:
 800e218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e21a:	bf00      	nop
 800e21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e21e:	bc08      	pop	{r3}
 800e220:	469e      	mov	lr, r3
 800e222:	4770      	bx	lr

0800e224 <_fini>:
 800e224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e226:	bf00      	nop
 800e228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e22a:	bc08      	pop	{r3}
 800e22c:	469e      	mov	lr, r3
 800e22e:	4770      	bx	lr
