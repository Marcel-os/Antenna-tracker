
Antenna tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1f0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  0800e300  0800e300  0001e300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6f4  0800e6f4  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800e6f4  0800e6f4  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e6f4  0800e6f4  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6f4  0800e6f4  0001e6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6f8  0800e6f8  0001e6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800e6fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d2c  2000034c  0800ea48  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001078  0800ea48  00021078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172e4  00000000  00000000  00020375  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035fb  00000000  00000000  00037659  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001120  00000000  00000000  0003ac58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f68  00000000  00000000  0003bd78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b8e0  00000000  00000000  0003cce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011ad0  00000000  00000000  000585c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008dfd7  00000000  00000000  0006a090  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f8067  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b08  00000000  00000000  000f80e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000034c 	.word	0x2000034c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e2e8 	.word	0x0800e2e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000350 	.word	0x20000350
 800014c:	0800e2e8 	.word	0x0800e2e8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <MX_GPIO_Init+0xa4>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a22      	ldr	r2, [pc, #136]	; (8001114 <MX_GPIO_Init+0xa4>)
 800108a:	f043 0310 	orr.w	r3, r3, #16
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <MX_GPIO_Init+0xa4>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MX_GPIO_Init+0xa4>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <MX_GPIO_Init+0xa4>)
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_GPIO_Init+0xa4>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0320 	and.w	r3, r3, #32
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_GPIO_Init+0xa4>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a16      	ldr	r2, [pc, #88]	; (8001114 <MX_GPIO_Init+0xa4>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_GPIO_Init+0xa4>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_GPIO_Init+0xa4>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a10      	ldr	r2, [pc, #64]	; (8001114 <MX_GPIO_Init+0xa4>)
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_GPIO_Init+0xa4>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR11_Pin|MOTOR12_Pin|MOTOR21_Pin|MOTOR22_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	210f      	movs	r1, #15
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <MX_GPIO_Init+0xa8>)
 80010ea:	f001 f933 	bl	8002354 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR11_Pin|MOTOR12_Pin|MOTOR21_Pin|MOTOR22_Pin;
 80010ee:	230f      	movs	r3, #15
 80010f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	4619      	mov	r1, r3
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_GPIO_Init+0xa8>)
 8001106:	f000 ffcb 	bl	80020a0 <HAL_GPIO_Init>

}
 800110a:	bf00      	nop
 800110c:	3720      	adds	r7, #32
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	40010800 	.word	0x40010800

0800111c <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len){
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
    //HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
    CDC_Transmit_FS((uint8_t*)ptr, len);
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	68b8      	ldr	r0, [r7, #8]
 800112c:	f007 fe40 	bl	8008db0 <CDC_Transmit_FS>
    return len;
 8001130:	687b      	ldr	r3, [r7, #4]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <parse>:

void parse(){
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af04      	add	r7, sp, #16
  	char header[1];
  	int32_t PWM1, PWM2, DIR1, DIR2;

  	sscanf(ReceivedData, "%s %d %d %d %d", &header, &PWM1, &PWM2, &DIR1, &DIR2);
 8001142:	f107 0110 	add.w	r1, r7, #16
 8001146:	f107 0214 	add.w	r2, r7, #20
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	9302      	str	r3, [sp, #8]
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	460b      	mov	r3, r1
 800115c:	4946      	ldr	r1, [pc, #280]	; (8001278 <parse+0x13c>)
 800115e:	4847      	ldr	r0, [pc, #284]	; (800127c <parse+0x140>)
 8001160:	f009 f906 	bl	800a370 <siscanf>
  	if( header[0] == 'S' && PWM1 >= 0 && PWM1 < 65535 && PWM2 >= 0 && PWM2 < 65535 && (DIR1 == 1 || DIR1 == 0) && (DIR2 == 1 || DIR2 == 0) )
 8001164:	7d3b      	ldrb	r3, [r7, #20]
 8001166:	2b53      	cmp	r3, #83	; 0x53
 8001168:	d17e      	bne.n	8001268 <parse+0x12c>
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db7b      	blt.n	8001268 <parse+0x12c>
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001176:	4293      	cmp	r3, r2
 8001178:	dc76      	bgt.n	8001268 <parse+0x12c>
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db73      	blt.n	8001268 <parse+0x12c>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001186:	4293      	cmp	r3, r2
 8001188:	dc6e      	bgt.n	8001268 <parse+0x12c>
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d002      	beq.n	8001196 <parse+0x5a>
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d168      	bne.n	8001268 <parse+0x12c>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d002      	beq.n	80011a2 <parse+0x66>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d162      	bne.n	8001268 <parse+0x12c>
  	{
  		send_json(PWM1, PWM2);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 f86f 	bl	800128c <send_json>
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM1 );
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4b33      	ldr	r3, [pc, #204]	; (8001280 <parse+0x144>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM2 );
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	4b31      	ldr	r3, [pc, #196]	; (8001280 <parse+0x144>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	639a      	str	r2, [r3, #56]	; 0x38

  		if(DIR1 == 1){
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d109      	bne.n	80011d8 <parse+0x9c>
  			HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2101      	movs	r1, #1
 80011c8:	482e      	ldr	r0, [pc, #184]	; (8001284 <parse+0x148>)
 80011ca:	f001 f8c3 	bl	8002354 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2102      	movs	r1, #2
 80011d2:	482c      	ldr	r0, [pc, #176]	; (8001284 <parse+0x148>)
 80011d4:	f001 f8be 	bl	8002354 <HAL_GPIO_WritePin>
  		}

  		if(DIR1 == 0){
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d109      	bne.n	80011f2 <parse+0xb6>
  			HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2101      	movs	r1, #1
 80011e2:	4828      	ldr	r0, [pc, #160]	; (8001284 <parse+0x148>)
 80011e4:	f001 f8b6 	bl	8002354 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2102      	movs	r1, #2
 80011ec:	4825      	ldr	r0, [pc, #148]	; (8001284 <parse+0x148>)
 80011ee:	f001 f8b1 	bl	8002354 <HAL_GPIO_WritePin>
  		}

  		if(DIR2 == 1){
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d109      	bne.n	800120c <parse+0xd0>
  			HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2104      	movs	r1, #4
 80011fc:	4821      	ldr	r0, [pc, #132]	; (8001284 <parse+0x148>)
 80011fe:	f001 f8a9 	bl	8002354 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2108      	movs	r1, #8
 8001206:	481f      	ldr	r0, [pc, #124]	; (8001284 <parse+0x148>)
 8001208:	f001 f8a4 	bl	8002354 <HAL_GPIO_WritePin>
  		}

  		if(DIR2 == 0){
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d109      	bne.n	8001226 <parse+0xea>
  			HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	2104      	movs	r1, #4
 8001216:	481b      	ldr	r0, [pc, #108]	; (8001284 <parse+0x148>)
 8001218:	f001 f89c 	bl	8002354 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	2108      	movs	r1, #8
 8001220:	4818      	ldr	r0, [pc, #96]	; (8001284 <parse+0x148>)
 8001222:	f001 f897 	bl	8002354 <HAL_GPIO_WritePin>
  		}

  		if( PWM1 == 0 && PWM2 ==0 ){
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d116      	bne.n	800125a <parse+0x11e>
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d113      	bne.n	800125a <parse+0x11e>
  			HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2101      	movs	r1, #1
 8001236:	4813      	ldr	r0, [pc, #76]	; (8001284 <parse+0x148>)
 8001238:	f001 f88c 	bl	8002354 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2102      	movs	r1, #2
 8001240:	4810      	ldr	r0, [pc, #64]	; (8001284 <parse+0x148>)
 8001242:	f001 f887 	bl	8002354 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	2104      	movs	r1, #4
 800124a:	480e      	ldr	r0, [pc, #56]	; (8001284 <parse+0x148>)
 800124c:	f001 f882 	bl	8002354 <HAL_GPIO_WritePin>
  			HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	2108      	movs	r1, #8
 8001254:	480b      	ldr	r0, [pc, #44]	; (8001284 <parse+0x148>)
 8001256:	f001 f87d 	bl	8002354 <HAL_GPIO_WritePin>
  		}
  		send_json(PWM1, PWM2);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f000 f813 	bl	800128c <send_json>
  	{
 8001266:	e002      	b.n	800126e <parse+0x132>

//	  	sprintf(DataToSend, "%d %d %d %d \r\n", PWM1, PWM2, DIR1, DIR2);
//	  	printf(DataToSend);
  	}else printf("error - zle dane \r\n");
 8001268:	4807      	ldr	r0, [pc, #28]	; (8001288 <parse+0x14c>)
 800126a:	f009 f855 	bl	800a318 <puts>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	0800e300 	.word	0x0800e300
 800127c:	20000660 	.word	0x20000660
 8001280:	20000768 	.word	0x20000768
 8001284:	40010800 	.word	0x40010800
 8001288:	0800e310 	.word	0x0800e310

0800128c <send_json>:

void send_json(int32_t Encoder1, int32_t Encoder2){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	printf("{\"enkoder1\":%d,\"enkoder2\":%d}\r\n", Encoder1, Encoder2);
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4803      	ldr	r0, [pc, #12]	; (80012a8 <send_json+0x1c>)
 800129c:	f008 ffc8 	bl	800a230 <iprintf>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	0800e324 	.word	0x0800e324

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b2:	f000 fd63 	bl	8001d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b6:	f000 f90b 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ba:	f7ff fed9 	bl	8001070 <MX_GPIO_Init>
  MX_TIM1_Init();
 80012be:	f000 fafb 	bl	80018b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012c2:	f000 fba5 	bl	8001a10 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012c6:	f000 fbf5 	bl	8001ab4 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80012ca:	f007 fc97 	bl	8008bfc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80012ce:	2100      	movs	r1, #0
 80012d0:	486f      	ldr	r0, [pc, #444]	; (8001490 <main+0x1e4>)
 80012d2:	f003 ff0f 	bl	80050f4 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80012d6:	2104      	movs	r1, #4
 80012d8:	486d      	ldr	r0, [pc, #436]	; (8001490 <main+0x1e4>)
 80012da:	f003 ff0b 	bl	80050f4 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80012de:	213c      	movs	r1, #60	; 0x3c
 80012e0:	486c      	ldr	r0, [pc, #432]	; (8001494 <main+0x1e8>)
 80012e2:	f003 fa5f 	bl	80047a4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80012e6:	213c      	movs	r1, #60	; 0x3c
 80012e8:	486b      	ldr	r0, [pc, #428]	; (8001498 <main+0x1ec>)
 80012ea:	f003 fa5b 	bl	80047a4 <HAL_TIM_Encoder_Start>

  pid_init(&pid_azimuth, 150.0f, 50.0f, 0.005f, 10, 1);
 80012ee:	2301      	movs	r3, #1
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	230a      	movs	r3, #10
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	4b69      	ldr	r3, [pc, #420]	; (800149c <main+0x1f0>)
 80012f8:	4a69      	ldr	r2, [pc, #420]	; (80014a0 <main+0x1f4>)
 80012fa:	496a      	ldr	r1, [pc, #424]	; (80014a4 <main+0x1f8>)
 80012fc:	486a      	ldr	r0, [pc, #424]	; (80014a8 <main+0x1fc>)
 80012fe:	f000 f947 	bl	8001590 <pid_init>
  pid_azimuth.p_max = pid_scale(&pid_azimuth, 4095);
 8001302:	496a      	ldr	r1, [pc, #424]	; (80014ac <main+0x200>)
 8001304:	4868      	ldr	r0, [pc, #416]	; (80014a8 <main+0x1fc>)
 8001306:	f000 f9cb 	bl	80016a0 <pid_scale>
 800130a:	4602      	mov	r2, r0
 800130c:	4b66      	ldr	r3, [pc, #408]	; (80014a8 <main+0x1fc>)
 800130e:	619a      	str	r2, [r3, #24]
  pid_azimuth.p_min = pid_scale(&pid_azimuth, -4095);
 8001310:	4967      	ldr	r1, [pc, #412]	; (80014b0 <main+0x204>)
 8001312:	4865      	ldr	r0, [pc, #404]	; (80014a8 <main+0x1fc>)
 8001314:	f000 f9c4 	bl	80016a0 <pid_scale>
 8001318:	4602      	mov	r2, r0
 800131a:	4b63      	ldr	r3, [pc, #396]	; (80014a8 <main+0x1fc>)
 800131c:	625a      	str	r2, [r3, #36]	; 0x24
  pid_azimuth.i_max = pid_scale(&pid_azimuth, 4095);
 800131e:	4963      	ldr	r1, [pc, #396]	; (80014ac <main+0x200>)
 8001320:	4861      	ldr	r0, [pc, #388]	; (80014a8 <main+0x1fc>)
 8001322:	f000 f9bd 	bl	80016a0 <pid_scale>
 8001326:	4602      	mov	r2, r0
 8001328:	4b5f      	ldr	r3, [pc, #380]	; (80014a8 <main+0x1fc>)
 800132a:	61da      	str	r2, [r3, #28]
  pid_azimuth.i_min = pid_scale(&pid_azimuth, -4095);
 800132c:	4960      	ldr	r1, [pc, #384]	; (80014b0 <main+0x204>)
 800132e:	485e      	ldr	r0, [pc, #376]	; (80014a8 <main+0x1fc>)
 8001330:	f000 f9b6 	bl	80016a0 <pid_scale>
 8001334:	4602      	mov	r2, r0
 8001336:	4b5c      	ldr	r3, [pc, #368]	; (80014a8 <main+0x1fc>)
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
  pid_azimuth.d_max = pid_scale(&pid_azimuth, 4095);
 800133a:	495c      	ldr	r1, [pc, #368]	; (80014ac <main+0x200>)
 800133c:	485a      	ldr	r0, [pc, #360]	; (80014a8 <main+0x1fc>)
 800133e:	f000 f9af 	bl	80016a0 <pid_scale>
 8001342:	4602      	mov	r2, r0
 8001344:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <main+0x1fc>)
 8001346:	621a      	str	r2, [r3, #32]
  pid_azimuth.d_min = pid_scale(&pid_azimuth, -4095);
 8001348:	4959      	ldr	r1, [pc, #356]	; (80014b0 <main+0x204>)
 800134a:	4857      	ldr	r0, [pc, #348]	; (80014a8 <main+0x1fc>)
 800134c:	f000 f9a8 	bl	80016a0 <pid_scale>
 8001350:	4602      	mov	r2, r0
 8001352:	4b55      	ldr	r3, [pc, #340]	; (80014a8 <main+0x1fc>)
 8001354:	62da      	str	r2, [r3, #44]	; 0x2c
  pid_azimuth.total_max = pid_scale(&pid_azimuth, 4095);
 8001356:	4955      	ldr	r1, [pc, #340]	; (80014ac <main+0x200>)
 8001358:	4853      	ldr	r0, [pc, #332]	; (80014a8 <main+0x1fc>)
 800135a:	f000 f9a1 	bl	80016a0 <pid_scale>
 800135e:	4602      	mov	r2, r0
 8001360:	4b51      	ldr	r3, [pc, #324]	; (80014a8 <main+0x1fc>)
 8001362:	649a      	str	r2, [r3, #72]	; 0x48
  pid_azimuth.total_min = pid_scale(&pid_azimuth, 0);
 8001364:	f04f 0100 	mov.w	r1, #0
 8001368:	484f      	ldr	r0, [pc, #316]	; (80014a8 <main+0x1fc>)
 800136a:	f000 f999 	bl	80016a0 <pid_scale>
 800136e:	4602      	mov	r2, r0
 8001370:	4b4d      	ldr	r3, [pc, #308]	; (80014a8 <main+0x1fc>)
 8001372:	64da      	str	r2, [r3, #76]	; 0x4c

  pid_init(&pid_height, 150.0f, 50.0f, 0.005f, 10, 1);
 8001374:	2301      	movs	r3, #1
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	230a      	movs	r3, #10
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4b47      	ldr	r3, [pc, #284]	; (800149c <main+0x1f0>)
 800137e:	4a48      	ldr	r2, [pc, #288]	; (80014a0 <main+0x1f4>)
 8001380:	4948      	ldr	r1, [pc, #288]	; (80014a4 <main+0x1f8>)
 8001382:	484c      	ldr	r0, [pc, #304]	; (80014b4 <main+0x208>)
 8001384:	f000 f904 	bl	8001590 <pid_init>
  pid_height.p_max = pid_scale(&pid_height, 4095);
 8001388:	4948      	ldr	r1, [pc, #288]	; (80014ac <main+0x200>)
 800138a:	484a      	ldr	r0, [pc, #296]	; (80014b4 <main+0x208>)
 800138c:	f000 f988 	bl	80016a0 <pid_scale>
 8001390:	4602      	mov	r2, r0
 8001392:	4b48      	ldr	r3, [pc, #288]	; (80014b4 <main+0x208>)
 8001394:	619a      	str	r2, [r3, #24]
  pid_height.p_min = pid_scale(&pid_height, -4095);
 8001396:	4946      	ldr	r1, [pc, #280]	; (80014b0 <main+0x204>)
 8001398:	4846      	ldr	r0, [pc, #280]	; (80014b4 <main+0x208>)
 800139a:	f000 f981 	bl	80016a0 <pid_scale>
 800139e:	4602      	mov	r2, r0
 80013a0:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <main+0x208>)
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
  pid_height.i_max = pid_scale(&pid_height, 4095);
 80013a4:	4941      	ldr	r1, [pc, #260]	; (80014ac <main+0x200>)
 80013a6:	4843      	ldr	r0, [pc, #268]	; (80014b4 <main+0x208>)
 80013a8:	f000 f97a 	bl	80016a0 <pid_scale>
 80013ac:	4602      	mov	r2, r0
 80013ae:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <main+0x208>)
 80013b0:	61da      	str	r2, [r3, #28]
  pid_height.i_min = pid_scale(&pid_height, -4095);
 80013b2:	493f      	ldr	r1, [pc, #252]	; (80014b0 <main+0x204>)
 80013b4:	483f      	ldr	r0, [pc, #252]	; (80014b4 <main+0x208>)
 80013b6:	f000 f973 	bl	80016a0 <pid_scale>
 80013ba:	4602      	mov	r2, r0
 80013bc:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <main+0x208>)
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
  pid_height.d_max = pid_scale(&pid_height, 4095);
 80013c0:	493a      	ldr	r1, [pc, #232]	; (80014ac <main+0x200>)
 80013c2:	483c      	ldr	r0, [pc, #240]	; (80014b4 <main+0x208>)
 80013c4:	f000 f96c 	bl	80016a0 <pid_scale>
 80013c8:	4602      	mov	r2, r0
 80013ca:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <main+0x208>)
 80013cc:	621a      	str	r2, [r3, #32]
  pid_height.d_min = pid_scale(&pid_height, -4095);
 80013ce:	4938      	ldr	r1, [pc, #224]	; (80014b0 <main+0x204>)
 80013d0:	4838      	ldr	r0, [pc, #224]	; (80014b4 <main+0x208>)
 80013d2:	f000 f965 	bl	80016a0 <pid_scale>
 80013d6:	4602      	mov	r2, r0
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <main+0x208>)
 80013da:	62da      	str	r2, [r3, #44]	; 0x2c
  pid_height.total_max = pid_scale(&pid_height, 4095);
 80013dc:	4933      	ldr	r1, [pc, #204]	; (80014ac <main+0x200>)
 80013de:	4835      	ldr	r0, [pc, #212]	; (80014b4 <main+0x208>)
 80013e0:	f000 f95e 	bl	80016a0 <pid_scale>
 80013e4:	4602      	mov	r2, r0
 80013e6:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <main+0x208>)
 80013e8:	649a      	str	r2, [r3, #72]	; 0x48
  pid_height.total_min = pid_scale(&pid_height, 0);
 80013ea:	f04f 0100 	mov.w	r1, #0
 80013ee:	4831      	ldr	r0, [pc, #196]	; (80014b4 <main+0x208>)
 80013f0:	f000 f956 	bl	80016a0 <pid_scale>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <main+0x208>)
 80013f8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80013fa:	4b25      	ldr	r3, [pc, #148]	; (8001490 <main+0x1e4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2200      	movs	r2, #0
 8001400:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001402:	2100      	movs	r1, #0
 8001404:	4822      	ldr	r0, [pc, #136]	; (8001490 <main+0x1e4>)
 8001406:	f003 f889 	bl	800451c <HAL_TIM_PWM_Start>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800140a:	4b21      	ldr	r3, [pc, #132]	; (8001490 <main+0x1e4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2200      	movs	r2, #0
 8001410:	639a      	str	r2, [r3, #56]	; 0x38
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001412:	2104      	movs	r1, #4
 8001414:	481e      	ldr	r0, [pc, #120]	; (8001490 <main+0x1e4>)
 8001416:	f003 f881 	bl	800451c <HAL_TIM_PWM_Start>

		HAL_GPIO_WritePin(MOTOR11_GPIO_Port, MOTOR11_Pin, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	2101      	movs	r1, #1
 800141e:	4826      	ldr	r0, [pc, #152]	; (80014b8 <main+0x20c>)
 8001420:	f000 ff98 	bl	8002354 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR12_GPIO_Port, MOTOR12_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	2102      	movs	r1, #2
 8001428:	4823      	ldr	r0, [pc, #140]	; (80014b8 <main+0x20c>)
 800142a:	f000 ff93 	bl	8002354 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR21_GPIO_Port, MOTOR21_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2104      	movs	r1, #4
 8001432:	4821      	ldr	r0, [pc, #132]	; (80014b8 <main+0x20c>)
 8001434:	f000 ff8e 	bl	8002354 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR22_GPIO_Port, MOTOR22_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2108      	movs	r1, #8
 800143c:	481e      	ldr	r0, [pc, #120]	; (80014b8 <main+0x20c>)
 800143e:	f000 ff89 	bl	8002354 <HAL_GPIO_WritePin>
  while (1)
  {

		pulse_count_azimuth = TIM2->CNT; // przepisanie wartosci z rejestru timera
 8001442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	b29a      	uxth	r2, r3
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <main+0x210>)
 800144c:	801a      	strh	r2, [r3, #0]
		positions_azimuth = pulse_count_azimuth/4;
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <main+0x210>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <main+0x214>)
 800145a:	801a      	strh	r2, [r3, #0]

		pulse_count_height = TIM2->CNT; // przepisanie wartosci z rejestru timera
 800145c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	b29a      	uxth	r2, r3
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <main+0x218>)
 8001466:	801a      	strh	r2, [r3, #0]
		positions_height = pulse_count_height/4;
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <main+0x218>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	b29b      	uxth	r3, r3
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	b29a      	uxth	r2, r3
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <main+0x21c>)
 8001474:	801a      	strh	r2, [r3, #0]

	  if(ReceivedDataFlag == 1){
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <main+0x220>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d104      	bne.n	8001488 <main+0x1dc>
	  	ReceivedDataFlag = 0;
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <main+0x220>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
	  	parse();
 8001484:	f7ff fe5a 	bl	800113c <parse>
//	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
//	  HAL_Delay(1000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 8001488:	2064      	movs	r0, #100	; 0x64
 800148a:	f000 fcd9 	bl	8001e40 <HAL_Delay>
		pulse_count_azimuth = TIM2->CNT; // przepisanie wartosci z rejestru timera
 800148e:	e7d8      	b.n	8001442 <main+0x196>
 8001490:	20000768 	.word	0x20000768
 8001494:	200007b0 	.word	0x200007b0
 8001498:	20000720 	.word	0x20000720
 800149c:	3ba3d70a 	.word	0x3ba3d70a
 80014a0:	42480000 	.word	0x42480000
 80014a4:	43160000 	.word	0x43160000
 80014a8:	2000059c 	.word	0x2000059c
 80014ac:	457ff000 	.word	0x457ff000
 80014b0:	c57ff000 	.word	0xc57ff000
 80014b4:	200006c4 	.word	0x200006c4
 80014b8:	40010800 	.word	0x40010800
 80014bc:	2000065c 	.word	0x2000065c
 80014c0:	2000071c 	.word	0x2000071c
 80014c4:	200005f6 	.word	0x200005f6
 80014c8:	200005f4 	.word	0x200005f4
 80014cc:	20000368 	.word	0x20000368

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b094      	sub	sp, #80	; 0x50
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014da:	2228      	movs	r2, #40	; 0x28
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f008 f86e 	bl	80095c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001500:	2301      	movs	r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001504:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150e:	2301      	movs	r3, #1
 8001510:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001512:	2302      	movs	r3, #2
 8001514:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001516:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800151a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800151c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001520:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001526:	4618      	mov	r0, r3
 8001528:	f002 fab0 	bl	8003a8c <HAL_RCC_OscConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001532:	f000 f827 	bl	8001584 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001536:	230f      	movs	r3, #15
 8001538:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153a:	2302      	movs	r3, #2
 800153c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001546:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2102      	movs	r1, #2
 8001552:	4618      	mov	r0, r3
 8001554:	f002 fd1a 	bl	8003f8c <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800155e:	f000 f811 	bl	8001584 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001562:	2310      	movs	r3, #16
 8001564:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4618      	mov	r0, r3
 800156e:	f002 fe77 	bl	8004260 <HAL_RCCEx_PeriphCLKConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001578:	f000 f804 	bl	8001584 <Error_Handler>
  }
}
 800157c:	bf00      	nop
 800157e:	3750      	adds	r7, #80	; 0x50
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <pid_init>:
 *
 * Created on: 09.03.2018
 * Author: Wojciech Domski
 */
#include "pid.h"
void pid_init(cpid_t *pid, float p, float i, float d, uint8_t f, int32_t dt_ms) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	603b      	str	r3, [r7, #0]
	uint32_t k;
	pid->power = 1;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2201      	movs	r2, #1
 80015a2:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	e007      	b.n	80015ba <pid_init+0x2a>
		pid->power = pid->power * 2;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ae:	005a      	lsls	r2, r3, #1
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	635a      	str	r2, [r3, #52]	; 0x34
	for (k = 0; k < f; ++k) {
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3301      	adds	r3, #1
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d3f2      	bcc.n	80015aa <pid_init+0x1a>
	}
	pid->f = f;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	pid->p = (int32_t) (p * pid->power);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fb7e 	bl	8000cd4 <__aeabi_ui2f>
 80015d8:	4603      	mov	r3, r0
 80015da:	68b9      	ldr	r1, [r7, #8]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fbd1 	bl	8000d84 <__aeabi_fmul>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fd1d 	bl	8001024 <__aeabi_f2iz>
 80015ea:	4602      	mov	r2, r0
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	601a      	str	r2, [r3, #0]
	pid->i = (int32_t) (i * pid->power);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fb6d 	bl	8000cd4 <__aeabi_ui2f>
 80015fa:	4603      	mov	r3, r0
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fbc0 	bl	8000d84 <__aeabi_fmul>
 8001604:	4603      	mov	r3, r0
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fd0c 	bl	8001024 <__aeabi_f2iz>
 800160c:	4602      	mov	r2, r0
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	605a      	str	r2, [r3, #4]
	pid->d = (int32_t) (d * pid->power);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fb5c 	bl	8000cd4 <__aeabi_ui2f>
 800161c:	4603      	mov	r3, r0
 800161e:	6839      	ldr	r1, [r7, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fbaf 	bl	8000d84 <__aeabi_fmul>
 8001626:	4603      	mov	r3, r0
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fcfb 	bl	8001024 <__aeabi_f2iz>
 800162e:	4602      	mov	r2, r0
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	609a      	str	r2, [r3, #8]
	pid->p_val = 0;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
	pid->i_val = 0;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
	pid->d_val = 0;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
	pid->p_max = INT32_MAX;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800164c:	619a      	str	r2, [r3, #24]
	pid->p_min = INT32_MIN;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
	pid->i_max = INT32_MAX;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800165c:	61da      	str	r2, [r3, #28]
	pid->i_min = INT32_MIN;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001664:	629a      	str	r2, [r3, #40]	; 0x28
	pid->d_max = INT32_MAX;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800166c:	621a      	str	r2, [r3, #32]
	pid->d_min = INT32_MIN;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001674:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->e_last = 0;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	641a      	str	r2, [r3, #64]	; 0x40
	pid->sum = 0;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	645a      	str	r2, [r3, #68]	; 0x44
	pid->total_max = INT32_MAX;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001688:	649a      	str	r2, [r3, #72]	; 0x48
	pid->total_min = INT32_MIN;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001690:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->dt_ms = dt_ms;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001696:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001698:	bf00      	nop
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <pid_scale>:
		total = pid->total_min;
	pid->control = total >> pid->f;
	pid->e_last = e;
	return pid->control;
}
int32_t pid_scale(cpid_t *pid, float v) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	return v * pid->power;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fb10 	bl	8000cd4 <__aeabi_ui2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	6839      	ldr	r1, [r7, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fb63 	bl	8000d84 <__aeabi_fmul>
 80016be:	4603      	mov	r3, r0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fcaf 	bl	8001024 <__aeabi_f2iz>
 80016c6:	4603      	mov	r3, r0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_MspInit+0x6c>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	4a18      	ldr	r2, [pc, #96]	; (800173c <HAL_MspInit+0x6c>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6193      	str	r3, [r2, #24]
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_MspInit+0x6c>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	4b13      	ldr	r3, [pc, #76]	; (800173c <HAL_MspInit+0x6c>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a12      	ldr	r2, [pc, #72]	; (800173c <HAL_MspInit+0x6c>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_MspInit+0x6c>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2005      	movs	r0, #5
 800170c:	f000 fc91 	bl	8002032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001710:	2005      	movs	r0, #5
 8001712:	f000 fcaa 	bl	800206a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_MspInit+0x70>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_MspInit+0x70>)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	40010000 	.word	0x40010000

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <HardFault_Handler+0x4>

08001756 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <MemManage_Handler+0x4>

0800175c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <BusFault_Handler+0x4>

08001762 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <UsageFault_Handler+0x4>

08001768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001790:	f000 fb3a 	bl	8001e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}

08001798 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80017aa:	f000 ff1c 	bl	80025e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000d88 	.word	0x20000d88

080017b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	e00a      	b.n	80017e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ca:	f3af 8000 	nop.w
 80017ce:	4601      	mov	r1, r0
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	60ba      	str	r2, [r7, #8]
 80017d6:	b2ca      	uxtb	r2, r1
 80017d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbf0      	blt.n	80017ca <_read+0x12>
	}

return len;
 80017e8:	687b      	ldr	r3, [r7, #4]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
	return -1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001818:	605a      	str	r2, [r3, #4]
	return 0;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <_isatty>:

int _isatty(int file)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
	return 1;
 800182e:	2301      	movs	r3, #1
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800183a:	b480      	push	{r7}
 800183c:	b085      	sub	sp, #20
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
	return 0;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
	...

08001854 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <_sbrk+0x50>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <_sbrk+0x16>
		heap_end = &end;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <_sbrk+0x50>)
 8001866:	4a10      	ldr	r2, [pc, #64]	; (80018a8 <_sbrk+0x54>)
 8001868:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <_sbrk+0x50>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <_sbrk+0x50>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	466a      	mov	r2, sp
 800187a:	4293      	cmp	r3, r2
 800187c:	d907      	bls.n	800188e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800187e:	f007 fe75 	bl	800956c <__errno>
 8001882:	4602      	mov	r2, r0
 8001884:	230c      	movs	r3, #12
 8001886:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	e006      	b.n	800189c <_sbrk+0x48>
	}

	heap_end += incr;
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <_sbrk+0x50>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	4a03      	ldr	r2, [pc, #12]	; (80018a4 <_sbrk+0x50>)
 8001898:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	2000036c 	.word	0x2000036c
 80018a8:	20001078 	.word	0x20001078

080018ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b096      	sub	sp, #88	; 0x58
 80018bc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	615a      	str	r2, [r3, #20]
 80018e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2220      	movs	r2, #32
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f007 fe65 	bl	80095c0 <memset>

  htim1.Instance = TIM1;
 80018f6:	4b44      	ldr	r3, [pc, #272]	; (8001a08 <MX_TIM1_Init+0x150>)
 80018f8:	4a44      	ldr	r2, [pc, #272]	; (8001a0c <MX_TIM1_Init+0x154>)
 80018fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 80018fc:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <MX_TIM1_Init+0x150>)
 80018fe:	2202      	movs	r2, #2
 8001900:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001902:	4b41      	ldr	r3, [pc, #260]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001908:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <MX_TIM1_Init+0x150>)
 800190a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800190e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001910:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001916:	4b3c      	ldr	r3, [pc, #240]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001918:	2200      	movs	r2, #0
 800191a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <MX_TIM1_Init+0x150>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001922:	4839      	ldr	r0, [pc, #228]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001924:	f002 fd52 	bl	80043cc <HAL_TIM_Base_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800192e:	f7ff fe29 	bl	8001584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001936:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001938:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800193c:	4619      	mov	r1, r3
 800193e:	4832      	ldr	r0, [pc, #200]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001940:	f003 f87c 	bl	8004a3c <HAL_TIM_ConfigClockSource>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800194a:	f7ff fe1b 	bl	8001584 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800194e:	482e      	ldr	r0, [pc, #184]	; (8001a08 <MX_TIM1_Init+0x150>)
 8001950:	f002 fd8b 	bl	800446a <HAL_TIM_PWM_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800195a:	f7ff fe13 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001966:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800196a:	4619      	mov	r1, r3
 800196c:	4826      	ldr	r0, [pc, #152]	; (8001a08 <MX_TIM1_Init+0x150>)
 800196e:	f003 fc5f 	bl	8005230 <HAL_TIMEx_MasterConfigSynchronization>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001978:	f7ff fe04 	bl	8001584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197c:	2360      	movs	r3, #96	; 0x60
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001988:	2300      	movs	r3, #0
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199c:	2200      	movs	r2, #0
 800199e:	4619      	mov	r1, r3
 80019a0:	4819      	ldr	r0, [pc, #100]	; (8001a08 <MX_TIM1_Init+0x150>)
 80019a2:	f002 ff8d 	bl	80048c0 <HAL_TIM_PWM_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80019ac:	f7ff fdea 	bl	8001584 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b4:	2204      	movs	r2, #4
 80019b6:	4619      	mov	r1, r3
 80019b8:	4813      	ldr	r0, [pc, #76]	; (8001a08 <MX_TIM1_Init+0x150>)
 80019ba:	f002 ff81 	bl	80048c0 <HAL_TIM_PWM_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80019c4:	f7ff fdde 	bl	8001584 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	4807      	ldr	r0, [pc, #28]	; (8001a08 <MX_TIM1_Init+0x150>)
 80019ec:	f003 fc7e 	bl	80052ec <HAL_TIMEx_ConfigBreakDeadTime>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80019f6:	f7ff fdc5 	bl	8001584 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80019fa:	4803      	ldr	r0, [pc, #12]	; (8001a08 <MX_TIM1_Init+0x150>)
 80019fc:	f000 f964 	bl	8001cc8 <HAL_TIM_MspPostInit>

}
 8001a00:	bf00      	nop
 8001a02:	3758      	adds	r7, #88	; 0x58
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000768 	.word	0x20000768
 8001a0c:	40012c00 	.word	0x40012c00

08001a10 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08c      	sub	sp, #48	; 0x30
 8001a14:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	2224      	movs	r2, #36	; 0x24
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f007 fdce 	bl	80095c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001a2c:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <MX_TIM2_Init+0xa0>)
 8001a2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <MX_TIM2_Init+0xa0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <MX_TIM2_Init+0xa0>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <MX_TIM2_Init+0xa0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <MX_TIM2_Init+0xa0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <MX_TIM2_Init+0xa0>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a52:	2303      	movs	r3, #3
 8001a54:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <MX_TIM2_Init+0xa0>)
 8001a7e:	f002 fdef 	bl	8004660 <HAL_TIM_Encoder_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001a88:	f7ff fd7c 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_TIM2_Init+0xa0>)
 8001a9a:	f003 fbc9 	bl	8005230 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001aa4:	f7ff fd6e 	bl	8001584 <Error_Handler>
  }

}
 8001aa8:	bf00      	nop
 8001aaa:	3730      	adds	r7, #48	; 0x30
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200007b0 	.word	0x200007b0

08001ab4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08c      	sub	sp, #48	; 0x30
 8001ab8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	2224      	movs	r2, #36	; 0x24
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f007 fd7c 	bl	80095c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8001ad0:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <MX_TIM3_Init+0xa0>)
 8001ad2:	4a21      	ldr	r2, [pc, #132]	; (8001b58 <MX_TIM3_Init+0xa4>)
 8001ad4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ad6:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <MX_TIM3_Init+0xa0>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <MX_TIM3_Init+0xa0>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <MX_TIM3_Init+0xa0>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <MX_TIM3_Init+0xa0>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aee:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <MX_TIM3_Init+0xa0>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001af4:	2301      	movs	r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001afc:	2301      	movs	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480d      	ldr	r0, [pc, #52]	; (8001b54 <MX_TIM3_Init+0xa0>)
 8001b20:	f002 fd9e 	bl	8004660 <HAL_TIM_Encoder_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001b2a:	f7ff fd2b 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4806      	ldr	r0, [pc, #24]	; (8001b54 <MX_TIM3_Init+0xa0>)
 8001b3c:	f003 fb78 	bl	8005230 <HAL_TIMEx_MasterConfigSynchronization>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001b46:	f7ff fd1d 	bl	8001584 <Error_Handler>
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	3730      	adds	r7, #48	; 0x30
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000720 	.word	0x20000720
 8001b58:	40000400 	.word	0x40000400

08001b5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a09      	ldr	r2, [pc, #36]	; (8001b90 <HAL_TIM_Base_MspInit+0x34>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d10b      	bne.n	8001b86 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_TIM_Base_MspInit+0x38>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <HAL_TIM_Base_MspInit+0x38>)
 8001b74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b78:	6193      	str	r3, [r2, #24]
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_TIM_Base_MspInit+0x38>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	40012c00 	.word	0x40012c00
 8001b94:	40021000 	.word	0x40021000

08001b98 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08c      	sub	sp, #48	; 0x30
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb6:	d14f      	bne.n	8001c58 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bb8:	4b3e      	ldr	r3, [pc, #248]	; (8001cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	4a3d      	ldr	r2, [pc, #244]	; (8001cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	61d3      	str	r3, [r2, #28]
 8001bc4:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	61bb      	str	r3, [r7, #24]
 8001bce:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd0:	4b38      	ldr	r3, [pc, #224]	; (8001cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a37      	ldr	r2, [pc, #220]	; (8001cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b35      	ldr	r3, [pc, #212]	; (8001cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be8:	4b32      	ldr	r3, [pc, #200]	; (8001cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a31      	ldr	r2, [pc, #196]	; (8001cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001bee:	f043 0308 	orr.w	r3, r3, #8
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b2f      	ldr	r3, [pc, #188]	; (8001cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	f107 031c 	add.w	r3, r7, #28
 8001c12:	4619      	mov	r1, r3
 8001c14:	4828      	ldr	r0, [pc, #160]	; (8001cb8 <HAL_TIM_Encoder_MspInit+0x120>)
 8001c16:	f000 fa43 	bl	80020a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c1a:	2308      	movs	r3, #8
 8001c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c26:	f107 031c 	add.w	r3, r7, #28
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4823      	ldr	r0, [pc, #140]	; (8001cbc <HAL_TIM_Encoder_MspInit+0x124>)
 8001c2e:	f000 fa37 	bl	80020a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <HAL_TIM_Encoder_MspInit+0x128>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c42:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c50:	4a1b      	ldr	r2, [pc, #108]	; (8001cc0 <HAL_TIM_Encoder_MspInit+0x128>)
 8001c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c56:	e028      	b.n	8001caa <HAL_TIM_Encoder_MspInit+0x112>
  else if(tim_encoderHandle->Instance==TIM3)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a19      	ldr	r2, [pc, #100]	; (8001cc4 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d123      	bne.n	8001caa <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	61d3      	str	r3, [r2, #28]
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6193      	str	r3, [r2, #24]
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c92:	23c0      	movs	r3, #192	; 0xc0
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4804      	ldr	r0, [pc, #16]	; (8001cb8 <HAL_TIM_Encoder_MspInit+0x120>)
 8001ca6:	f000 f9fb 	bl	80020a0 <HAL_GPIO_Init>
}
 8001caa:	bf00      	nop
 8001cac:	3730      	adds	r7, #48	; 0x30
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40010800 	.word	0x40010800
 8001cbc:	40010c00 	.word	0x40010c00
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	40000400 	.word	0x40000400

08001cc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a10      	ldr	r2, [pc, #64]	; (8001d24 <HAL_TIM_MspPostInit+0x5c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d118      	bne.n	8001d1a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_TIM_MspPostInit+0x60>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <HAL_TIM_MspPostInit+0x60>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	6193      	str	r3, [r2, #24]
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_TIM_MspPostInit+0x60>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = PWM2_Pin|PWM1_Pin;
 8001d00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 0310 	add.w	r3, r7, #16
 8001d12:	4619      	mov	r1, r3
 8001d14:	4805      	ldr	r0, [pc, #20]	; (8001d2c <HAL_TIM_MspPostInit+0x64>)
 8001d16:	f000 f9c3 	bl	80020a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3720      	adds	r7, #32
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40012c00 	.word	0x40012c00
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40010800 	.word	0x40010800

08001d30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d32:	e003      	b.n	8001d3c <LoopCopyDataInit>

08001d34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d3a:	3104      	adds	r1, #4

08001d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d3c:	480a      	ldr	r0, [pc, #40]	; (8001d68 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d44:	d3f6      	bcc.n	8001d34 <CopyDataInit>
  ldr r2, =_sbss
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d48:	e002      	b.n	8001d50 <LoopFillZerobss>

08001d4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d4c:	f842 3b04 	str.w	r3, [r2], #4

08001d50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d54:	d3f9      	bcc.n	8001d4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d56:	f7ff fda9 	bl	80018ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f007 fc0d 	bl	8009578 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d5e:	f7ff faa5 	bl	80012ac <main>
  bx lr
 8001d62:	4770      	bx	lr
  ldr r3, =_sidata
 8001d64:	0800e6fc 	.word	0x0800e6fc
  ldr r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d6c:	2000034c 	.word	0x2000034c
  ldr r2, =_sbss
 8001d70:	2000034c 	.word	0x2000034c
  ldr r3, = _ebss
 8001d74:	20001078 	.word	0x20001078

08001d78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <ADC1_2_IRQHandler>
	...

08001d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <HAL_Init+0x28>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <HAL_Init+0x28>)
 8001d86:	f043 0310 	orr.w	r3, r3, #16
 8001d8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d8c:	2003      	movs	r0, #3
 8001d8e:	f000 f945 	bl	800201c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d92:	2000      	movs	r0, #0
 8001d94:	f000 f808 	bl	8001da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d98:	f7ff fc9a 	bl	80016d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40022000 	.word	0x40022000

08001da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_InitTick+0x54>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_InitTick+0x58>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4619      	mov	r1, r3
 8001dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 f95d 	bl	8002086 <HAL_SYSTICK_Config>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00e      	b.n	8001df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b0f      	cmp	r3, #15
 8001dda:	d80a      	bhi.n	8001df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f000 f925 	bl	8002032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de8:	4a06      	ldr	r2, [pc, #24]	; (8001e04 <HAL_InitTick+0x5c>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e000      	b.n	8001df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20000008 	.word	0x20000008
 8001e04:	20000004 	.word	0x20000004

08001e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_IncTick+0x1c>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_IncTick+0x20>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	4a03      	ldr	r2, [pc, #12]	; (8001e28 <HAL_IncTick+0x20>)
 8001e1a:	6013      	str	r3, [r2, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	20000008 	.word	0x20000008
 8001e28:	200007f8 	.word	0x200007f8

08001e2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b02      	ldr	r3, [pc, #8]	; (8001e3c <HAL_GetTick+0x10>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	200007f8 	.word	0x200007f8

08001e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e48:	f7ff fff0 	bl	8001e2c <HAL_GetTick>
 8001e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d005      	beq.n	8001e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_Delay+0x40>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e66:	bf00      	nop
 8001e68:	f7ff ffe0 	bl	8001e2c <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d8f7      	bhi.n	8001e68 <HAL_Delay+0x28>
  {
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000008 	.word	0x20000008

08001e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f003 0307 	and.w	r3, r3, #7
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	db0b      	blt.n	8001f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	4906      	ldr	r1, [pc, #24]	; (8001f1c <__NVIC_EnableIRQ+0x34>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	2001      	movs	r0, #1
 8001f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	e000e100 	.word	0xe000e100

08001f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	db0a      	blt.n	8001f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	490c      	ldr	r1, [pc, #48]	; (8001f6c <__NVIC_SetPriority+0x4c>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	440b      	add	r3, r1
 8001f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f48:	e00a      	b.n	8001f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4908      	ldr	r1, [pc, #32]	; (8001f70 <__NVIC_SetPriority+0x50>)
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3b04      	subs	r3, #4
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	761a      	strb	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f1c3 0307 	rsb	r3, r3, #7
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	bf28      	it	cs
 8001f92:	2304      	movcs	r3, #4
 8001f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d902      	bls.n	8001fa4 <NVIC_EncodePriority+0x30>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3b03      	subs	r3, #3
 8001fa2:	e000      	b.n	8001fa6 <NVIC_EncodePriority+0x32>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43d9      	mvns	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	4313      	orrs	r3, r2
         );
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe8:	d301      	bcc.n	8001fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00f      	b.n	800200e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fee:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <SysTick_Config+0x40>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff6:	210f      	movs	r1, #15
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffc:	f7ff ff90 	bl	8001f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <SysTick_Config+0x40>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002006:	4b04      	ldr	r3, [pc, #16]	; (8002018 <SysTick_Config+0x40>)
 8002008:	2207      	movs	r2, #7
 800200a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	e000e010 	.word	0xe000e010

0800201c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff2d 	bl	8001e84 <__NVIC_SetPriorityGrouping>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002044:	f7ff ff42 	bl	8001ecc <__NVIC_GetPriorityGrouping>
 8002048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f7ff ff90 	bl	8001f74 <NVIC_EncodePriority>
 8002054:	4602      	mov	r2, r0
 8002056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff5f 	bl	8001f20 <__NVIC_SetPriority>
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff35 	bl	8001ee8 <__NVIC_EnableIRQ>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ffa2 	bl	8001fd8 <SysTick_Config>
 8002094:	4603      	mov	r3, r0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b08b      	sub	sp, #44	; 0x2c
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b2:	e127      	b.n	8002304 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020b4:	2201      	movs	r2, #1
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	f040 8116 	bne.w	80022fe <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b12      	cmp	r3, #18
 80020d8:	d034      	beq.n	8002144 <HAL_GPIO_Init+0xa4>
 80020da:	2b12      	cmp	r3, #18
 80020dc:	d80d      	bhi.n	80020fa <HAL_GPIO_Init+0x5a>
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d02b      	beq.n	800213a <HAL_GPIO_Init+0x9a>
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d804      	bhi.n	80020f0 <HAL_GPIO_Init+0x50>
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d031      	beq.n	800214e <HAL_GPIO_Init+0xae>
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d01c      	beq.n	8002128 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ee:	e048      	b.n	8002182 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d043      	beq.n	800217c <HAL_GPIO_Init+0xdc>
 80020f4:	2b11      	cmp	r3, #17
 80020f6:	d01b      	beq.n	8002130 <HAL_GPIO_Init+0x90>
          break;
 80020f8:	e043      	b.n	8002182 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020fa:	4a89      	ldr	r2, [pc, #548]	; (8002320 <HAL_GPIO_Init+0x280>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d026      	beq.n	800214e <HAL_GPIO_Init+0xae>
 8002100:	4a87      	ldr	r2, [pc, #540]	; (8002320 <HAL_GPIO_Init+0x280>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d806      	bhi.n	8002114 <HAL_GPIO_Init+0x74>
 8002106:	4a87      	ldr	r2, [pc, #540]	; (8002324 <HAL_GPIO_Init+0x284>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d020      	beq.n	800214e <HAL_GPIO_Init+0xae>
 800210c:	4a86      	ldr	r2, [pc, #536]	; (8002328 <HAL_GPIO_Init+0x288>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01d      	beq.n	800214e <HAL_GPIO_Init+0xae>
          break;
 8002112:	e036      	b.n	8002182 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002114:	4a85      	ldr	r2, [pc, #532]	; (800232c <HAL_GPIO_Init+0x28c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d019      	beq.n	800214e <HAL_GPIO_Init+0xae>
 800211a:	4a85      	ldr	r2, [pc, #532]	; (8002330 <HAL_GPIO_Init+0x290>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d016      	beq.n	800214e <HAL_GPIO_Init+0xae>
 8002120:	4a84      	ldr	r2, [pc, #528]	; (8002334 <HAL_GPIO_Init+0x294>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d013      	beq.n	800214e <HAL_GPIO_Init+0xae>
          break;
 8002126:	e02c      	b.n	8002182 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	623b      	str	r3, [r7, #32]
          break;
 800212e:	e028      	b.n	8002182 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	3304      	adds	r3, #4
 8002136:	623b      	str	r3, [r7, #32]
          break;
 8002138:	e023      	b.n	8002182 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	3308      	adds	r3, #8
 8002140:	623b      	str	r3, [r7, #32]
          break;
 8002142:	e01e      	b.n	8002182 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	330c      	adds	r3, #12
 800214a:	623b      	str	r3, [r7, #32]
          break;
 800214c:	e019      	b.n	8002182 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002156:	2304      	movs	r3, #4
 8002158:	623b      	str	r3, [r7, #32]
          break;
 800215a:	e012      	b.n	8002182 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d105      	bne.n	8002170 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002164:	2308      	movs	r3, #8
 8002166:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	611a      	str	r2, [r3, #16]
          break;
 800216e:	e008      	b.n	8002182 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002170:	2308      	movs	r3, #8
 8002172:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	615a      	str	r2, [r3, #20]
          break;
 800217a:	e002      	b.n	8002182 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
          break;
 8002180:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2bff      	cmp	r3, #255	; 0xff
 8002186:	d801      	bhi.n	800218c <HAL_GPIO_Init+0xec>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	e001      	b.n	8002190 <HAL_GPIO_Init+0xf0>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3304      	adds	r3, #4
 8002190:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	2bff      	cmp	r3, #255	; 0xff
 8002196:	d802      	bhi.n	800219e <HAL_GPIO_Init+0xfe>
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	e002      	b.n	80021a4 <HAL_GPIO_Init+0x104>
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	3b08      	subs	r3, #8
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	210f      	movs	r1, #15
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	401a      	ands	r2, r3
 80021b6:	6a39      	ldr	r1, [r7, #32]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	431a      	orrs	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 8096 	beq.w	80022fe <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021d2:	4b59      	ldr	r3, [pc, #356]	; (8002338 <HAL_GPIO_Init+0x298>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	4a58      	ldr	r2, [pc, #352]	; (8002338 <HAL_GPIO_Init+0x298>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6193      	str	r3, [r2, #24]
 80021de:	4b56      	ldr	r3, [pc, #344]	; (8002338 <HAL_GPIO_Init+0x298>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021ea:	4a54      	ldr	r2, [pc, #336]	; (800233c <HAL_GPIO_Init+0x29c>)
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	3302      	adds	r3, #2
 80021f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	220f      	movs	r2, #15
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4013      	ands	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4b      	ldr	r2, [pc, #300]	; (8002340 <HAL_GPIO_Init+0x2a0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <HAL_GPIO_Init+0x19e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4a      	ldr	r2, [pc, #296]	; (8002344 <HAL_GPIO_Init+0x2a4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00d      	beq.n	800223a <HAL_GPIO_Init+0x19a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a49      	ldr	r2, [pc, #292]	; (8002348 <HAL_GPIO_Init+0x2a8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d007      	beq.n	8002236 <HAL_GPIO_Init+0x196>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a48      	ldr	r2, [pc, #288]	; (800234c <HAL_GPIO_Init+0x2ac>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_GPIO_Init+0x192>
 800222e:	2303      	movs	r3, #3
 8002230:	e006      	b.n	8002240 <HAL_GPIO_Init+0x1a0>
 8002232:	2304      	movs	r3, #4
 8002234:	e004      	b.n	8002240 <HAL_GPIO_Init+0x1a0>
 8002236:	2302      	movs	r3, #2
 8002238:	e002      	b.n	8002240 <HAL_GPIO_Init+0x1a0>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_GPIO_Init+0x1a0>
 800223e:	2300      	movs	r3, #0
 8002240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002242:	f002 0203 	and.w	r2, r2, #3
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	4093      	lsls	r3, r2
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4313      	orrs	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002250:	493a      	ldr	r1, [pc, #232]	; (800233c <HAL_GPIO_Init+0x29c>)
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d006      	beq.n	8002278 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800226a:	4b39      	ldr	r3, [pc, #228]	; (8002350 <HAL_GPIO_Init+0x2b0>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4938      	ldr	r1, [pc, #224]	; (8002350 <HAL_GPIO_Init+0x2b0>)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]
 8002276:	e006      	b.n	8002286 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002278:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_GPIO_Init+0x2b0>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	43db      	mvns	r3, r3
 8002280:	4933      	ldr	r1, [pc, #204]	; (8002350 <HAL_GPIO_Init+0x2b0>)
 8002282:	4013      	ands	r3, r2
 8002284:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002292:	4b2f      	ldr	r3, [pc, #188]	; (8002350 <HAL_GPIO_Init+0x2b0>)
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	492e      	ldr	r1, [pc, #184]	; (8002350 <HAL_GPIO_Init+0x2b0>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
 800229e:	e006      	b.n	80022ae <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022a0:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <HAL_GPIO_Init+0x2b0>)
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	4929      	ldr	r1, [pc, #164]	; (8002350 <HAL_GPIO_Init+0x2b0>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d006      	beq.n	80022c8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022ba:	4b25      	ldr	r3, [pc, #148]	; (8002350 <HAL_GPIO_Init+0x2b0>)
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	4924      	ldr	r1, [pc, #144]	; (8002350 <HAL_GPIO_Init+0x2b0>)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
 80022c6:	e006      	b.n	80022d6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022c8:	4b21      	ldr	r3, [pc, #132]	; (8002350 <HAL_GPIO_Init+0x2b0>)
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	491f      	ldr	r1, [pc, #124]	; (8002350 <HAL_GPIO_Init+0x2b0>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d006      	beq.n	80022f0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e2:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_GPIO_Init+0x2b0>)
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	491a      	ldr	r1, [pc, #104]	; (8002350 <HAL_GPIO_Init+0x2b0>)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60cb      	str	r3, [r1, #12]
 80022ee:	e006      	b.n	80022fe <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <HAL_GPIO_Init+0x2b0>)
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	4915      	ldr	r1, [pc, #84]	; (8002350 <HAL_GPIO_Init+0x2b0>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	3301      	adds	r3, #1
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	fa22 f303 	lsr.w	r3, r2, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	f47f aed0 	bne.w	80020b4 <HAL_GPIO_Init+0x14>
  }
}
 8002314:	bf00      	nop
 8002316:	372c      	adds	r7, #44	; 0x2c
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	10210000 	.word	0x10210000
 8002324:	10110000 	.word	0x10110000
 8002328:	10120000 	.word	0x10120000
 800232c:	10310000 	.word	0x10310000
 8002330:	10320000 	.word	0x10320000
 8002334:	10220000 	.word	0x10220000
 8002338:	40021000 	.word	0x40021000
 800233c:	40010000 	.word	0x40010000
 8002340:	40010800 	.word	0x40010800
 8002344:	40010c00 	.word	0x40010c00
 8002348:	40011000 	.word	0x40011000
 800234c:	40011400 	.word	0x40011400
 8002350:	40010400 	.word	0x40010400

08002354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]
 8002360:	4613      	mov	r3, r2
 8002362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002364:	787b      	ldrb	r3, [r7, #1]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800236a:	887a      	ldrh	r2, [r7, #2]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002370:	e003      	b.n	800237a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002372:	887b      	ldrh	r3, [r7, #2]
 8002374:	041a      	lsls	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	611a      	str	r2, [r3, #16]
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002386:	b08b      	sub	sp, #44	; 0x2c
 8002388:	af06      	add	r7, sp, #24
 800238a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0fd      	b.n	8002592 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f006 fe34 	bl	8009018 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2203      	movs	r2, #3
 80023b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f003 f830 	bl	8005422 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	687e      	ldr	r6, [r7, #4]
 80023ca:	466d      	mov	r5, sp
 80023cc:	f106 0410 	add.w	r4, r6, #16
 80023d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d4:	6823      	ldr	r3, [r4, #0]
 80023d6:	602b      	str	r3, [r5, #0]
 80023d8:	1d33      	adds	r3, r6, #4
 80023da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023dc:	6838      	ldr	r0, [r7, #0]
 80023de:	f002 fffa 	bl	80053d6 <USB_CoreInit>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0ce      	b.n	8002592 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2100      	movs	r1, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 f82b 	bl	8005456 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]
 8002404:	e04c      	b.n	80024a0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	440b      	add	r3, r1
 8002416:	3301      	adds	r3, #1
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	440b      	add	r3, r1
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002430:	7bfa      	ldrb	r2, [r7, #15]
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	b298      	uxth	r0, r3
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	3336      	adds	r3, #54	; 0x36
 8002444:	4602      	mov	r2, r0
 8002446:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	440b      	add	r3, r1
 8002458:	3303      	adds	r3, #3
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	440b      	add	r3, r1
 800246c:	3338      	adds	r3, #56	; 0x38
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	440b      	add	r3, r1
 8002480:	333c      	adds	r3, #60	; 0x3c
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002486:	7bfa      	ldrb	r2, [r7, #15]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	440b      	add	r3, r1
 8002494:	3340      	adds	r3, #64	; 0x40
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	3301      	adds	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d3ad      	bcc.n	8002406 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	e044      	b.n	800253a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	440b      	add	r3, r1
 80024be:	f203 1369 	addw	r3, r3, #361	; 0x169
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	440b      	add	r3, r1
 80024d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	440b      	add	r3, r1
 80024ea:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	440b      	add	r3, r1
 8002500:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	440b      	add	r3, r1
 8002516:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800251e:	7bfa      	ldrb	r2, [r7, #15]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	440b      	add	r3, r1
 800252c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	3301      	adds	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	429a      	cmp	r2, r3
 8002542:	d3b5      	bcc.n	80024b0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	687e      	ldr	r6, [r7, #4]
 800254c:	466d      	mov	r5, sp
 800254e:	f106 0410 	add.w	r4, r6, #16
 8002552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	602b      	str	r3, [r5, #0]
 800255a:	1d33      	adds	r3, r6, #4
 800255c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800255e:	6838      	ldr	r0, [r7, #0]
 8002560:	f002 ff85 	bl	800546e <USB_DevInit>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2202      	movs	r2, #2
 800256e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e00d      	b.n	8002592 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f004 ff20 	bl	80073d0 <USB_DevDisconnect>

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800259a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_PCD_Start+0x16>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e016      	b.n	80025de <HAL_PCD_Start+0x44>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f002 ff1a 	bl	80053f6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80025c2:	2101      	movs	r1, #1
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f006 ff9a 	bl	80094fe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f004 fef4 	bl	80073bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b088      	sub	sp, #32
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f004 fef6 	bl	80073e4 <USB_ReadInterrupts>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002602:	d102      	bne.n	800260a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fb61 	bl	8002ccc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f004 fee8 	bl	80073e4 <USB_ReadInterrupts>
 8002614:	4603      	mov	r3, r0
 8002616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261e:	d112      	bne.n	8002646 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002628:	b29a      	uxth	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002632:	b292      	uxth	r2, r2
 8002634:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f006 fd68 	bl	800910e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800263e:	2100      	movs	r1, #0
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f925 	bl	8002890 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f004 feca 	bl	80073e4 <USB_ReadInterrupts>
 8002650:	4603      	mov	r3, r0
 8002652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800265a:	d10b      	bne.n	8002674 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002664:	b29a      	uxth	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800266e:	b292      	uxth	r2, r2
 8002670:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f004 feb3 	bl	80073e4 <USB_ReadInterrupts>
 800267e:	4603      	mov	r3, r0
 8002680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002688:	d10b      	bne.n	80026a2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002692:	b29a      	uxth	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800269c:	b292      	uxth	r2, r2
 800269e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 fe9c 	bl	80073e4 <USB_ReadInterrupts>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b6:	d126      	bne.n	8002706 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0204 	bic.w	r2, r2, #4
 80026ca:	b292      	uxth	r2, r2
 80026cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026d8:	b29a      	uxth	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0208 	bic.w	r2, r2, #8
 80026e2:	b292      	uxth	r2, r2
 80026e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f006 fd49 	bl	8009180 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002700:	b292      	uxth	r2, r2
 8002702:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f004 fe6a 	bl	80073e4 <USB_ReadInterrupts>
 8002710:	4603      	mov	r3, r0
 8002712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800271a:	f040 8084 	bne.w	8002826 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800271e:	2300      	movs	r3, #0
 8002720:	77fb      	strb	r3, [r7, #31]
 8002722:	e011      	b.n	8002748 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	7ffb      	ldrb	r3, [r7, #31]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	441a      	add	r2, r3
 8002730:	7ffb      	ldrb	r3, [r7, #31]
 8002732:	8812      	ldrh	r2, [r2, #0]
 8002734:	b292      	uxth	r2, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	f107 0120 	add.w	r1, r7, #32
 800273c:	440b      	add	r3, r1
 800273e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002742:	7ffb      	ldrb	r3, [r7, #31]
 8002744:	3301      	adds	r3, #1
 8002746:	77fb      	strb	r3, [r7, #31]
 8002748:	7ffb      	ldrb	r3, [r7, #31]
 800274a:	2b07      	cmp	r3, #7
 800274c:	d9ea      	bls.n	8002724 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002756:	b29a      	uxth	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0201 	orr.w	r2, r2, #1
 8002760:	b292      	uxth	r2, r2
 8002762:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800276e:	b29a      	uxth	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	b292      	uxth	r2, r2
 800277a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800277e:	bf00      	nop
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002788:	b29b      	uxth	r3, r3
 800278a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f6      	beq.n	8002780 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800279a:	b29a      	uxth	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a4:	b292      	uxth	r2, r2
 80027a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80027aa:	2300      	movs	r3, #0
 80027ac:	77fb      	strb	r3, [r7, #31]
 80027ae:	e010      	b.n	80027d2 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80027b0:	7ffb      	ldrb	r3, [r7, #31]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	4611      	mov	r1, r2
 80027b8:	7ffa      	ldrb	r2, [r7, #31]
 80027ba:	0092      	lsls	r2, r2, #2
 80027bc:	440a      	add	r2, r1
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	f107 0120 	add.w	r1, r7, #32
 80027c4:	440b      	add	r3, r1
 80027c6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80027ca:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80027cc:	7ffb      	ldrb	r3, [r7, #31]
 80027ce:	3301      	adds	r3, #1
 80027d0:	77fb      	strb	r3, [r7, #31]
 80027d2:	7ffb      	ldrb	r3, [r7, #31]
 80027d4:	2b07      	cmp	r3, #7
 80027d6:	d9eb      	bls.n	80027b0 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0208 	orr.w	r2, r2, #8
 80027ea:	b292      	uxth	r2, r2
 80027ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002802:	b292      	uxth	r2, r2
 8002804:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002810:	b29a      	uxth	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0204 	orr.w	r2, r2, #4
 800281a:	b292      	uxth	r2, r2
 800281c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f006 fc93 	bl	800914c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f004 fdda 	bl	80073e4 <USB_ReadInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800283a:	d10e      	bne.n	800285a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002844:	b29a      	uxth	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800284e:	b292      	uxth	r2, r2
 8002850:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f006 fc4c 	bl	80090f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f004 fdc0 	bl	80073e4 <USB_ReadInterrupts>
 8002864:	4603      	mov	r3, r0
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800286e:	d10b      	bne.n	8002888 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002878:	b29a      	uxth	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002882:	b292      	uxth	r2, r2
 8002884:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002888:	bf00      	nop
 800288a:	3720      	adds	r7, #32
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_PCD_SetAddress+0x1a>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e013      	b.n	80028d2 <HAL_PCD_SetAddress+0x42>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	4611      	mov	r1, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f004 fd67 	bl	8007396 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	4608      	mov	r0, r1
 80028e4:	4611      	mov	r1, r2
 80028e6:	461a      	mov	r2, r3
 80028e8:	4603      	mov	r3, r0
 80028ea:	70fb      	strb	r3, [r7, #3]
 80028ec:	460b      	mov	r3, r1
 80028ee:	803b      	strh	r3, [r7, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	da0e      	bge.n	800291e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	4413      	add	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	705a      	strb	r2, [r3, #1]
 800291c:	e00e      	b.n	800293c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	f003 0207 	and.w	r2, r3, #7
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	4413      	add	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	b2da      	uxtb	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002948:	883a      	ldrh	r2, [r7, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	78ba      	ldrb	r2, [r7, #2]
 8002952:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	785b      	ldrb	r3, [r3, #1]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002966:	78bb      	ldrb	r3, [r7, #2]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d102      	bne.n	8002972 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_PCD_EP_Open+0xa6>
 800297c:	2302      	movs	r3, #2
 800297e:	e00e      	b.n	800299e <HAL_PCD_EP_Open+0xc4>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68f9      	ldr	r1, [r7, #12]
 800298e:	4618      	mov	r0, r3
 8002990:	f002 fd8e 	bl	80054b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800299c:	7afb      	ldrb	r3, [r7, #11]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	460b      	mov	r3, r1
 80029b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	da0e      	bge.n	80029d8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	705a      	strb	r2, [r3, #1]
 80029d6:	e00e      	b.n	80029f6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	f003 0207 	and.w	r2, r3, #7
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_PCD_EP_Close+0x6a>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e00e      	b.n	8002a2e <HAL_PCD_EP_Close+0x88>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68f9      	ldr	r1, [r7, #12]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f003 f8b0 	bl	8005b84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b086      	sub	sp, #24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	460b      	mov	r3, r1
 8002a44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a46:	7afb      	ldrb	r3, [r7, #11]
 8002a48:	f003 0207 	and.w	r2, r3, #7
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2200      	movs	r2, #0
 8002a74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a76:	7afb      	ldrb	r3, [r7, #11]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a82:	7afb      	ldrb	r3, [r7, #11]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d106      	bne.n	8002a9a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6979      	ldr	r1, [r7, #20]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f003 fa62 	bl	8005f5c <USB_EPStartXfer>
 8002a98:	e005      	b.n	8002aa6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6979      	ldr	r1, [r7, #20]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f003 fa5b 	bl	8005f5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	f003 0207 	and.w	r2, r3, #7
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	460b      	mov	r3, r1
 8002aec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aee:	7afb      	ldrb	r3, [r7, #11]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4413      	add	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2200      	movs	r2, #0
 8002b22:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2201      	movs	r2, #1
 8002b28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b2a:	7afb      	ldrb	r3, [r7, #11]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b36:	7afb      	ldrb	r3, [r7, #11]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d106      	bne.n	8002b4e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6979      	ldr	r1, [r7, #20]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 fa08 	bl	8005f5c <USB_EPStartXfer>
 8002b4c:	e005      	b.n	8002b5a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6979      	ldr	r1, [r7, #20]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f003 fa01 	bl	8005f5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	f003 0207 	and.w	r2, r3, #7
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d901      	bls.n	8002b82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e04c      	b.n	8002c1c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	da0e      	bge.n	8002ba8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	705a      	strb	r2, [r3, #1]
 8002ba6:	e00c      	b.n	8002bc2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_PCD_EP_SetStall+0x7e>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e01c      	b.n	8002c1c <HAL_PCD_EP_SetStall+0xb8>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68f9      	ldr	r1, [r7, #12]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f004 fad3 	bl	800719c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d108      	bne.n	8002c12 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	f004 fbf8 	bl	8007402 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	f003 020f 	and.w	r2, r3, #15
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d901      	bls.n	8002c42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e040      	b.n	8002cc4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	da0e      	bge.n	8002c68 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c4a:	78fb      	ldrb	r3, [r7, #3]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	705a      	strb	r2, [r3, #1]
 8002c66:	e00e      	b.n	8002c86 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	f003 0207 	and.w	r2, r3, #7
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_PCD_EP_ClrStall+0x82>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e00e      	b.n	8002cc4 <HAL_PCD_EP_ClrStall+0xa0>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68f9      	ldr	r1, [r7, #12]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f004 fac1 	bl	800723c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08e      	sub	sp, #56	; 0x38
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002cd4:	e2df      	b.n	8003296 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cde:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002ce0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002cec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f040 8158 	bne.w	8002fa6 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002cf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d152      	bne.n	8002da6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d10:	81fb      	strh	r3, [r7, #14]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	89fb      	ldrh	r3, [r7, #14]
 8002d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3328      	adds	r3, #40	; 0x28
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3302      	adds	r3, #2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	441a      	add	r2, r3
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002d64:	2100      	movs	r1, #0
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f006 f9a9 	bl	80090be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 828e 	beq.w	8003296 <PCD_EP_ISR_Handler+0x5ca>
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f040 8289 	bne.w	8003296 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	b292      	uxth	r2, r2
 8002d98:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002da4:	e277      	b.n	8003296 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002db6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d034      	beq.n	8002e2a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3306      	adds	r3, #6
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f004 fb4e 	bl	80074a0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e10:	4013      	ands	r3, r2
 8002e12:	823b      	strh	r3, [r7, #16]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	8a3a      	ldrh	r2, [r7, #16]
 8002e1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e1e:	b292      	uxth	r2, r2
 8002e20:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f006 f91e 	bl	8009064 <HAL_PCD_SetupStageCallback>
 8002e28:	e235      	b.n	8003296 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e2a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f280 8231 	bge.w	8003296 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e40:	4013      	ands	r3, r2
 8002e42:	83bb      	strh	r3, [r7, #28]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	8bba      	ldrh	r2, [r7, #28]
 8002e4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e4e:	b292      	uxth	r2, r2
 8002e50:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	3306      	adds	r3, #6
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d019      	beq.n	8002eba <PCD_EP_ISR_Handler+0x1ee>
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d015      	beq.n	8002eba <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	6959      	ldr	r1, [r3, #20]
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	f004 fafe 	bl	80074a0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	441a      	add	r2, r3
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f006 f8e7 	bl	8009088 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	61bb      	str	r3, [r7, #24]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	4413      	add	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d112      	bne.n	8002f08 <PCD_EP_ISR_Handler+0x23c>
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	801a      	strh	r2, [r3, #0]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	801a      	strh	r2, [r3, #0]
 8002f06:	e02f      	b.n	8002f68 <PCD_EP_ISR_Handler+0x29c>
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2b3e      	cmp	r3, #62	; 0x3e
 8002f0e:	d813      	bhi.n	8002f38 <PCD_EP_ISR_Handler+0x26c>
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	085b      	lsrs	r3, r3, #1
 8002f16:	633b      	str	r3, [r7, #48]	; 0x30
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <PCD_EP_ISR_Handler+0x25e>
 8002f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f26:	3301      	adds	r3, #1
 8002f28:	633b      	str	r3, [r7, #48]	; 0x30
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	029b      	lsls	r3, r3, #10
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	801a      	strh	r2, [r3, #0]
 8002f36:	e017      	b.n	8002f68 <PCD_EP_ISR_Handler+0x29c>
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d102      	bne.n	8002f52 <PCD_EP_ISR_Handler+0x286>
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	633b      	str	r3, [r7, #48]	; 0x30
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	029b      	lsls	r3, r3, #10
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f78:	827b      	strh	r3, [r7, #18]
 8002f7a:	8a7b      	ldrh	r3, [r7, #18]
 8002f7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002f80:	827b      	strh	r3, [r7, #18]
 8002f82:	8a7b      	ldrh	r3, [r7, #18]
 8002f84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f88:	827b      	strh	r3, [r7, #18]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	8a7b      	ldrh	r3, [r7, #18]
 8002f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	8013      	strh	r3, [r2, #0]
 8002fa4:	e177      	b.n	8003296 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002fb8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f280 80ea 	bge.w	8003196 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002fd8:	4013      	ands	r3, r2
 8002fda:	853b      	strh	r3, [r7, #40]	; 0x28
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002fec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ff0:	b292      	uxth	r2, r2
 8002ff2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002ff4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	7b1b      	ldrb	r3, [r3, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d122      	bne.n	8003058 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800301a:	b29b      	uxth	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	3306      	adds	r3, #6
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	4413      	add	r3, r2
 8003030:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800303a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800303c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 8087 	beq.w	8003152 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	6959      	ldr	r1, [r3, #20]
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	88da      	ldrh	r2, [r3, #6]
 8003050:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003052:	f004 fa25 	bl	80074a0 <USB_ReadPMA>
 8003056:	e07c      	b.n	8003152 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	78db      	ldrb	r3, [r3, #3]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d108      	bne.n	8003072 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003060:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003062:	461a      	mov	r2, r3
 8003064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f923 	bl	80032b2 <HAL_PCD_EP_DB_Receive>
 800306c:	4603      	mov	r3, r0
 800306e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003070:	e06f      	b.n	8003152 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308c:	847b      	strh	r3, [r7, #34]	; 0x22
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	441a      	add	r2, r3
 800309c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800309e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d021      	beq.n	8003110 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4413      	add	r3, r2
 80030e0:	3302      	adds	r3, #2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80030f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d02a      	beq.n	8003152 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	6959      	ldr	r1, [r3, #20]
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	891a      	ldrh	r2, [r3, #8]
 8003108:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800310a:	f004 f9c9 	bl	80074a0 <USB_ReadPMA>
 800310e:	e020      	b.n	8003152 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003118:	b29b      	uxth	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4413      	add	r3, r2
 8003124:	3306      	adds	r3, #6
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003138:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800313a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	6959      	ldr	r1, [r3, #20]
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	895a      	ldrh	r2, [r3, #10]
 800314c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800314e:	f004 f9a7 	bl	80074a0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	69da      	ldr	r2, [r3, #28]
 8003156:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003158:	441a      	add	r2, r3
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003164:	441a      	add	r2, r3
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d004      	beq.n	800317c <PCD_EP_ISR_Handler+0x4b0>
 8003172:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	429a      	cmp	r2, r3
 800317a:	d206      	bcs.n	800318a <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	4619      	mov	r1, r3
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f005 ff80 	bl	8009088 <HAL_PCD_DataOutStageCallback>
 8003188:	e005      	b.n	8003196 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003190:	4618      	mov	r0, r3
 8003192:	f002 fee3 	bl	8005f5c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003196:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319c:	2b00      	cmp	r3, #0
 800319e:	d07a      	beq.n	8003296 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80031a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80031ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ce:	843b      	strh	r3, [r7, #32]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	441a      	add	r2, r3
 80031de:	8c3b      	ldrh	r3, [r7, #32]
 80031e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	78db      	ldrb	r3, [r3, #3]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d108      	bne.n	8003206 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d146      	bne.n	800328a <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80031fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003202:	2b00      	cmp	r3, #0
 8003204:	d141      	bne.n	800328a <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320e:	b29b      	uxth	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	3302      	adds	r3, #2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6812      	ldr	r2, [r2, #0]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800322e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	699a      	ldr	r2, [r3, #24]
 8003234:	8bfb      	ldrh	r3, [r7, #30]
 8003236:	429a      	cmp	r2, r3
 8003238:	d906      	bls.n	8003248 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	8bfb      	ldrh	r3, [r7, #30]
 8003240:	1ad2      	subs	r2, r2, r3
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	619a      	str	r2, [r3, #24]
 8003246:	e002      	b.n	800324e <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	2200      	movs	r2, #0
 800324c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	4619      	mov	r1, r3
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f005 ff2e 	bl	80090be <HAL_PCD_DataInStageCallback>
 8003262:	e018      	b.n	8003296 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	695a      	ldr	r2, [r3, #20]
 8003268:	8bfb      	ldrh	r3, [r7, #30]
 800326a:	441a      	add	r2, r3
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	8bfb      	ldrh	r3, [r7, #30]
 8003276:	441a      	add	r2, r3
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003282:	4618      	mov	r0, r3
 8003284:	f002 fe6a 	bl	8005f5c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003288:	e005      	b.n	8003296 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800328a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800328c:	461a      	mov	r2, r3
 800328e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f91b 	bl	80034cc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800329e:	b29b      	uxth	r3, r3
 80032a0:	b21b      	sxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f6ff ad17 	blt.w	8002cd6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3738      	adds	r7, #56	; 0x38
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b088      	sub	sp, #32
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	4613      	mov	r3, r2
 80032be:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d07e      	beq.n	80033c8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	4413      	add	r3, r2
 80032de:	3302      	adds	r3, #2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032f2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	699a      	ldr	r2, [r3, #24]
 80032f8:	8b7b      	ldrh	r3, [r7, #26]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d306      	bcc.n	800330c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	8b7b      	ldrh	r3, [r7, #26]
 8003304:	1ad2      	subs	r2, r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	619a      	str	r2, [r3, #24]
 800330a:	e002      	b.n	8003312 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2200      	movs	r2, #0
 8003310:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d123      	bne.n	8003362 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003334:	833b      	strh	r3, [r7, #24]
 8003336:	8b3b      	ldrh	r3, [r7, #24]
 8003338:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800333c:	833b      	strh	r3, [r7, #24]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	441a      	add	r2, r3
 800334c:	8b3b      	ldrh	r3, [r7, #24]
 800334e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800335a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335e:	b29b      	uxth	r3, r3
 8003360:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003368:	2b00      	cmp	r3, #0
 800336a:	d01f      	beq.n	80033ac <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	b29b      	uxth	r3, r3
 800337e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003386:	82fb      	strh	r3, [r7, #22]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	441a      	add	r2, r3
 8003396:	8afb      	ldrh	r3, [r7, #22]
 8003398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800339c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033ac:	8b7b      	ldrh	r3, [r7, #26]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8087 	beq.w	80034c2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	6959      	ldr	r1, [r3, #20]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	891a      	ldrh	r2, [r3, #8]
 80033c0:	8b7b      	ldrh	r3, [r7, #26]
 80033c2:	f004 f86d 	bl	80074a0 <USB_ReadPMA>
 80033c6:	e07c      	b.n	80034c2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	3306      	adds	r3, #6
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033f0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	8b7b      	ldrh	r3, [r7, #26]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d306      	bcc.n	800340a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	699a      	ldr	r2, [r3, #24]
 8003400:	8b7b      	ldrh	r3, [r7, #26]
 8003402:	1ad2      	subs	r2, r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	619a      	str	r2, [r3, #24]
 8003408:	e002      	b.n	8003410 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2200      	movs	r2, #0
 800340e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d123      	bne.n	8003460 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800342e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003432:	83fb      	strh	r3, [r7, #30]
 8003434:	8bfb      	ldrh	r3, [r7, #30]
 8003436:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800343a:	83fb      	strh	r3, [r7, #30]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	441a      	add	r2, r3
 800344a:	8bfb      	ldrh	r3, [r7, #30]
 800344c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345c:	b29b      	uxth	r3, r3
 800345e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d11f      	bne.n	80034aa <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003484:	83bb      	strh	r3, [r7, #28]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	441a      	add	r2, r3
 8003494:	8bbb      	ldrh	r3, [r7, #28]
 8003496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800349a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800349e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80034aa:	8b7b      	ldrh	r3, [r7, #26]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	6959      	ldr	r1, [r3, #20]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	895a      	ldrh	r2, [r3, #10]
 80034bc:	8b7b      	ldrh	r3, [r7, #26]
 80034be:	f003 ffef 	bl	80074a0 <USB_ReadPMA>
    }
  }

  return count;
 80034c2:	8b7b      	ldrh	r3, [r7, #26]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3720      	adds	r7, #32
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b092      	sub	sp, #72	; 0x48
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	4613      	mov	r3, r2
 80034d8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8132 	beq.w	800374a <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	461a      	mov	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4413      	add	r3, r2
 80034fa:	3302      	adds	r3, #2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800350e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	699a      	ldr	r2, [r3, #24]
 8003514:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003516:	429a      	cmp	r2, r3
 8003518:	d906      	bls.n	8003528 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003520:	1ad2      	subs	r2, r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	619a      	str	r2, [r3, #24]
 8003526:	e002      	b.n	800352e <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2200      	movs	r2, #0
 800352c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d12c      	bne.n	8003590 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	4619      	mov	r1, r3
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f005 fdbe 	bl	80090be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 822f 	beq.w	80039ac <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003568:	827b      	strh	r3, [r7, #18]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	441a      	add	r2, r3
 8003578:	8a7b      	ldrh	r3, [r7, #18]
 800357a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800357e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358a:	b29b      	uxth	r3, r3
 800358c:	8013      	strh	r3, [r2, #0]
 800358e:	e20d      	b.n	80039ac <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d01f      	beq.n	80035da <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	441a      	add	r2, r3
 80035c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	f040 81e3 	bne.w	80039ac <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035ec:	441a      	add	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	69da      	ldr	r2, [r3, #28]
 80035f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035f8:	441a      	add	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	6a1a      	ldr	r2, [r3, #32]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	429a      	cmp	r2, r3
 8003608:	d309      	bcc.n	800361e <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	6a1a      	ldr	r2, [r3, #32]
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	1ad2      	subs	r2, r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	621a      	str	r2, [r3, #32]
 800361c:	e014      	b.n	8003648 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8003626:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003628:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003632:	e009      	b.n	8003648 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2200      	movs	r2, #0
 8003646:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d155      	bne.n	80036fc <HAL_PCD_EP_DB_Transmit+0x230>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800365e:	b29b      	uxth	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	4413      	add	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	011a      	lsls	r2, r3, #4
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	4413      	add	r3, r2
 8003672:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	2b00      	cmp	r3, #0
 800367c:	d112      	bne.n	80036a4 <HAL_PCD_EP_DB_Transmit+0x1d8>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	b29b      	uxth	r3, r3
 8003684:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003688:	b29a      	uxth	r2, r3
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	801a      	strh	r2, [r3, #0]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	b29b      	uxth	r3, r3
 8003694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800369c:	b29a      	uxth	r2, r3
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	801a      	strh	r2, [r3, #0]
 80036a2:	e047      	b.n	8003734 <HAL_PCD_EP_DB_Transmit+0x268>
 80036a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a6:	2b3e      	cmp	r3, #62	; 0x3e
 80036a8:	d811      	bhi.n	80036ce <HAL_PCD_EP_DB_Transmit+0x202>
 80036aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ac:	085b      	lsrs	r3, r3, #1
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80036b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_PCD_EP_DB_Transmit+0x1f4>
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	3301      	adds	r3, #1
 80036be:	62bb      	str	r3, [r7, #40]	; 0x28
 80036c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	029b      	lsls	r3, r3, #10
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	801a      	strh	r2, [r3, #0]
 80036cc:	e032      	b.n	8003734 <HAL_PCD_EP_DB_Transmit+0x268>
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d102      	bne.n	80036e4 <HAL_PCD_EP_DB_Transmit+0x218>
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	3b01      	subs	r3, #1
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	029b      	lsls	r3, r3, #10
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	801a      	strh	r2, [r3, #0]
 80036fa:	e01b      	b.n	8003734 <HAL_PCD_EP_DB_Transmit+0x268>
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	785b      	ldrb	r3, [r3, #1]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d117      	bne.n	8003734 <HAL_PCD_EP_DB_Transmit+0x268>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	623b      	str	r3, [r7, #32]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003712:	b29b      	uxth	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	4413      	add	r3, r2
 800371a:	623b      	str	r3, [r7, #32]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	011a      	lsls	r2, r3, #4
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	4413      	add	r3, r2
 8003726:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800372a:	61fb      	str	r3, [r7, #28]
 800372c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372e:	b29a      	uxth	r2, r3
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	6959      	ldr	r1, [r3, #20]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	891a      	ldrh	r2, [r3, #8]
 8003740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003742:	b29b      	uxth	r3, r3
 8003744:	f003 fe68 	bl	8007418 <USB_WritePMA>
 8003748:	e130      	b.n	80039ac <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003752:	b29b      	uxth	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4413      	add	r3, r2
 800375e:	3306      	adds	r3, #6
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003772:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	699a      	ldr	r2, [r3, #24]
 8003778:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800377a:	429a      	cmp	r2, r3
 800377c:	d306      	bcc.n	800378c <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	699a      	ldr	r2, [r3, #24]
 8003782:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003784:	1ad2      	subs	r2, r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	619a      	str	r2, [r3, #24]
 800378a:	e002      	b.n	8003792 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2200      	movs	r2, #0
 8003790:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d12c      	bne.n	80037f4 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	4619      	mov	r1, r3
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f005 fc8c 	bl	80090be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f040 80fd 	bne.w	80039ac <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	441a      	add	r2, r3
 80037dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80037de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	8013      	strh	r3, [r2, #0]
 80037f2:	e0db      	b.n	80039ac <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d11f      	bne.n	800383e <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	b29b      	uxth	r3, r3
 8003810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003818:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	441a      	add	r2, r3
 8003828:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800382a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800382e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800383a:	b29b      	uxth	r3, r3
 800383c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003844:	2b01      	cmp	r3, #1
 8003846:	f040 80b1 	bne.w	80039ac <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	695a      	ldr	r2, [r3, #20]
 800384e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003850:	441a      	add	r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	69da      	ldr	r2, [r3, #28]
 800385a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800385c:	441a      	add	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	6a1a      	ldr	r2, [r3, #32]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	429a      	cmp	r2, r3
 800386c:	d309      	bcc.n	8003882 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	6a1a      	ldr	r2, [r3, #32]
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	1ad2      	subs	r2, r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	621a      	str	r2, [r3, #32]
 8003880:	e014      	b.n	80038ac <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 800388a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800388c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003896:	e009      	b.n	80038ac <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2200      	movs	r2, #0
 80038a2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	637b      	str	r3, [r7, #52]	; 0x34
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	785b      	ldrb	r3, [r3, #1]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d155      	bne.n	8003966 <HAL_PCD_EP_DB_Transmit+0x49a>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	647b      	str	r3, [r7, #68]	; 0x44
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	461a      	mov	r2, r3
 80038cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ce:	4413      	add	r3, r2
 80038d0:	647b      	str	r3, [r7, #68]	; 0x44
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	011a      	lsls	r2, r3, #4
 80038d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038da:	4413      	add	r3, r2
 80038dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038e0:	643b      	str	r3, [r7, #64]	; 0x40
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d112      	bne.n	800390e <HAL_PCD_EP_DB_Transmit+0x442>
 80038e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038f6:	801a      	strh	r2, [r3, #0]
 80038f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003906:	b29a      	uxth	r2, r3
 8003908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390a:	801a      	strh	r2, [r3, #0]
 800390c:	e044      	b.n	8003998 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003910:	2b3e      	cmp	r3, #62	; 0x3e
 8003912:	d811      	bhi.n	8003938 <HAL_PCD_EP_DB_Transmit+0x46c>
 8003914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_PCD_EP_DB_Transmit+0x45e>
 8003924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003926:	3301      	adds	r3, #1
 8003928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800392a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800392c:	b29b      	uxth	r3, r3
 800392e:	029b      	lsls	r3, r3, #10
 8003930:	b29a      	uxth	r2, r3
 8003932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003934:	801a      	strh	r2, [r3, #0]
 8003936:	e02f      	b.n	8003998 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <HAL_PCD_EP_DB_Transmit+0x482>
 8003948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394a:	3b01      	subs	r3, #1
 800394c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800394e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003950:	b29b      	uxth	r3, r3
 8003952:	029b      	lsls	r3, r3, #10
 8003954:	b29b      	uxth	r3, r3
 8003956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800395a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800395e:	b29a      	uxth	r2, r3
 8003960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003962:	801a      	strh	r2, [r3, #0]
 8003964:	e018      	b.n	8003998 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	785b      	ldrb	r3, [r3, #1]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d114      	bne.n	8003998 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003976:	b29b      	uxth	r3, r3
 8003978:	461a      	mov	r2, r3
 800397a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397c:	4413      	add	r3, r2
 800397e:	637b      	str	r3, [r7, #52]	; 0x34
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	011a      	lsls	r2, r3, #4
 8003986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003988:	4413      	add	r3, r2
 800398a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
 8003990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003992:	b29a      	uxth	r2, r3
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003996:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	6959      	ldr	r1, [r3, #20]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	895a      	ldrh	r2, [r3, #10]
 80039a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	f003 fd36 	bl	8007418 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c6:	823b      	strh	r3, [r7, #16]
 80039c8:	8a3b      	ldrh	r3, [r7, #16]
 80039ca:	f083 0310 	eor.w	r3, r3, #16
 80039ce:	823b      	strh	r3, [r7, #16]
 80039d0:	8a3b      	ldrh	r3, [r7, #16]
 80039d2:	f083 0320 	eor.w	r3, r3, #32
 80039d6:	823b      	strh	r3, [r7, #16]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	441a      	add	r2, r3
 80039e6:	8a3b      	ldrh	r3, [r7, #16]
 80039e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3748      	adds	r7, #72	; 0x48
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b087      	sub	sp, #28
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	607b      	str	r3, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	817b      	strh	r3, [r7, #10]
 8003a14:	4613      	mov	r3, r2
 8003a16:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003a18:	897b      	ldrh	r3, [r7, #10]
 8003a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00b      	beq.n	8003a3c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a24:	897b      	ldrh	r3, [r7, #10]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4413      	add	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	e009      	b.n	8003a50 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a3c:	897a      	ldrh	r2, [r7, #10]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003a50:	893b      	ldrh	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d107      	bne.n	8003a66 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	80da      	strh	r2, [r3, #6]
 8003a64:	e00b      	b.n	8003a7e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	0c1b      	lsrs	r3, r3, #16
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e26c      	b.n	8003f78 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 8087 	beq.w	8003bba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aac:	4b92      	ldr	r3, [pc, #584]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ab8:	4b8f      	ldr	r3, [pc, #572]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 030c 	and.w	r3, r3, #12
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d112      	bne.n	8003aea <HAL_RCC_OscConfig+0x5e>
 8003ac4:	4b8c      	ldr	r3, [pc, #560]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad0:	d10b      	bne.n	8003aea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad2:	4b89      	ldr	r3, [pc, #548]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d06c      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x12c>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d168      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e246      	b.n	8003f78 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af2:	d106      	bne.n	8003b02 <HAL_RCC_OscConfig+0x76>
 8003af4:	4b80      	ldr	r3, [pc, #512]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a7f      	ldr	r2, [pc, #508]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	e02e      	b.n	8003b60 <HAL_RCC_OscConfig+0xd4>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10c      	bne.n	8003b24 <HAL_RCC_OscConfig+0x98>
 8003b0a:	4b7b      	ldr	r3, [pc, #492]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7a      	ldr	r2, [pc, #488]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	4b78      	ldr	r3, [pc, #480]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a77      	ldr	r2, [pc, #476]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e01d      	b.n	8003b60 <HAL_RCC_OscConfig+0xd4>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCC_OscConfig+0xbc>
 8003b2e:	4b72      	ldr	r3, [pc, #456]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a71      	ldr	r2, [pc, #452]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	4b6f      	ldr	r3, [pc, #444]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a6e      	ldr	r2, [pc, #440]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e00b      	b.n	8003b60 <HAL_RCC_OscConfig+0xd4>
 8003b48:	4b6b      	ldr	r3, [pc, #428]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a6a      	ldr	r2, [pc, #424]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	4b68      	ldr	r3, [pc, #416]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a67      	ldr	r2, [pc, #412]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d013      	beq.n	8003b90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fe f960 	bl	8001e2c <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fe f95c 	bl	8001e2c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	; 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e1fa      	b.n	8003f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	4b5d      	ldr	r3, [pc, #372]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0xe4>
 8003b8e:	e014      	b.n	8003bba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fe f94c 	bl	8001e2c <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b98:	f7fe f948 	bl	8001e2c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e1e6      	b.n	8003f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003baa:	4b53      	ldr	r3, [pc, #332]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x10c>
 8003bb6:	e000      	b.n	8003bba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d063      	beq.n	8003c8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bc6:	4b4c      	ldr	r3, [pc, #304]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bd2:	4b49      	ldr	r3, [pc, #292]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d11c      	bne.n	8003c18 <HAL_RCC_OscConfig+0x18c>
 8003bde:	4b46      	ldr	r3, [pc, #280]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d116      	bne.n	8003c18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bea:	4b43      	ldr	r3, [pc, #268]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_RCC_OscConfig+0x176>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d001      	beq.n	8003c02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e1ba      	b.n	8003f78 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c02:	4b3d      	ldr	r3, [pc, #244]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4939      	ldr	r1, [pc, #228]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c16:	e03a      	b.n	8003c8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d020      	beq.n	8003c62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c20:	4b36      	ldr	r3, [pc, #216]	; (8003cfc <HAL_RCC_OscConfig+0x270>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c26:	f7fe f901 	bl	8001e2c <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c2e:	f7fe f8fd 	bl	8001e2c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e19b      	b.n	8003f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c40:	4b2d      	ldr	r3, [pc, #180]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4c:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4927      	ldr	r1, [pc, #156]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	600b      	str	r3, [r1, #0]
 8003c60:	e015      	b.n	8003c8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c62:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <HAL_RCC_OscConfig+0x270>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fe f8e0 	bl	8001e2c <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c70:	f7fe f8dc 	bl	8001e2c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e17a      	b.n	8003f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c82:	4b1d      	ldr	r3, [pc, #116]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d03a      	beq.n	8003d10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d019      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca2:	4b17      	ldr	r3, [pc, #92]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca8:	f7fe f8c0 	bl	8001e2c <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb0:	f7fe f8bc 	bl	8001e2c <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e15a      	b.n	8003f78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cce:	2001      	movs	r0, #1
 8003cd0:	f000 faa8 	bl	8004224 <RCC_Delay>
 8003cd4:	e01c      	b.n	8003d10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd6:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <HAL_RCC_OscConfig+0x274>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cdc:	f7fe f8a6 	bl	8001e2c <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce2:	e00f      	b.n	8003d04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce4:	f7fe f8a2 	bl	8001e2c <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d908      	bls.n	8003d04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e140      	b.n	8003f78 <HAL_RCC_OscConfig+0x4ec>
 8003cf6:	bf00      	nop
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	42420000 	.word	0x42420000
 8003d00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d04:	4b9e      	ldr	r3, [pc, #632]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e9      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80a6 	beq.w	8003e6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d22:	4b97      	ldr	r3, [pc, #604]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10d      	bne.n	8003d4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2e:	4b94      	ldr	r3, [pc, #592]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	4a93      	ldr	r2, [pc, #588]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d38:	61d3      	str	r3, [r2, #28]
 8003d3a:	4b91      	ldr	r3, [pc, #580]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d46:	2301      	movs	r3, #1
 8003d48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4a:	4b8e      	ldr	r3, [pc, #568]	; (8003f84 <HAL_RCC_OscConfig+0x4f8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d118      	bne.n	8003d88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d56:	4b8b      	ldr	r3, [pc, #556]	; (8003f84 <HAL_RCC_OscConfig+0x4f8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a8a      	ldr	r2, [pc, #552]	; (8003f84 <HAL_RCC_OscConfig+0x4f8>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d62:	f7fe f863 	bl	8001e2c <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6a:	f7fe f85f 	bl	8001e2c <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b64      	cmp	r3, #100	; 0x64
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e0fd      	b.n	8003f78 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7c:	4b81      	ldr	r3, [pc, #516]	; (8003f84 <HAL_RCC_OscConfig+0x4f8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d106      	bne.n	8003d9e <HAL_RCC_OscConfig+0x312>
 8003d90:	4b7b      	ldr	r3, [pc, #492]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	4a7a      	ldr	r2, [pc, #488]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	6213      	str	r3, [r2, #32]
 8003d9c:	e02d      	b.n	8003dfa <HAL_RCC_OscConfig+0x36e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x334>
 8003da6:	4b76      	ldr	r3, [pc, #472]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	4a75      	ldr	r2, [pc, #468]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	6213      	str	r3, [r2, #32]
 8003db2:	4b73      	ldr	r3, [pc, #460]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	4a72      	ldr	r2, [pc, #456]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003db8:	f023 0304 	bic.w	r3, r3, #4
 8003dbc:	6213      	str	r3, [r2, #32]
 8003dbe:	e01c      	b.n	8003dfa <HAL_RCC_OscConfig+0x36e>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	2b05      	cmp	r3, #5
 8003dc6:	d10c      	bne.n	8003de2 <HAL_RCC_OscConfig+0x356>
 8003dc8:	4b6d      	ldr	r3, [pc, #436]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	4a6c      	ldr	r2, [pc, #432]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003dce:	f043 0304 	orr.w	r3, r3, #4
 8003dd2:	6213      	str	r3, [r2, #32]
 8003dd4:	4b6a      	ldr	r3, [pc, #424]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	4a69      	ldr	r2, [pc, #420]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	6213      	str	r3, [r2, #32]
 8003de0:	e00b      	b.n	8003dfa <HAL_RCC_OscConfig+0x36e>
 8003de2:	4b67      	ldr	r3, [pc, #412]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	4a66      	ldr	r2, [pc, #408]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003de8:	f023 0301 	bic.w	r3, r3, #1
 8003dec:	6213      	str	r3, [r2, #32]
 8003dee:	4b64      	ldr	r3, [pc, #400]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	4a63      	ldr	r2, [pc, #396]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003df4:	f023 0304 	bic.w	r3, r3, #4
 8003df8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d015      	beq.n	8003e2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e02:	f7fe f813 	bl	8001e2c <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e08:	e00a      	b.n	8003e20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0a:	f7fe f80f 	bl	8001e2c <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e0ab      	b.n	8003f78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e20:	4b57      	ldr	r3, [pc, #348]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0ee      	beq.n	8003e0a <HAL_RCC_OscConfig+0x37e>
 8003e2c:	e014      	b.n	8003e58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2e:	f7fd fffd 	bl	8001e2c <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e34:	e00a      	b.n	8003e4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e36:	f7fd fff9 	bl	8001e2c <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e095      	b.n	8003f78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e4c:	4b4c      	ldr	r3, [pc, #304]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1ee      	bne.n	8003e36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e58:	7dfb      	ldrb	r3, [r7, #23]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d105      	bne.n	8003e6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5e:	4b48      	ldr	r3, [pc, #288]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	4a47      	ldr	r2, [pc, #284]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 8081 	beq.w	8003f76 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e74:	4b42      	ldr	r3, [pc, #264]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f003 030c 	and.w	r3, r3, #12
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d061      	beq.n	8003f44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d146      	bne.n	8003f16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e88:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <HAL_RCC_OscConfig+0x4fc>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8e:	f7fd ffcd 	bl	8001e2c <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e96:	f7fd ffc9 	bl	8001e2c <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e067      	b.n	8003f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea8:	4b35      	ldr	r3, [pc, #212]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f0      	bne.n	8003e96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebc:	d108      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ebe:	4b30      	ldr	r3, [pc, #192]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	492d      	ldr	r1, [pc, #180]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ed0:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a19      	ldr	r1, [r3, #32]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	4927      	ldr	r1, [pc, #156]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee8:	4b27      	ldr	r3, [pc, #156]	; (8003f88 <HAL_RCC_OscConfig+0x4fc>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eee:	f7fd ff9d 	bl	8001e2c <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fd ff99 	bl	8001e2c <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e037      	b.n	8003f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f08:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x46a>
 8003f14:	e02f      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f16:	4b1c      	ldr	r3, [pc, #112]	; (8003f88 <HAL_RCC_OscConfig+0x4fc>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1c:	f7fd ff86 	bl	8001e2c <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f24:	f7fd ff82 	bl	8001e2c <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e020      	b.n	8003f78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f36:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f0      	bne.n	8003f24 <HAL_RCC_OscConfig+0x498>
 8003f42:	e018      	b.n	8003f76 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e013      	b.n	8003f78 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <HAL_RCC_OscConfig+0x4f4>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d106      	bne.n	8003f72 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d001      	beq.n	8003f76 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40021000 	.word	0x40021000
 8003f84:	40007000 	.word	0x40007000
 8003f88:	42420060 	.word	0x42420060

08003f8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e0d0      	b.n	8004142 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa0:	4b6a      	ldr	r3, [pc, #424]	; (800414c <HAL_RCC_ClockConfig+0x1c0>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d910      	bls.n	8003fd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fae:	4b67      	ldr	r3, [pc, #412]	; (800414c <HAL_RCC_ClockConfig+0x1c0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 0207 	bic.w	r2, r3, #7
 8003fb6:	4965      	ldr	r1, [pc, #404]	; (800414c <HAL_RCC_ClockConfig+0x1c0>)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbe:	4b63      	ldr	r3, [pc, #396]	; (800414c <HAL_RCC_ClockConfig+0x1c0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0b8      	b.n	8004142 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d020      	beq.n	800401e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe8:	4b59      	ldr	r3, [pc, #356]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	4a58      	ldr	r2, [pc, #352]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 8003fee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ff2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004000:	4b53      	ldr	r3, [pc, #332]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	4a52      	ldr	r2, [pc, #328]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800400a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800400c:	4b50      	ldr	r3, [pc, #320]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	494d      	ldr	r1, [pc, #308]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	4313      	orrs	r3, r2
 800401c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d040      	beq.n	80040ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d107      	bne.n	8004042 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	4b47      	ldr	r3, [pc, #284]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d115      	bne.n	800406a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e07f      	b.n	8004142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404a:	4b41      	ldr	r3, [pc, #260]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d109      	bne.n	800406a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e073      	b.n	8004142 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405a:	4b3d      	ldr	r3, [pc, #244]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e06b      	b.n	8004142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800406a:	4b39      	ldr	r3, [pc, #228]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f023 0203 	bic.w	r2, r3, #3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4936      	ldr	r1, [pc, #216]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800407c:	f7fd fed6 	bl	8001e2c <HAL_GetTick>
 8004080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004082:	e00a      	b.n	800409a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004084:	f7fd fed2 	bl	8001e2c <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e053      	b.n	8004142 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	4b2d      	ldr	r3, [pc, #180]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f003 020c 	and.w	r2, r3, #12
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d1eb      	bne.n	8004084 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040ac:	4b27      	ldr	r3, [pc, #156]	; (800414c <HAL_RCC_ClockConfig+0x1c0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d210      	bcs.n	80040dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ba:	4b24      	ldr	r3, [pc, #144]	; (800414c <HAL_RCC_ClockConfig+0x1c0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 0207 	bic.w	r2, r3, #7
 80040c2:	4922      	ldr	r1, [pc, #136]	; (800414c <HAL_RCC_ClockConfig+0x1c0>)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b20      	ldr	r3, [pc, #128]	; (800414c <HAL_RCC_ClockConfig+0x1c0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e032      	b.n	8004142 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e8:	4b19      	ldr	r3, [pc, #100]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4916      	ldr	r1, [pc, #88]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004106:	4b12      	ldr	r3, [pc, #72]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	490e      	ldr	r1, [pc, #56]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 8004116:	4313      	orrs	r3, r2
 8004118:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800411a:	f000 f821 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 800411e:	4601      	mov	r1, r0
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 800412c:	5cd3      	ldrb	r3, [r2, r3]
 800412e:	fa21 f303 	lsr.w	r3, r1, r3
 8004132:	4a09      	ldr	r2, [pc, #36]	; (8004158 <HAL_RCC_ClockConfig+0x1cc>)
 8004134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_RCC_ClockConfig+0x1d0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fd fe34 	bl	8001da8 <HAL_InitTick>

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40022000 	.word	0x40022000
 8004150:	40021000 	.word	0x40021000
 8004154:	0800e3ac 	.word	0x0800e3ac
 8004158:	20000000 	.word	0x20000000
 800415c:	20000004 	.word	0x20000004

08004160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004160:	b490      	push	{r4, r7}
 8004162:	b08a      	sub	sp, #40	; 0x28
 8004164:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004166:	4b2a      	ldr	r3, [pc, #168]	; (8004210 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004168:	1d3c      	adds	r4, r7, #4
 800416a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800416c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004170:	4b28      	ldr	r3, [pc, #160]	; (8004214 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	61fb      	str	r3, [r7, #28]
 800417a:	2300      	movs	r3, #0
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	2300      	movs	r3, #0
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
 8004182:	2300      	movs	r3, #0
 8004184:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800418a:	4b23      	ldr	r3, [pc, #140]	; (8004218 <HAL_RCC_GetSysClockFreq+0xb8>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	2b04      	cmp	r3, #4
 8004198:	d002      	beq.n	80041a0 <HAL_RCC_GetSysClockFreq+0x40>
 800419a:	2b08      	cmp	r3, #8
 800419c:	d003      	beq.n	80041a6 <HAL_RCC_GetSysClockFreq+0x46>
 800419e:	e02d      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041a0:	4b1e      	ldr	r3, [pc, #120]	; (800421c <HAL_RCC_GetSysClockFreq+0xbc>)
 80041a2:	623b      	str	r3, [r7, #32]
      break;
 80041a4:	e02d      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	0c9b      	lsrs	r3, r3, #18
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041b2:	4413      	add	r3, r2
 80041b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80041b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d013      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041c4:	4b14      	ldr	r3, [pc, #80]	; (8004218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	0c5b      	lsrs	r3, r3, #17
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041d2:	4413      	add	r3, r2
 80041d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80041d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	4a0f      	ldr	r2, [pc, #60]	; (800421c <HAL_RCC_GetSysClockFreq+0xbc>)
 80041de:	fb02 f203 	mul.w	r2, r2, r3
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ea:	e004      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	4a0c      	ldr	r2, [pc, #48]	; (8004220 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041f0:	fb02 f303 	mul.w	r3, r2, r3
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	623b      	str	r3, [r7, #32]
      break;
 80041fa:	e002      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041fc:	4b07      	ldr	r3, [pc, #28]	; (800421c <HAL_RCC_GetSysClockFreq+0xbc>)
 80041fe:	623b      	str	r3, [r7, #32]
      break;
 8004200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004202:	6a3b      	ldr	r3, [r7, #32]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3728      	adds	r7, #40	; 0x28
 8004208:	46bd      	mov	sp, r7
 800420a:	bc90      	pop	{r4, r7}
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	0800e344 	.word	0x0800e344
 8004214:	0800e354 	.word	0x0800e354
 8004218:	40021000 	.word	0x40021000
 800421c:	007a1200 	.word	0x007a1200
 8004220:	003d0900 	.word	0x003d0900

08004224 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800422c:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <RCC_Delay+0x34>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a0a      	ldr	r2, [pc, #40]	; (800425c <RCC_Delay+0x38>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	0a5b      	lsrs	r3, r3, #9
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	fb02 f303 	mul.w	r3, r2, r3
 800423e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004240:	bf00      	nop
  }
  while (Delay --);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	1e5a      	subs	r2, r3, #1
 8004246:	60fa      	str	r2, [r7, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f9      	bne.n	8004240 <RCC_Delay+0x1c>
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	20000000 	.word	0x20000000
 800425c:	10624dd3 	.word	0x10624dd3

08004260 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d07d      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800427c:	2300      	movs	r3, #0
 800427e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004280:	4b4f      	ldr	r3, [pc, #316]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10d      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428c:	4b4c      	ldr	r3, [pc, #304]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	4a4b      	ldr	r2, [pc, #300]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004296:	61d3      	str	r3, [r2, #28]
 8004298:	4b49      	ldr	r3, [pc, #292]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a4:	2301      	movs	r3, #1
 80042a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a8:	4b46      	ldr	r3, [pc, #280]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d118      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b4:	4b43      	ldr	r3, [pc, #268]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a42      	ldr	r2, [pc, #264]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042c0:	f7fd fdb4 	bl	8001e2c <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c6:	e008      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c8:	f7fd fdb0 	bl	8001e2c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	; 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e06d      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042da:	4b3a      	ldr	r3, [pc, #232]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042e6:	4b36      	ldr	r3, [pc, #216]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d02e      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	429a      	cmp	r2, r3
 8004302:	d027      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004304:	4b2e      	ldr	r3, [pc, #184]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800430e:	4b2e      	ldr	r3, [pc, #184]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004310:	2201      	movs	r2, #1
 8004312:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004314:	4b2c      	ldr	r3, [pc, #176]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800431a:	4a29      	ldr	r2, [pc, #164]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d014      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432a:	f7fd fd7f 	bl	8001e2c <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004330:	e00a      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004332:	f7fd fd7b 	bl	8001e2c <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004340:	4293      	cmp	r3, r2
 8004342:	d901      	bls.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e036      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004348:	4b1d      	ldr	r3, [pc, #116]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0ee      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004354:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	4917      	ldr	r1, [pc, #92]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004362:	4313      	orrs	r3, r2
 8004364:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004366:	7dfb      	ldrb	r3, [r7, #23]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d105      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800436c:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	4a13      	ldr	r2, [pc, #76]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004376:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004384:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	490b      	ldr	r1, [pc, #44]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004392:	4313      	orrs	r3, r2
 8004394:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d008      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	4904      	ldr	r1, [pc, #16]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40007000 	.word	0x40007000
 80043c8:	42420440 	.word	0x42420440

080043cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e041      	b.n	8004462 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fd fbb2 	bl	8001b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3304      	adds	r3, #4
 8004408:	4619      	mov	r1, r3
 800440a:	4610      	mov	r0, r2
 800440c:	f000 fbce 	bl	8004bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b082      	sub	sp, #8
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e041      	b.n	8004500 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d106      	bne.n	8004496 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f839 	bl	8004508 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2202      	movs	r2, #2
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3304      	adds	r3, #4
 80044a6:	4619      	mov	r1, r3
 80044a8:	4610      	mov	r0, r2
 80044aa:	f000 fb7f 	bl	8004bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr
	...

0800451c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d109      	bne.n	8004540 <HAL_TIM_PWM_Start+0x24>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	bf14      	ite	ne
 8004538:	2301      	movne	r3, #1
 800453a:	2300      	moveq	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	e022      	b.n	8004586 <HAL_TIM_PWM_Start+0x6a>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b04      	cmp	r3, #4
 8004544:	d109      	bne.n	800455a <HAL_TIM_PWM_Start+0x3e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b01      	cmp	r3, #1
 8004550:	bf14      	ite	ne
 8004552:	2301      	movne	r3, #1
 8004554:	2300      	moveq	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	e015      	b.n	8004586 <HAL_TIM_PWM_Start+0x6a>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d109      	bne.n	8004574 <HAL_TIM_PWM_Start+0x58>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b01      	cmp	r3, #1
 800456a:	bf14      	ite	ne
 800456c:	2301      	movne	r3, #1
 800456e:	2300      	moveq	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	e008      	b.n	8004586 <HAL_TIM_PWM_Start+0x6a>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	bf14      	ite	ne
 8004580:	2301      	movne	r3, #1
 8004582:	2300      	moveq	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e05e      	b.n	800464c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d104      	bne.n	800459e <HAL_TIM_PWM_Start+0x82>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800459c:	e013      	b.n	80045c6 <HAL_TIM_PWM_Start+0xaa>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d104      	bne.n	80045ae <HAL_TIM_PWM_Start+0x92>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045ac:	e00b      	b.n	80045c6 <HAL_TIM_PWM_Start+0xaa>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d104      	bne.n	80045be <HAL_TIM_PWM_Start+0xa2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045bc:	e003      	b.n	80045c6 <HAL_TIM_PWM_Start+0xaa>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2202      	movs	r2, #2
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2201      	movs	r2, #1
 80045cc:	6839      	ldr	r1, [r7, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fd6c 	bl	80050ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a1e      	ldr	r2, [pc, #120]	; (8004654 <HAL_TIM_PWM_Start+0x138>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d107      	bne.n	80045ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a18      	ldr	r2, [pc, #96]	; (8004654 <HAL_TIM_PWM_Start+0x138>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00e      	beq.n	8004616 <HAL_TIM_PWM_Start+0xfa>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004600:	d009      	beq.n	8004616 <HAL_TIM_PWM_Start+0xfa>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a14      	ldr	r2, [pc, #80]	; (8004658 <HAL_TIM_PWM_Start+0x13c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d004      	beq.n	8004616 <HAL_TIM_PWM_Start+0xfa>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a12      	ldr	r2, [pc, #72]	; (800465c <HAL_TIM_PWM_Start+0x140>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d111      	bne.n	800463a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b06      	cmp	r3, #6
 8004626:	d010      	beq.n	800464a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004638:	e007      	b.n	800464a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0201 	orr.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40012c00 	.word	0x40012c00
 8004658:	40000400 	.word	0x40000400
 800465c:	40000800 	.word	0x40000800

08004660 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e093      	b.n	800479c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d106      	bne.n	800468e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7fd fa85 	bl	8001b98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2202      	movs	r2, #2
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046a4:	f023 0307 	bic.w	r3, r3, #7
 80046a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3304      	adds	r3, #4
 80046b2:	4619      	mov	r1, r3
 80046b4:	4610      	mov	r0, r2
 80046b6:	f000 fa79 	bl	8004bac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e2:	f023 0303 	bic.w	r3, r3, #3
 80046e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	021b      	lsls	r3, r3, #8
 80046f2:	4313      	orrs	r3, r2
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004700:	f023 030c 	bic.w	r3, r3, #12
 8004704:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800470c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	4313      	orrs	r3, r2
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	011a      	lsls	r2, r3, #4
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	031b      	lsls	r3, r3, #12
 8004730:	4313      	orrs	r3, r2
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800473e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	4313      	orrs	r3, r2
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d110      	bne.n	80047f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d102      	bne.n	80047e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80047da:	7b7b      	ldrb	r3, [r7, #13]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d001      	beq.n	80047e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e068      	b.n	80048b6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047f4:	e031      	b.n	800485a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d110      	bne.n	800481e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047fc:	7bbb      	ldrb	r3, [r7, #14]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d102      	bne.n	8004808 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004802:	7b3b      	ldrb	r3, [r7, #12]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d001      	beq.n	800480c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e054      	b.n	80048b6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800481c:	e01d      	b.n	800485a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800481e:	7bfb      	ldrb	r3, [r7, #15]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d108      	bne.n	8004836 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004824:	7bbb      	ldrb	r3, [r7, #14]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d105      	bne.n	8004836 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800482a:	7b7b      	ldrb	r3, [r7, #13]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d102      	bne.n	8004836 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004830:	7b3b      	ldrb	r3, [r7, #12]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d001      	beq.n	800483a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e03d      	b.n	80048b6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2202      	movs	r2, #2
 8004856:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <HAL_TIM_Encoder_Start+0xc2>
 8004860:	2b04      	cmp	r3, #4
 8004862:	d008      	beq.n	8004876 <HAL_TIM_Encoder_Start+0xd2>
 8004864:	e00f      	b.n	8004886 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2201      	movs	r2, #1
 800486c:	2100      	movs	r1, #0
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fc1c 	bl	80050ac <TIM_CCxChannelCmd>
      break;
 8004874:	e016      	b.n	80048a4 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2201      	movs	r2, #1
 800487c:	2104      	movs	r1, #4
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fc14 	bl	80050ac <TIM_CCxChannelCmd>
      break;
 8004884:	e00e      	b.n	80048a4 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2201      	movs	r2, #1
 800488c:	2100      	movs	r1, #0
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fc0c 	bl	80050ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2201      	movs	r2, #1
 800489a:	2104      	movs	r1, #4
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fc05 	bl	80050ac <TIM_CCxChannelCmd>
      break;
 80048a2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d101      	bne.n	80048da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80048d6:	2302      	movs	r3, #2
 80048d8:	e0ac      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x174>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b0c      	cmp	r3, #12
 80048e6:	f200 809f 	bhi.w	8004a28 <HAL_TIM_PWM_ConfigChannel+0x168>
 80048ea:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80048ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f0:	08004925 	.word	0x08004925
 80048f4:	08004a29 	.word	0x08004a29
 80048f8:	08004a29 	.word	0x08004a29
 80048fc:	08004a29 	.word	0x08004a29
 8004900:	08004965 	.word	0x08004965
 8004904:	08004a29 	.word	0x08004a29
 8004908:	08004a29 	.word	0x08004a29
 800490c:	08004a29 	.word	0x08004a29
 8004910:	080049a7 	.word	0x080049a7
 8004914:	08004a29 	.word	0x08004a29
 8004918:	08004a29 	.word	0x08004a29
 800491c:	08004a29 	.word	0x08004a29
 8004920:	080049e7 	.word	0x080049e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	4618      	mov	r0, r3
 800492c:	f000 f9a0 	bl	8004c70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699a      	ldr	r2, [r3, #24]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0208 	orr.w	r2, r2, #8
 800493e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0204 	bic.w	r2, r2, #4
 800494e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6999      	ldr	r1, [r3, #24]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	619a      	str	r2, [r3, #24]
      break;
 8004962:	e062      	b.n	8004a2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68b9      	ldr	r1, [r7, #8]
 800496a:	4618      	mov	r0, r3
 800496c:	f000 f9e6 	bl	8004d3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699a      	ldr	r2, [r3, #24]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800497e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800498e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6999      	ldr	r1, [r3, #24]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	021a      	lsls	r2, r3, #8
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	619a      	str	r2, [r3, #24]
      break;
 80049a4:	e041      	b.n	8004a2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fa2f 	bl	8004e10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0208 	orr.w	r2, r2, #8
 80049c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69da      	ldr	r2, [r3, #28]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0204 	bic.w	r2, r2, #4
 80049d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69d9      	ldr	r1, [r3, #28]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	61da      	str	r2, [r3, #28]
      break;
 80049e4:	e021      	b.n	8004a2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 fa79 	bl	8004ee4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	69da      	ldr	r2, [r3, #28]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69d9      	ldr	r1, [r3, #28]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	021a      	lsls	r2, r3, #8
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	61da      	str	r2, [r3, #28]
      break;
 8004a26:	e000      	b.n	8004a2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004a28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_TIM_ConfigClockSource+0x18>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e0a6      	b.n	8004ba2 <HAL_TIM_ConfigClockSource+0x166>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d067      	beq.n	8004b5c <HAL_TIM_ConfigClockSource+0x120>
 8004a8c:	2b40      	cmp	r3, #64	; 0x40
 8004a8e:	d80b      	bhi.n	8004aa8 <HAL_TIM_ConfigClockSource+0x6c>
 8004a90:	2b10      	cmp	r3, #16
 8004a92:	d073      	beq.n	8004b7c <HAL_TIM_ConfigClockSource+0x140>
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d802      	bhi.n	8004a9e <HAL_TIM_ConfigClockSource+0x62>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d06f      	beq.n	8004b7c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a9c:	e078      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	d06c      	beq.n	8004b7c <HAL_TIM_ConfigClockSource+0x140>
 8004aa2:	2b30      	cmp	r3, #48	; 0x30
 8004aa4:	d06a      	beq.n	8004b7c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004aa6:	e073      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004aa8:	2b70      	cmp	r3, #112	; 0x70
 8004aaa:	d00d      	beq.n	8004ac8 <HAL_TIM_ConfigClockSource+0x8c>
 8004aac:	2b70      	cmp	r3, #112	; 0x70
 8004aae:	d804      	bhi.n	8004aba <HAL_TIM_ConfigClockSource+0x7e>
 8004ab0:	2b50      	cmp	r3, #80	; 0x50
 8004ab2:	d033      	beq.n	8004b1c <HAL_TIM_ConfigClockSource+0xe0>
 8004ab4:	2b60      	cmp	r3, #96	; 0x60
 8004ab6:	d041      	beq.n	8004b3c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004ab8:	e06a      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004abe:	d066      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0x152>
 8004ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac4:	d017      	beq.n	8004af6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004ac6:	e063      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	6899      	ldr	r1, [r3, #8]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f000 fac9 	bl	800506e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004aea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	609a      	str	r2, [r3, #8]
      break;
 8004af4:	e04c      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6818      	ldr	r0, [r3, #0]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6899      	ldr	r1, [r3, #8]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f000 fab2 	bl	800506e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b18:	609a      	str	r2, [r3, #8]
      break;
 8004b1a:	e039      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6818      	ldr	r0, [r3, #0]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	6859      	ldr	r1, [r3, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f000 fa29 	bl	8004f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2150      	movs	r1, #80	; 0x50
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 fa80 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004b3a:	e029      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	6859      	ldr	r1, [r3, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	f000 fa47 	bl	8004fdc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2160      	movs	r1, #96	; 0x60
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fa70 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004b5a:	e019      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	6859      	ldr	r1, [r3, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	f000 fa09 	bl	8004f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2140      	movs	r1, #64	; 0x40
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fa60 	bl	800503a <TIM_ITRx_SetConfig>
      break;
 8004b7a:	e009      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4619      	mov	r1, r3
 8004b86:	4610      	mov	r0, r2
 8004b88:	f000 fa57 	bl	800503a <TIM_ITRx_SetConfig>
        break;
 8004b8c:	e000      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004b8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a29      	ldr	r2, [pc, #164]	; (8004c64 <TIM_Base_SetConfig+0xb8>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00b      	beq.n	8004bdc <TIM_Base_SetConfig+0x30>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bca:	d007      	beq.n	8004bdc <TIM_Base_SetConfig+0x30>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a26      	ldr	r2, [pc, #152]	; (8004c68 <TIM_Base_SetConfig+0xbc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d003      	beq.n	8004bdc <TIM_Base_SetConfig+0x30>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a25      	ldr	r2, [pc, #148]	; (8004c6c <TIM_Base_SetConfig+0xc0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d108      	bne.n	8004bee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a1c      	ldr	r2, [pc, #112]	; (8004c64 <TIM_Base_SetConfig+0xb8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00b      	beq.n	8004c0e <TIM_Base_SetConfig+0x62>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfc:	d007      	beq.n	8004c0e <TIM_Base_SetConfig+0x62>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a19      	ldr	r2, [pc, #100]	; (8004c68 <TIM_Base_SetConfig+0xbc>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d003      	beq.n	8004c0e <TIM_Base_SetConfig+0x62>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a18      	ldr	r2, [pc, #96]	; (8004c6c <TIM_Base_SetConfig+0xc0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d108      	bne.n	8004c20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a07      	ldr	r2, [pc, #28]	; (8004c64 <TIM_Base_SetConfig+0xb8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d103      	bne.n	8004c54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	615a      	str	r2, [r3, #20]
}
 8004c5a:	bf00      	nop
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800

08004c70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	f023 0201 	bic.w	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0303 	bic.w	r3, r3, #3
 8004ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f023 0302 	bic.w	r3, r3, #2
 8004cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a1c      	ldr	r2, [pc, #112]	; (8004d38 <TIM_OC1_SetConfig+0xc8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d10c      	bne.n	8004ce6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f023 0308 	bic.w	r3, r3, #8
 8004cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f023 0304 	bic.w	r3, r3, #4
 8004ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a13      	ldr	r2, [pc, #76]	; (8004d38 <TIM_OC1_SetConfig+0xc8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d111      	bne.n	8004d12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	621a      	str	r2, [r3, #32]
}
 8004d2c:	bf00      	nop
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bc80      	pop	{r7}
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	40012c00 	.word	0x40012c00

08004d3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f023 0210 	bic.w	r2, r3, #16
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f023 0320 	bic.w	r3, r3, #32
 8004d86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a1d      	ldr	r2, [pc, #116]	; (8004e0c <TIM_OC2_SetConfig+0xd0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d10d      	bne.n	8004db8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a14      	ldr	r2, [pc, #80]	; (8004e0c <TIM_OC2_SetConfig+0xd0>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d113      	bne.n	8004de8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	621a      	str	r2, [r3, #32]
}
 8004e02:	bf00      	nop
 8004e04:	371c      	adds	r7, #28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr
 8004e0c:	40012c00 	.word	0x40012c00

08004e10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0303 	bic.w	r3, r3, #3
 8004e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a1d      	ldr	r2, [pc, #116]	; (8004ee0 <TIM_OC3_SetConfig+0xd0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d10d      	bne.n	8004e8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a14      	ldr	r2, [pc, #80]	; (8004ee0 <TIM_OC3_SetConfig+0xd0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d113      	bne.n	8004eba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	621a      	str	r2, [r3, #32]
}
 8004ed4:	bf00      	nop
 8004ed6:	371c      	adds	r7, #28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40012c00 	.word	0x40012c00

08004ee4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	031b      	lsls	r3, r3, #12
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a0f      	ldr	r2, [pc, #60]	; (8004f7c <TIM_OC4_SetConfig+0x98>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d109      	bne.n	8004f58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	019b      	lsls	r3, r3, #6
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	621a      	str	r2, [r3, #32]
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr
 8004f7c:	40012c00 	.word	0x40012c00

08004f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f023 0201 	bic.w	r2, r3, #1
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f023 030a 	bic.w	r3, r3, #10
 8004fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	621a      	str	r2, [r3, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr

08004fdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	f023 0210 	bic.w	r2, r3, #16
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005006:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	031b      	lsls	r3, r3, #12
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005018:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	621a      	str	r2, [r3, #32]
}
 8005030:	bf00      	nop
 8005032:	371c      	adds	r7, #28
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr

0800503a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800503a:	b480      	push	{r7}
 800503c:	b085      	sub	sp, #20
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	f043 0307 	orr.w	r3, r3, #7
 800505c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	609a      	str	r2, [r3, #8]
}
 8005064:	bf00      	nop
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	bc80      	pop	{r7}
 800506c:	4770      	bx	lr

0800506e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800506e:	b480      	push	{r7}
 8005070:	b087      	sub	sp, #28
 8005072:	af00      	add	r7, sp, #0
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	607a      	str	r2, [r7, #4]
 800507a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005088:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	021a      	lsls	r2, r3, #8
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	431a      	orrs	r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	4313      	orrs	r3, r2
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	609a      	str	r2, [r3, #8]
}
 80050a2:	bf00      	nop
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr

080050ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f003 031f 	and.w	r3, r3, #31
 80050be:	2201      	movs	r2, #1
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1a      	ldr	r2, [r3, #32]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	43db      	mvns	r3, r3
 80050ce:	401a      	ands	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a1a      	ldr	r2, [r3, #32]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f003 031f 	and.w	r3, r3, #31
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	fa01 f303 	lsl.w	r3, r1, r3
 80050e4:	431a      	orrs	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	621a      	str	r2, [r3, #32]
}
 80050ea:	bf00      	nop
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d109      	bne.n	8005118 <HAL_TIMEx_PWMN_Start+0x24>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	bf14      	ite	ne
 8005110:	2301      	movne	r3, #1
 8005112:	2300      	moveq	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	e022      	b.n	800515e <HAL_TIMEx_PWMN_Start+0x6a>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b04      	cmp	r3, #4
 800511c:	d109      	bne.n	8005132 <HAL_TIMEx_PWMN_Start+0x3e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b01      	cmp	r3, #1
 8005128:	bf14      	ite	ne
 800512a:	2301      	movne	r3, #1
 800512c:	2300      	moveq	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	e015      	b.n	800515e <HAL_TIMEx_PWMN_Start+0x6a>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b08      	cmp	r3, #8
 8005136:	d109      	bne.n	800514c <HAL_TIMEx_PWMN_Start+0x58>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	bf14      	ite	ne
 8005144:	2301      	movne	r3, #1
 8005146:	2300      	moveq	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	e008      	b.n	800515e <HAL_TIMEx_PWMN_Start+0x6a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	bf14      	ite	ne
 8005158:	2301      	movne	r3, #1
 800515a:	2300      	moveq	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e059      	b.n	800521a <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d104      	bne.n	8005176 <HAL_TIMEx_PWMN_Start+0x82>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005174:	e013      	b.n	800519e <HAL_TIMEx_PWMN_Start+0xaa>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b04      	cmp	r3, #4
 800517a:	d104      	bne.n	8005186 <HAL_TIMEx_PWMN_Start+0x92>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005184:	e00b      	b.n	800519e <HAL_TIMEx_PWMN_Start+0xaa>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b08      	cmp	r3, #8
 800518a:	d104      	bne.n	8005196 <HAL_TIMEx_PWMN_Start+0xa2>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005194:	e003      	b.n	800519e <HAL_TIMEx_PWMN_Start+0xaa>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2204      	movs	r2, #4
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 f8f1 	bl	800538e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a18      	ldr	r2, [pc, #96]	; (8005224 <HAL_TIMEx_PWMN_Start+0x130>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00e      	beq.n	80051e4 <HAL_TIMEx_PWMN_Start+0xf0>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ce:	d009      	beq.n	80051e4 <HAL_TIMEx_PWMN_Start+0xf0>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a14      	ldr	r2, [pc, #80]	; (8005228 <HAL_TIMEx_PWMN_Start+0x134>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d004      	beq.n	80051e4 <HAL_TIMEx_PWMN_Start+0xf0>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a13      	ldr	r2, [pc, #76]	; (800522c <HAL_TIMEx_PWMN_Start+0x138>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d111      	bne.n	8005208 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b06      	cmp	r3, #6
 80051f4:	d010      	beq.n	8005218 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0201 	orr.w	r2, r2, #1
 8005204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005206:	e007      	b.n	8005218 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800

08005230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005244:	2302      	movs	r3, #2
 8005246:	e046      	b.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a16      	ldr	r2, [pc, #88]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00e      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005294:	d009      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a12      	ldr	r2, [pc, #72]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d004      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a10      	ldr	r2, [pc, #64]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d10c      	bne.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr
 80052e0:	40012c00 	.word	0x40012c00
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800

080052ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005304:	2302      	movs	r3, #2
 8005306:	e03d      	b.n	8005384 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr

0800538e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800538e:	b480      	push	{r7}
 8005390:	b087      	sub	sp, #28
 8005392:	af00      	add	r7, sp, #0
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	2204      	movs	r2, #4
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a1a      	ldr	r2, [r3, #32]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	43db      	mvns	r3, r3
 80053b0:	401a      	ands	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a1a      	ldr	r2, [r3, #32]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	f003 031f 	and.w	r3, r3, #31
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	fa01 f303 	lsl.w	r3, r1, r3
 80053c6:	431a      	orrs	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	621a      	str	r2, [r3, #32]
}
 80053cc:	bf00      	nop
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr

080053d6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80053d6:	b084      	sub	sp, #16
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	f107 0014 	add.w	r0, r7, #20
 80053e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	b004      	add	sp, #16
 80053f4:	4770      	bx	lr

080053f6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005406:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800540a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	b29a      	uxth	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr

08005422 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800542a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800542e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	b29b      	uxth	r3, r3
 800543c:	43db      	mvns	r3, r3
 800543e:	b29b      	uxth	r3, r3
 8005440:	4013      	ands	r3, r2
 8005442:	b29a      	uxth	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr

08005456 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	460b      	mov	r3, r1
 8005460:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	bc80      	pop	{r7}
 800546c:	4770      	bx	lr

0800546e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800546e:	b084      	sub	sp, #16
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	f107 0014 	add.w	r0, r7, #20
 800547c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	b004      	add	sp, #16
 80054ac:	4770      	bx	lr
	...

080054b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b09b      	sub	sp, #108	; 0x6c
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80054d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	78db      	ldrb	r3, [r3, #3]
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d81f      	bhi.n	8005522 <USB_ActivateEndpoint+0x72>
 80054e2:	a201      	add	r2, pc, #4	; (adr r2, 80054e8 <USB_ActivateEndpoint+0x38>)
 80054e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e8:	080054f9 	.word	0x080054f9
 80054ec:	08005515 	.word	0x08005515
 80054f0:	0800552b 	.word	0x0800552b
 80054f4:	08005507 	.word	0x08005507
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80054f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005500:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005504:	e012      	b.n	800552c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005506:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800550a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800550e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005512:	e00b      	b.n	800552c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005514:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005518:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800551c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005520:	e004      	b.n	800552c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005528:	e000      	b.n	800552c <USB_ActivateEndpoint+0x7c>
      break;
 800552a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	441a      	add	r2, r3
 8005536:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800553a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800553e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800554a:	b29b      	uxth	r3, r3
 800554c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	b29b      	uxth	r3, r3
 800555c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005564:	b29a      	uxth	r2, r3
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	b29b      	uxth	r3, r3
 800556c:	4313      	orrs	r3, r2
 800556e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	441a      	add	r2, r3
 800557c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005590:	b29b      	uxth	r3, r3
 8005592:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	7b1b      	ldrb	r3, [r3, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	f040 8149 	bne.w	8005830 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 8084 	beq.w	80056b0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	461a      	mov	r2, r3
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	4413      	add	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	011a      	lsls	r2, r3, #4
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	88db      	ldrh	r3, [r3, #6]
 80055d0:	085b      	lsrs	r3, r3, #1
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	81fb      	strh	r3, [r7, #14]
 80055ea:	89fb      	ldrh	r3, [r7, #14]
 80055ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d01b      	beq.n	800562c <USB_ActivateEndpoint+0x17c>
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	81bb      	strh	r3, [r7, #12]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	89bb      	ldrh	r3, [r7, #12]
 8005618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005624:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005628:	b29b      	uxth	r3, r3
 800562a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	78db      	ldrb	r3, [r3, #3]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d020      	beq.n	8005676 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800564a:	813b      	strh	r3, [r7, #8]
 800564c:	893b      	ldrh	r3, [r7, #8]
 800564e:	f083 0320 	eor.w	r3, r3, #32
 8005652:	813b      	strh	r3, [r7, #8]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	441a      	add	r2, r3
 800565e:	893b      	ldrh	r3, [r7, #8]
 8005660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005670:	b29b      	uxth	r3, r3
 8005672:	8013      	strh	r3, [r2, #0]
 8005674:	e27f      	b.n	8005b76 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	b29b      	uxth	r3, r3
 8005684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800568c:	817b      	strh	r3, [r7, #10]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	441a      	add	r2, r3
 8005698:	897b      	ldrh	r3, [r7, #10]
 800569a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800569e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	8013      	strh	r3, [r2, #0]
 80056ae:	e262      	b.n	8005b76 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	4413      	add	r3, r2
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	011a      	lsls	r2, r3, #4
 80056ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80056d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	88db      	ldrh	r3, [r3, #6]
 80056d8:	085b      	lsrs	r3, r3, #1
 80056da:	b29b      	uxth	r3, r3
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	4413      	add	r3, r2
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	011a      	lsls	r2, r3, #4
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	4413      	add	r3, r2
 8005702:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005706:	623b      	str	r3, [r7, #32]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d112      	bne.n	8005736 <USB_ActivateEndpoint+0x286>
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800571a:	b29a      	uxth	r2, r3
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	801a      	strh	r2, [r3, #0]
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	b29b      	uxth	r3, r3
 8005726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800572a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800572e:	b29a      	uxth	r2, r3
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	801a      	strh	r2, [r3, #0]
 8005734:	e02f      	b.n	8005796 <USB_ActivateEndpoint+0x2e6>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	2b3e      	cmp	r3, #62	; 0x3e
 800573c:	d813      	bhi.n	8005766 <USB_ActivateEndpoint+0x2b6>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	085b      	lsrs	r3, r3, #1
 8005744:	663b      	str	r3, [r7, #96]	; 0x60
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <USB_ActivateEndpoint+0x2a8>
 8005752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005754:	3301      	adds	r3, #1
 8005756:	663b      	str	r3, [r7, #96]	; 0x60
 8005758:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800575a:	b29b      	uxth	r3, r3
 800575c:	029b      	lsls	r3, r3, #10
 800575e:	b29a      	uxth	r2, r3
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	801a      	strh	r2, [r3, #0]
 8005764:	e017      	b.n	8005796 <USB_ActivateEndpoint+0x2e6>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	663b      	str	r3, [r7, #96]	; 0x60
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	2b00      	cmp	r3, #0
 8005778:	d102      	bne.n	8005780 <USB_ActivateEndpoint+0x2d0>
 800577a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800577c:	3b01      	subs	r3, #1
 800577e:	663b      	str	r3, [r7, #96]	; 0x60
 8005780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005782:	b29b      	uxth	r3, r3
 8005784:	029b      	lsls	r3, r3, #10
 8005786:	b29b      	uxth	r3, r3
 8005788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800578c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005790:	b29a      	uxth	r2, r3
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	83fb      	strh	r3, [r7, #30]
 80057a4:	8bfb      	ldrh	r3, [r7, #30]
 80057a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d01b      	beq.n	80057e6 <USB_ActivateEndpoint+0x336>
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c4:	83bb      	strh	r3, [r7, #28]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	441a      	add	r2, r3
 80057d0:	8bbb      	ldrh	r3, [r7, #28]
 80057d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fc:	837b      	strh	r3, [r7, #26]
 80057fe:	8b7b      	ldrh	r3, [r7, #26]
 8005800:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005804:	837b      	strh	r3, [r7, #26]
 8005806:	8b7b      	ldrh	r3, [r7, #26]
 8005808:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800580c:	837b      	strh	r3, [r7, #26]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	441a      	add	r2, r3
 8005818:	8b7b      	ldrh	r3, [r7, #26]
 800581a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800581e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800582a:	b29b      	uxth	r3, r3
 800582c:	8013      	strh	r3, [r2, #0]
 800582e:	e1a2      	b.n	8005b76 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	b29b      	uxth	r3, r3
 800583e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005846:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	441a      	add	r2, r3
 8005854:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800585c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005860:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005868:	b29b      	uxth	r3, r3
 800586a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005876:	b29b      	uxth	r3, r3
 8005878:	461a      	mov	r2, r3
 800587a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800587c:	4413      	add	r3, r2
 800587e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	011a      	lsls	r2, r3, #4
 8005886:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005888:	4413      	add	r3, r2
 800588a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800588e:	657b      	str	r3, [r7, #84]	; 0x54
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	891b      	ldrh	r3, [r3, #8]
 8005894:	085b      	lsrs	r3, r3, #1
 8005896:	b29b      	uxth	r3, r3
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800589e:	801a      	strh	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	653b      	str	r3, [r7, #80]	; 0x50
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b0:	4413      	add	r3, r2
 80058b2:	653b      	str	r3, [r7, #80]	; 0x50
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	011a      	lsls	r2, r3, #4
 80058ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80058c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	895b      	ldrh	r3, [r3, #10]
 80058c8:	085b      	lsrs	r3, r3, #1
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f040 8091 	bne.w	8005a00 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80058ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80058ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d01b      	beq.n	800592e <USB_ActivateEndpoint+0x47e>
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	441a      	add	r2, r3
 8005918:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800591a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005922:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592a:	b29b      	uxth	r3, r3
 800592c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	873b      	strh	r3, [r7, #56]	; 0x38
 800593c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800593e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d01b      	beq.n	800597e <USB_ActivateEndpoint+0x4ce>
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	b29b      	uxth	r3, r3
 8005954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	441a      	add	r2, r3
 8005968:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800596a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005976:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800597a:	b29b      	uxth	r3, r3
 800597c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	b29b      	uxth	r3, r3
 800598c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005994:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005996:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005998:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800599c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800599e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80059a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	441a      	add	r2, r3
 80059b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80059b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059dc:	867b      	strh	r3, [r7, #50]	; 0x32
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	441a      	add	r2, r3
 80059e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80059ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	8013      	strh	r3, [r2, #0]
 80059fe:	e0ba      	b.n	8005b76 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005a10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d01d      	beq.n	8005a58 <USB_ActivateEndpoint+0x5a8>
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a32:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	441a      	add	r2, r3
 8005a40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005a68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01d      	beq.n	8005ab0 <USB_ActivateEndpoint+0x600>
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	441a      	add	r2, r3
 8005a98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	78db      	ldrb	r3, [r3, #3]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d024      	beq.n	8005b02 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ace:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005ad2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ad6:	f083 0320 	eor.w	r3, r3, #32
 8005ada:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	441a      	add	r2, r3
 8005ae8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	8013      	strh	r3, [r2, #0]
 8005b00:	e01d      	b.n	8005b3e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b18:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	441a      	add	r2, r3
 8005b26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b54:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	441a      	add	r2, r3
 8005b60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005b76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	376c      	adds	r7, #108	; 0x6c
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bc80      	pop	{r7}
 8005b82:	4770      	bx	lr

08005b84 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b08d      	sub	sp, #52	; 0x34
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	7b1b      	ldrb	r3, [r3, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f040 808e 	bne.w	8005cb4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	785b      	ldrb	r3, [r3, #1]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d044      	beq.n	8005c2a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	81bb      	strh	r3, [r7, #12]
 8005bae:	89bb      	ldrh	r3, [r7, #12]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d01b      	beq.n	8005bf0 <USB_DeactivateEndpoint+0x6c>
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bce:	817b      	strh	r3, [r7, #10]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	441a      	add	r2, r3
 8005bda:	897b      	ldrh	r3, [r7, #10]
 8005bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c06:	813b      	strh	r3, [r7, #8]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	441a      	add	r2, r3
 8005c12:	893b      	ldrh	r3, [r7, #8]
 8005c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	8013      	strh	r3, [r2, #0]
 8005c28:	e192      	b.n	8005f50 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	827b      	strh	r3, [r7, #18]
 8005c38:	8a7b      	ldrh	r3, [r7, #18]
 8005c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d01b      	beq.n	8005c7a <USB_DeactivateEndpoint+0xf6>
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c58:	823b      	strh	r3, [r7, #16]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	441a      	add	r2, r3
 8005c64:	8a3b      	ldrh	r3, [r7, #16]
 8005c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c90:	81fb      	strh	r3, [r7, #14]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	441a      	add	r2, r3
 8005c9c:	89fb      	ldrh	r3, [r7, #14]
 8005c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	8013      	strh	r3, [r2, #0]
 8005cb2:	e14d      	b.n	8005f50 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f040 80a5 	bne.w	8005e08 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	843b      	strh	r3, [r7, #32]
 8005ccc:	8c3b      	ldrh	r3, [r7, #32]
 8005cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d01b      	beq.n	8005d0e <USB_DeactivateEndpoint+0x18a>
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cec:	83fb      	strh	r3, [r7, #30]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	441a      	add	r2, r3
 8005cf8:	8bfb      	ldrh	r3, [r7, #30]
 8005cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	83bb      	strh	r3, [r7, #28]
 8005d1c:	8bbb      	ldrh	r3, [r7, #28]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d01b      	beq.n	8005d5e <USB_DeactivateEndpoint+0x1da>
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3c:	837b      	strh	r3, [r7, #26]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	441a      	add	r2, r3
 8005d48:	8b7b      	ldrh	r3, [r7, #26]
 8005d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d74:	833b      	strh	r3, [r7, #24]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	441a      	add	r2, r3
 8005d80:	8b3b      	ldrh	r3, [r7, #24]
 8005d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dac:	82fb      	strh	r3, [r7, #22]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	441a      	add	r2, r3
 8005db8:	8afb      	ldrh	r3, [r7, #22]
 8005dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de4:	82bb      	strh	r3, [r7, #20]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	441a      	add	r2, r3
 8005df0:	8abb      	ldrh	r3, [r7, #20]
 8005df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	8013      	strh	r3, [r2, #0]
 8005e06:	e0a3      	b.n	8005f50 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005e16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01b      	beq.n	8005e58 <USB_DeactivateEndpoint+0x2d4>
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e36:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	441a      	add	r2, r3
 8005e42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005e66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01b      	beq.n	8005ea8 <USB_DeactivateEndpoint+0x324>
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e86:	853b      	strh	r3, [r7, #40]	; 0x28
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	441a      	add	r2, r3
 8005e92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	441a      	add	r2, r3
 8005eca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	441a      	add	r2, r3
 8005f02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	441a      	add	r2, r3
 8005f3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3734      	adds	r7, #52	; 0x34
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr

08005f5c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b0c4      	sub	sp, #272	; 0x110
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	1d3b      	adds	r3, r7, #4
 8005f64:	6018      	str	r0, [r3, #0]
 8005f66:	463b      	mov	r3, r7
 8005f68:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	785b      	ldrb	r3, [r3, #1]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	f040 8557 	bne.w	8006a24 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005f76:	463b      	mov	r3, r7
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	699a      	ldr	r2, [r3, #24]
 8005f7c:	463b      	mov	r3, r7
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d905      	bls.n	8005f92 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005f86:	463b      	mov	r3, r7
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005f90:	e004      	b.n	8005f9c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005f92:	463b      	mov	r3, r7
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005f9c:	463b      	mov	r3, r7
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	7b1b      	ldrb	r3, [r3, #12]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d12c      	bne.n	8006000 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005fa6:	463b      	mov	r3, r7
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6959      	ldr	r1, [r3, #20]
 8005fac:	463b      	mov	r3, r7
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	88da      	ldrh	r2, [r3, #6]
 8005fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	1d38      	adds	r0, r7, #4
 8005fba:	6800      	ldr	r0, [r0, #0]
 8005fbc:	f001 fa2c 	bl	8007418 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005fc0:	1d3b      	adds	r3, r7, #4
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	1d3b      	adds	r3, r7, #4
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	463b      	mov	r3, r7
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	011a      	lsls	r2, r3, #4
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005fe8:	f107 0310 	add.w	r3, r7, #16
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	f107 0310 	add.w	r3, r7, #16
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	801a      	strh	r2, [r3, #0]
 8005ffc:	f000 bcdd 	b.w	80069ba <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006000:	463b      	mov	r3, r7
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	78db      	ldrb	r3, [r3, #3]
 8006006:	2b02      	cmp	r3, #2
 8006008:	f040 8347 	bne.w	800669a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800600c:	463b      	mov	r3, r7
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6a1a      	ldr	r2, [r3, #32]
 8006012:	463b      	mov	r3, r7
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	429a      	cmp	r2, r3
 800601a:	f240 82eb 	bls.w	80065f4 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800601e:	1d3b      	adds	r3, r7, #4
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	463b      	mov	r3, r7
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006038:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800603c:	1d3b      	adds	r3, r7, #4
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	463b      	mov	r3, r7
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	441a      	add	r2, r3
 800604a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800604e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006056:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800605a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605e:	b29b      	uxth	r3, r3
 8006060:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006062:	463b      	mov	r3, r7
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6a1a      	ldr	r2, [r3, #32]
 8006068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800606c:	1ad2      	subs	r2, r2, r3
 800606e:	463b      	mov	r3, r7
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006074:	1d3b      	adds	r3, r7, #4
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	463b      	mov	r3, r7
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 8159 	beq.w	8006342 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006090:	1d3b      	adds	r3, r7, #4
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	637b      	str	r3, [r7, #52]	; 0x34
 8006096:	463b      	mov	r3, r7
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	785b      	ldrb	r3, [r3, #1]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d164      	bne.n	800616a <USB_EPStartXfer+0x20e>
 80060a0:	1d3b      	adds	r3, r7, #4
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060a6:	1d3b      	adds	r3, r7, #4
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	461a      	mov	r2, r3
 80060b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b4:	4413      	add	r3, r2
 80060b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060b8:	463b      	mov	r3, r7
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	011a      	lsls	r2, r3, #4
 80060c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c2:	4413      	add	r3, r2
 80060c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d112      	bne.n	80060f8 <USB_EPStartXfer+0x19c>
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060dc:	b29a      	uxth	r2, r3
 80060de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e0:	801a      	strh	r2, [r3, #0]
 80060e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	801a      	strh	r2, [r3, #0]
 80060f6:	e054      	b.n	80061a2 <USB_EPStartXfer+0x246>
 80060f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060fc:	2b3e      	cmp	r3, #62	; 0x3e
 80060fe:	d817      	bhi.n	8006130 <USB_EPStartXfer+0x1d4>
 8006100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006104:	085b      	lsrs	r3, r3, #1
 8006106:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800610a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d004      	beq.n	8006120 <USB_EPStartXfer+0x1c4>
 8006116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800611a:	3301      	adds	r3, #1
 800611c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006124:	b29b      	uxth	r3, r3
 8006126:	029b      	lsls	r3, r3, #10
 8006128:	b29a      	uxth	r2, r3
 800612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	e038      	b.n	80061a2 <USB_EPStartXfer+0x246>
 8006130:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006134:	095b      	lsrs	r3, r3, #5
 8006136:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800613a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800613e:	f003 031f 	and.w	r3, r3, #31
 8006142:	2b00      	cmp	r3, #0
 8006144:	d104      	bne.n	8006150 <USB_EPStartXfer+0x1f4>
 8006146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800614a:	3b01      	subs	r3, #1
 800614c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006154:	b29b      	uxth	r3, r3
 8006156:	029b      	lsls	r3, r3, #10
 8006158:	b29b      	uxth	r3, r3
 800615a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800615e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006162:	b29a      	uxth	r2, r3
 8006164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	e01b      	b.n	80061a2 <USB_EPStartXfer+0x246>
 800616a:	463b      	mov	r3, r7
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	785b      	ldrb	r3, [r3, #1]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d116      	bne.n	80061a2 <USB_EPStartXfer+0x246>
 8006174:	1d3b      	adds	r3, r7, #4
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800617c:	b29b      	uxth	r3, r3
 800617e:	461a      	mov	r2, r3
 8006180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006182:	4413      	add	r3, r2
 8006184:	637b      	str	r3, [r7, #52]	; 0x34
 8006186:	463b      	mov	r3, r7
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	011a      	lsls	r2, r3, #4
 800618e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006190:	4413      	add	r3, r2
 8006192:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006196:	633b      	str	r3, [r7, #48]	; 0x30
 8006198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800619c:	b29a      	uxth	r2, r3
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80061a2:	463b      	mov	r3, r7
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	895b      	ldrh	r3, [r3, #10]
 80061a8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061ac:	463b      	mov	r3, r7
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6959      	ldr	r1, [r3, #20]
 80061b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80061bc:	1d38      	adds	r0, r7, #4
 80061be:	6800      	ldr	r0, [r0, #0]
 80061c0:	f001 f92a 	bl	8007418 <USB_WritePMA>
            ep->xfer_buff += len;
 80061c4:	463b      	mov	r3, r7
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	695a      	ldr	r2, [r3, #20]
 80061ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ce:	441a      	add	r2, r3
 80061d0:	463b      	mov	r3, r7
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80061d6:	463b      	mov	r3, r7
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6a1a      	ldr	r2, [r3, #32]
 80061dc:	463b      	mov	r3, r7
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d909      	bls.n	80061fa <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80061e6:	463b      	mov	r3, r7
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6a1a      	ldr	r2, [r3, #32]
 80061ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061f0:	1ad2      	subs	r2, r2, r3
 80061f2:	463b      	mov	r3, r7
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	621a      	str	r2, [r3, #32]
 80061f8:	e008      	b.n	800620c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80061fa:	463b      	mov	r3, r7
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006204:	463b      	mov	r3, r7
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2200      	movs	r2, #0
 800620a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800620c:	463b      	mov	r3, r7
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	785b      	ldrb	r3, [r3, #1]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d164      	bne.n	80062e0 <USB_EPStartXfer+0x384>
 8006216:	1d3b      	adds	r3, r7, #4
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	61fb      	str	r3, [r7, #28]
 800621c:	1d3b      	adds	r3, r7, #4
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006224:	b29b      	uxth	r3, r3
 8006226:	461a      	mov	r2, r3
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	4413      	add	r3, r2
 800622c:	61fb      	str	r3, [r7, #28]
 800622e:	463b      	mov	r3, r7
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	011a      	lsls	r2, r3, #4
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	4413      	add	r3, r2
 800623a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800623e:	61bb      	str	r3, [r7, #24]
 8006240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d112      	bne.n	800626e <USB_EPStartXfer+0x312>
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006252:	b29a      	uxth	r2, r3
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	801a      	strh	r2, [r3, #0]
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	b29b      	uxth	r3, r3
 800625e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006266:	b29a      	uxth	r2, r3
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	801a      	strh	r2, [r3, #0]
 800626c:	e057      	b.n	800631e <USB_EPStartXfer+0x3c2>
 800626e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006272:	2b3e      	cmp	r3, #62	; 0x3e
 8006274:	d817      	bhi.n	80062a6 <USB_EPStartXfer+0x34a>
 8006276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800627a:	085b      	lsrs	r3, r3, #1
 800627c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006280:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d004      	beq.n	8006296 <USB_EPStartXfer+0x33a>
 800628c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006290:	3301      	adds	r3, #1
 8006292:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006296:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800629a:	b29b      	uxth	r3, r3
 800629c:	029b      	lsls	r3, r3, #10
 800629e:	b29a      	uxth	r2, r3
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	801a      	strh	r2, [r3, #0]
 80062a4:	e03b      	b.n	800631e <USB_EPStartXfer+0x3c2>
 80062a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062aa:	095b      	lsrs	r3, r3, #5
 80062ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062b4:	f003 031f 	and.w	r3, r3, #31
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d104      	bne.n	80062c6 <USB_EPStartXfer+0x36a>
 80062bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062c0:	3b01      	subs	r3, #1
 80062c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	029b      	lsls	r3, r3, #10
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d8:	b29a      	uxth	r2, r3
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	801a      	strh	r2, [r3, #0]
 80062de:	e01e      	b.n	800631e <USB_EPStartXfer+0x3c2>
 80062e0:	463b      	mov	r3, r7
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	785b      	ldrb	r3, [r3, #1]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d119      	bne.n	800631e <USB_EPStartXfer+0x3c2>
 80062ea:	1d3b      	adds	r3, r7, #4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
 80062f0:	1d3b      	adds	r3, r7, #4
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	461a      	mov	r2, r3
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	4413      	add	r3, r2
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
 8006302:	463b      	mov	r3, r7
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	011a      	lsls	r2, r3, #4
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	4413      	add	r3, r2
 800630e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006312:	623b      	str	r3, [r7, #32]
 8006314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006318:	b29a      	uxth	r2, r3
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800631e:	463b      	mov	r3, r7
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	891b      	ldrh	r3, [r3, #8]
 8006324:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006328:	463b      	mov	r3, r7
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6959      	ldr	r1, [r3, #20]
 800632e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006332:	b29b      	uxth	r3, r3
 8006334:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006338:	1d38      	adds	r0, r7, #4
 800633a:	6800      	ldr	r0, [r0, #0]
 800633c:	f001 f86c 	bl	8007418 <USB_WritePMA>
 8006340:	e33b      	b.n	80069ba <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006342:	463b      	mov	r3, r7
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	785b      	ldrb	r3, [r3, #1]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d164      	bne.n	8006416 <USB_EPStartXfer+0x4ba>
 800634c:	1d3b      	adds	r3, r7, #4
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006352:	1d3b      	adds	r3, r7, #4
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800635a:	b29b      	uxth	r3, r3
 800635c:	461a      	mov	r2, r3
 800635e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006360:	4413      	add	r3, r2
 8006362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006364:	463b      	mov	r3, r7
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	011a      	lsls	r2, r3, #4
 800636c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800636e:	4413      	add	r3, r2
 8006370:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006374:	64bb      	str	r3, [r7, #72]	; 0x48
 8006376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800637a:	2b00      	cmp	r3, #0
 800637c:	d112      	bne.n	80063a4 <USB_EPStartXfer+0x448>
 800637e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b29b      	uxth	r3, r3
 8006384:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006388:	b29a      	uxth	r2, r3
 800638a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800638c:	801a      	strh	r2, [r3, #0]
 800638e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	b29b      	uxth	r3, r3
 8006394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800639c:	b29a      	uxth	r2, r3
 800639e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063a0:	801a      	strh	r2, [r3, #0]
 80063a2:	e057      	b.n	8006454 <USB_EPStartXfer+0x4f8>
 80063a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063a8:	2b3e      	cmp	r3, #62	; 0x3e
 80063aa:	d817      	bhi.n	80063dc <USB_EPStartXfer+0x480>
 80063ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063b0:	085b      	lsrs	r3, r3, #1
 80063b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d004      	beq.n	80063cc <USB_EPStartXfer+0x470>
 80063c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063c6:	3301      	adds	r3, #1
 80063c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	029b      	lsls	r3, r3, #10
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d8:	801a      	strh	r2, [r3, #0]
 80063da:	e03b      	b.n	8006454 <USB_EPStartXfer+0x4f8>
 80063dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ea:	f003 031f 	and.w	r3, r3, #31
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d104      	bne.n	80063fc <USB_EPStartXfer+0x4a0>
 80063f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063f6:	3b01      	subs	r3, #1
 80063f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006400:	b29b      	uxth	r3, r3
 8006402:	029b      	lsls	r3, r3, #10
 8006404:	b29b      	uxth	r3, r3
 8006406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800640a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800640e:	b29a      	uxth	r2, r3
 8006410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006412:	801a      	strh	r2, [r3, #0]
 8006414:	e01e      	b.n	8006454 <USB_EPStartXfer+0x4f8>
 8006416:	463b      	mov	r3, r7
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	785b      	ldrb	r3, [r3, #1]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d119      	bne.n	8006454 <USB_EPStartXfer+0x4f8>
 8006420:	1d3b      	adds	r3, r7, #4
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	657b      	str	r3, [r7, #84]	; 0x54
 8006426:	1d3b      	adds	r3, r7, #4
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800642e:	b29b      	uxth	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006434:	4413      	add	r3, r2
 8006436:	657b      	str	r3, [r7, #84]	; 0x54
 8006438:	463b      	mov	r3, r7
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	011a      	lsls	r2, r3, #4
 8006440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006442:	4413      	add	r3, r2
 8006444:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006448:	653b      	str	r3, [r7, #80]	; 0x50
 800644a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800644e:	b29a      	uxth	r2, r3
 8006450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006452:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006454:	463b      	mov	r3, r7
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	891b      	ldrh	r3, [r3, #8]
 800645a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800645e:	463b      	mov	r3, r7
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6959      	ldr	r1, [r3, #20]
 8006464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006468:	b29b      	uxth	r3, r3
 800646a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800646e:	1d38      	adds	r0, r7, #4
 8006470:	6800      	ldr	r0, [r0, #0]
 8006472:	f000 ffd1 	bl	8007418 <USB_WritePMA>
            ep->xfer_buff += len;
 8006476:	463b      	mov	r3, r7
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	695a      	ldr	r2, [r3, #20]
 800647c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006480:	441a      	add	r2, r3
 8006482:	463b      	mov	r3, r7
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006488:	463b      	mov	r3, r7
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6a1a      	ldr	r2, [r3, #32]
 800648e:	463b      	mov	r3, r7
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	429a      	cmp	r2, r3
 8006496:	d909      	bls.n	80064ac <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8006498:	463b      	mov	r3, r7
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6a1a      	ldr	r2, [r3, #32]
 800649e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064a2:	1ad2      	subs	r2, r2, r3
 80064a4:	463b      	mov	r3, r7
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	621a      	str	r2, [r3, #32]
 80064aa:	e008      	b.n	80064be <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80064ac:	463b      	mov	r3, r7
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80064b6:	463b      	mov	r3, r7
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2200      	movs	r2, #0
 80064bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064be:	1d3b      	adds	r3, r7, #4
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	647b      	str	r3, [r7, #68]	; 0x44
 80064c4:	463b      	mov	r3, r7
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	785b      	ldrb	r3, [r3, #1]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d164      	bne.n	8006598 <USB_EPStartXfer+0x63c>
 80064ce:	1d3b      	adds	r3, r7, #4
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064d4:	1d3b      	adds	r3, r7, #4
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064dc:	b29b      	uxth	r3, r3
 80064de:	461a      	mov	r2, r3
 80064e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e2:	4413      	add	r3, r2
 80064e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e6:	463b      	mov	r3, r7
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	011a      	lsls	r2, r3, #4
 80064ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f0:	4413      	add	r3, r2
 80064f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80064f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d112      	bne.n	8006526 <USB_EPStartXfer+0x5ca>
 8006500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	b29b      	uxth	r3, r3
 8006506:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800650a:	b29a      	uxth	r2, r3
 800650c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650e:	801a      	strh	r2, [r3, #0]
 8006510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	b29b      	uxth	r3, r3
 8006516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800651a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651e:	b29a      	uxth	r2, r3
 8006520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006522:	801a      	strh	r2, [r3, #0]
 8006524:	e054      	b.n	80065d0 <USB_EPStartXfer+0x674>
 8006526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800652a:	2b3e      	cmp	r3, #62	; 0x3e
 800652c:	d817      	bhi.n	800655e <USB_EPStartXfer+0x602>
 800652e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006532:	085b      	lsrs	r3, r3, #1
 8006534:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d004      	beq.n	800654e <USB_EPStartXfer+0x5f2>
 8006544:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006548:	3301      	adds	r3, #1
 800654a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800654e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006552:	b29b      	uxth	r3, r3
 8006554:	029b      	lsls	r3, r3, #10
 8006556:	b29a      	uxth	r2, r3
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	801a      	strh	r2, [r3, #0]
 800655c:	e038      	b.n	80065d0 <USB_EPStartXfer+0x674>
 800655e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006562:	095b      	lsrs	r3, r3, #5
 8006564:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006568:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800656c:	f003 031f 	and.w	r3, r3, #31
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <USB_EPStartXfer+0x622>
 8006574:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006578:	3b01      	subs	r3, #1
 800657a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800657e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006582:	b29b      	uxth	r3, r3
 8006584:	029b      	lsls	r3, r3, #10
 8006586:	b29b      	uxth	r3, r3
 8006588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800658c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006590:	b29a      	uxth	r2, r3
 8006592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006594:	801a      	strh	r2, [r3, #0]
 8006596:	e01b      	b.n	80065d0 <USB_EPStartXfer+0x674>
 8006598:	463b      	mov	r3, r7
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	785b      	ldrb	r3, [r3, #1]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d116      	bne.n	80065d0 <USB_EPStartXfer+0x674>
 80065a2:	1d3b      	adds	r3, r7, #4
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	461a      	mov	r2, r3
 80065ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065b0:	4413      	add	r3, r2
 80065b2:	647b      	str	r3, [r7, #68]	; 0x44
 80065b4:	463b      	mov	r3, r7
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	011a      	lsls	r2, r3, #4
 80065bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065be:	4413      	add	r3, r2
 80065c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065c4:	643b      	str	r3, [r7, #64]	; 0x40
 80065c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065d0:	463b      	mov	r3, r7
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	895b      	ldrh	r3, [r3, #10]
 80065d6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065da:	463b      	mov	r3, r7
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6959      	ldr	r1, [r3, #20]
 80065e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80065ea:	1d38      	adds	r0, r7, #4
 80065ec:	6800      	ldr	r0, [r0, #0]
 80065ee:	f000 ff13 	bl	8007418 <USB_WritePMA>
 80065f2:	e1e2      	b.n	80069ba <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80065f4:	463b      	mov	r3, r7
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80065fe:	1d3b      	adds	r3, r7, #4
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	463b      	mov	r3, r7
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006618:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800661c:	1d3b      	adds	r3, r7, #4
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	463b      	mov	r3, r7
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	441a      	add	r2, r3
 800662a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800662e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800663a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663e:	b29b      	uxth	r3, r3
 8006640:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006642:	1d3b      	adds	r3, r7, #4
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	663b      	str	r3, [r7, #96]	; 0x60
 8006648:	1d3b      	adds	r3, r7, #4
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006650:	b29b      	uxth	r3, r3
 8006652:	461a      	mov	r2, r3
 8006654:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006656:	4413      	add	r3, r2
 8006658:	663b      	str	r3, [r7, #96]	; 0x60
 800665a:	463b      	mov	r3, r7
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	011a      	lsls	r2, r3, #4
 8006662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006664:	4413      	add	r3, r2
 8006666:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800666a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800666c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006670:	b29a      	uxth	r2, r3
 8006672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006674:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006676:	463b      	mov	r3, r7
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	891b      	ldrh	r3, [r3, #8]
 800667c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006680:	463b      	mov	r3, r7
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6959      	ldr	r1, [r3, #20]
 8006686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800668a:	b29b      	uxth	r3, r3
 800668c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006690:	1d38      	adds	r0, r7, #4
 8006692:	6800      	ldr	r0, [r0, #0]
 8006694:	f000 fec0 	bl	8007418 <USB_WritePMA>
 8006698:	e18f      	b.n	80069ba <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800669a:	1d3b      	adds	r3, r7, #4
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	463b      	mov	r3, r7
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 808f 	beq.w	80067d4 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066b6:	1d3b      	adds	r3, r7, #4
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80066bc:	463b      	mov	r3, r7
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	785b      	ldrb	r3, [r3, #1]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d164      	bne.n	8006790 <USB_EPStartXfer+0x834>
 80066c6:	1d3b      	adds	r3, r7, #4
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	673b      	str	r3, [r7, #112]	; 0x70
 80066cc:	1d3b      	adds	r3, r7, #4
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	461a      	mov	r2, r3
 80066d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066da:	4413      	add	r3, r2
 80066dc:	673b      	str	r3, [r7, #112]	; 0x70
 80066de:	463b      	mov	r3, r7
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	011a      	lsls	r2, r3, #4
 80066e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066e8:	4413      	add	r3, r2
 80066ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d112      	bne.n	800671e <USB_EPStartXfer+0x7c2>
 80066f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006702:	b29a      	uxth	r2, r3
 8006704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006706:	801a      	strh	r2, [r3, #0]
 8006708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b29b      	uxth	r3, r3
 800670e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006716:	b29a      	uxth	r2, r3
 8006718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671a:	801a      	strh	r2, [r3, #0]
 800671c:	e054      	b.n	80067c8 <USB_EPStartXfer+0x86c>
 800671e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006722:	2b3e      	cmp	r3, #62	; 0x3e
 8006724:	d817      	bhi.n	8006756 <USB_EPStartXfer+0x7fa>
 8006726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800672a:	085b      	lsrs	r3, r3, #1
 800672c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d004      	beq.n	8006746 <USB_EPStartXfer+0x7ea>
 800673c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006740:	3301      	adds	r3, #1
 8006742:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674a:	b29b      	uxth	r3, r3
 800674c:	029b      	lsls	r3, r3, #10
 800674e:	b29a      	uxth	r2, r3
 8006750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006752:	801a      	strh	r2, [r3, #0]
 8006754:	e038      	b.n	80067c8 <USB_EPStartXfer+0x86c>
 8006756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006764:	f003 031f 	and.w	r3, r3, #31
 8006768:	2b00      	cmp	r3, #0
 800676a:	d104      	bne.n	8006776 <USB_EPStartXfer+0x81a>
 800676c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006770:	3b01      	subs	r3, #1
 8006772:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800677a:	b29b      	uxth	r3, r3
 800677c:	029b      	lsls	r3, r3, #10
 800677e:	b29b      	uxth	r3, r3
 8006780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006788:	b29a      	uxth	r2, r3
 800678a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800678c:	801a      	strh	r2, [r3, #0]
 800678e:	e01b      	b.n	80067c8 <USB_EPStartXfer+0x86c>
 8006790:	463b      	mov	r3, r7
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	785b      	ldrb	r3, [r3, #1]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d116      	bne.n	80067c8 <USB_EPStartXfer+0x86c>
 800679a:	1d3b      	adds	r3, r7, #4
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	461a      	mov	r2, r3
 80067a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067a8:	4413      	add	r3, r2
 80067aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80067ac:	463b      	mov	r3, r7
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	011a      	lsls	r2, r3, #4
 80067b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067b6:	4413      	add	r3, r2
 80067b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067bc:	677b      	str	r3, [r7, #116]	; 0x74
 80067be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80067c8:	463b      	mov	r3, r7
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	895b      	ldrh	r3, [r3, #10]
 80067ce:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80067d2:	e097      	b.n	8006904 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067d4:	463b      	mov	r3, r7
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	785b      	ldrb	r3, [r3, #1]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d168      	bne.n	80068b0 <USB_EPStartXfer+0x954>
 80067de:	1d3b      	adds	r3, r7, #4
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067e6:	1d3b      	adds	r3, r7, #4
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	461a      	mov	r2, r3
 80067f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067f6:	4413      	add	r3, r2
 80067f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067fc:	463b      	mov	r3, r7
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	011a      	lsls	r2, r3, #4
 8006804:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006808:	4413      	add	r3, r2
 800680a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800680e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006810:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006814:	2b00      	cmp	r3, #0
 8006816:	d112      	bne.n	800683e <USB_EPStartXfer+0x8e2>
 8006818:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006822:	b29a      	uxth	r2, r3
 8006824:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006826:	801a      	strh	r2, [r3, #0]
 8006828:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b29b      	uxth	r3, r3
 800682e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006836:	b29a      	uxth	r2, r3
 8006838:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800683a:	801a      	strh	r2, [r3, #0]
 800683c:	e05d      	b.n	80068fa <USB_EPStartXfer+0x99e>
 800683e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006842:	2b3e      	cmp	r3, #62	; 0x3e
 8006844:	d817      	bhi.n	8006876 <USB_EPStartXfer+0x91a>
 8006846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800684a:	085b      	lsrs	r3, r3, #1
 800684c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d004      	beq.n	8006866 <USB_EPStartXfer+0x90a>
 800685c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006860:	3301      	adds	r3, #1
 8006862:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006866:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800686a:	b29b      	uxth	r3, r3
 800686c:	029b      	lsls	r3, r3, #10
 800686e:	b29a      	uxth	r2, r3
 8006870:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006872:	801a      	strh	r2, [r3, #0]
 8006874:	e041      	b.n	80068fa <USB_EPStartXfer+0x99e>
 8006876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800687a:	095b      	lsrs	r3, r3, #5
 800687c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006884:	f003 031f 	and.w	r3, r3, #31
 8006888:	2b00      	cmp	r3, #0
 800688a:	d104      	bne.n	8006896 <USB_EPStartXfer+0x93a>
 800688c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006890:	3b01      	subs	r3, #1
 8006892:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006896:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800689a:	b29b      	uxth	r3, r3
 800689c:	029b      	lsls	r3, r3, #10
 800689e:	b29b      	uxth	r3, r3
 80068a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068ac:	801a      	strh	r2, [r3, #0]
 80068ae:	e024      	b.n	80068fa <USB_EPStartXfer+0x99e>
 80068b0:	463b      	mov	r3, r7
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	785b      	ldrb	r3, [r3, #1]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d11f      	bne.n	80068fa <USB_EPStartXfer+0x99e>
 80068ba:	1d3b      	adds	r3, r7, #4
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068c2:	1d3b      	adds	r3, r7, #4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	461a      	mov	r2, r3
 80068ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068d2:	4413      	add	r3, r2
 80068d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068d8:	463b      	mov	r3, r7
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	011a      	lsls	r2, r3, #4
 80068e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068e4:	4413      	add	r3, r2
 80068e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80068fa:	463b      	mov	r3, r7
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	891b      	ldrh	r3, [r3, #8]
 8006900:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006904:	463b      	mov	r3, r7
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6959      	ldr	r1, [r3, #20]
 800690a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800690e:	b29b      	uxth	r3, r3
 8006910:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006914:	1d38      	adds	r0, r7, #4
 8006916:	6800      	ldr	r0, [r0, #0]
 8006918:	f000 fd7e 	bl	8007418 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800691c:	463b      	mov	r3, r7
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	785b      	ldrb	r3, [r3, #1]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d122      	bne.n	800696c <USB_EPStartXfer+0xa10>
 8006926:	1d3b      	adds	r3, r7, #4
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	463b      	mov	r3, r7
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	b29b      	uxth	r3, r3
 8006938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006940:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006944:	1d3b      	adds	r3, r7, #4
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	463b      	mov	r3, r7
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	441a      	add	r2, r3
 8006952:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800695a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800695e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006962:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006966:	b29b      	uxth	r3, r3
 8006968:	8013      	strh	r3, [r2, #0]
 800696a:	e026      	b.n	80069ba <USB_EPStartXfer+0xa5e>
 800696c:	463b      	mov	r3, r7
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	785b      	ldrb	r3, [r3, #1]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d121      	bne.n	80069ba <USB_EPStartXfer+0xa5e>
 8006976:	1d3b      	adds	r3, r7, #4
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	463b      	mov	r3, r7
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	b29b      	uxth	r3, r3
 8006988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800698c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006990:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006994:	1d3b      	adds	r3, r7, #4
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	463b      	mov	r3, r7
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	441a      	add	r2, r3
 80069a2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80069a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80069ba:	1d3b      	adds	r3, r7, #4
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	463b      	mov	r3, r7
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	f107 020e 	add.w	r2, r7, #14
 80069d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069d8:	8013      	strh	r3, [r2, #0]
 80069da:	f107 030e 	add.w	r3, r7, #14
 80069de:	f107 020e 	add.w	r2, r7, #14
 80069e2:	8812      	ldrh	r2, [r2, #0]
 80069e4:	f082 0210 	eor.w	r2, r2, #16
 80069e8:	801a      	strh	r2, [r3, #0]
 80069ea:	f107 030e 	add.w	r3, r7, #14
 80069ee:	f107 020e 	add.w	r2, r7, #14
 80069f2:	8812      	ldrh	r2, [r2, #0]
 80069f4:	f082 0220 	eor.w	r2, r2, #32
 80069f8:	801a      	strh	r2, [r3, #0]
 80069fa:	1d3b      	adds	r3, r7, #4
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	463b      	mov	r3, r7
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	441a      	add	r2, r3
 8006a08:	f107 030e 	add.w	r3, r7, #14
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	8013      	strh	r3, [r2, #0]
 8006a22:	e3b5      	b.n	8007190 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006a24:	463b      	mov	r3, r7
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	7b1b      	ldrb	r3, [r3, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f040 8090 	bne.w	8006b50 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006a30:	463b      	mov	r3, r7
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699a      	ldr	r2, [r3, #24]
 8006a36:	463b      	mov	r3, r7
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d90e      	bls.n	8006a5e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8006a40:	463b      	mov	r3, r7
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8006a4a:	463b      	mov	r3, r7
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	699a      	ldr	r2, [r3, #24]
 8006a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a54:	1ad2      	subs	r2, r2, r3
 8006a56:	463b      	mov	r3, r7
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	619a      	str	r2, [r3, #24]
 8006a5c:	e008      	b.n	8006a70 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8006a5e:	463b      	mov	r3, r7
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006a68:	463b      	mov	r3, r7
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006a70:	1d3b      	adds	r3, r7, #4
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a78:	1d3b      	adds	r3, r7, #4
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a88:	4413      	add	r3, r2
 8006a8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a8e:	463b      	mov	r3, r7
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	011a      	lsls	r2, r3, #4
 8006a96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006aa0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d116      	bne.n	8006ada <USB_EPStartXfer+0xb7e>
 8006aac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006abe:	801a      	strh	r2, [r3, #0]
 8006ac0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ad6:	801a      	strh	r2, [r3, #0]
 8006ad8:	e32c      	b.n	8007134 <USB_EPStartXfer+0x11d8>
 8006ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ade:	2b3e      	cmp	r3, #62	; 0x3e
 8006ae0:	d818      	bhi.n	8006b14 <USB_EPStartXfer+0xbb8>
 8006ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ae6:	085b      	lsrs	r3, r3, #1
 8006ae8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d004      	beq.n	8006b02 <USB_EPStartXfer+0xba6>
 8006af8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006afc:	3301      	adds	r3, #1
 8006afe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006b02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	029b      	lsls	r3, r3, #10
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b10:	801a      	strh	r2, [r3, #0]
 8006b12:	e30f      	b.n	8007134 <USB_EPStartXfer+0x11d8>
 8006b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b18:	095b      	lsrs	r3, r3, #5
 8006b1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b22:	f003 031f 	and.w	r3, r3, #31
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d104      	bne.n	8006b34 <USB_EPStartXfer+0xbd8>
 8006b2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006b34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	029b      	lsls	r3, r3, #10
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b4c:	801a      	strh	r2, [r3, #0]
 8006b4e:	e2f1      	b.n	8007134 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006b50:	463b      	mov	r3, r7
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	78db      	ldrb	r3, [r3, #3]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	f040 818f 	bne.w	8006e7a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	785b      	ldrb	r3, [r3, #1]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d175      	bne.n	8006c52 <USB_EPStartXfer+0xcf6>
 8006b66:	1d3b      	adds	r3, r7, #4
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b6e:	1d3b      	adds	r3, r7, #4
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b7e:	4413      	add	r3, r2
 8006b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b84:	463b      	mov	r3, r7
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	011a      	lsls	r2, r3, #4
 8006b8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b90:	4413      	add	r3, r2
 8006b92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b9a:	463b      	mov	r3, r7
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d116      	bne.n	8006bd2 <USB_EPStartXfer+0xc76>
 8006ba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bb6:	801a      	strh	r2, [r3, #0]
 8006bb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bce:	801a      	strh	r2, [r3, #0]
 8006bd0:	e065      	b.n	8006c9e <USB_EPStartXfer+0xd42>
 8006bd2:	463b      	mov	r3, r7
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	2b3e      	cmp	r3, #62	; 0x3e
 8006bda:	d81a      	bhi.n	8006c12 <USB_EPStartXfer+0xcb6>
 8006bdc:	463b      	mov	r3, r7
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	085b      	lsrs	r3, r3, #1
 8006be4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006be8:	463b      	mov	r3, r7
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d004      	beq.n	8006c00 <USB_EPStartXfer+0xca4>
 8006bf6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	029b      	lsls	r3, r3, #10
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c0e:	801a      	strh	r2, [r3, #0]
 8006c10:	e045      	b.n	8006c9e <USB_EPStartXfer+0xd42>
 8006c12:	463b      	mov	r3, r7
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	095b      	lsrs	r3, r3, #5
 8006c1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c1e:	463b      	mov	r3, r7
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d104      	bne.n	8006c36 <USB_EPStartXfer+0xcda>
 8006c2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c30:	3b01      	subs	r3, #1
 8006c32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	029b      	lsls	r3, r3, #10
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c4e:	801a      	strh	r2, [r3, #0]
 8006c50:	e025      	b.n	8006c9e <USB_EPStartXfer+0xd42>
 8006c52:	463b      	mov	r3, r7
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	785b      	ldrb	r3, [r3, #1]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d120      	bne.n	8006c9e <USB_EPStartXfer+0xd42>
 8006c5c:	1d3b      	adds	r3, r7, #4
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c64:	1d3b      	adds	r3, r7, #4
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c74:	4413      	add	r3, r2
 8006c76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c7a:	463b      	mov	r3, r7
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	011a      	lsls	r2, r3, #4
 8006c82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c86:	4413      	add	r3, r2
 8006c88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c90:	463b      	mov	r3, r7
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c9c:	801a      	strh	r2, [r3, #0]
 8006c9e:	1d3b      	adds	r3, r7, #4
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ca6:	463b      	mov	r3, r7
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	785b      	ldrb	r3, [r3, #1]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d175      	bne.n	8006d9c <USB_EPStartXfer+0xe40>
 8006cb0:	1d3b      	adds	r3, r7, #4
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006cb8:	1d3b      	adds	r3, r7, #4
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cc8:	4413      	add	r3, r2
 8006cca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006cce:	463b      	mov	r3, r7
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	011a      	lsls	r2, r3, #4
 8006cd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cda:	4413      	add	r3, r2
 8006cdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ce0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ce4:	463b      	mov	r3, r7
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d116      	bne.n	8006d1c <USB_EPStartXfer+0xdc0>
 8006cee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d18:	801a      	strh	r2, [r3, #0]
 8006d1a:	e061      	b.n	8006de0 <USB_EPStartXfer+0xe84>
 8006d1c:	463b      	mov	r3, r7
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	2b3e      	cmp	r3, #62	; 0x3e
 8006d24:	d81a      	bhi.n	8006d5c <USB_EPStartXfer+0xe00>
 8006d26:	463b      	mov	r3, r7
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	085b      	lsrs	r3, r3, #1
 8006d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d32:	463b      	mov	r3, r7
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d004      	beq.n	8006d4a <USB_EPStartXfer+0xdee>
 8006d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d44:	3301      	adds	r3, #1
 8006d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	029b      	lsls	r3, r3, #10
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d58:	801a      	strh	r2, [r3, #0]
 8006d5a:	e041      	b.n	8006de0 <USB_EPStartXfer+0xe84>
 8006d5c:	463b      	mov	r3, r7
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d68:	463b      	mov	r3, r7
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f003 031f 	and.w	r3, r3, #31
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d104      	bne.n	8006d80 <USB_EPStartXfer+0xe24>
 8006d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	029b      	lsls	r3, r3, #10
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d98:	801a      	strh	r2, [r3, #0]
 8006d9a:	e021      	b.n	8006de0 <USB_EPStartXfer+0xe84>
 8006d9c:	463b      	mov	r3, r7
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	785b      	ldrb	r3, [r3, #1]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d11c      	bne.n	8006de0 <USB_EPStartXfer+0xe84>
 8006da6:	1d3b      	adds	r3, r7, #4
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	461a      	mov	r2, r3
 8006db2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006db6:	4413      	add	r3, r2
 8006db8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	011a      	lsls	r2, r3, #4
 8006dc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006dc8:	4413      	add	r3, r2
 8006dca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006dd2:	463b      	mov	r3, r7
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006dde:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006de0:	463b      	mov	r3, r7
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 81a4 	beq.w	8007134 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006dec:	1d3b      	adds	r3, r7, #4
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	463b      	mov	r3, r7
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e00:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d005      	beq.n	8006e18 <USB_EPStartXfer+0xebc>
 8006e0c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10d      	bne.n	8006e34 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e18:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f040 8187 	bne.w	8007134 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e26:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f040 8180 	bne.w	8007134 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006e34:	1d3b      	adds	r3, r7, #4
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	463b      	mov	r3, r7
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006e52:	1d3b      	adds	r3, r7, #4
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	463b      	mov	r3, r7
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	441a      	add	r2, r3
 8006e60:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	8013      	strh	r3, [r2, #0]
 8006e78:	e15c      	b.n	8007134 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006e7a:	463b      	mov	r3, r7
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	78db      	ldrb	r3, [r3, #3]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	f040 8155 	bne.w	8007130 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006e86:	463b      	mov	r3, r7
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	699a      	ldr	r2, [r3, #24]
 8006e8c:	463b      	mov	r3, r7
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d90e      	bls.n	8006eb4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8006e96:	463b      	mov	r3, r7
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006ea0:	463b      	mov	r3, r7
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699a      	ldr	r2, [r3, #24]
 8006ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eaa:	1ad2      	subs	r2, r2, r3
 8006eac:	463b      	mov	r3, r7
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	619a      	str	r2, [r3, #24]
 8006eb2:	e008      	b.n	8006ec6 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006eb4:	463b      	mov	r3, r7
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006ec6:	463b      	mov	r3, r7
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	785b      	ldrb	r3, [r3, #1]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d16f      	bne.n	8006fb0 <USB_EPStartXfer+0x1054>
 8006ed0:	1d3b      	adds	r3, r7, #4
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ed8:	1d3b      	adds	r3, r7, #4
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006ee8:	4413      	add	r3, r2
 8006eea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006eee:	463b      	mov	r3, r7
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	011a      	lsls	r2, r3, #4
 8006ef6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006efa:	4413      	add	r3, r2
 8006efc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d116      	bne.n	8006f3a <USB_EPStartXfer+0xfde>
 8006f0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f1e:	801a      	strh	r2, [r3, #0]
 8006f20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f36:	801a      	strh	r2, [r3, #0]
 8006f38:	e05f      	b.n	8006ffa <USB_EPStartXfer+0x109e>
 8006f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f3e:	2b3e      	cmp	r3, #62	; 0x3e
 8006f40:	d818      	bhi.n	8006f74 <USB_EPStartXfer+0x1018>
 8006f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f46:	085b      	lsrs	r3, r3, #1
 8006f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d004      	beq.n	8006f62 <USB_EPStartXfer+0x1006>
 8006f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	029b      	lsls	r3, r3, #10
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f70:	801a      	strh	r2, [r3, #0]
 8006f72:	e042      	b.n	8006ffa <USB_EPStartXfer+0x109e>
 8006f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f78:	095b      	lsrs	r3, r3, #5
 8006f7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f82:	f003 031f 	and.w	r3, r3, #31
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d104      	bne.n	8006f94 <USB_EPStartXfer+0x1038>
 8006f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	029b      	lsls	r3, r3, #10
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006fac:	801a      	strh	r2, [r3, #0]
 8006fae:	e024      	b.n	8006ffa <USB_EPStartXfer+0x109e>
 8006fb0:	463b      	mov	r3, r7
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d11f      	bne.n	8006ffa <USB_EPStartXfer+0x109e>
 8006fba:	1d3b      	adds	r3, r7, #4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fc2:	1d3b      	adds	r3, r7, #4
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	461a      	mov	r2, r3
 8006fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fd8:	463b      	mov	r3, r7
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	011a      	lsls	r2, r3, #4
 8006fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ff8:	801a      	strh	r2, [r3, #0]
 8006ffa:	1d3b      	adds	r3, r7, #4
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007002:	463b      	mov	r3, r7
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	785b      	ldrb	r3, [r3, #1]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d16f      	bne.n	80070ec <USB_EPStartXfer+0x1190>
 800700c:	1d3b      	adds	r3, r7, #4
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007014:	1d3b      	adds	r3, r7, #4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800701c:	b29b      	uxth	r3, r3
 800701e:	461a      	mov	r2, r3
 8007020:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007024:	4413      	add	r3, r2
 8007026:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800702a:	463b      	mov	r3, r7
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	011a      	lsls	r2, r3, #4
 8007032:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007036:	4413      	add	r3, r2
 8007038:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800703c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007044:	2b00      	cmp	r3, #0
 8007046:	d116      	bne.n	8007076 <USB_EPStartXfer+0x111a>
 8007048:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	b29b      	uxth	r3, r3
 8007050:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007054:	b29a      	uxth	r2, r3
 8007056:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800705a:	801a      	strh	r2, [r3, #0]
 800705c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29b      	uxth	r3, r3
 8007064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800706c:	b29a      	uxth	r2, r3
 800706e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007072:	801a      	strh	r2, [r3, #0]
 8007074:	e05e      	b.n	8007134 <USB_EPStartXfer+0x11d8>
 8007076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800707a:	2b3e      	cmp	r3, #62	; 0x3e
 800707c:	d818      	bhi.n	80070b0 <USB_EPStartXfer+0x1154>
 800707e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007082:	085b      	lsrs	r3, r3, #1
 8007084:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007088:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	2b00      	cmp	r3, #0
 8007092:	d004      	beq.n	800709e <USB_EPStartXfer+0x1142>
 8007094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007098:	3301      	adds	r3, #1
 800709a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800709e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	029b      	lsls	r3, r3, #10
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80070ac:	801a      	strh	r2, [r3, #0]
 80070ae:	e041      	b.n	8007134 <USB_EPStartXfer+0x11d8>
 80070b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070b4:	095b      	lsrs	r3, r3, #5
 80070b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070be:	f003 031f 	and.w	r3, r3, #31
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d104      	bne.n	80070d0 <USB_EPStartXfer+0x1174>
 80070c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ca:	3b01      	subs	r3, #1
 80070cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	029b      	lsls	r3, r3, #10
 80070d8:	b29b      	uxth	r3, r3
 80070da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80070e8:	801a      	strh	r2, [r3, #0]
 80070ea:	e023      	b.n	8007134 <USB_EPStartXfer+0x11d8>
 80070ec:	463b      	mov	r3, r7
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	785b      	ldrb	r3, [r3, #1]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d11e      	bne.n	8007134 <USB_EPStartXfer+0x11d8>
 80070f6:	1d3b      	adds	r3, r7, #4
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070fe:	b29b      	uxth	r3, r3
 8007100:	461a      	mov	r2, r3
 8007102:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007106:	4413      	add	r3, r2
 8007108:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800710c:	463b      	mov	r3, r7
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	011a      	lsls	r2, r3, #4
 8007114:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007118:	4413      	add	r3, r2
 800711a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800711e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007126:	b29a      	uxth	r2, r3
 8007128:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800712c:	801a      	strh	r2, [r3, #0]
 800712e:	e001      	b.n	8007134 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e02e      	b.n	8007192 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007134:	1d3b      	adds	r3, r7, #4
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	463b      	mov	r3, r7
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	b29b      	uxth	r3, r3
 8007146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800714a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007152:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007156:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800715a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800715e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007162:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007166:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800716a:	1d3b      	adds	r3, r7, #4
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	463b      	mov	r3, r7
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	441a      	add	r2, r3
 8007178:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800717c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800718c:	b29b      	uxth	r3, r3
 800718e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	785b      	ldrb	r3, [r3, #1]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d020      	beq.n	80071f0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071c4:	81bb      	strh	r3, [r7, #12]
 80071c6:	89bb      	ldrh	r3, [r7, #12]
 80071c8:	f083 0310 	eor.w	r3, r3, #16
 80071cc:	81bb      	strh	r3, [r7, #12]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	441a      	add	r2, r3
 80071d8:	89bb      	ldrh	r3, [r7, #12]
 80071da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	8013      	strh	r3, [r2, #0]
 80071ee:	e01f      	b.n	8007230 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007206:	81fb      	strh	r3, [r7, #14]
 8007208:	89fb      	ldrh	r3, [r7, #14]
 800720a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800720e:	81fb      	strh	r3, [r7, #14]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	441a      	add	r2, r3
 800721a:	89fb      	ldrh	r3, [r7, #14]
 800721c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800722c:	b29b      	uxth	r3, r3
 800722e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr

0800723c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800723c:	b480      	push	{r7}
 800723e:	b087      	sub	sp, #28
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	7b1b      	ldrb	r3, [r3, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	f040 809d 	bne.w	800738a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	785b      	ldrb	r3, [r3, #1]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d04c      	beq.n	80072f2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	823b      	strh	r3, [r7, #16]
 8007266:	8a3b      	ldrh	r3, [r7, #16]
 8007268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01b      	beq.n	80072a8 <USB_EPClearStall+0x6c>
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	b29b      	uxth	r3, r3
 800727e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007286:	81fb      	strh	r3, [r7, #14]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	441a      	add	r2, r3
 8007292:	89fb      	ldrh	r3, [r7, #14]
 8007294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800729c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	78db      	ldrb	r3, [r3, #3]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d06c      	beq.n	800738a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c6:	81bb      	strh	r3, [r7, #12]
 80072c8:	89bb      	ldrh	r3, [r7, #12]
 80072ca:	f083 0320 	eor.w	r3, r3, #32
 80072ce:	81bb      	strh	r3, [r7, #12]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	441a      	add	r2, r3
 80072da:	89bb      	ldrh	r3, [r7, #12]
 80072dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	8013      	strh	r3, [r2, #0]
 80072f0:	e04b      	b.n	800738a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	881b      	ldrh	r3, [r3, #0]
 80072fe:	82fb      	strh	r3, [r7, #22]
 8007300:	8afb      	ldrh	r3, [r7, #22]
 8007302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d01b      	beq.n	8007342 <USB_EPClearStall+0x106>
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	b29b      	uxth	r3, r3
 8007318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800731c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007320:	82bb      	strh	r3, [r7, #20]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	441a      	add	r2, r3
 800732c:	8abb      	ldrh	r3, [r7, #20]
 800732e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007336:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800733a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800733e:	b29b      	uxth	r3, r3
 8007340:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	b29b      	uxth	r3, r3
 8007350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007358:	827b      	strh	r3, [r7, #18]
 800735a:	8a7b      	ldrh	r3, [r7, #18]
 800735c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007360:	827b      	strh	r3, [r7, #18]
 8007362:	8a7b      	ldrh	r3, [r7, #18]
 8007364:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007368:	827b      	strh	r3, [r7, #18]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	441a      	add	r2, r3
 8007374:	8a7b      	ldrh	r3, [r7, #18]
 8007376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800737a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800737e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007386:	b29b      	uxth	r3, r3
 8007388:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	371c      	adds	r7, #28
 8007390:	46bd      	mov	sp, r7
 8007392:	bc80      	pop	{r7}
 8007394:	4770      	bx	lr

08007396 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	460b      	mov	r3, r1
 80073a0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80073a2:	78fb      	ldrb	r3, [r7, #3]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d103      	bne.n	80073b0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2280      	movs	r2, #128	; 0x80
 80073ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bc80      	pop	{r7}
 80073ba:	4770      	bx	lr

080073bc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bc80      	pop	{r7}
 80073ce:	4770      	bx	lr

080073d0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	bc80      	pop	{r7}
 80073e2:	4770      	bx	lr

080073e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80073f6:	68fb      	ldr	r3, [r7, #12]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bc80      	pop	{r7}
 8007400:	4770      	bx	lr

08007402 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	bc80      	pop	{r7}
 8007416:	4770      	bx	lr

08007418 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007418:	b480      	push	{r7}
 800741a:	b08d      	sub	sp, #52	; 0x34
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	4611      	mov	r1, r2
 8007424:	461a      	mov	r2, r3
 8007426:	460b      	mov	r3, r1
 8007428:	80fb      	strh	r3, [r7, #6]
 800742a:	4613      	mov	r3, r2
 800742c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800742e:	88bb      	ldrh	r3, [r7, #4]
 8007430:	3301      	adds	r3, #1
 8007432:	085b      	lsrs	r3, r3, #1
 8007434:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800743e:	88fb      	ldrh	r3, [r7, #6]
 8007440:	005a      	lsls	r2, r3, #1
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800744a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007450:	e01e      	b.n	8007490 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	3301      	adds	r3, #1
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	b29b      	uxth	r3, r3
 8007464:	021b      	lsls	r3, r3, #8
 8007466:	b29b      	uxth	r3, r3
 8007468:	461a      	mov	r2, r3
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	4313      	orrs	r3, r2
 800746e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	b29a      	uxth	r2, r3
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747a:	3302      	adds	r3, #2
 800747c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	3302      	adds	r3, #2
 8007482:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	3301      	adds	r3, #1
 8007488:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	3b01      	subs	r3, #1
 800748e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1dd      	bne.n	8007452 <USB_WritePMA+0x3a>
  }
}
 8007496:	bf00      	nop
 8007498:	3734      	adds	r7, #52	; 0x34
 800749a:	46bd      	mov	sp, r7
 800749c:	bc80      	pop	{r7}
 800749e:	4770      	bx	lr

080074a0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b08b      	sub	sp, #44	; 0x2c
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	4611      	mov	r1, r2
 80074ac:	461a      	mov	r2, r3
 80074ae:	460b      	mov	r3, r1
 80074b0:	80fb      	strh	r3, [r7, #6]
 80074b2:	4613      	mov	r3, r2
 80074b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80074b6:	88bb      	ldrh	r3, [r7, #4]
 80074b8:	085b      	lsrs	r3, r3, #1
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80074c6:	88fb      	ldrh	r3, [r7, #6]
 80074c8:	005a      	lsls	r2, r3, #1
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074d2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	627b      	str	r3, [r7, #36]	; 0x24
 80074d8:	e01b      	b.n	8007512 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	3302      	adds	r3, #2
 80074e6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	3301      	adds	r3, #1
 80074f4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	0a1b      	lsrs	r3, r3, #8
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	3301      	adds	r3, #1
 8007504:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	3302      	adds	r3, #2
 800750a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	3b01      	subs	r3, #1
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e0      	bne.n	80074da <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007518:	88bb      	ldrh	r3, [r7, #4]
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	b29b      	uxth	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d007      	beq.n	8007534 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	b29b      	uxth	r3, r3
 800752a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	b2da      	uxtb	r2, r3
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	701a      	strb	r2, [r3, #0]
  }
}
 8007534:	bf00      	nop
 8007536:	372c      	adds	r7, #44	; 0x2c
 8007538:	46bd      	mov	sp, r7
 800753a:	bc80      	pop	{r7}
 800753c:	4770      	bx	lr

0800753e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	460b      	mov	r3, r1
 8007548:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	7c1b      	ldrb	r3, [r3, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d115      	bne.n	8007582 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800755a:	2202      	movs	r2, #2
 800755c:	2181      	movs	r1, #129	; 0x81
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 fe91 	bl	8009286 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800756a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800756e:	2202      	movs	r2, #2
 8007570:	2101      	movs	r1, #1
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 fe87 	bl	8009286 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007580:	e012      	b.n	80075a8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007582:	2340      	movs	r3, #64	; 0x40
 8007584:	2202      	movs	r2, #2
 8007586:	2181      	movs	r1, #129	; 0x81
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f001 fe7c 	bl	8009286 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007594:	2340      	movs	r3, #64	; 0x40
 8007596:	2202      	movs	r2, #2
 8007598:	2101      	movs	r1, #1
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f001 fe73 	bl	8009286 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80075a8:	2308      	movs	r3, #8
 80075aa:	2203      	movs	r2, #3
 80075ac:	2182      	movs	r1, #130	; 0x82
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f001 fe69 	bl	8009286 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80075ba:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80075be:	f001 ff89 	bl	80094d4 <USBD_static_malloc>
 80075c2:	4602      	mov	r2, r0
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d102      	bne.n	80075da <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80075d4:	2301      	movs	r3, #1
 80075d6:	73fb      	strb	r3, [r7, #15]
 80075d8:	e026      	b.n	8007628 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	7c1b      	ldrb	r3, [r3, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d109      	bne.n	8007618 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800760a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800760e:	2101      	movs	r1, #1
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 ff29 	bl	8009468 <USBD_LL_PrepareReceive>
 8007616:	e007      	b.n	8007628 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800761e:	2340      	movs	r3, #64	; 0x40
 8007620:	2101      	movs	r1, #1
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f001 ff20 	bl	8009468 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007628:	7bfb      	ldrb	r3, [r7, #15]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	460b      	mov	r3, r1
 800763c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800763e:	2300      	movs	r3, #0
 8007640:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007642:	2181      	movs	r1, #129	; 0x81
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f001 fe44 	bl	80092d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007650:	2101      	movs	r1, #1
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f001 fe3d 	bl	80092d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007660:	2182      	movs	r1, #130	; 0x82
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f001 fe35 	bl	80092d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00e      	beq.n	8007696 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007688:	4618      	mov	r0, r3
 800768a:	f001 ff2f 	bl	80094ec <USBD_static_free>
    pdev->pClassData = NULL;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007696:	7bfb      	ldrb	r3, [r7, #15]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d039      	beq.n	800773e <USBD_CDC_Setup+0x9e>
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	d17c      	bne.n	80077c8 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	88db      	ldrh	r3, [r3, #6]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d029      	beq.n	800772a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	b25b      	sxtb	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	da11      	bge.n	8007704 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80076ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	88d2      	ldrh	r2, [r2, #6]
 80076f2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80076f4:	6939      	ldr	r1, [r7, #16]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	88db      	ldrh	r3, [r3, #6]
 80076fa:	461a      	mov	r2, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f001 f9f9 	bl	8008af4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007702:	e068      	b.n	80077d6 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	785a      	ldrb	r2, [r3, #1]
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	88db      	ldrh	r3, [r3, #6]
 8007712:	b2da      	uxtb	r2, r3
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800771a:	6939      	ldr	r1, [r7, #16]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	88db      	ldrh	r3, [r3, #6]
 8007720:	461a      	mov	r2, r3
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f001 fa14 	bl	8008b50 <USBD_CtlPrepareRx>
      break;
 8007728:	e055      	b.n	80077d6 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	7850      	ldrb	r0, [r2, #1]
 8007736:	2200      	movs	r2, #0
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	4798      	blx	r3
      break;
 800773c:	e04b      	b.n	80077d6 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	785b      	ldrb	r3, [r3, #1]
 8007742:	2b0a      	cmp	r3, #10
 8007744:	d017      	beq.n	8007776 <USBD_CDC_Setup+0xd6>
 8007746:	2b0b      	cmp	r3, #11
 8007748:	d029      	beq.n	800779e <USBD_CDC_Setup+0xfe>
 800774a:	2b00      	cmp	r3, #0
 800774c:	d133      	bne.n	80077b6 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007754:	2b03      	cmp	r3, #3
 8007756:	d107      	bne.n	8007768 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007758:	f107 030c 	add.w	r3, r7, #12
 800775c:	2202      	movs	r2, #2
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f001 f9c7 	bl	8008af4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007766:	e02e      	b.n	80077c6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f001 f958 	bl	8008a20 <USBD_CtlError>
            ret = USBD_FAIL;
 8007770:	2302      	movs	r3, #2
 8007772:	75fb      	strb	r3, [r7, #23]
          break;
 8007774:	e027      	b.n	80077c6 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800777c:	2b03      	cmp	r3, #3
 800777e:	d107      	bne.n	8007790 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007780:	f107 030f 	add.w	r3, r7, #15
 8007784:	2201      	movs	r2, #1
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 f9b3 	bl	8008af4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800778e:	e01a      	b.n	80077c6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f001 f944 	bl	8008a20 <USBD_CtlError>
            ret = USBD_FAIL;
 8007798:	2302      	movs	r3, #2
 800779a:	75fb      	strb	r3, [r7, #23]
          break;
 800779c:	e013      	b.n	80077c6 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d00d      	beq.n	80077c4 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 f938 	bl	8008a20 <USBD_CtlError>
            ret = USBD_FAIL;
 80077b0:	2302      	movs	r3, #2
 80077b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80077b4:	e006      	b.n	80077c4 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f001 f931 	bl	8008a20 <USBD_CtlError>
          ret = USBD_FAIL;
 80077be:	2302      	movs	r3, #2
 80077c0:	75fb      	strb	r3, [r7, #23]
          break;
 80077c2:	e000      	b.n	80077c6 <USBD_CDC_Setup+0x126>
          break;
 80077c4:	bf00      	nop
      }
      break;
 80077c6:	e006      	b.n	80077d6 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f001 f928 	bl	8008a20 <USBD_CtlError>
      ret = USBD_FAIL;
 80077d0:	2302      	movs	r3, #2
 80077d2:	75fb      	strb	r3, [r7, #23]
      break;
 80077d4:	bf00      	nop
  }

  return ret;
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077fa:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007802:	2b00      	cmp	r3, #0
 8007804:	d03a      	beq.n	800787c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007806:	78fa      	ldrb	r2, [r7, #3]
 8007808:	6879      	ldr	r1, [r7, #4]
 800780a:	4613      	mov	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	440b      	add	r3, r1
 8007814:	331c      	adds	r3, #28
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d029      	beq.n	8007870 <USBD_CDC_DataIn+0x90>
 800781c:	78fa      	ldrb	r2, [r7, #3]
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	4613      	mov	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	440b      	add	r3, r1
 800782a:	331c      	adds	r3, #28
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	78f9      	ldrb	r1, [r7, #3]
 8007830:	68b8      	ldr	r0, [r7, #8]
 8007832:	460b      	mov	r3, r1
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	440b      	add	r3, r1
 8007838:	00db      	lsls	r3, r3, #3
 800783a:	4403      	add	r3, r0
 800783c:	3338      	adds	r3, #56	; 0x38
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	fbb2 f1f3 	udiv	r1, r2, r3
 8007844:	fb03 f301 	mul.w	r3, r3, r1
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d110      	bne.n	8007870 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800784e:	78fa      	ldrb	r2, [r7, #3]
 8007850:	6879      	ldr	r1, [r7, #4]
 8007852:	4613      	mov	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	440b      	add	r3, r1
 800785c:	331c      	adds	r3, #28
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007862:	78f9      	ldrb	r1, [r7, #3]
 8007864:	2300      	movs	r3, #0
 8007866:	2200      	movs	r2, #0
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 fdda 	bl	8009422 <USBD_LL_Transmit>
 800786e:	e003      	b.n	8007878 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	e000      	b.n	800787e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800787c:	2302      	movs	r3, #2
  }
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	460b      	mov	r3, r1
 8007890:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007898:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800789a:	78fb      	ldrb	r3, [r7, #3]
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 fe05 	bl	80094ae <USBD_LL_GetRxDataSize>
 80078a4:	4602      	mov	r2, r0
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00d      	beq.n	80078d2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80078ca:	4611      	mov	r1, r2
 80078cc:	4798      	blx	r3

    return USBD_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	e000      	b.n	80078d4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80078d2:	2302      	movs	r3, #2
  }
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d015      	beq.n	8007922 <USBD_CDC_EP0_RxReady+0x46>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80078fc:	2bff      	cmp	r3, #255	; 0xff
 80078fe:	d010      	beq.n	8007922 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800790e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007916:	b292      	uxth	r2, r2
 8007918:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	22ff      	movs	r2, #255	; 0xff
 800791e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2243      	movs	r2, #67	; 0x43
 8007938:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800793a:	4b03      	ldr	r3, [pc, #12]	; (8007948 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800793c:	4618      	mov	r0, r3
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	bc80      	pop	{r7}
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	20000094 	.word	0x20000094

0800794c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2243      	movs	r2, #67	; 0x43
 8007958:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800795a:	4b03      	ldr	r3, [pc, #12]	; (8007968 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800795c:	4618      	mov	r0, r3
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	bc80      	pop	{r7}
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	20000050 	.word	0x20000050

0800796c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2243      	movs	r2, #67	; 0x43
 8007978:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800797a:	4b03      	ldr	r3, [pc, #12]	; (8007988 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800797c:	4618      	mov	r0, r3
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	bc80      	pop	{r7}
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	200000d8 	.word	0x200000d8

0800798c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	220a      	movs	r2, #10
 8007998:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800799a:	4b03      	ldr	r3, [pc, #12]	; (80079a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bc80      	pop	{r7}
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	2000000c 	.word	0x2000000c

080079ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80079b6:	2302      	movs	r3, #2
 80079b8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d005      	beq.n	80079cc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bc80      	pop	{r7}
 80079d6:	4770      	bx	lr

080079d8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	4613      	mov	r3, r2
 80079e4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80079f6:	88fa      	ldrh	r2, [r7, #6]
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	371c      	adds	r7, #28
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bc80      	pop	{r7}
 8007a08:	4770      	bx	lr

08007a0a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a1a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bc80      	pop	{r7}
 8007a2e:	4770      	bx	lr

08007a30 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d01c      	beq.n	8007a84 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d115      	bne.n	8007a80 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	2181      	movs	r1, #129	; 0x81
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 fcd3 	bl	8009422 <USBD_LL_Transmit>

      return USBD_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	e002      	b.n	8007a86 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e000      	b.n	8007a86 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007a84:	2302      	movs	r3, #2
  }
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b084      	sub	sp, #16
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a9c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d017      	beq.n	8007ad8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	7c1b      	ldrb	r3, [r3, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d109      	bne.n	8007ac4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007aba:	2101      	movs	r1, #1
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 fcd3 	bl	8009468 <USBD_LL_PrepareReceive>
 8007ac2:	e007      	b.n	8007ad4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007aca:	2340      	movs	r3, #64	; 0x40
 8007acc:	2101      	movs	r1, #1
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f001 fcca 	bl	8009468 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	e000      	b.n	8007ada <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007ad8:	2302      	movs	r3, #2
  }
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	60f8      	str	r0, [r7, #12]
 8007aea:	60b9      	str	r1, [r7, #8]
 8007aec:	4613      	mov	r3, r2
 8007aee:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007af6:	2302      	movs	r3, #2
 8007af8:	e01a      	b.n	8007b30 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d003      	beq.n	8007b0c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	79fa      	ldrb	r2, [r7, #7]
 8007b26:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f001 fb37 	bl	800919c <USBD_LL_Init>

  return USBD_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d006      	beq.n	8007b5a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73fb      	strb	r3, [r7, #15]
 8007b58:	e001      	b.n	8007b5e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bc80      	pop	{r7}
 8007b68:	4770      	bx	lr

08007b6a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 fb6c 	bl	8009250 <USBD_LL_Start>

  return USBD_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b083      	sub	sp, #12
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bc80      	pop	{r7}
 8007b94:	4770      	bx	lr

08007b96 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00c      	beq.n	8007bca <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	78fa      	ldrb	r2, [r7, #3]
 8007bba:	4611      	mov	r1, r2
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	4798      	blx	r3
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	78fa      	ldrb	r2, [r7, #3]
 8007bea:	4611      	mov	r1, r2
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	4798      	blx	r3

  return USBD_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b082      	sub	sp, #8
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f000 fecb 	bl	80089a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007c20:	461a      	mov	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007c2e:	f003 031f 	and.w	r3, r3, #31
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d00c      	beq.n	8007c50 <USBD_LL_SetupStage+0x56>
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d302      	bcc.n	8007c40 <USBD_LL_SetupStage+0x46>
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d010      	beq.n	8007c60 <USBD_LL_SetupStage+0x66>
 8007c3e:	e017      	b.n	8007c70 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f9cb 	bl	8007fe4 <USBD_StdDevReq>
      break;
 8007c4e:	e01a      	b.n	8007c86 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fa2d 	bl	80080b8 <USBD_StdItfReq>
      break;
 8007c5e:	e012      	b.n	8007c86 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fa6b 	bl	8008144 <USBD_StdEPReq>
      break;
 8007c6e:	e00a      	b.n	8007c86 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007c76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f001 fb46 	bl	8009310 <USBD_LL_StallEP>
      break;
 8007c84:	bf00      	nop
  }

  return USBD_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	607a      	str	r2, [r7, #4]
 8007c9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c9e:	7afb      	ldrb	r3, [r7, #11]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d14b      	bne.n	8007d3c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007caa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d134      	bne.n	8007d20 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	68da      	ldr	r2, [r3, #12]
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d919      	bls.n	8007cf6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	1ad2      	subs	r2, r2, r3
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d203      	bcs.n	8007ce4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	e002      	b.n	8007cea <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	461a      	mov	r2, r3
 8007cec:	6879      	ldr	r1, [r7, #4]
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 ff4c 	bl	8008b8c <USBD_CtlContinueRx>
 8007cf4:	e038      	b.n	8007d68 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d08:	2b03      	cmp	r3, #3
 8007d0a:	d105      	bne.n	8007d18 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 ff49 	bl	8008bb0 <USBD_CtlSendStatus>
 8007d1e:	e023      	b.n	8007d68 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d26:	2b05      	cmp	r3, #5
 8007d28:	d11e      	bne.n	8007d68 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007d32:	2100      	movs	r1, #0
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f001 faeb 	bl	8009310 <USBD_LL_StallEP>
 8007d3a:	e015      	b.n	8007d68 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00d      	beq.n	8007d64 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d108      	bne.n	8007d64 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	7afa      	ldrb	r2, [r7, #11]
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	4798      	blx	r3
 8007d62:	e001      	b.n	8007d68 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d64:	2302      	movs	r3, #2
 8007d66:	e000      	b.n	8007d6a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b086      	sub	sp, #24
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	60f8      	str	r0, [r7, #12]
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	607a      	str	r2, [r7, #4]
 8007d7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d80:	7afb      	ldrb	r3, [r7, #11]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d17f      	bne.n	8007e86 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3314      	adds	r3, #20
 8007d8a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d15c      	bne.n	8007e50 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d915      	bls.n	8007dce <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	68da      	ldr	r2, [r3, #12]
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	1ad2      	subs	r2, r2, r3
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	461a      	mov	r2, r3
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 feb6 	bl	8008b2c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f001 fb4e 	bl	8009468 <USBD_LL_PrepareReceive>
 8007dcc:	e04e      	b.n	8007e6c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	6912      	ldr	r2, [r2, #16]
 8007dd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dda:	fb02 f201 	mul.w	r2, r2, r1
 8007dde:	1a9b      	subs	r3, r3, r2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d11c      	bne.n	8007e1e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d316      	bcc.n	8007e1e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d20f      	bcs.n	8007e1e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2100      	movs	r1, #0
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f000 fe92 	bl	8008b2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e10:	2300      	movs	r3, #0
 8007e12:	2200      	movs	r2, #0
 8007e14:	2100      	movs	r1, #0
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f001 fb26 	bl	8009468 <USBD_LL_PrepareReceive>
 8007e1c:	e026      	b.n	8007e6c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00a      	beq.n	8007e40 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d105      	bne.n	8007e40 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007e40:	2180      	movs	r1, #128	; 0x80
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f001 fa64 	bl	8009310 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 fec4 	bl	8008bd6 <USBD_CtlReceiveStatus>
 8007e4e:	e00d      	b.n	8007e6c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e56:	2b04      	cmp	r3, #4
 8007e58:	d004      	beq.n	8007e64 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d103      	bne.n	8007e6c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007e64:	2180      	movs	r1, #128	; 0x80
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f001 fa52 	bl	8009310 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d11d      	bne.n	8007eb2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f7ff fe83 	bl	8007b82 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007e84:	e015      	b.n	8007eb2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8c:	695b      	ldr	r3, [r3, #20]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00d      	beq.n	8007eae <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	d108      	bne.n	8007eae <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	7afa      	ldrb	r2, [r7, #11]
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	4798      	blx	r3
 8007eac:	e001      	b.n	8007eb2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007eae:	2302      	movs	r3, #2
 8007eb0:	e000      	b.n	8007eb4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ec4:	2340      	movs	r3, #64	; 0x40
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	2100      	movs	r1, #0
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f001 f9db 	bl	8009286 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2240      	movs	r2, #64	; 0x40
 8007edc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ee0:	2340      	movs	r3, #64	; 0x40
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2180      	movs	r1, #128	; 0x80
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f001 f9cd 	bl	8009286 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2240      	movs	r2, #64	; 0x40
 8007ef6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d009      	beq.n	8007f34 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	6852      	ldr	r2, [r2, #4]
 8007f2c:	b2d2      	uxtb	r2, r2
 8007f2e:	4611      	mov	r1, r2
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	4798      	blx	r3
  }

  return USBD_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	460b      	mov	r3, r1
 8007f48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	78fa      	ldrb	r2, [r7, #3]
 8007f4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bc80      	pop	{r7}
 8007f5a:	4770      	bx	lr

08007f5c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2204      	movs	r2, #4
 8007f74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bc80      	pop	{r7}
 8007f82:	4770      	bx	lr

08007f84 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	d105      	bne.n	8007fa2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bc80      	pop	{r7}
 8007fac:	4770      	bx	lr

08007fae <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b082      	sub	sp, #8
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d10b      	bne.n	8007fd8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fc6:	69db      	ldr	r3, [r3, #28]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d005      	beq.n	8007fd8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fd2:	69db      	ldr	r3, [r3, #28]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
	...

08007fe4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ffa:	2b20      	cmp	r3, #32
 8007ffc:	d004      	beq.n	8008008 <USBD_StdDevReq+0x24>
 8007ffe:	2b40      	cmp	r3, #64	; 0x40
 8008000:	d002      	beq.n	8008008 <USBD_StdDevReq+0x24>
 8008002:	2b00      	cmp	r3, #0
 8008004:	d008      	beq.n	8008018 <USBD_StdDevReq+0x34>
 8008006:	e04c      	b.n	80080a2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	4798      	blx	r3
      break;
 8008016:	e049      	b.n	80080ac <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	785b      	ldrb	r3, [r3, #1]
 800801c:	2b09      	cmp	r3, #9
 800801e:	d83a      	bhi.n	8008096 <USBD_StdDevReq+0xb2>
 8008020:	a201      	add	r2, pc, #4	; (adr r2, 8008028 <USBD_StdDevReq+0x44>)
 8008022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008026:	bf00      	nop
 8008028:	08008079 	.word	0x08008079
 800802c:	0800808d 	.word	0x0800808d
 8008030:	08008097 	.word	0x08008097
 8008034:	08008083 	.word	0x08008083
 8008038:	08008097 	.word	0x08008097
 800803c:	0800805b 	.word	0x0800805b
 8008040:	08008051 	.word	0x08008051
 8008044:	08008097 	.word	0x08008097
 8008048:	0800806f 	.word	0x0800806f
 800804c:	08008065 	.word	0x08008065
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f9d4 	bl	8008400 <USBD_GetDescriptor>
          break;
 8008058:	e022      	b.n	80080a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fb37 	bl	80086d0 <USBD_SetAddress>
          break;
 8008062:	e01d      	b.n	80080a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fb74 	bl	8008754 <USBD_SetConfig>
          break;
 800806c:	e018      	b.n	80080a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fbfd 	bl	8008870 <USBD_GetConfig>
          break;
 8008076:	e013      	b.n	80080a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fc2c 	bl	80088d8 <USBD_GetStatus>
          break;
 8008080:	e00e      	b.n	80080a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fc5a 	bl	800893e <USBD_SetFeature>
          break;
 800808a:	e009      	b.n	80080a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fc69 	bl	8008966 <USBD_ClrFeature>
          break;
 8008094:	e004      	b.n	80080a0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fcc1 	bl	8008a20 <USBD_CtlError>
          break;
 800809e:	bf00      	nop
      }
      break;
 80080a0:	e004      	b.n	80080ac <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fcbb 	bl	8008a20 <USBD_CtlError>
      break;
 80080aa:	bf00      	nop
  }

  return ret;
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop

080080b8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080ce:	2b20      	cmp	r3, #32
 80080d0:	d003      	beq.n	80080da <USBD_StdItfReq+0x22>
 80080d2:	2b40      	cmp	r3, #64	; 0x40
 80080d4:	d001      	beq.n	80080da <USBD_StdItfReq+0x22>
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d12a      	bne.n	8008130 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e0:	3b01      	subs	r3, #1
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d81d      	bhi.n	8008122 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	889b      	ldrh	r3, [r3, #4]
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d813      	bhi.n	8008118 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	4798      	blx	r3
 80080fe:	4603      	mov	r3, r0
 8008100:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	88db      	ldrh	r3, [r3, #6]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d110      	bne.n	800812c <USBD_StdItfReq+0x74>
 800810a:	7bfb      	ldrb	r3, [r7, #15]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10d      	bne.n	800812c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fd4d 	bl	8008bb0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008116:	e009      	b.n	800812c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fc80 	bl	8008a20 <USBD_CtlError>
          break;
 8008120:	e004      	b.n	800812c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fc7b 	bl	8008a20 <USBD_CtlError>
          break;
 800812a:	e000      	b.n	800812e <USBD_StdItfReq+0x76>
          break;
 800812c:	bf00      	nop
      }
      break;
 800812e:	e004      	b.n	800813a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fc74 	bl	8008a20 <USBD_CtlError>
      break;
 8008138:	bf00      	nop
  }

  return USBD_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	889b      	ldrh	r3, [r3, #4]
 8008156:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008160:	2b20      	cmp	r3, #32
 8008162:	d004      	beq.n	800816e <USBD_StdEPReq+0x2a>
 8008164:	2b40      	cmp	r3, #64	; 0x40
 8008166:	d002      	beq.n	800816e <USBD_StdEPReq+0x2a>
 8008168:	2b00      	cmp	r3, #0
 800816a:	d008      	beq.n	800817e <USBD_StdEPReq+0x3a>
 800816c:	e13d      	b.n	80083ea <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	4798      	blx	r3
      break;
 800817c:	e13a      	b.n	80083f4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008186:	2b20      	cmp	r3, #32
 8008188:	d10a      	bne.n	80081a0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	4798      	blx	r3
 8008198:	4603      	mov	r3, r0
 800819a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	e12a      	b.n	80083f6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	785b      	ldrb	r3, [r3, #1]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d03e      	beq.n	8008226 <USBD_StdEPReq+0xe2>
 80081a8:	2b03      	cmp	r3, #3
 80081aa:	d002      	beq.n	80081b2 <USBD_StdEPReq+0x6e>
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d070      	beq.n	8008292 <USBD_StdEPReq+0x14e>
 80081b0:	e115      	b.n	80083de <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d002      	beq.n	80081c2 <USBD_StdEPReq+0x7e>
 80081bc:	2b03      	cmp	r3, #3
 80081be:	d015      	beq.n	80081ec <USBD_StdEPReq+0xa8>
 80081c0:	e02b      	b.n	800821a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00c      	beq.n	80081e2 <USBD_StdEPReq+0x9e>
 80081c8:	7bbb      	ldrb	r3, [r7, #14]
 80081ca:	2b80      	cmp	r3, #128	; 0x80
 80081cc:	d009      	beq.n	80081e2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f001 f89c 	bl	8009310 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80081d8:	2180      	movs	r1, #128	; 0x80
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 f898 	bl	8009310 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081e0:	e020      	b.n	8008224 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fc1b 	bl	8008a20 <USBD_CtlError>
              break;
 80081ea:	e01b      	b.n	8008224 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	885b      	ldrh	r3, [r3, #2]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10e      	bne.n	8008212 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00b      	beq.n	8008212 <USBD_StdEPReq+0xce>
 80081fa:	7bbb      	ldrb	r3, [r7, #14]
 80081fc:	2b80      	cmp	r3, #128	; 0x80
 80081fe:	d008      	beq.n	8008212 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	88db      	ldrh	r3, [r3, #6]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d104      	bne.n	8008212 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008208:	7bbb      	ldrb	r3, [r7, #14]
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f001 f87f 	bl	8009310 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fccc 	bl	8008bb0 <USBD_CtlSendStatus>

              break;
 8008218:	e004      	b.n	8008224 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fbff 	bl	8008a20 <USBD_CtlError>
              break;
 8008222:	bf00      	nop
          }
          break;
 8008224:	e0e0      	b.n	80083e8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800822c:	2b02      	cmp	r3, #2
 800822e:	d002      	beq.n	8008236 <USBD_StdEPReq+0xf2>
 8008230:	2b03      	cmp	r3, #3
 8008232:	d015      	beq.n	8008260 <USBD_StdEPReq+0x11c>
 8008234:	e026      	b.n	8008284 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008236:	7bbb      	ldrb	r3, [r7, #14]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00c      	beq.n	8008256 <USBD_StdEPReq+0x112>
 800823c:	7bbb      	ldrb	r3, [r7, #14]
 800823e:	2b80      	cmp	r3, #128	; 0x80
 8008240:	d009      	beq.n	8008256 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f001 f862 	bl	8009310 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800824c:	2180      	movs	r1, #128	; 0x80
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f001 f85e 	bl	8009310 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008254:	e01c      	b.n	8008290 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fbe1 	bl	8008a20 <USBD_CtlError>
              break;
 800825e:	e017      	b.n	8008290 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	885b      	ldrh	r3, [r3, #2]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d112      	bne.n	800828e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800826e:	2b00      	cmp	r3, #0
 8008270:	d004      	beq.n	800827c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f001 f869 	bl	800934e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fc97 	bl	8008bb0 <USBD_CtlSendStatus>
              }
              break;
 8008282:	e004      	b.n	800828e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fbca 	bl	8008a20 <USBD_CtlError>
              break;
 800828c:	e000      	b.n	8008290 <USBD_StdEPReq+0x14c>
              break;
 800828e:	bf00      	nop
          }
          break;
 8008290:	e0aa      	b.n	80083e8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008298:	2b02      	cmp	r3, #2
 800829a:	d002      	beq.n	80082a2 <USBD_StdEPReq+0x15e>
 800829c:	2b03      	cmp	r3, #3
 800829e:	d032      	beq.n	8008306 <USBD_StdEPReq+0x1c2>
 80082a0:	e097      	b.n	80083d2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d007      	beq.n	80082b8 <USBD_StdEPReq+0x174>
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
 80082aa:	2b80      	cmp	r3, #128	; 0x80
 80082ac:	d004      	beq.n	80082b8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fbb5 	bl	8008a20 <USBD_CtlError>
                break;
 80082b6:	e091      	b.n	80083dc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	da0b      	bge.n	80082d8 <USBD_StdEPReq+0x194>
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082c6:	4613      	mov	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	3310      	adds	r3, #16
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	4413      	add	r3, r2
 80082d4:	3304      	adds	r3, #4
 80082d6:	e00b      	b.n	80082f0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	4413      	add	r3, r2
 80082ee:	3304      	adds	r3, #4
 80082f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	2202      	movs	r2, #2
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fbf8 	bl	8008af4 <USBD_CtlSendData>
              break;
 8008304:	e06a      	b.n	80083dc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008306:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800830a:	2b00      	cmp	r3, #0
 800830c:	da11      	bge.n	8008332 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800830e:	7bbb      	ldrb	r3, [r7, #14]
 8008310:	f003 020f 	and.w	r2, r3, #15
 8008314:	6879      	ldr	r1, [r7, #4]
 8008316:	4613      	mov	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	440b      	add	r3, r1
 8008320:	3318      	adds	r3, #24
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d117      	bne.n	8008358 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fb78 	bl	8008a20 <USBD_CtlError>
                  break;
 8008330:	e054      	b.n	80083dc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008332:	7bbb      	ldrb	r3, [r7, #14]
 8008334:	f003 020f 	and.w	r2, r3, #15
 8008338:	6879      	ldr	r1, [r7, #4]
 800833a:	4613      	mov	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	440b      	add	r3, r1
 8008344:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d104      	bne.n	8008358 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fb65 	bl	8008a20 <USBD_CtlError>
                  break;
 8008356:	e041      	b.n	80083dc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800835c:	2b00      	cmp	r3, #0
 800835e:	da0b      	bge.n	8008378 <USBD_StdEPReq+0x234>
 8008360:	7bbb      	ldrb	r3, [r7, #14]
 8008362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008366:	4613      	mov	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	3310      	adds	r3, #16
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	4413      	add	r3, r2
 8008374:	3304      	adds	r3, #4
 8008376:	e00b      	b.n	8008390 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008378:	7bbb      	ldrb	r3, [r7, #14]
 800837a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800837e:	4613      	mov	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	4413      	add	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	4413      	add	r3, r2
 800838e:	3304      	adds	r3, #4
 8008390:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d002      	beq.n	800839e <USBD_StdEPReq+0x25a>
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	2b80      	cmp	r3, #128	; 0x80
 800839c:	d103      	bne.n	80083a6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2200      	movs	r2, #0
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	e00e      	b.n	80083c4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80083a6:	7bbb      	ldrb	r3, [r7, #14]
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 ffee 	bl	800938c <USBD_LL_IsStallEP>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d003      	beq.n	80083be <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2201      	movs	r2, #1
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	e002      	b.n	80083c4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2200      	movs	r2, #0
 80083c2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	2202      	movs	r2, #2
 80083c8:	4619      	mov	r1, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fb92 	bl	8008af4 <USBD_CtlSendData>
              break;
 80083d0:	e004      	b.n	80083dc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fb23 	bl	8008a20 <USBD_CtlError>
              break;
 80083da:	bf00      	nop
          }
          break;
 80083dc:	e004      	b.n	80083e8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fb1d 	bl	8008a20 <USBD_CtlError>
          break;
 80083e6:	bf00      	nop
      }
      break;
 80083e8:	e004      	b.n	80083f4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fb17 	bl	8008a20 <USBD_CtlError>
      break;
 80083f2:	bf00      	nop
  }

  return ret;
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
	...

08008400 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800840e:	2300      	movs	r3, #0
 8008410:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008412:	2300      	movs	r3, #0
 8008414:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	885b      	ldrh	r3, [r3, #2]
 800841a:	0a1b      	lsrs	r3, r3, #8
 800841c:	b29b      	uxth	r3, r3
 800841e:	3b01      	subs	r3, #1
 8008420:	2b06      	cmp	r3, #6
 8008422:	f200 8128 	bhi.w	8008676 <USBD_GetDescriptor+0x276>
 8008426:	a201      	add	r2, pc, #4	; (adr r2, 800842c <USBD_GetDescriptor+0x2c>)
 8008428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842c:	08008449 	.word	0x08008449
 8008430:	08008461 	.word	0x08008461
 8008434:	080084a1 	.word	0x080084a1
 8008438:	08008677 	.word	0x08008677
 800843c:	08008677 	.word	0x08008677
 8008440:	08008617 	.word	0x08008617
 8008444:	08008643 	.word	0x08008643
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	7c12      	ldrb	r2, [r2, #16]
 8008454:	f107 0108 	add.w	r1, r7, #8
 8008458:	4610      	mov	r0, r2
 800845a:	4798      	blx	r3
 800845c:	60f8      	str	r0, [r7, #12]
      break;
 800845e:	e112      	b.n	8008686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	7c1b      	ldrb	r3, [r3, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10d      	bne.n	8008484 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800846e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008470:	f107 0208 	add.w	r2, r7, #8
 8008474:	4610      	mov	r0, r2
 8008476:	4798      	blx	r3
 8008478:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	3301      	adds	r3, #1
 800847e:	2202      	movs	r2, #2
 8008480:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008482:	e100      	b.n	8008686 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800848a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848c:	f107 0208 	add.w	r2, r7, #8
 8008490:	4610      	mov	r0, r2
 8008492:	4798      	blx	r3
 8008494:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	3301      	adds	r3, #1
 800849a:	2202      	movs	r2, #2
 800849c:	701a      	strb	r2, [r3, #0]
      break;
 800849e:	e0f2      	b.n	8008686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	885b      	ldrh	r3, [r3, #2]
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b05      	cmp	r3, #5
 80084a8:	f200 80ac 	bhi.w	8008604 <USBD_GetDescriptor+0x204>
 80084ac:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <USBD_GetDescriptor+0xb4>)
 80084ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b2:	bf00      	nop
 80084b4:	080084cd 	.word	0x080084cd
 80084b8:	08008501 	.word	0x08008501
 80084bc:	08008535 	.word	0x08008535
 80084c0:	08008569 	.word	0x08008569
 80084c4:	0800859d 	.word	0x0800859d
 80084c8:	080085d1 	.word	0x080085d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00b      	beq.n	80084f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	7c12      	ldrb	r2, [r2, #16]
 80084e4:	f107 0108 	add.w	r1, r7, #8
 80084e8:	4610      	mov	r0, r2
 80084ea:	4798      	blx	r3
 80084ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ee:	e091      	b.n	8008614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fa94 	bl	8008a20 <USBD_CtlError>
            err++;
 80084f8:	7afb      	ldrb	r3, [r7, #11]
 80084fa:	3301      	adds	r3, #1
 80084fc:	72fb      	strb	r3, [r7, #11]
          break;
 80084fe:	e089      	b.n	8008614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00b      	beq.n	8008524 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	7c12      	ldrb	r2, [r2, #16]
 8008518:	f107 0108 	add.w	r1, r7, #8
 800851c:	4610      	mov	r0, r2
 800851e:	4798      	blx	r3
 8008520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008522:	e077      	b.n	8008614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fa7a 	bl	8008a20 <USBD_CtlError>
            err++;
 800852c:	7afb      	ldrb	r3, [r7, #11]
 800852e:	3301      	adds	r3, #1
 8008530:	72fb      	strb	r3, [r7, #11]
          break;
 8008532:	e06f      	b.n	8008614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	7c12      	ldrb	r2, [r2, #16]
 800854c:	f107 0108 	add.w	r1, r7, #8
 8008550:	4610      	mov	r0, r2
 8008552:	4798      	blx	r3
 8008554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008556:	e05d      	b.n	8008614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fa60 	bl	8008a20 <USBD_CtlError>
            err++;
 8008560:	7afb      	ldrb	r3, [r7, #11]
 8008562:	3301      	adds	r3, #1
 8008564:	72fb      	strb	r3, [r7, #11]
          break;
 8008566:	e055      	b.n	8008614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00b      	beq.n	800858c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	7c12      	ldrb	r2, [r2, #16]
 8008580:	f107 0108 	add.w	r1, r7, #8
 8008584:	4610      	mov	r0, r2
 8008586:	4798      	blx	r3
 8008588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800858a:	e043      	b.n	8008614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fa46 	bl	8008a20 <USBD_CtlError>
            err++;
 8008594:	7afb      	ldrb	r3, [r7, #11]
 8008596:	3301      	adds	r3, #1
 8008598:	72fb      	strb	r3, [r7, #11]
          break;
 800859a:	e03b      	b.n	8008614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00b      	beq.n	80085c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	7c12      	ldrb	r2, [r2, #16]
 80085b4:	f107 0108 	add.w	r1, r7, #8
 80085b8:	4610      	mov	r0, r2
 80085ba:	4798      	blx	r3
 80085bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085be:	e029      	b.n	8008614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fa2c 	bl	8008a20 <USBD_CtlError>
            err++;
 80085c8:	7afb      	ldrb	r3, [r7, #11]
 80085ca:	3301      	adds	r3, #1
 80085cc:	72fb      	strb	r3, [r7, #11]
          break;
 80085ce:	e021      	b.n	8008614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00b      	beq.n	80085f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	7c12      	ldrb	r2, [r2, #16]
 80085e8:	f107 0108 	add.w	r1, r7, #8
 80085ec:	4610      	mov	r0, r2
 80085ee:	4798      	blx	r3
 80085f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085f2:	e00f      	b.n	8008614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085f4:	6839      	ldr	r1, [r7, #0]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fa12 	bl	8008a20 <USBD_CtlError>
            err++;
 80085fc:	7afb      	ldrb	r3, [r7, #11]
 80085fe:	3301      	adds	r3, #1
 8008600:	72fb      	strb	r3, [r7, #11]
          break;
 8008602:	e007      	b.n	8008614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fa0a 	bl	8008a20 <USBD_CtlError>
          err++;
 800860c:	7afb      	ldrb	r3, [r7, #11]
 800860e:	3301      	adds	r3, #1
 8008610:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008612:	e038      	b.n	8008686 <USBD_GetDescriptor+0x286>
 8008614:	e037      	b.n	8008686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	7c1b      	ldrb	r3, [r3, #16]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d109      	bne.n	8008632 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008626:	f107 0208 	add.w	r2, r7, #8
 800862a:	4610      	mov	r0, r2
 800862c:	4798      	blx	r3
 800862e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008630:	e029      	b.n	8008686 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f9f3 	bl	8008a20 <USBD_CtlError>
        err++;
 800863a:	7afb      	ldrb	r3, [r7, #11]
 800863c:	3301      	adds	r3, #1
 800863e:	72fb      	strb	r3, [r7, #11]
      break;
 8008640:	e021      	b.n	8008686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	7c1b      	ldrb	r3, [r3, #16]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10d      	bne.n	8008666 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008652:	f107 0208 	add.w	r2, r7, #8
 8008656:	4610      	mov	r0, r2
 8008658:	4798      	blx	r3
 800865a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	3301      	adds	r3, #1
 8008660:	2207      	movs	r2, #7
 8008662:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008664:	e00f      	b.n	8008686 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f9d9 	bl	8008a20 <USBD_CtlError>
        err++;
 800866e:	7afb      	ldrb	r3, [r7, #11]
 8008670:	3301      	adds	r3, #1
 8008672:	72fb      	strb	r3, [r7, #11]
      break;
 8008674:	e007      	b.n	8008686 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f9d1 	bl	8008a20 <USBD_CtlError>
      err++;
 800867e:	7afb      	ldrb	r3, [r7, #11]
 8008680:	3301      	adds	r3, #1
 8008682:	72fb      	strb	r3, [r7, #11]
      break;
 8008684:	bf00      	nop
  }

  if (err != 0U)
 8008686:	7afb      	ldrb	r3, [r7, #11]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d11c      	bne.n	80086c6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800868c:	893b      	ldrh	r3, [r7, #8]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d011      	beq.n	80086b6 <USBD_GetDescriptor+0x2b6>
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	88db      	ldrh	r3, [r3, #6]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00d      	beq.n	80086b6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	88da      	ldrh	r2, [r3, #6]
 800869e:	893b      	ldrh	r3, [r7, #8]
 80086a0:	4293      	cmp	r3, r2
 80086a2:	bf28      	it	cs
 80086a4:	4613      	movcs	r3, r2
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086aa:	893b      	ldrh	r3, [r7, #8]
 80086ac:	461a      	mov	r2, r3
 80086ae:	68f9      	ldr	r1, [r7, #12]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fa1f 	bl	8008af4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	88db      	ldrh	r3, [r3, #6]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d104      	bne.n	80086c8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fa76 	bl	8008bb0 <USBD_CtlSendStatus>
 80086c4:	e000      	b.n	80086c8 <USBD_GetDescriptor+0x2c8>
    return;
 80086c6:	bf00      	nop
    }
  }
}
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop

080086d0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	889b      	ldrh	r3, [r3, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d130      	bne.n	8008744 <USBD_SetAddress+0x74>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	88db      	ldrh	r3, [r3, #6]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d12c      	bne.n	8008744 <USBD_SetAddress+0x74>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	885b      	ldrh	r3, [r3, #2]
 80086ee:	2b7f      	cmp	r3, #127	; 0x7f
 80086f0:	d828      	bhi.n	8008744 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	885b      	ldrh	r3, [r3, #2]
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008704:	2b03      	cmp	r3, #3
 8008706:	d104      	bne.n	8008712 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f988 	bl	8008a20 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008710:	e01c      	b.n	800874c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	7bfa      	ldrb	r2, [r7, #15]
 8008716:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800871a:	7bfb      	ldrb	r3, [r7, #15]
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fe60 	bl	80093e4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fa43 	bl	8008bb0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800872a:	7bfb      	ldrb	r3, [r7, #15]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d004      	beq.n	800873a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2202      	movs	r2, #2
 8008734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008738:	e008      	b.n	800874c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008742:	e003      	b.n	800874c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f96a 	bl	8008a20 <USBD_CtlError>
  }
}
 800874c:	bf00      	nop
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	885b      	ldrh	r3, [r3, #2]
 8008762:	b2da      	uxtb	r2, r3
 8008764:	4b41      	ldr	r3, [pc, #260]	; (800886c <USBD_SetConfig+0x118>)
 8008766:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008768:	4b40      	ldr	r3, [pc, #256]	; (800886c <USBD_SetConfig+0x118>)
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d904      	bls.n	800877a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f954 	bl	8008a20 <USBD_CtlError>
 8008778:	e075      	b.n	8008866 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008780:	2b02      	cmp	r3, #2
 8008782:	d002      	beq.n	800878a <USBD_SetConfig+0x36>
 8008784:	2b03      	cmp	r3, #3
 8008786:	d023      	beq.n	80087d0 <USBD_SetConfig+0x7c>
 8008788:	e062      	b.n	8008850 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800878a:	4b38      	ldr	r3, [pc, #224]	; (800886c <USBD_SetConfig+0x118>)
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d01a      	beq.n	80087c8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008792:	4b36      	ldr	r3, [pc, #216]	; (800886c <USBD_SetConfig+0x118>)
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2203      	movs	r2, #3
 80087a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80087a4:	4b31      	ldr	r3, [pc, #196]	; (800886c <USBD_SetConfig+0x118>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7ff f9f3 	bl	8007b96 <USBD_SetClassConfig>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d104      	bne.n	80087c0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f931 	bl	8008a20 <USBD_CtlError>
            return;
 80087be:	e052      	b.n	8008866 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f9f5 	bl	8008bb0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80087c6:	e04e      	b.n	8008866 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f9f1 	bl	8008bb0 <USBD_CtlSendStatus>
        break;
 80087ce:	e04a      	b.n	8008866 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80087d0:	4b26      	ldr	r3, [pc, #152]	; (800886c <USBD_SetConfig+0x118>)
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d112      	bne.n	80087fe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2202      	movs	r2, #2
 80087dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80087e0:	4b22      	ldr	r3, [pc, #136]	; (800886c <USBD_SetConfig+0x118>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80087ea:	4b20      	ldr	r3, [pc, #128]	; (800886c <USBD_SetConfig+0x118>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	4619      	mov	r1, r3
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f7ff f9ef 	bl	8007bd4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f9da 	bl	8008bb0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80087fc:	e033      	b.n	8008866 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80087fe:	4b1b      	ldr	r3, [pc, #108]	; (800886c <USBD_SetConfig+0x118>)
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	461a      	mov	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	429a      	cmp	r2, r3
 800880a:	d01d      	beq.n	8008848 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	b2db      	uxtb	r3, r3
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff f9dd 	bl	8007bd4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800881a:	4b14      	ldr	r3, [pc, #80]	; (800886c <USBD_SetConfig+0x118>)
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	461a      	mov	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008824:	4b11      	ldr	r3, [pc, #68]	; (800886c <USBD_SetConfig+0x118>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff f9b3 	bl	8007b96 <USBD_SetClassConfig>
 8008830:	4603      	mov	r3, r0
 8008832:	2b02      	cmp	r3, #2
 8008834:	d104      	bne.n	8008840 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f8f1 	bl	8008a20 <USBD_CtlError>
            return;
 800883e:	e012      	b.n	8008866 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f9b5 	bl	8008bb0 <USBD_CtlSendStatus>
        break;
 8008846:	e00e      	b.n	8008866 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f9b1 	bl	8008bb0 <USBD_CtlSendStatus>
        break;
 800884e:	e00a      	b.n	8008866 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f8e4 	bl	8008a20 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008858:	4b04      	ldr	r3, [pc, #16]	; (800886c <USBD_SetConfig+0x118>)
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff f9b8 	bl	8007bd4 <USBD_ClrClassConfig>
        break;
 8008864:	bf00      	nop
    }
  }
}
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	20000370 	.word	0x20000370

08008870 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	88db      	ldrh	r3, [r3, #6]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d004      	beq.n	800888c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f8cb 	bl	8008a20 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800888a:	e021      	b.n	80088d0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008892:	2b01      	cmp	r3, #1
 8008894:	db17      	blt.n	80088c6 <USBD_GetConfig+0x56>
 8008896:	2b02      	cmp	r3, #2
 8008898:	dd02      	ble.n	80088a0 <USBD_GetConfig+0x30>
 800889a:	2b03      	cmp	r3, #3
 800889c:	d00b      	beq.n	80088b6 <USBD_GetConfig+0x46>
 800889e:	e012      	b.n	80088c6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	3308      	adds	r3, #8
 80088aa:	2201      	movs	r2, #1
 80088ac:	4619      	mov	r1, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f920 	bl	8008af4 <USBD_CtlSendData>
        break;
 80088b4:	e00c      	b.n	80088d0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	3304      	adds	r3, #4
 80088ba:	2201      	movs	r2, #1
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f918 	bl	8008af4 <USBD_CtlSendData>
        break;
 80088c4:	e004      	b.n	80088d0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f8a9 	bl	8008a20 <USBD_CtlError>
        break;
 80088ce:	bf00      	nop
}
 80088d0:	bf00      	nop
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e8:	3b01      	subs	r3, #1
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d81e      	bhi.n	800892c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	88db      	ldrh	r3, [r3, #6]
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d004      	beq.n	8008900 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f891 	bl	8008a20 <USBD_CtlError>
        break;
 80088fe:	e01a      	b.n	8008936 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800890c:	2b00      	cmp	r3, #0
 800890e:	d005      	beq.n	800891c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f043 0202 	orr.w	r2, r3, #2
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	330c      	adds	r3, #12
 8008920:	2202      	movs	r2, #2
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f8e5 	bl	8008af4 <USBD_CtlSendData>
      break;
 800892a:	e004      	b.n	8008936 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f876 	bl	8008a20 <USBD_CtlError>
      break;
 8008934:	bf00      	nop
  }
}
 8008936:	bf00      	nop
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b082      	sub	sp, #8
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	885b      	ldrh	r3, [r3, #2]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d106      	bne.n	800895e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f929 	bl	8008bb0 <USBD_CtlSendStatus>
  }
}
 800895e:	bf00      	nop
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b082      	sub	sp, #8
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008976:	3b01      	subs	r3, #1
 8008978:	2b02      	cmp	r3, #2
 800897a:	d80b      	bhi.n	8008994 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	885b      	ldrh	r3, [r3, #2]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d10c      	bne.n	800899e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f90f 	bl	8008bb0 <USBD_CtlSendStatus>
      }
      break;
 8008992:	e004      	b.n	800899e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f842 	bl	8008a20 <USBD_CtlError>
      break;
 800899c:	e000      	b.n	80089a0 <USBD_ClrFeature+0x3a>
      break;
 800899e:	bf00      	nop
  }
}
 80089a0:	bf00      	nop
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	781a      	ldrb	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	785a      	ldrb	r2, [r3, #1]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	3302      	adds	r3, #2
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	3303      	adds	r3, #3
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	021b      	lsls	r3, r3, #8
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	4413      	add	r3, r2
 80089d8:	b29a      	uxth	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	3304      	adds	r3, #4
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	3305      	adds	r3, #5
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	021b      	lsls	r3, r3, #8
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	4413      	add	r3, r2
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	3306      	adds	r3, #6
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	3307      	adds	r3, #7
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	021b      	lsls	r3, r3, #8
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	4413      	add	r3, r2
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	80da      	strh	r2, [r3, #6]

}
 8008a16:	bf00      	nop
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bc80      	pop	{r7}
 8008a1e:	4770      	bx	lr

08008a20 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008a2a:	2180      	movs	r1, #128	; 0x80
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fc6f 	bl	8009310 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008a32:	2100      	movs	r1, #0
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fc6b 	bl	8009310 <USBD_LL_StallEP>
}
 8008a3a:	bf00      	nop
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b086      	sub	sp, #24
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d032      	beq.n	8008abe <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 f834 	bl	8008ac6 <USBD_GetLen>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	3301      	adds	r3, #1
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	005b      	lsls	r3, r3, #1
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008a6c:	7dfb      	ldrb	r3, [r7, #23]
 8008a6e:	1c5a      	adds	r2, r3, #1
 8008a70:	75fa      	strb	r2, [r7, #23]
 8008a72:	461a      	mov	r2, r3
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	4413      	add	r3, r2
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	7812      	ldrb	r2, [r2, #0]
 8008a7c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008a7e:	7dfb      	ldrb	r3, [r7, #23]
 8008a80:	1c5a      	adds	r2, r3, #1
 8008a82:	75fa      	strb	r2, [r7, #23]
 8008a84:	461a      	mov	r2, r3
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	4413      	add	r3, r2
 8008a8a:	2203      	movs	r2, #3
 8008a8c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008a8e:	e012      	b.n	8008ab6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	60fa      	str	r2, [r7, #12]
 8008a96:	7dfa      	ldrb	r2, [r7, #23]
 8008a98:	1c51      	adds	r1, r2, #1
 8008a9a:	75f9      	strb	r1, [r7, #23]
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	440a      	add	r2, r1
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008aa6:	7dfb      	ldrb	r3, [r7, #23]
 8008aa8:	1c5a      	adds	r2, r3, #1
 8008aaa:	75fa      	strb	r2, [r7, #23]
 8008aac:	461a      	mov	r2, r3
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1e8      	bne.n	8008a90 <USBD_GetString+0x4e>
    }
  }
}
 8008abe:	bf00      	nop
 8008ac0:	3718      	adds	r7, #24
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b085      	sub	sp, #20
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008ad2:	e005      	b.n	8008ae0 <USBD_GetLen+0x1a>
  {
    len++;
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	3301      	adds	r3, #1
 8008ade:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1f5      	bne.n	8008ad4 <USBD_GetLen+0xe>
  }

  return len;
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bc80      	pop	{r7}
 8008af2:	4770      	bx	lr

08008af4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	4613      	mov	r3, r2
 8008b00:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2202      	movs	r2, #2
 8008b06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b0a:	88fa      	ldrh	r2, [r7, #6]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008b10:	88fa      	ldrh	r2, [r7, #6]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b16:	88fb      	ldrh	r3, [r7, #6]
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 fc80 	bl	8009422 <USBD_LL_Transmit>

  return USBD_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	4613      	mov	r3, r2
 8008b38:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b3a:	88fb      	ldrh	r3, [r7, #6]
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	2100      	movs	r1, #0
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f000 fc6e 	bl	8009422 <USBD_LL_Transmit>

  return USBD_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2203      	movs	r2, #3
 8008b62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008b66:	88fa      	ldrh	r2, [r7, #6]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008b6e:	88fa      	ldrh	r2, [r7, #6]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b76:	88fb      	ldrh	r3, [r7, #6]
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 fc73 	bl	8009468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	4613      	mov	r3, r2
 8008b98:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b9a:	88fb      	ldrh	r3, [r7, #6]
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 fc61 	bl	8009468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2204      	movs	r2, #4
 8008bbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fc2b 	bl	8009422 <USBD_LL_Transmit>

  return USBD_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3708      	adds	r7, #8
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b082      	sub	sp, #8
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2205      	movs	r2, #5
 8008be2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008be6:	2300      	movs	r3, #0
 8008be8:	2200      	movs	r2, #0
 8008bea:	2100      	movs	r1, #0
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 fc3b 	bl	8009468 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008c00:	2200      	movs	r2, #0
 8008c02:	4912      	ldr	r1, [pc, #72]	; (8008c4c <MX_USB_DEVICE_Init+0x50>)
 8008c04:	4812      	ldr	r0, [pc, #72]	; (8008c50 <MX_USB_DEVICE_Init+0x54>)
 8008c06:	f7fe ff6c 	bl	8007ae2 <USBD_Init>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d001      	beq.n	8008c14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008c10:	f7f8 fcb8 	bl	8001584 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008c14:	490f      	ldr	r1, [pc, #60]	; (8008c54 <MX_USB_DEVICE_Init+0x58>)
 8008c16:	480e      	ldr	r0, [pc, #56]	; (8008c50 <MX_USB_DEVICE_Init+0x54>)
 8008c18:	f7fe ff8e 	bl	8007b38 <USBD_RegisterClass>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008c22:	f7f8 fcaf 	bl	8001584 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008c26:	490c      	ldr	r1, [pc, #48]	; (8008c58 <MX_USB_DEVICE_Init+0x5c>)
 8008c28:	4809      	ldr	r0, [pc, #36]	; (8008c50 <MX_USB_DEVICE_Init+0x54>)
 8008c2a:	f7fe febf 	bl	80079ac <USBD_CDC_RegisterInterface>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d001      	beq.n	8008c38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008c34:	f7f8 fca6 	bl	8001584 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008c38:	4805      	ldr	r0, [pc, #20]	; (8008c50 <MX_USB_DEVICE_Init+0x54>)
 8008c3a:	f7fe ff96 	bl	8007b6a <USBD_Start>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c44:	f7f8 fc9e 	bl	8001584 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c48:	bf00      	nop
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	2000012c 	.word	0x2000012c
 8008c50:	200007fc 	.word	0x200007fc
 8008c54:	20000018 	.word	0x20000018
 8008c58:	2000011c 	.word	0x2000011c

08008c5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c60:	2200      	movs	r2, #0
 8008c62:	4905      	ldr	r1, [pc, #20]	; (8008c78 <CDC_Init_FS+0x1c>)
 8008c64:	4805      	ldr	r0, [pc, #20]	; (8008c7c <CDC_Init_FS+0x20>)
 8008c66:	f7fe feb7 	bl	80079d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c6a:	4905      	ldr	r1, [pc, #20]	; (8008c80 <CDC_Init_FS+0x24>)
 8008c6c:	4803      	ldr	r0, [pc, #12]	; (8008c7c <CDC_Init_FS+0x20>)
 8008c6e:	f7fe fecc 	bl	8007a0a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	20000b24 	.word	0x20000b24
 8008c7c:	200007fc 	.word	0x200007fc
 8008c80:	20000ac0 	.word	0x20000ac0

08008c84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c84:	b480      	push	{r7}
 8008c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bc80      	pop	{r7}
 8008c90:	4770      	bx	lr
	...

08008c94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	6039      	str	r1, [r7, #0]
 8008c9e:	71fb      	strb	r3, [r7, #7]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	2b23      	cmp	r3, #35	; 0x23
 8008ca8:	d84a      	bhi.n	8008d40 <CDC_Control_FS+0xac>
 8008caa:	a201      	add	r2, pc, #4	; (adr r2, 8008cb0 <CDC_Control_FS+0x1c>)
 8008cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb0:	08008d41 	.word	0x08008d41
 8008cb4:	08008d41 	.word	0x08008d41
 8008cb8:	08008d41 	.word	0x08008d41
 8008cbc:	08008d41 	.word	0x08008d41
 8008cc0:	08008d41 	.word	0x08008d41
 8008cc4:	08008d41 	.word	0x08008d41
 8008cc8:	08008d41 	.word	0x08008d41
 8008ccc:	08008d41 	.word	0x08008d41
 8008cd0:	08008d41 	.word	0x08008d41
 8008cd4:	08008d41 	.word	0x08008d41
 8008cd8:	08008d41 	.word	0x08008d41
 8008cdc:	08008d41 	.word	0x08008d41
 8008ce0:	08008d41 	.word	0x08008d41
 8008ce4:	08008d41 	.word	0x08008d41
 8008ce8:	08008d41 	.word	0x08008d41
 8008cec:	08008d41 	.word	0x08008d41
 8008cf0:	08008d41 	.word	0x08008d41
 8008cf4:	08008d41 	.word	0x08008d41
 8008cf8:	08008d41 	.word	0x08008d41
 8008cfc:	08008d41 	.word	0x08008d41
 8008d00:	08008d41 	.word	0x08008d41
 8008d04:	08008d41 	.word	0x08008d41
 8008d08:	08008d41 	.word	0x08008d41
 8008d0c:	08008d41 	.word	0x08008d41
 8008d10:	08008d41 	.word	0x08008d41
 8008d14:	08008d41 	.word	0x08008d41
 8008d18:	08008d41 	.word	0x08008d41
 8008d1c:	08008d41 	.word	0x08008d41
 8008d20:	08008d41 	.word	0x08008d41
 8008d24:	08008d41 	.word	0x08008d41
 8008d28:	08008d41 	.word	0x08008d41
 8008d2c:	08008d41 	.word	0x08008d41
 8008d30:	08008d41 	.word	0x08008d41
 8008d34:	08008d41 	.word	0x08008d41
 8008d38:	08008d41 	.word	0x08008d41
 8008d3c:	08008d41 	.word	0x08008d41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d40:	bf00      	nop
  }

  return (USBD_OK);
 8008d42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bc80      	pop	{r7}
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop

08008d50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d5a:	6879      	ldr	r1, [r7, #4]
 8008d5c:	4811      	ldr	r0, [pc, #68]	; (8008da4 <CDC_Receive_FS+0x54>)
 8008d5e:	f7fe fe54 	bl	8007a0a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d62:	4810      	ldr	r0, [pc, #64]	; (8008da4 <CDC_Receive_FS+0x54>)
 8008d64:	f7fe fe93 	bl	8007a8e <USBD_CDC_ReceivePacket>
  extern uint8_t ReceivedData[100]; // Tablica przechowujaca odebrane dane
  extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych

  // Wyczyszczenie tablicy odebranych danych
  uint8_t iter;
  for(iter = 0; iter<100; ++iter){
 8008d68:	2300      	movs	r3, #0
 8008d6a:	73fb      	strb	r3, [r7, #15]
 8008d6c:	e006      	b.n	8008d7c <CDC_Receive_FS+0x2c>
	  ReceivedData[iter] = 0;
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
 8008d70:	4a0d      	ldr	r2, [pc, #52]	; (8008da8 <CDC_Receive_FS+0x58>)
 8008d72:	2100      	movs	r1, #0
 8008d74:	54d1      	strb	r1, [r2, r3]
  for(iter = 0; iter<100; ++iter){
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	73fb      	strb	r3, [r7, #15]
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
 8008d7e:	2b63      	cmp	r3, #99	; 0x63
 8008d80:	d9f5      	bls.n	8008d6e <CDC_Receive_FS+0x1e>
  }

  strlcpy(ReceivedData, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3301      	adds	r3, #1
 8008d88:	461a      	mov	r2, r3
 8008d8a:	6879      	ldr	r1, [r7, #4]
 8008d8c:	4806      	ldr	r0, [pc, #24]	; (8008da8 <CDC_Receive_FS+0x58>)
 8008d8e:	f001 fb5e 	bl	800a44e <strlcpy>
  ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 8008d92:	4b06      	ldr	r3, [pc, #24]	; (8008dac <CDC_Receive_FS+0x5c>)
 8008d94:	2201      	movs	r2, #1
 8008d96:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 8008d98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	200007fc 	.word	0x200007fc
 8008da8:	20000660 	.word	0x20000660
 8008dac:	20000368 	.word	0x20000368

08008db0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	460b      	mov	r3, r1
 8008dba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008dc0:	4b0d      	ldr	r3, [pc, #52]	; (8008df8 <CDC_Transmit_FS+0x48>)
 8008dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e00b      	b.n	8008dee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008dd6:	887b      	ldrh	r3, [r7, #2]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	4806      	ldr	r0, [pc, #24]	; (8008df8 <CDC_Transmit_FS+0x48>)
 8008dde:	f7fe fdfb 	bl	80079d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008de2:	4805      	ldr	r0, [pc, #20]	; (8008df8 <CDC_Transmit_FS+0x48>)
 8008de4:	f7fe fe24 	bl	8007a30 <USBD_CDC_TransmitPacket>
 8008de8:	4603      	mov	r3, r0
 8008dea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	200007fc 	.word	0x200007fc

08008dfc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	4603      	mov	r3, r0
 8008e04:	6039      	str	r1, [r7, #0]
 8008e06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	2212      	movs	r2, #18
 8008e0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e0e:	4b03      	ldr	r3, [pc, #12]	; (8008e1c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bc80      	pop	{r7}
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	20000148 	.word	0x20000148

08008e20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	4603      	mov	r3, r0
 8008e28:	6039      	str	r1, [r7, #0]
 8008e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	2204      	movs	r2, #4
 8008e30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e32:	4b03      	ldr	r3, [pc, #12]	; (8008e40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bc80      	pop	{r7}
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	2000015c 	.word	0x2000015c

08008e44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	6039      	str	r1, [r7, #0]
 8008e4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e50:	79fb      	ldrb	r3, [r7, #7]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d105      	bne.n	8008e62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	4907      	ldr	r1, [pc, #28]	; (8008e78 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e5a:	4808      	ldr	r0, [pc, #32]	; (8008e7c <USBD_FS_ProductStrDescriptor+0x38>)
 8008e5c:	f7ff fdf1 	bl	8008a42 <USBD_GetString>
 8008e60:	e004      	b.n	8008e6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	4904      	ldr	r1, [pc, #16]	; (8008e78 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e66:	4805      	ldr	r0, [pc, #20]	; (8008e7c <USBD_FS_ProductStrDescriptor+0x38>)
 8008e68:	f7ff fdeb 	bl	8008a42 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e6c:	4b02      	ldr	r3, [pc, #8]	; (8008e78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	20000b88 	.word	0x20000b88
 8008e7c:	0800e358 	.word	0x0800e358

08008e80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	4603      	mov	r3, r0
 8008e88:	6039      	str	r1, [r7, #0]
 8008e8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e8c:	683a      	ldr	r2, [r7, #0]
 8008e8e:	4904      	ldr	r1, [pc, #16]	; (8008ea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e90:	4804      	ldr	r0, [pc, #16]	; (8008ea4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e92:	f7ff fdd6 	bl	8008a42 <USBD_GetString>
  return USBD_StrDesc;
 8008e96:	4b02      	ldr	r3, [pc, #8]	; (8008ea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	20000b88 	.word	0x20000b88
 8008ea4:	0800e370 	.word	0x0800e370

08008ea8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	6039      	str	r1, [r7, #0]
 8008eb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	221a      	movs	r2, #26
 8008eb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008eba:	f000 f843 	bl	8008f44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ebe:	4b02      	ldr	r3, [pc, #8]	; (8008ec8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	20000160 	.word	0x20000160

08008ecc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	6039      	str	r1, [r7, #0]
 8008ed6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ed8:	79fb      	ldrb	r3, [r7, #7]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d105      	bne.n	8008eea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	4907      	ldr	r1, [pc, #28]	; (8008f00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ee2:	4808      	ldr	r0, [pc, #32]	; (8008f04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ee4:	f7ff fdad 	bl	8008a42 <USBD_GetString>
 8008ee8:	e004      	b.n	8008ef4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	4904      	ldr	r1, [pc, #16]	; (8008f00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008eee:	4805      	ldr	r0, [pc, #20]	; (8008f04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ef0:	f7ff fda7 	bl	8008a42 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ef4:	4b02      	ldr	r3, [pc, #8]	; (8008f00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	20000b88 	.word	0x20000b88
 8008f04:	0800e384 	.word	0x0800e384

08008f08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	6039      	str	r1, [r7, #0]
 8008f12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f14:	79fb      	ldrb	r3, [r7, #7]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d105      	bne.n	8008f26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	4907      	ldr	r1, [pc, #28]	; (8008f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f1e:	4808      	ldr	r0, [pc, #32]	; (8008f40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f20:	f7ff fd8f 	bl	8008a42 <USBD_GetString>
 8008f24:	e004      	b.n	8008f30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	4904      	ldr	r1, [pc, #16]	; (8008f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f2a:	4805      	ldr	r0, [pc, #20]	; (8008f40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f2c:	f7ff fd89 	bl	8008a42 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f30:	4b02      	ldr	r3, [pc, #8]	; (8008f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	20000b88 	.word	0x20000b88
 8008f40:	0800e390 	.word	0x0800e390

08008f44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f4a:	4b0f      	ldr	r3, [pc, #60]	; (8008f88 <Get_SerialNum+0x44>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f50:	4b0e      	ldr	r3, [pc, #56]	; (8008f8c <Get_SerialNum+0x48>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f56:	4b0e      	ldr	r3, [pc, #56]	; (8008f90 <Get_SerialNum+0x4c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4413      	add	r3, r2
 8008f62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d009      	beq.n	8008f7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f6a:	2208      	movs	r2, #8
 8008f6c:	4909      	ldr	r1, [pc, #36]	; (8008f94 <Get_SerialNum+0x50>)
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f000 f814 	bl	8008f9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f74:	2204      	movs	r2, #4
 8008f76:	4908      	ldr	r1, [pc, #32]	; (8008f98 <Get_SerialNum+0x54>)
 8008f78:	68b8      	ldr	r0, [r7, #8]
 8008f7a:	f000 f80f 	bl	8008f9c <IntToUnicode>
  }
}
 8008f7e:	bf00      	nop
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	1ffff7e8 	.word	0x1ffff7e8
 8008f8c:	1ffff7ec 	.word	0x1ffff7ec
 8008f90:	1ffff7f0 	.word	0x1ffff7f0
 8008f94:	20000162 	.word	0x20000162
 8008f98:	20000172 	.word	0x20000172

08008f9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008fae:	2300      	movs	r3, #0
 8008fb0:	75fb      	strb	r3, [r7, #23]
 8008fb2:	e027      	b.n	8009004 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	0f1b      	lsrs	r3, r3, #28
 8008fb8:	2b09      	cmp	r3, #9
 8008fba:	d80b      	bhi.n	8008fd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	0f1b      	lsrs	r3, r3, #28
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	005b      	lsls	r3, r3, #1
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	440b      	add	r3, r1
 8008fcc:	3230      	adds	r2, #48	; 0x30
 8008fce:	b2d2      	uxtb	r2, r2
 8008fd0:	701a      	strb	r2, [r3, #0]
 8008fd2:	e00a      	b.n	8008fea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	0f1b      	lsrs	r3, r3, #28
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	7dfb      	ldrb	r3, [r7, #23]
 8008fdc:	005b      	lsls	r3, r3, #1
 8008fde:	4619      	mov	r1, r3
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	440b      	add	r3, r1
 8008fe4:	3237      	adds	r2, #55	; 0x37
 8008fe6:	b2d2      	uxtb	r2, r2
 8008fe8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	011b      	lsls	r3, r3, #4
 8008fee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
 8008ff2:	005b      	lsls	r3, r3, #1
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
 8009000:	3301      	adds	r3, #1
 8009002:	75fb      	strb	r3, [r7, #23]
 8009004:	7dfa      	ldrb	r2, [r7, #23]
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	429a      	cmp	r2, r3
 800900a:	d3d3      	bcc.n	8008fb4 <IntToUnicode+0x18>
  }
}
 800900c:	bf00      	nop
 800900e:	371c      	adds	r7, #28
 8009010:	46bd      	mov	sp, r7
 8009012:	bc80      	pop	{r7}
 8009014:	4770      	bx	lr
	...

08009018 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a0d      	ldr	r2, [pc, #52]	; (800905c <HAL_PCD_MspInit+0x44>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d113      	bne.n	8009052 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800902a:	4b0d      	ldr	r3, [pc, #52]	; (8009060 <HAL_PCD_MspInit+0x48>)
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	4a0c      	ldr	r2, [pc, #48]	; (8009060 <HAL_PCD_MspInit+0x48>)
 8009030:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009034:	61d3      	str	r3, [r2, #28]
 8009036:	4b0a      	ldr	r3, [pc, #40]	; (8009060 <HAL_PCD_MspInit+0x48>)
 8009038:	69db      	ldr	r3, [r3, #28]
 800903a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800903e:	60fb      	str	r3, [r7, #12]
 8009040:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009042:	2200      	movs	r2, #0
 8009044:	2100      	movs	r1, #0
 8009046:	2014      	movs	r0, #20
 8009048:	f7f8 fff3 	bl	8002032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800904c:	2014      	movs	r0, #20
 800904e:	f7f9 f80c 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009052:	bf00      	nop
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	40005c00 	.word	0x40005c00
 8009060:	40021000 	.word	0x40021000

08009064 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009078:	4619      	mov	r1, r3
 800907a:	4610      	mov	r0, r2
 800907c:	f7fe fdbd 	bl	8007bfa <USBD_LL_SetupStage>
}
 8009080:	bf00      	nop
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	460b      	mov	r3, r1
 8009092:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800909a:	78fa      	ldrb	r2, [r7, #3]
 800909c:	6879      	ldr	r1, [r7, #4]
 800909e:	4613      	mov	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	00db      	lsls	r3, r3, #3
 80090a6:	440b      	add	r3, r1
 80090a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	78fb      	ldrb	r3, [r7, #3]
 80090b0:	4619      	mov	r1, r3
 80090b2:	f7fe fded 	bl	8007c90 <USBD_LL_DataOutStage>
}
 80090b6:	bf00      	nop
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b082      	sub	sp, #8
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	460b      	mov	r3, r1
 80090c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80090d0:	78fa      	ldrb	r2, [r7, #3]
 80090d2:	6879      	ldr	r1, [r7, #4]
 80090d4:	4613      	mov	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	00db      	lsls	r3, r3, #3
 80090dc:	440b      	add	r3, r1
 80090de:	333c      	adds	r3, #60	; 0x3c
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	78fb      	ldrb	r3, [r7, #3]
 80090e4:	4619      	mov	r1, r3
 80090e6:	f7fe fe44 	bl	8007d72 <USBD_LL_DataInStage>
}
 80090ea:	bf00      	nop
 80090ec:	3708      	adds	r7, #8
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b082      	sub	sp, #8
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009100:	4618      	mov	r0, r3
 8009102:	f7fe ff54 	bl	8007fae <USBD_LL_SOF>
}
 8009106:	bf00      	nop
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800910e:	b580      	push	{r7, lr}
 8009110:	b084      	sub	sp, #16
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009116:	2301      	movs	r3, #1
 8009118:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	2b02      	cmp	r3, #2
 8009120:	d001      	beq.n	8009126 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009122:	f7f8 fa2f 	bl	8001584 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800912c:	7bfa      	ldrb	r2, [r7, #15]
 800912e:	4611      	mov	r1, r2
 8009130:	4618      	mov	r0, r3
 8009132:	f7fe ff04 	bl	8007f3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800913c:	4618      	mov	r0, r3
 800913e:	f7fe febd 	bl	8007ebc <USBD_LL_Reset>
}
 8009142:	bf00      	nop
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
	...

0800914c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe fefe 	bl	8007f5c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d005      	beq.n	8009174 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009168:	4b04      	ldr	r3, [pc, #16]	; (800917c <HAL_PCD_SuspendCallback+0x30>)
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	4a03      	ldr	r2, [pc, #12]	; (800917c <HAL_PCD_SuspendCallback+0x30>)
 800916e:	f043 0306 	orr.w	r3, r3, #6
 8009172:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009174:	bf00      	nop
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	e000ed00 	.word	0xe000ed00

08009180 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe fef8 	bl	8007f84 <USBD_LL_Resume>
}
 8009194:	bf00      	nop
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80091a4:	4a28      	ldr	r2, [pc, #160]	; (8009248 <USBD_LL_Init+0xac>)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a26      	ldr	r2, [pc, #152]	; (8009248 <USBD_LL_Init+0xac>)
 80091b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80091b4:	4b24      	ldr	r3, [pc, #144]	; (8009248 <USBD_LL_Init+0xac>)
 80091b6:	4a25      	ldr	r2, [pc, #148]	; (800924c <USBD_LL_Init+0xb0>)
 80091b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80091ba:	4b23      	ldr	r3, [pc, #140]	; (8009248 <USBD_LL_Init+0xac>)
 80091bc:	2208      	movs	r2, #8
 80091be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80091c0:	4b21      	ldr	r3, [pc, #132]	; (8009248 <USBD_LL_Init+0xac>)
 80091c2:	2202      	movs	r2, #2
 80091c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80091c6:	4b20      	ldr	r3, [pc, #128]	; (8009248 <USBD_LL_Init+0xac>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80091cc:	4b1e      	ldr	r3, [pc, #120]	; (8009248 <USBD_LL_Init+0xac>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80091d2:	4b1d      	ldr	r3, [pc, #116]	; (8009248 <USBD_LL_Init+0xac>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80091d8:	481b      	ldr	r0, [pc, #108]	; (8009248 <USBD_LL_Init+0xac>)
 80091da:	f7f9 f8d3 	bl	8002384 <HAL_PCD_Init>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80091e4:	f7f8 f9ce 	bl	8001584 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091ee:	2318      	movs	r3, #24
 80091f0:	2200      	movs	r2, #0
 80091f2:	2100      	movs	r1, #0
 80091f4:	f7fa fc07 	bl	8003a06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091fe:	2358      	movs	r3, #88	; 0x58
 8009200:	2200      	movs	r2, #0
 8009202:	2180      	movs	r1, #128	; 0x80
 8009204:	f7fa fbff 	bl	8003a06 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800920e:	23c0      	movs	r3, #192	; 0xc0
 8009210:	2200      	movs	r2, #0
 8009212:	2181      	movs	r1, #129	; 0x81
 8009214:	f7fa fbf7 	bl	8003a06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800921e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009222:	2200      	movs	r2, #0
 8009224:	2101      	movs	r1, #1
 8009226:	f7fa fbee 	bl	8003a06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009234:	2200      	movs	r2, #0
 8009236:	2182      	movs	r1, #130	; 0x82
 8009238:	f7fa fbe5 	bl	8003a06 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	20000d88 	.word	0x20000d88
 800924c:	40005c00 	.word	0x40005c00

08009250 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800925c:	2300      	movs	r3, #0
 800925e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009266:	4618      	mov	r0, r3
 8009268:	f7f9 f997 	bl	800259a <HAL_PCD_Start>
 800926c:	4603      	mov	r3, r0
 800926e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009270:	7bfb      	ldrb	r3, [r7, #15]
 8009272:	4618      	mov	r0, r3
 8009274:	f000 f94e 	bl	8009514 <USBD_Get_USB_Status>
 8009278:	4603      	mov	r3, r0
 800927a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800927c:	7bbb      	ldrb	r3, [r7, #14]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b084      	sub	sp, #16
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	4608      	mov	r0, r1
 8009290:	4611      	mov	r1, r2
 8009292:	461a      	mov	r2, r3
 8009294:	4603      	mov	r3, r0
 8009296:	70fb      	strb	r3, [r7, #3]
 8009298:	460b      	mov	r3, r1
 800929a:	70bb      	strb	r3, [r7, #2]
 800929c:	4613      	mov	r3, r2
 800929e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a0:	2300      	movs	r3, #0
 80092a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092ae:	78bb      	ldrb	r3, [r7, #2]
 80092b0:	883a      	ldrh	r2, [r7, #0]
 80092b2:	78f9      	ldrb	r1, [r7, #3]
 80092b4:	f7f9 fb11 	bl	80028da <HAL_PCD_EP_Open>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 f928 	bl	8009514 <USBD_Get_USB_Status>
 80092c4:	4603      	mov	r3, r0
 80092c6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80092c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b084      	sub	sp, #16
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	460b      	mov	r3, r1
 80092dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092ec:	78fa      	ldrb	r2, [r7, #3]
 80092ee:	4611      	mov	r1, r2
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7f9 fb58 	bl	80029a6 <HAL_PCD_EP_Close>
 80092f6:	4603      	mov	r3, r0
 80092f8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 f909 	bl	8009514 <USBD_Get_USB_Status>
 8009302:	4603      	mov	r3, r0
 8009304:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8009306:	7bbb      	ldrb	r3, [r7, #14]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800932a:	78fa      	ldrb	r2, [r7, #3]
 800932c:	4611      	mov	r1, r2
 800932e:	4618      	mov	r0, r3
 8009330:	f7f9 fc18 	bl	8002b64 <HAL_PCD_EP_SetStall>
 8009334:	4603      	mov	r3, r0
 8009336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009338:	7bfb      	ldrb	r3, [r7, #15]
 800933a:	4618      	mov	r0, r3
 800933c:	f000 f8ea 	bl	8009514 <USBD_Get_USB_Status>
 8009340:	4603      	mov	r3, r0
 8009342:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009344:	7bbb      	ldrb	r3, [r7, #14]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	460b      	mov	r3, r1
 8009358:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009368:	78fa      	ldrb	r2, [r7, #3]
 800936a:	4611      	mov	r1, r2
 800936c:	4618      	mov	r0, r3
 800936e:	f7f9 fc59 	bl	8002c24 <HAL_PCD_EP_ClrStall>
 8009372:	4603      	mov	r3, r0
 8009374:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	4618      	mov	r0, r3
 800937a:	f000 f8cb 	bl	8009514 <USBD_Get_USB_Status>
 800937e:	4603      	mov	r3, r0
 8009380:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8009382:	7bbb      	ldrb	r3, [r7, #14]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	460b      	mov	r3, r1
 8009396:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800939e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80093a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	da0c      	bge.n	80093c2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80093a8:	78fb      	ldrb	r3, [r7, #3]
 80093aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ae:	68f9      	ldr	r1, [r7, #12]
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	4613      	mov	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	00db      	lsls	r3, r3, #3
 80093ba:	440b      	add	r3, r1
 80093bc:	3302      	adds	r3, #2
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	e00b      	b.n	80093da <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80093c2:	78fb      	ldrb	r3, [r7, #3]
 80093c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093c8:	68f9      	ldr	r1, [r7, #12]
 80093ca:	4613      	mov	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	00db      	lsls	r3, r3, #3
 80093d2:	440b      	add	r3, r1
 80093d4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80093d8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3714      	adds	r7, #20
 80093de:	46bd      	mov	sp, r7
 80093e0:	bc80      	pop	{r7}
 80093e2:	4770      	bx	lr

080093e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	460b      	mov	r3, r1
 80093ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093fe:	78fa      	ldrb	r2, [r7, #3]
 8009400:	4611      	mov	r1, r2
 8009402:	4618      	mov	r0, r3
 8009404:	f7f9 fa44 	bl	8002890 <HAL_PCD_SetAddress>
 8009408:	4603      	mov	r3, r0
 800940a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	4618      	mov	r0, r3
 8009410:	f000 f880 	bl	8009514 <USBD_Get_USB_Status>
 8009414:	4603      	mov	r3, r0
 8009416:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009418:	7bbb      	ldrb	r3, [r7, #14]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b086      	sub	sp, #24
 8009426:	af00      	add	r7, sp, #0
 8009428:	60f8      	str	r0, [r7, #12]
 800942a:	607a      	str	r2, [r7, #4]
 800942c:	461a      	mov	r2, r3
 800942e:	460b      	mov	r3, r1
 8009430:	72fb      	strb	r3, [r7, #11]
 8009432:	4613      	mov	r3, r2
 8009434:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800943a:	2300      	movs	r3, #0
 800943c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009444:	893b      	ldrh	r3, [r7, #8]
 8009446:	7af9      	ldrb	r1, [r7, #11]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	f7f9 fb48 	bl	8002ade <HAL_PCD_EP_Transmit>
 800944e:	4603      	mov	r3, r0
 8009450:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009452:	7dfb      	ldrb	r3, [r7, #23]
 8009454:	4618      	mov	r0, r3
 8009456:	f000 f85d 	bl	8009514 <USBD_Get_USB_Status>
 800945a:	4603      	mov	r3, r0
 800945c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800945e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3718      	adds	r7, #24
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	607a      	str	r2, [r7, #4]
 8009472:	461a      	mov	r2, r3
 8009474:	460b      	mov	r3, r1
 8009476:	72fb      	strb	r3, [r7, #11]
 8009478:	4613      	mov	r3, r2
 800947a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800948a:	893b      	ldrh	r3, [r7, #8]
 800948c:	7af9      	ldrb	r1, [r7, #11]
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	f7f9 fad1 	bl	8002a36 <HAL_PCD_EP_Receive>
 8009494:	4603      	mov	r3, r0
 8009496:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009498:	7dfb      	ldrb	r3, [r7, #23]
 800949a:	4618      	mov	r0, r3
 800949c:	f000 f83a 	bl	8009514 <USBD_Get_USB_Status>
 80094a0:	4603      	mov	r3, r0
 80094a2:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80094a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3718      	adds	r7, #24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b082      	sub	sp, #8
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	460b      	mov	r3, r1
 80094b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094c0:	78fa      	ldrb	r2, [r7, #3]
 80094c2:	4611      	mov	r1, r2
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7f9 faf3 	bl	8002ab0 <HAL_PCD_EP_GetRxCount>
 80094ca:	4603      	mov	r3, r0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80094dc:	4b02      	ldr	r3, [pc, #8]	; (80094e8 <USBD_static_malloc+0x14>)
}
 80094de:	4618      	mov	r0, r3
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bc80      	pop	{r7}
 80094e6:	4770      	bx	lr
 80094e8:	20000374 	.word	0x20000374

080094ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]

}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bc80      	pop	{r7}
 80094fc:	4770      	bx	lr

080094fe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094fe:	b480      	push	{r7}
 8009500:	b083      	sub	sp, #12
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
 8009506:	460b      	mov	r3, r1
 8009508:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800950a:	bf00      	nop
 800950c:	370c      	adds	r7, #12
 800950e:	46bd      	mov	sp, r7
 8009510:	bc80      	pop	{r7}
 8009512:	4770      	bx	lr

08009514 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	4603      	mov	r3, r0
 800951c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800951e:	2300      	movs	r3, #0
 8009520:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009522:	79fb      	ldrb	r3, [r7, #7]
 8009524:	2b03      	cmp	r3, #3
 8009526:	d817      	bhi.n	8009558 <USBD_Get_USB_Status+0x44>
 8009528:	a201      	add	r2, pc, #4	; (adr r2, 8009530 <USBD_Get_USB_Status+0x1c>)
 800952a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952e:	bf00      	nop
 8009530:	08009541 	.word	0x08009541
 8009534:	08009547 	.word	0x08009547
 8009538:	0800954d 	.word	0x0800954d
 800953c:	08009553 	.word	0x08009553
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	73fb      	strb	r3, [r7, #15]
    break;
 8009544:	e00b      	b.n	800955e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009546:	2302      	movs	r3, #2
 8009548:	73fb      	strb	r3, [r7, #15]
    break;
 800954a:	e008      	b.n	800955e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800954c:	2301      	movs	r3, #1
 800954e:	73fb      	strb	r3, [r7, #15]
    break;
 8009550:	e005      	b.n	800955e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009552:	2302      	movs	r3, #2
 8009554:	73fb      	strb	r3, [r7, #15]
    break;
 8009556:	e002      	b.n	800955e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009558:	2302      	movs	r3, #2
 800955a:	73fb      	strb	r3, [r7, #15]
    break;
 800955c:	bf00      	nop
  }
  return usb_status;
 800955e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3714      	adds	r7, #20
 8009564:	46bd      	mov	sp, r7
 8009566:	bc80      	pop	{r7}
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop

0800956c <__errno>:
 800956c:	4b01      	ldr	r3, [pc, #4]	; (8009574 <__errno+0x8>)
 800956e:	6818      	ldr	r0, [r3, #0]
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	2000017c 	.word	0x2000017c

08009578 <__libc_init_array>:
 8009578:	b570      	push	{r4, r5, r6, lr}
 800957a:	2500      	movs	r5, #0
 800957c:	4e0c      	ldr	r6, [pc, #48]	; (80095b0 <__libc_init_array+0x38>)
 800957e:	4c0d      	ldr	r4, [pc, #52]	; (80095b4 <__libc_init_array+0x3c>)
 8009580:	1ba4      	subs	r4, r4, r6
 8009582:	10a4      	asrs	r4, r4, #2
 8009584:	42a5      	cmp	r5, r4
 8009586:	d109      	bne.n	800959c <__libc_init_array+0x24>
 8009588:	f004 feae 	bl	800e2e8 <_init>
 800958c:	2500      	movs	r5, #0
 800958e:	4e0a      	ldr	r6, [pc, #40]	; (80095b8 <__libc_init_array+0x40>)
 8009590:	4c0a      	ldr	r4, [pc, #40]	; (80095bc <__libc_init_array+0x44>)
 8009592:	1ba4      	subs	r4, r4, r6
 8009594:	10a4      	asrs	r4, r4, #2
 8009596:	42a5      	cmp	r5, r4
 8009598:	d105      	bne.n	80095a6 <__libc_init_array+0x2e>
 800959a:	bd70      	pop	{r4, r5, r6, pc}
 800959c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095a0:	4798      	blx	r3
 80095a2:	3501      	adds	r5, #1
 80095a4:	e7ee      	b.n	8009584 <__libc_init_array+0xc>
 80095a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095aa:	4798      	blx	r3
 80095ac:	3501      	adds	r5, #1
 80095ae:	e7f2      	b.n	8009596 <__libc_init_array+0x1e>
 80095b0:	0800e6f4 	.word	0x0800e6f4
 80095b4:	0800e6f4 	.word	0x0800e6f4
 80095b8:	0800e6f4 	.word	0x0800e6f4
 80095bc:	0800e6f8 	.word	0x0800e6f8

080095c0 <memset>:
 80095c0:	4603      	mov	r3, r0
 80095c2:	4402      	add	r2, r0
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d100      	bne.n	80095ca <memset+0xa>
 80095c8:	4770      	bx	lr
 80095ca:	f803 1b01 	strb.w	r1, [r3], #1
 80095ce:	e7f9      	b.n	80095c4 <memset+0x4>

080095d0 <__cvt>:
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d6:	461e      	mov	r6, r3
 80095d8:	bfbb      	ittet	lt
 80095da:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80095de:	461e      	movlt	r6, r3
 80095e0:	2300      	movge	r3, #0
 80095e2:	232d      	movlt	r3, #45	; 0x2d
 80095e4:	b088      	sub	sp, #32
 80095e6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80095e8:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80095ec:	f027 0720 	bic.w	r7, r7, #32
 80095f0:	2f46      	cmp	r7, #70	; 0x46
 80095f2:	4614      	mov	r4, r2
 80095f4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80095f6:	700b      	strb	r3, [r1, #0]
 80095f8:	d004      	beq.n	8009604 <__cvt+0x34>
 80095fa:	2f45      	cmp	r7, #69	; 0x45
 80095fc:	d100      	bne.n	8009600 <__cvt+0x30>
 80095fe:	3501      	adds	r5, #1
 8009600:	2302      	movs	r3, #2
 8009602:	e000      	b.n	8009606 <__cvt+0x36>
 8009604:	2303      	movs	r3, #3
 8009606:	aa07      	add	r2, sp, #28
 8009608:	9204      	str	r2, [sp, #16]
 800960a:	aa06      	add	r2, sp, #24
 800960c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009610:	e9cd 3500 	strd	r3, r5, [sp]
 8009614:	4622      	mov	r2, r4
 8009616:	4633      	mov	r3, r6
 8009618:	f001 ff62 	bl	800b4e0 <_dtoa_r>
 800961c:	2f47      	cmp	r7, #71	; 0x47
 800961e:	4680      	mov	r8, r0
 8009620:	d102      	bne.n	8009628 <__cvt+0x58>
 8009622:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009624:	07db      	lsls	r3, r3, #31
 8009626:	d526      	bpl.n	8009676 <__cvt+0xa6>
 8009628:	2f46      	cmp	r7, #70	; 0x46
 800962a:	eb08 0905 	add.w	r9, r8, r5
 800962e:	d111      	bne.n	8009654 <__cvt+0x84>
 8009630:	f898 3000 	ldrb.w	r3, [r8]
 8009634:	2b30      	cmp	r3, #48	; 0x30
 8009636:	d10a      	bne.n	800964e <__cvt+0x7e>
 8009638:	2200      	movs	r2, #0
 800963a:	2300      	movs	r3, #0
 800963c:	4620      	mov	r0, r4
 800963e:	4631      	mov	r1, r6
 8009640:	f7f7 f9b2 	bl	80009a8 <__aeabi_dcmpeq>
 8009644:	b918      	cbnz	r0, 800964e <__cvt+0x7e>
 8009646:	f1c5 0501 	rsb	r5, r5, #1
 800964a:	f8ca 5000 	str.w	r5, [sl]
 800964e:	f8da 3000 	ldr.w	r3, [sl]
 8009652:	4499      	add	r9, r3
 8009654:	2200      	movs	r2, #0
 8009656:	2300      	movs	r3, #0
 8009658:	4620      	mov	r0, r4
 800965a:	4631      	mov	r1, r6
 800965c:	f7f7 f9a4 	bl	80009a8 <__aeabi_dcmpeq>
 8009660:	b938      	cbnz	r0, 8009672 <__cvt+0xa2>
 8009662:	2230      	movs	r2, #48	; 0x30
 8009664:	9b07      	ldr	r3, [sp, #28]
 8009666:	454b      	cmp	r3, r9
 8009668:	d205      	bcs.n	8009676 <__cvt+0xa6>
 800966a:	1c59      	adds	r1, r3, #1
 800966c:	9107      	str	r1, [sp, #28]
 800966e:	701a      	strb	r2, [r3, #0]
 8009670:	e7f8      	b.n	8009664 <__cvt+0x94>
 8009672:	f8cd 901c 	str.w	r9, [sp, #28]
 8009676:	4640      	mov	r0, r8
 8009678:	9b07      	ldr	r3, [sp, #28]
 800967a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800967c:	eba3 0308 	sub.w	r3, r3, r8
 8009680:	6013      	str	r3, [r2, #0]
 8009682:	b008      	add	sp, #32
 8009684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009688 <__exponent>:
 8009688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800968a:	2900      	cmp	r1, #0
 800968c:	bfb4      	ite	lt
 800968e:	232d      	movlt	r3, #45	; 0x2d
 8009690:	232b      	movge	r3, #43	; 0x2b
 8009692:	4604      	mov	r4, r0
 8009694:	bfb8      	it	lt
 8009696:	4249      	neglt	r1, r1
 8009698:	2909      	cmp	r1, #9
 800969a:	f804 2b02 	strb.w	r2, [r4], #2
 800969e:	7043      	strb	r3, [r0, #1]
 80096a0:	dd21      	ble.n	80096e6 <__exponent+0x5e>
 80096a2:	f10d 0307 	add.w	r3, sp, #7
 80096a6:	461f      	mov	r7, r3
 80096a8:	260a      	movs	r6, #10
 80096aa:	fb91 f5f6 	sdiv	r5, r1, r6
 80096ae:	fb06 1115 	mls	r1, r6, r5, r1
 80096b2:	2d09      	cmp	r5, #9
 80096b4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80096b8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80096bc:	f103 32ff 	add.w	r2, r3, #4294967295
 80096c0:	4629      	mov	r1, r5
 80096c2:	dc09      	bgt.n	80096d8 <__exponent+0x50>
 80096c4:	3130      	adds	r1, #48	; 0x30
 80096c6:	3b02      	subs	r3, #2
 80096c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80096cc:	42bb      	cmp	r3, r7
 80096ce:	4622      	mov	r2, r4
 80096d0:	d304      	bcc.n	80096dc <__exponent+0x54>
 80096d2:	1a10      	subs	r0, r2, r0
 80096d4:	b003      	add	sp, #12
 80096d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096d8:	4613      	mov	r3, r2
 80096da:	e7e6      	b.n	80096aa <__exponent+0x22>
 80096dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096e0:	f804 2b01 	strb.w	r2, [r4], #1
 80096e4:	e7f2      	b.n	80096cc <__exponent+0x44>
 80096e6:	2330      	movs	r3, #48	; 0x30
 80096e8:	4419      	add	r1, r3
 80096ea:	7083      	strb	r3, [r0, #2]
 80096ec:	1d02      	adds	r2, r0, #4
 80096ee:	70c1      	strb	r1, [r0, #3]
 80096f0:	e7ef      	b.n	80096d2 <__exponent+0x4a>
	...

080096f4 <_printf_float>:
 80096f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f8:	b091      	sub	sp, #68	; 0x44
 80096fa:	460c      	mov	r4, r1
 80096fc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80096fe:	4693      	mov	fp, r2
 8009700:	461e      	mov	r6, r3
 8009702:	4605      	mov	r5, r0
 8009704:	f003 f956 	bl	800c9b4 <_localeconv_r>
 8009708:	6803      	ldr	r3, [r0, #0]
 800970a:	4618      	mov	r0, r3
 800970c:	9309      	str	r3, [sp, #36]	; 0x24
 800970e:	f7f6 fd1f 	bl	8000150 <strlen>
 8009712:	2300      	movs	r3, #0
 8009714:	930e      	str	r3, [sp, #56]	; 0x38
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	900a      	str	r0, [sp, #40]	; 0x28
 800971a:	3307      	adds	r3, #7
 800971c:	f023 0307 	bic.w	r3, r3, #7
 8009720:	f103 0208 	add.w	r2, r3, #8
 8009724:	f894 8018 	ldrb.w	r8, [r4, #24]
 8009728:	f8d4 a000 	ldr.w	sl, [r4]
 800972c:	603a      	str	r2, [r7, #0]
 800972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009732:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009736:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800973a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800973e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009740:	f04f 32ff 	mov.w	r2, #4294967295
 8009744:	4ba6      	ldr	r3, [pc, #664]	; (80099e0 <_printf_float+0x2ec>)
 8009746:	4638      	mov	r0, r7
 8009748:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800974a:	f7f7 f95f 	bl	8000a0c <__aeabi_dcmpun>
 800974e:	bb68      	cbnz	r0, 80097ac <_printf_float+0xb8>
 8009750:	f04f 32ff 	mov.w	r2, #4294967295
 8009754:	4ba2      	ldr	r3, [pc, #648]	; (80099e0 <_printf_float+0x2ec>)
 8009756:	4638      	mov	r0, r7
 8009758:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800975a:	f7f7 f939 	bl	80009d0 <__aeabi_dcmple>
 800975e:	bb28      	cbnz	r0, 80097ac <_printf_float+0xb8>
 8009760:	2200      	movs	r2, #0
 8009762:	2300      	movs	r3, #0
 8009764:	4638      	mov	r0, r7
 8009766:	4649      	mov	r1, r9
 8009768:	f7f7 f928 	bl	80009bc <__aeabi_dcmplt>
 800976c:	b110      	cbz	r0, 8009774 <_printf_float+0x80>
 800976e:	232d      	movs	r3, #45	; 0x2d
 8009770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009774:	4f9b      	ldr	r7, [pc, #620]	; (80099e4 <_printf_float+0x2f0>)
 8009776:	4b9c      	ldr	r3, [pc, #624]	; (80099e8 <_printf_float+0x2f4>)
 8009778:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800977c:	bf98      	it	ls
 800977e:	461f      	movls	r7, r3
 8009780:	2303      	movs	r3, #3
 8009782:	f04f 0900 	mov.w	r9, #0
 8009786:	6123      	str	r3, [r4, #16]
 8009788:	f02a 0304 	bic.w	r3, sl, #4
 800978c:	6023      	str	r3, [r4, #0]
 800978e:	9600      	str	r6, [sp, #0]
 8009790:	465b      	mov	r3, fp
 8009792:	aa0f      	add	r2, sp, #60	; 0x3c
 8009794:	4621      	mov	r1, r4
 8009796:	4628      	mov	r0, r5
 8009798:	f000 f9e2 	bl	8009b60 <_printf_common>
 800979c:	3001      	adds	r0, #1
 800979e:	f040 8090 	bne.w	80098c2 <_printf_float+0x1ce>
 80097a2:	f04f 30ff 	mov.w	r0, #4294967295
 80097a6:	b011      	add	sp, #68	; 0x44
 80097a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ac:	463a      	mov	r2, r7
 80097ae:	464b      	mov	r3, r9
 80097b0:	4638      	mov	r0, r7
 80097b2:	4649      	mov	r1, r9
 80097b4:	f7f7 f92a 	bl	8000a0c <__aeabi_dcmpun>
 80097b8:	b110      	cbz	r0, 80097c0 <_printf_float+0xcc>
 80097ba:	4f8c      	ldr	r7, [pc, #560]	; (80099ec <_printf_float+0x2f8>)
 80097bc:	4b8c      	ldr	r3, [pc, #560]	; (80099f0 <_printf_float+0x2fc>)
 80097be:	e7db      	b.n	8009778 <_printf_float+0x84>
 80097c0:	6863      	ldr	r3, [r4, #4]
 80097c2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80097c6:	1c59      	adds	r1, r3, #1
 80097c8:	a80d      	add	r0, sp, #52	; 0x34
 80097ca:	a90e      	add	r1, sp, #56	; 0x38
 80097cc:	d140      	bne.n	8009850 <_printf_float+0x15c>
 80097ce:	2306      	movs	r3, #6
 80097d0:	6063      	str	r3, [r4, #4]
 80097d2:	f04f 0c00 	mov.w	ip, #0
 80097d6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80097da:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80097de:	6863      	ldr	r3, [r4, #4]
 80097e0:	6022      	str	r2, [r4, #0]
 80097e2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	463a      	mov	r2, r7
 80097ea:	464b      	mov	r3, r9
 80097ec:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80097f0:	4628      	mov	r0, r5
 80097f2:	f7ff feed 	bl	80095d0 <__cvt>
 80097f6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80097fa:	2b47      	cmp	r3, #71	; 0x47
 80097fc:	4607      	mov	r7, r0
 80097fe:	d109      	bne.n	8009814 <_printf_float+0x120>
 8009800:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009802:	1cd8      	adds	r0, r3, #3
 8009804:	db02      	blt.n	800980c <_printf_float+0x118>
 8009806:	6862      	ldr	r2, [r4, #4]
 8009808:	4293      	cmp	r3, r2
 800980a:	dd47      	ble.n	800989c <_printf_float+0x1a8>
 800980c:	f1a8 0802 	sub.w	r8, r8, #2
 8009810:	fa5f f888 	uxtb.w	r8, r8
 8009814:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009818:	990d      	ldr	r1, [sp, #52]	; 0x34
 800981a:	d824      	bhi.n	8009866 <_printf_float+0x172>
 800981c:	3901      	subs	r1, #1
 800981e:	4642      	mov	r2, r8
 8009820:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009824:	910d      	str	r1, [sp, #52]	; 0x34
 8009826:	f7ff ff2f 	bl	8009688 <__exponent>
 800982a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800982c:	4681      	mov	r9, r0
 800982e:	1813      	adds	r3, r2, r0
 8009830:	2a01      	cmp	r2, #1
 8009832:	6123      	str	r3, [r4, #16]
 8009834:	dc02      	bgt.n	800983c <_printf_float+0x148>
 8009836:	6822      	ldr	r2, [r4, #0]
 8009838:	07d1      	lsls	r1, r2, #31
 800983a:	d501      	bpl.n	8009840 <_printf_float+0x14c>
 800983c:	3301      	adds	r3, #1
 800983e:	6123      	str	r3, [r4, #16]
 8009840:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009844:	2b00      	cmp	r3, #0
 8009846:	d0a2      	beq.n	800978e <_printf_float+0x9a>
 8009848:	232d      	movs	r3, #45	; 0x2d
 800984a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800984e:	e79e      	b.n	800978e <_printf_float+0x9a>
 8009850:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009854:	f000 816e 	beq.w	8009b34 <_printf_float+0x440>
 8009858:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800985c:	d1b9      	bne.n	80097d2 <_printf_float+0xde>
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1b7      	bne.n	80097d2 <_printf_float+0xde>
 8009862:	2301      	movs	r3, #1
 8009864:	e7b4      	b.n	80097d0 <_printf_float+0xdc>
 8009866:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800986a:	d119      	bne.n	80098a0 <_printf_float+0x1ac>
 800986c:	2900      	cmp	r1, #0
 800986e:	6863      	ldr	r3, [r4, #4]
 8009870:	dd0c      	ble.n	800988c <_printf_float+0x198>
 8009872:	6121      	str	r1, [r4, #16]
 8009874:	b913      	cbnz	r3, 800987c <_printf_float+0x188>
 8009876:	6822      	ldr	r2, [r4, #0]
 8009878:	07d2      	lsls	r2, r2, #31
 800987a:	d502      	bpl.n	8009882 <_printf_float+0x18e>
 800987c:	3301      	adds	r3, #1
 800987e:	440b      	add	r3, r1
 8009880:	6123      	str	r3, [r4, #16]
 8009882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009884:	f04f 0900 	mov.w	r9, #0
 8009888:	65a3      	str	r3, [r4, #88]	; 0x58
 800988a:	e7d9      	b.n	8009840 <_printf_float+0x14c>
 800988c:	b913      	cbnz	r3, 8009894 <_printf_float+0x1a0>
 800988e:	6822      	ldr	r2, [r4, #0]
 8009890:	07d0      	lsls	r0, r2, #31
 8009892:	d501      	bpl.n	8009898 <_printf_float+0x1a4>
 8009894:	3302      	adds	r3, #2
 8009896:	e7f3      	b.n	8009880 <_printf_float+0x18c>
 8009898:	2301      	movs	r3, #1
 800989a:	e7f1      	b.n	8009880 <_printf_float+0x18c>
 800989c:	f04f 0867 	mov.w	r8, #103	; 0x67
 80098a0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80098a4:	4293      	cmp	r3, r2
 80098a6:	db05      	blt.n	80098b4 <_printf_float+0x1c0>
 80098a8:	6822      	ldr	r2, [r4, #0]
 80098aa:	6123      	str	r3, [r4, #16]
 80098ac:	07d1      	lsls	r1, r2, #31
 80098ae:	d5e8      	bpl.n	8009882 <_printf_float+0x18e>
 80098b0:	3301      	adds	r3, #1
 80098b2:	e7e5      	b.n	8009880 <_printf_float+0x18c>
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	bfcc      	ite	gt
 80098b8:	2301      	movgt	r3, #1
 80098ba:	f1c3 0302 	rsble	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	e7de      	b.n	8009880 <_printf_float+0x18c>
 80098c2:	6823      	ldr	r3, [r4, #0]
 80098c4:	055a      	lsls	r2, r3, #21
 80098c6:	d407      	bmi.n	80098d8 <_printf_float+0x1e4>
 80098c8:	6923      	ldr	r3, [r4, #16]
 80098ca:	463a      	mov	r2, r7
 80098cc:	4659      	mov	r1, fp
 80098ce:	4628      	mov	r0, r5
 80098d0:	47b0      	blx	r6
 80098d2:	3001      	adds	r0, #1
 80098d4:	d129      	bne.n	800992a <_printf_float+0x236>
 80098d6:	e764      	b.n	80097a2 <_printf_float+0xae>
 80098d8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80098dc:	f240 80d7 	bls.w	8009a8e <_printf_float+0x39a>
 80098e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098e4:	2200      	movs	r2, #0
 80098e6:	2300      	movs	r3, #0
 80098e8:	f7f7 f85e 	bl	80009a8 <__aeabi_dcmpeq>
 80098ec:	b388      	cbz	r0, 8009952 <_printf_float+0x25e>
 80098ee:	2301      	movs	r3, #1
 80098f0:	4a40      	ldr	r2, [pc, #256]	; (80099f4 <_printf_float+0x300>)
 80098f2:	4659      	mov	r1, fp
 80098f4:	4628      	mov	r0, r5
 80098f6:	47b0      	blx	r6
 80098f8:	3001      	adds	r0, #1
 80098fa:	f43f af52 	beq.w	80097a2 <_printf_float+0xae>
 80098fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009902:	429a      	cmp	r2, r3
 8009904:	db02      	blt.n	800990c <_printf_float+0x218>
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	07d8      	lsls	r0, r3, #31
 800990a:	d50e      	bpl.n	800992a <_printf_float+0x236>
 800990c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009910:	4659      	mov	r1, fp
 8009912:	4628      	mov	r0, r5
 8009914:	47b0      	blx	r6
 8009916:	3001      	adds	r0, #1
 8009918:	f43f af43 	beq.w	80097a2 <_printf_float+0xae>
 800991c:	2700      	movs	r7, #0
 800991e:	f104 081a 	add.w	r8, r4, #26
 8009922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009924:	3b01      	subs	r3, #1
 8009926:	42bb      	cmp	r3, r7
 8009928:	dc09      	bgt.n	800993e <_printf_float+0x24a>
 800992a:	6823      	ldr	r3, [r4, #0]
 800992c:	079f      	lsls	r7, r3, #30
 800992e:	f100 80fd 	bmi.w	8009b2c <_printf_float+0x438>
 8009932:	68e0      	ldr	r0, [r4, #12]
 8009934:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009936:	4298      	cmp	r0, r3
 8009938:	bfb8      	it	lt
 800993a:	4618      	movlt	r0, r3
 800993c:	e733      	b.n	80097a6 <_printf_float+0xb2>
 800993e:	2301      	movs	r3, #1
 8009940:	4642      	mov	r2, r8
 8009942:	4659      	mov	r1, fp
 8009944:	4628      	mov	r0, r5
 8009946:	47b0      	blx	r6
 8009948:	3001      	adds	r0, #1
 800994a:	f43f af2a 	beq.w	80097a2 <_printf_float+0xae>
 800994e:	3701      	adds	r7, #1
 8009950:	e7e7      	b.n	8009922 <_printf_float+0x22e>
 8009952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009954:	2b00      	cmp	r3, #0
 8009956:	dc2b      	bgt.n	80099b0 <_printf_float+0x2bc>
 8009958:	2301      	movs	r3, #1
 800995a:	4a26      	ldr	r2, [pc, #152]	; (80099f4 <_printf_float+0x300>)
 800995c:	4659      	mov	r1, fp
 800995e:	4628      	mov	r0, r5
 8009960:	47b0      	blx	r6
 8009962:	3001      	adds	r0, #1
 8009964:	f43f af1d 	beq.w	80097a2 <_printf_float+0xae>
 8009968:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800996a:	b923      	cbnz	r3, 8009976 <_printf_float+0x282>
 800996c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800996e:	b913      	cbnz	r3, 8009976 <_printf_float+0x282>
 8009970:	6823      	ldr	r3, [r4, #0]
 8009972:	07d9      	lsls	r1, r3, #31
 8009974:	d5d9      	bpl.n	800992a <_printf_float+0x236>
 8009976:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800997a:	4659      	mov	r1, fp
 800997c:	4628      	mov	r0, r5
 800997e:	47b0      	blx	r6
 8009980:	3001      	adds	r0, #1
 8009982:	f43f af0e 	beq.w	80097a2 <_printf_float+0xae>
 8009986:	f04f 0800 	mov.w	r8, #0
 800998a:	f104 091a 	add.w	r9, r4, #26
 800998e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009990:	425b      	negs	r3, r3
 8009992:	4543      	cmp	r3, r8
 8009994:	dc01      	bgt.n	800999a <_printf_float+0x2a6>
 8009996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009998:	e797      	b.n	80098ca <_printf_float+0x1d6>
 800999a:	2301      	movs	r3, #1
 800999c:	464a      	mov	r2, r9
 800999e:	4659      	mov	r1, fp
 80099a0:	4628      	mov	r0, r5
 80099a2:	47b0      	blx	r6
 80099a4:	3001      	adds	r0, #1
 80099a6:	f43f aefc 	beq.w	80097a2 <_printf_float+0xae>
 80099aa:	f108 0801 	add.w	r8, r8, #1
 80099ae:	e7ee      	b.n	800998e <_printf_float+0x29a>
 80099b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099b4:	429a      	cmp	r2, r3
 80099b6:	bfa8      	it	ge
 80099b8:	461a      	movge	r2, r3
 80099ba:	2a00      	cmp	r2, #0
 80099bc:	4690      	mov	r8, r2
 80099be:	dd07      	ble.n	80099d0 <_printf_float+0x2dc>
 80099c0:	4613      	mov	r3, r2
 80099c2:	4659      	mov	r1, fp
 80099c4:	463a      	mov	r2, r7
 80099c6:	4628      	mov	r0, r5
 80099c8:	47b0      	blx	r6
 80099ca:	3001      	adds	r0, #1
 80099cc:	f43f aee9 	beq.w	80097a2 <_printf_float+0xae>
 80099d0:	f104 031a 	add.w	r3, r4, #26
 80099d4:	f04f 0a00 	mov.w	sl, #0
 80099d8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80099dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80099de:	e015      	b.n	8009a0c <_printf_float+0x318>
 80099e0:	7fefffff 	.word	0x7fefffff
 80099e4:	0800e3c4 	.word	0x0800e3c4
 80099e8:	0800e3c0 	.word	0x0800e3c0
 80099ec:	0800e3cc 	.word	0x0800e3cc
 80099f0:	0800e3c8 	.word	0x0800e3c8
 80099f4:	0800e5eb 	.word	0x0800e5eb
 80099f8:	2301      	movs	r3, #1
 80099fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099fc:	4659      	mov	r1, fp
 80099fe:	4628      	mov	r0, r5
 8009a00:	47b0      	blx	r6
 8009a02:	3001      	adds	r0, #1
 8009a04:	f43f aecd 	beq.w	80097a2 <_printf_float+0xae>
 8009a08:	f10a 0a01 	add.w	sl, sl, #1
 8009a0c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8009a10:	eba9 0308 	sub.w	r3, r9, r8
 8009a14:	4553      	cmp	r3, sl
 8009a16:	dcef      	bgt.n	80099f8 <_printf_float+0x304>
 8009a18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	444f      	add	r7, r9
 8009a20:	db14      	blt.n	8009a4c <_printf_float+0x358>
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	07da      	lsls	r2, r3, #31
 8009a26:	d411      	bmi.n	8009a4c <_printf_float+0x358>
 8009a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a2c:	eba3 0209 	sub.w	r2, r3, r9
 8009a30:	eba3 0901 	sub.w	r9, r3, r1
 8009a34:	4591      	cmp	r9, r2
 8009a36:	bfa8      	it	ge
 8009a38:	4691      	movge	r9, r2
 8009a3a:	f1b9 0f00 	cmp.w	r9, #0
 8009a3e:	dc0d      	bgt.n	8009a5c <_printf_float+0x368>
 8009a40:	2700      	movs	r7, #0
 8009a42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a46:	f104 081a 	add.w	r8, r4, #26
 8009a4a:	e018      	b.n	8009a7e <_printf_float+0x38a>
 8009a4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a50:	4659      	mov	r1, fp
 8009a52:	4628      	mov	r0, r5
 8009a54:	47b0      	blx	r6
 8009a56:	3001      	adds	r0, #1
 8009a58:	d1e6      	bne.n	8009a28 <_printf_float+0x334>
 8009a5a:	e6a2      	b.n	80097a2 <_printf_float+0xae>
 8009a5c:	464b      	mov	r3, r9
 8009a5e:	463a      	mov	r2, r7
 8009a60:	4659      	mov	r1, fp
 8009a62:	4628      	mov	r0, r5
 8009a64:	47b0      	blx	r6
 8009a66:	3001      	adds	r0, #1
 8009a68:	d1ea      	bne.n	8009a40 <_printf_float+0x34c>
 8009a6a:	e69a      	b.n	80097a2 <_printf_float+0xae>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	4642      	mov	r2, r8
 8009a70:	4659      	mov	r1, fp
 8009a72:	4628      	mov	r0, r5
 8009a74:	47b0      	blx	r6
 8009a76:	3001      	adds	r0, #1
 8009a78:	f43f ae93 	beq.w	80097a2 <_printf_float+0xae>
 8009a7c:	3701      	adds	r7, #1
 8009a7e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a82:	1a9b      	subs	r3, r3, r2
 8009a84:	eba3 0309 	sub.w	r3, r3, r9
 8009a88:	42bb      	cmp	r3, r7
 8009a8a:	dcef      	bgt.n	8009a6c <_printf_float+0x378>
 8009a8c:	e74d      	b.n	800992a <_printf_float+0x236>
 8009a8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a90:	2a01      	cmp	r2, #1
 8009a92:	dc01      	bgt.n	8009a98 <_printf_float+0x3a4>
 8009a94:	07db      	lsls	r3, r3, #31
 8009a96:	d538      	bpl.n	8009b0a <_printf_float+0x416>
 8009a98:	2301      	movs	r3, #1
 8009a9a:	463a      	mov	r2, r7
 8009a9c:	4659      	mov	r1, fp
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	47b0      	blx	r6
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	f43f ae7d 	beq.w	80097a2 <_printf_float+0xae>
 8009aa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009aac:	4659      	mov	r1, fp
 8009aae:	4628      	mov	r0, r5
 8009ab0:	47b0      	blx	r6
 8009ab2:	3001      	adds	r0, #1
 8009ab4:	f107 0701 	add.w	r7, r7, #1
 8009ab8:	f43f ae73 	beq.w	80097a2 <_printf_float+0xae>
 8009abc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f103 38ff 	add.w	r8, r3, #4294967295
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f7f6 ff6d 	bl	80009a8 <__aeabi_dcmpeq>
 8009ace:	b9c0      	cbnz	r0, 8009b02 <_printf_float+0x40e>
 8009ad0:	4643      	mov	r3, r8
 8009ad2:	463a      	mov	r2, r7
 8009ad4:	4659      	mov	r1, fp
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	47b0      	blx	r6
 8009ada:	3001      	adds	r0, #1
 8009adc:	d10d      	bne.n	8009afa <_printf_float+0x406>
 8009ade:	e660      	b.n	80097a2 <_printf_float+0xae>
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	4642      	mov	r2, r8
 8009ae4:	4659      	mov	r1, fp
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	47b0      	blx	r6
 8009aea:	3001      	adds	r0, #1
 8009aec:	f43f ae59 	beq.w	80097a2 <_printf_float+0xae>
 8009af0:	3701      	adds	r7, #1
 8009af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009af4:	3b01      	subs	r3, #1
 8009af6:	42bb      	cmp	r3, r7
 8009af8:	dcf2      	bgt.n	8009ae0 <_printf_float+0x3ec>
 8009afa:	464b      	mov	r3, r9
 8009afc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b00:	e6e4      	b.n	80098cc <_printf_float+0x1d8>
 8009b02:	2700      	movs	r7, #0
 8009b04:	f104 081a 	add.w	r8, r4, #26
 8009b08:	e7f3      	b.n	8009af2 <_printf_float+0x3fe>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e7e1      	b.n	8009ad2 <_printf_float+0x3de>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	4642      	mov	r2, r8
 8009b12:	4659      	mov	r1, fp
 8009b14:	4628      	mov	r0, r5
 8009b16:	47b0      	blx	r6
 8009b18:	3001      	adds	r0, #1
 8009b1a:	f43f ae42 	beq.w	80097a2 <_printf_float+0xae>
 8009b1e:	3701      	adds	r7, #1
 8009b20:	68e3      	ldr	r3, [r4, #12]
 8009b22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b24:	1a9b      	subs	r3, r3, r2
 8009b26:	42bb      	cmp	r3, r7
 8009b28:	dcf1      	bgt.n	8009b0e <_printf_float+0x41a>
 8009b2a:	e702      	b.n	8009932 <_printf_float+0x23e>
 8009b2c:	2700      	movs	r7, #0
 8009b2e:	f104 0819 	add.w	r8, r4, #25
 8009b32:	e7f5      	b.n	8009b20 <_printf_float+0x42c>
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f43f ae94 	beq.w	8009862 <_printf_float+0x16e>
 8009b3a:	f04f 0c00 	mov.w	ip, #0
 8009b3e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009b42:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8009b46:	6022      	str	r2, [r4, #0]
 8009b48:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009b4c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	463a      	mov	r2, r7
 8009b54:	464b      	mov	r3, r9
 8009b56:	4628      	mov	r0, r5
 8009b58:	f7ff fd3a 	bl	80095d0 <__cvt>
 8009b5c:	4607      	mov	r7, r0
 8009b5e:	e64f      	b.n	8009800 <_printf_float+0x10c>

08009b60 <_printf_common>:
 8009b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b64:	4691      	mov	r9, r2
 8009b66:	461f      	mov	r7, r3
 8009b68:	688a      	ldr	r2, [r1, #8]
 8009b6a:	690b      	ldr	r3, [r1, #16]
 8009b6c:	4606      	mov	r6, r0
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	bfb8      	it	lt
 8009b72:	4613      	movlt	r3, r2
 8009b74:	f8c9 3000 	str.w	r3, [r9]
 8009b78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b7c:	460c      	mov	r4, r1
 8009b7e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b82:	b112      	cbz	r2, 8009b8a <_printf_common+0x2a>
 8009b84:	3301      	adds	r3, #1
 8009b86:	f8c9 3000 	str.w	r3, [r9]
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	0699      	lsls	r1, r3, #26
 8009b8e:	bf42      	ittt	mi
 8009b90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009b94:	3302      	addmi	r3, #2
 8009b96:	f8c9 3000 	strmi.w	r3, [r9]
 8009b9a:	6825      	ldr	r5, [r4, #0]
 8009b9c:	f015 0506 	ands.w	r5, r5, #6
 8009ba0:	d107      	bne.n	8009bb2 <_printf_common+0x52>
 8009ba2:	f104 0a19 	add.w	sl, r4, #25
 8009ba6:	68e3      	ldr	r3, [r4, #12]
 8009ba8:	f8d9 2000 	ldr.w	r2, [r9]
 8009bac:	1a9b      	subs	r3, r3, r2
 8009bae:	42ab      	cmp	r3, r5
 8009bb0:	dc29      	bgt.n	8009c06 <_printf_common+0xa6>
 8009bb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009bb6:	6822      	ldr	r2, [r4, #0]
 8009bb8:	3300      	adds	r3, #0
 8009bba:	bf18      	it	ne
 8009bbc:	2301      	movne	r3, #1
 8009bbe:	0692      	lsls	r2, r2, #26
 8009bc0:	d42e      	bmi.n	8009c20 <_printf_common+0xc0>
 8009bc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bc6:	4639      	mov	r1, r7
 8009bc8:	4630      	mov	r0, r6
 8009bca:	47c0      	blx	r8
 8009bcc:	3001      	adds	r0, #1
 8009bce:	d021      	beq.n	8009c14 <_printf_common+0xb4>
 8009bd0:	6823      	ldr	r3, [r4, #0]
 8009bd2:	68e5      	ldr	r5, [r4, #12]
 8009bd4:	f003 0306 	and.w	r3, r3, #6
 8009bd8:	2b04      	cmp	r3, #4
 8009bda:	bf18      	it	ne
 8009bdc:	2500      	movne	r5, #0
 8009bde:	f8d9 2000 	ldr.w	r2, [r9]
 8009be2:	f04f 0900 	mov.w	r9, #0
 8009be6:	bf08      	it	eq
 8009be8:	1aad      	subeq	r5, r5, r2
 8009bea:	68a3      	ldr	r3, [r4, #8]
 8009bec:	6922      	ldr	r2, [r4, #16]
 8009bee:	bf08      	it	eq
 8009bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	bfc4      	itt	gt
 8009bf8:	1a9b      	subgt	r3, r3, r2
 8009bfa:	18ed      	addgt	r5, r5, r3
 8009bfc:	341a      	adds	r4, #26
 8009bfe:	454d      	cmp	r5, r9
 8009c00:	d11a      	bne.n	8009c38 <_printf_common+0xd8>
 8009c02:	2000      	movs	r0, #0
 8009c04:	e008      	b.n	8009c18 <_printf_common+0xb8>
 8009c06:	2301      	movs	r3, #1
 8009c08:	4652      	mov	r2, sl
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	47c0      	blx	r8
 8009c10:	3001      	adds	r0, #1
 8009c12:	d103      	bne.n	8009c1c <_printf_common+0xbc>
 8009c14:	f04f 30ff 	mov.w	r0, #4294967295
 8009c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c1c:	3501      	adds	r5, #1
 8009c1e:	e7c2      	b.n	8009ba6 <_printf_common+0x46>
 8009c20:	2030      	movs	r0, #48	; 0x30
 8009c22:	18e1      	adds	r1, r4, r3
 8009c24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c28:	1c5a      	adds	r2, r3, #1
 8009c2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c2e:	4422      	add	r2, r4
 8009c30:	3302      	adds	r3, #2
 8009c32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c36:	e7c4      	b.n	8009bc2 <_printf_common+0x62>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	4622      	mov	r2, r4
 8009c3c:	4639      	mov	r1, r7
 8009c3e:	4630      	mov	r0, r6
 8009c40:	47c0      	blx	r8
 8009c42:	3001      	adds	r0, #1
 8009c44:	d0e6      	beq.n	8009c14 <_printf_common+0xb4>
 8009c46:	f109 0901 	add.w	r9, r9, #1
 8009c4a:	e7d8      	b.n	8009bfe <_printf_common+0x9e>

08009c4c <_printf_i>:
 8009c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009c54:	460c      	mov	r4, r1
 8009c56:	7e09      	ldrb	r1, [r1, #24]
 8009c58:	b085      	sub	sp, #20
 8009c5a:	296e      	cmp	r1, #110	; 0x6e
 8009c5c:	4617      	mov	r7, r2
 8009c5e:	4606      	mov	r6, r0
 8009c60:	4698      	mov	r8, r3
 8009c62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c64:	f000 80b3 	beq.w	8009dce <_printf_i+0x182>
 8009c68:	d822      	bhi.n	8009cb0 <_printf_i+0x64>
 8009c6a:	2963      	cmp	r1, #99	; 0x63
 8009c6c:	d036      	beq.n	8009cdc <_printf_i+0x90>
 8009c6e:	d80a      	bhi.n	8009c86 <_printf_i+0x3a>
 8009c70:	2900      	cmp	r1, #0
 8009c72:	f000 80b9 	beq.w	8009de8 <_printf_i+0x19c>
 8009c76:	2958      	cmp	r1, #88	; 0x58
 8009c78:	f000 8083 	beq.w	8009d82 <_printf_i+0x136>
 8009c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009c84:	e032      	b.n	8009cec <_printf_i+0xa0>
 8009c86:	2964      	cmp	r1, #100	; 0x64
 8009c88:	d001      	beq.n	8009c8e <_printf_i+0x42>
 8009c8a:	2969      	cmp	r1, #105	; 0x69
 8009c8c:	d1f6      	bne.n	8009c7c <_printf_i+0x30>
 8009c8e:	6820      	ldr	r0, [r4, #0]
 8009c90:	6813      	ldr	r3, [r2, #0]
 8009c92:	0605      	lsls	r5, r0, #24
 8009c94:	f103 0104 	add.w	r1, r3, #4
 8009c98:	d52a      	bpl.n	8009cf0 <_printf_i+0xa4>
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	6011      	str	r1, [r2, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	da03      	bge.n	8009caa <_printf_i+0x5e>
 8009ca2:	222d      	movs	r2, #45	; 0x2d
 8009ca4:	425b      	negs	r3, r3
 8009ca6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009caa:	486f      	ldr	r0, [pc, #444]	; (8009e68 <_printf_i+0x21c>)
 8009cac:	220a      	movs	r2, #10
 8009cae:	e039      	b.n	8009d24 <_printf_i+0xd8>
 8009cb0:	2973      	cmp	r1, #115	; 0x73
 8009cb2:	f000 809d 	beq.w	8009df0 <_printf_i+0x1a4>
 8009cb6:	d808      	bhi.n	8009cca <_printf_i+0x7e>
 8009cb8:	296f      	cmp	r1, #111	; 0x6f
 8009cba:	d020      	beq.n	8009cfe <_printf_i+0xb2>
 8009cbc:	2970      	cmp	r1, #112	; 0x70
 8009cbe:	d1dd      	bne.n	8009c7c <_printf_i+0x30>
 8009cc0:	6823      	ldr	r3, [r4, #0]
 8009cc2:	f043 0320 	orr.w	r3, r3, #32
 8009cc6:	6023      	str	r3, [r4, #0]
 8009cc8:	e003      	b.n	8009cd2 <_printf_i+0x86>
 8009cca:	2975      	cmp	r1, #117	; 0x75
 8009ccc:	d017      	beq.n	8009cfe <_printf_i+0xb2>
 8009cce:	2978      	cmp	r1, #120	; 0x78
 8009cd0:	d1d4      	bne.n	8009c7c <_printf_i+0x30>
 8009cd2:	2378      	movs	r3, #120	; 0x78
 8009cd4:	4865      	ldr	r0, [pc, #404]	; (8009e6c <_printf_i+0x220>)
 8009cd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cda:	e055      	b.n	8009d88 <_printf_i+0x13c>
 8009cdc:	6813      	ldr	r3, [r2, #0]
 8009cde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ce2:	1d19      	adds	r1, r3, #4
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6011      	str	r1, [r2, #0]
 8009ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cec:	2301      	movs	r3, #1
 8009cee:	e08c      	b.n	8009e0a <_printf_i+0x1be>
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009cf6:	6011      	str	r1, [r2, #0]
 8009cf8:	bf18      	it	ne
 8009cfa:	b21b      	sxthne	r3, r3
 8009cfc:	e7cf      	b.n	8009c9e <_printf_i+0x52>
 8009cfe:	6813      	ldr	r3, [r2, #0]
 8009d00:	6825      	ldr	r5, [r4, #0]
 8009d02:	1d18      	adds	r0, r3, #4
 8009d04:	6010      	str	r0, [r2, #0]
 8009d06:	0628      	lsls	r0, r5, #24
 8009d08:	d501      	bpl.n	8009d0e <_printf_i+0xc2>
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	e002      	b.n	8009d14 <_printf_i+0xc8>
 8009d0e:	0668      	lsls	r0, r5, #25
 8009d10:	d5fb      	bpl.n	8009d0a <_printf_i+0xbe>
 8009d12:	881b      	ldrh	r3, [r3, #0]
 8009d14:	296f      	cmp	r1, #111	; 0x6f
 8009d16:	bf14      	ite	ne
 8009d18:	220a      	movne	r2, #10
 8009d1a:	2208      	moveq	r2, #8
 8009d1c:	4852      	ldr	r0, [pc, #328]	; (8009e68 <_printf_i+0x21c>)
 8009d1e:	2100      	movs	r1, #0
 8009d20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d24:	6865      	ldr	r5, [r4, #4]
 8009d26:	2d00      	cmp	r5, #0
 8009d28:	60a5      	str	r5, [r4, #8]
 8009d2a:	f2c0 8095 	blt.w	8009e58 <_printf_i+0x20c>
 8009d2e:	6821      	ldr	r1, [r4, #0]
 8009d30:	f021 0104 	bic.w	r1, r1, #4
 8009d34:	6021      	str	r1, [r4, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d13d      	bne.n	8009db6 <_printf_i+0x16a>
 8009d3a:	2d00      	cmp	r5, #0
 8009d3c:	f040 808e 	bne.w	8009e5c <_printf_i+0x210>
 8009d40:	4665      	mov	r5, ip
 8009d42:	2a08      	cmp	r2, #8
 8009d44:	d10b      	bne.n	8009d5e <_printf_i+0x112>
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	07db      	lsls	r3, r3, #31
 8009d4a:	d508      	bpl.n	8009d5e <_printf_i+0x112>
 8009d4c:	6923      	ldr	r3, [r4, #16]
 8009d4e:	6862      	ldr	r2, [r4, #4]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	bfde      	ittt	le
 8009d54:	2330      	movle	r3, #48	; 0x30
 8009d56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d5e:	ebac 0305 	sub.w	r3, ip, r5
 8009d62:	6123      	str	r3, [r4, #16]
 8009d64:	f8cd 8000 	str.w	r8, [sp]
 8009d68:	463b      	mov	r3, r7
 8009d6a:	aa03      	add	r2, sp, #12
 8009d6c:	4621      	mov	r1, r4
 8009d6e:	4630      	mov	r0, r6
 8009d70:	f7ff fef6 	bl	8009b60 <_printf_common>
 8009d74:	3001      	adds	r0, #1
 8009d76:	d14d      	bne.n	8009e14 <_printf_i+0x1c8>
 8009d78:	f04f 30ff 	mov.w	r0, #4294967295
 8009d7c:	b005      	add	sp, #20
 8009d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d82:	4839      	ldr	r0, [pc, #228]	; (8009e68 <_printf_i+0x21c>)
 8009d84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009d88:	6813      	ldr	r3, [r2, #0]
 8009d8a:	6821      	ldr	r1, [r4, #0]
 8009d8c:	1d1d      	adds	r5, r3, #4
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6015      	str	r5, [r2, #0]
 8009d92:	060a      	lsls	r2, r1, #24
 8009d94:	d50b      	bpl.n	8009dae <_printf_i+0x162>
 8009d96:	07ca      	lsls	r2, r1, #31
 8009d98:	bf44      	itt	mi
 8009d9a:	f041 0120 	orrmi.w	r1, r1, #32
 8009d9e:	6021      	strmi	r1, [r4, #0]
 8009da0:	b91b      	cbnz	r3, 8009daa <_printf_i+0x15e>
 8009da2:	6822      	ldr	r2, [r4, #0]
 8009da4:	f022 0220 	bic.w	r2, r2, #32
 8009da8:	6022      	str	r2, [r4, #0]
 8009daa:	2210      	movs	r2, #16
 8009dac:	e7b7      	b.n	8009d1e <_printf_i+0xd2>
 8009dae:	064d      	lsls	r5, r1, #25
 8009db0:	bf48      	it	mi
 8009db2:	b29b      	uxthmi	r3, r3
 8009db4:	e7ef      	b.n	8009d96 <_printf_i+0x14a>
 8009db6:	4665      	mov	r5, ip
 8009db8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009dbc:	fb02 3311 	mls	r3, r2, r1, r3
 8009dc0:	5cc3      	ldrb	r3, [r0, r3]
 8009dc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	2900      	cmp	r1, #0
 8009dca:	d1f5      	bne.n	8009db8 <_printf_i+0x16c>
 8009dcc:	e7b9      	b.n	8009d42 <_printf_i+0xf6>
 8009dce:	6813      	ldr	r3, [r2, #0]
 8009dd0:	6825      	ldr	r5, [r4, #0]
 8009dd2:	1d18      	adds	r0, r3, #4
 8009dd4:	6961      	ldr	r1, [r4, #20]
 8009dd6:	6010      	str	r0, [r2, #0]
 8009dd8:	0628      	lsls	r0, r5, #24
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	d501      	bpl.n	8009de2 <_printf_i+0x196>
 8009dde:	6019      	str	r1, [r3, #0]
 8009de0:	e002      	b.n	8009de8 <_printf_i+0x19c>
 8009de2:	066a      	lsls	r2, r5, #25
 8009de4:	d5fb      	bpl.n	8009dde <_printf_i+0x192>
 8009de6:	8019      	strh	r1, [r3, #0]
 8009de8:	2300      	movs	r3, #0
 8009dea:	4665      	mov	r5, ip
 8009dec:	6123      	str	r3, [r4, #16]
 8009dee:	e7b9      	b.n	8009d64 <_printf_i+0x118>
 8009df0:	6813      	ldr	r3, [r2, #0]
 8009df2:	1d19      	adds	r1, r3, #4
 8009df4:	6011      	str	r1, [r2, #0]
 8009df6:	681d      	ldr	r5, [r3, #0]
 8009df8:	6862      	ldr	r2, [r4, #4]
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	f002 fe77 	bl	800caf0 <memchr>
 8009e02:	b108      	cbz	r0, 8009e08 <_printf_i+0x1bc>
 8009e04:	1b40      	subs	r0, r0, r5
 8009e06:	6060      	str	r0, [r4, #4]
 8009e08:	6863      	ldr	r3, [r4, #4]
 8009e0a:	6123      	str	r3, [r4, #16]
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e12:	e7a7      	b.n	8009d64 <_printf_i+0x118>
 8009e14:	6923      	ldr	r3, [r4, #16]
 8009e16:	462a      	mov	r2, r5
 8009e18:	4639      	mov	r1, r7
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	47c0      	blx	r8
 8009e1e:	3001      	adds	r0, #1
 8009e20:	d0aa      	beq.n	8009d78 <_printf_i+0x12c>
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	079b      	lsls	r3, r3, #30
 8009e26:	d413      	bmi.n	8009e50 <_printf_i+0x204>
 8009e28:	68e0      	ldr	r0, [r4, #12]
 8009e2a:	9b03      	ldr	r3, [sp, #12]
 8009e2c:	4298      	cmp	r0, r3
 8009e2e:	bfb8      	it	lt
 8009e30:	4618      	movlt	r0, r3
 8009e32:	e7a3      	b.n	8009d7c <_printf_i+0x130>
 8009e34:	2301      	movs	r3, #1
 8009e36:	464a      	mov	r2, r9
 8009e38:	4639      	mov	r1, r7
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	47c0      	blx	r8
 8009e3e:	3001      	adds	r0, #1
 8009e40:	d09a      	beq.n	8009d78 <_printf_i+0x12c>
 8009e42:	3501      	adds	r5, #1
 8009e44:	68e3      	ldr	r3, [r4, #12]
 8009e46:	9a03      	ldr	r2, [sp, #12]
 8009e48:	1a9b      	subs	r3, r3, r2
 8009e4a:	42ab      	cmp	r3, r5
 8009e4c:	dcf2      	bgt.n	8009e34 <_printf_i+0x1e8>
 8009e4e:	e7eb      	b.n	8009e28 <_printf_i+0x1dc>
 8009e50:	2500      	movs	r5, #0
 8009e52:	f104 0919 	add.w	r9, r4, #25
 8009e56:	e7f5      	b.n	8009e44 <_printf_i+0x1f8>
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1ac      	bne.n	8009db6 <_printf_i+0x16a>
 8009e5c:	7803      	ldrb	r3, [r0, #0]
 8009e5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e66:	e76c      	b.n	8009d42 <_printf_i+0xf6>
 8009e68:	0800e3d0 	.word	0x0800e3d0
 8009e6c:	0800e3e1 	.word	0x0800e3e1

08009e70 <_scanf_float>:
 8009e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	469a      	mov	sl, r3
 8009e76:	688b      	ldr	r3, [r1, #8]
 8009e78:	4616      	mov	r6, r2
 8009e7a:	1e5a      	subs	r2, r3, #1
 8009e7c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009e80:	bf88      	it	hi
 8009e82:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8009e86:	b087      	sub	sp, #28
 8009e88:	bf85      	ittet	hi
 8009e8a:	189b      	addhi	r3, r3, r2
 8009e8c:	9301      	strhi	r3, [sp, #4]
 8009e8e:	2300      	movls	r3, #0
 8009e90:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009e94:	4688      	mov	r8, r1
 8009e96:	f04f 0b00 	mov.w	fp, #0
 8009e9a:	bf8c      	ite	hi
 8009e9c:	608b      	strhi	r3, [r1, #8]
 8009e9e:	9301      	strls	r3, [sp, #4]
 8009ea0:	680b      	ldr	r3, [r1, #0]
 8009ea2:	4607      	mov	r7, r0
 8009ea4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009ea8:	f848 3b1c 	str.w	r3, [r8], #28
 8009eac:	460c      	mov	r4, r1
 8009eae:	4645      	mov	r5, r8
 8009eb0:	465a      	mov	r2, fp
 8009eb2:	46d9      	mov	r9, fp
 8009eb4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8009eb8:	f8cd b008 	str.w	fp, [sp, #8]
 8009ebc:	68a1      	ldr	r1, [r4, #8]
 8009ebe:	b181      	cbz	r1, 8009ee2 <_scanf_float+0x72>
 8009ec0:	6833      	ldr	r3, [r6, #0]
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	2b49      	cmp	r3, #73	; 0x49
 8009ec6:	d071      	beq.n	8009fac <_scanf_float+0x13c>
 8009ec8:	d84d      	bhi.n	8009f66 <_scanf_float+0xf6>
 8009eca:	2b39      	cmp	r3, #57	; 0x39
 8009ecc:	d840      	bhi.n	8009f50 <_scanf_float+0xe0>
 8009ece:	2b31      	cmp	r3, #49	; 0x31
 8009ed0:	f080 8088 	bcs.w	8009fe4 <_scanf_float+0x174>
 8009ed4:	2b2d      	cmp	r3, #45	; 0x2d
 8009ed6:	f000 8090 	beq.w	8009ffa <_scanf_float+0x18a>
 8009eda:	d815      	bhi.n	8009f08 <_scanf_float+0x98>
 8009edc:	2b2b      	cmp	r3, #43	; 0x2b
 8009ede:	f000 808c 	beq.w	8009ffa <_scanf_float+0x18a>
 8009ee2:	f1b9 0f00 	cmp.w	r9, #0
 8009ee6:	d003      	beq.n	8009ef0 <_scanf_float+0x80>
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009eee:	6023      	str	r3, [r4, #0]
 8009ef0:	3a01      	subs	r2, #1
 8009ef2:	2a01      	cmp	r2, #1
 8009ef4:	f200 80ea 	bhi.w	800a0cc <_scanf_float+0x25c>
 8009ef8:	4545      	cmp	r5, r8
 8009efa:	f200 80dc 	bhi.w	800a0b6 <_scanf_float+0x246>
 8009efe:	2601      	movs	r6, #1
 8009f00:	4630      	mov	r0, r6
 8009f02:	b007      	add	sp, #28
 8009f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f08:	2b2e      	cmp	r3, #46	; 0x2e
 8009f0a:	f000 809f 	beq.w	800a04c <_scanf_float+0x1dc>
 8009f0e:	2b30      	cmp	r3, #48	; 0x30
 8009f10:	d1e7      	bne.n	8009ee2 <_scanf_float+0x72>
 8009f12:	6820      	ldr	r0, [r4, #0]
 8009f14:	f410 7f80 	tst.w	r0, #256	; 0x100
 8009f18:	d064      	beq.n	8009fe4 <_scanf_float+0x174>
 8009f1a:	9b01      	ldr	r3, [sp, #4]
 8009f1c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8009f20:	6020      	str	r0, [r4, #0]
 8009f22:	f109 0901 	add.w	r9, r9, #1
 8009f26:	b11b      	cbz	r3, 8009f30 <_scanf_float+0xc0>
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	3101      	adds	r1, #1
 8009f2c:	9301      	str	r3, [sp, #4]
 8009f2e:	60a1      	str	r1, [r4, #8]
 8009f30:	68a3      	ldr	r3, [r4, #8]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	60a3      	str	r3, [r4, #8]
 8009f36:	6923      	ldr	r3, [r4, #16]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	6123      	str	r3, [r4, #16]
 8009f3c:	6873      	ldr	r3, [r6, #4]
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	6073      	str	r3, [r6, #4]
 8009f44:	f340 80ac 	ble.w	800a0a0 <_scanf_float+0x230>
 8009f48:	6833      	ldr	r3, [r6, #0]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	6033      	str	r3, [r6, #0]
 8009f4e:	e7b5      	b.n	8009ebc <_scanf_float+0x4c>
 8009f50:	2b45      	cmp	r3, #69	; 0x45
 8009f52:	f000 8085 	beq.w	800a060 <_scanf_float+0x1f0>
 8009f56:	2b46      	cmp	r3, #70	; 0x46
 8009f58:	d06a      	beq.n	800a030 <_scanf_float+0x1c0>
 8009f5a:	2b41      	cmp	r3, #65	; 0x41
 8009f5c:	d1c1      	bne.n	8009ee2 <_scanf_float+0x72>
 8009f5e:	2a01      	cmp	r2, #1
 8009f60:	d1bf      	bne.n	8009ee2 <_scanf_float+0x72>
 8009f62:	2202      	movs	r2, #2
 8009f64:	e046      	b.n	8009ff4 <_scanf_float+0x184>
 8009f66:	2b65      	cmp	r3, #101	; 0x65
 8009f68:	d07a      	beq.n	800a060 <_scanf_float+0x1f0>
 8009f6a:	d818      	bhi.n	8009f9e <_scanf_float+0x12e>
 8009f6c:	2b54      	cmp	r3, #84	; 0x54
 8009f6e:	d066      	beq.n	800a03e <_scanf_float+0x1ce>
 8009f70:	d811      	bhi.n	8009f96 <_scanf_float+0x126>
 8009f72:	2b4e      	cmp	r3, #78	; 0x4e
 8009f74:	d1b5      	bne.n	8009ee2 <_scanf_float+0x72>
 8009f76:	2a00      	cmp	r2, #0
 8009f78:	d146      	bne.n	800a008 <_scanf_float+0x198>
 8009f7a:	f1b9 0f00 	cmp.w	r9, #0
 8009f7e:	d145      	bne.n	800a00c <_scanf_float+0x19c>
 8009f80:	6821      	ldr	r1, [r4, #0]
 8009f82:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009f86:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009f8a:	d13f      	bne.n	800a00c <_scanf_float+0x19c>
 8009f8c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009f90:	6021      	str	r1, [r4, #0]
 8009f92:	2201      	movs	r2, #1
 8009f94:	e02e      	b.n	8009ff4 <_scanf_float+0x184>
 8009f96:	2b59      	cmp	r3, #89	; 0x59
 8009f98:	d01e      	beq.n	8009fd8 <_scanf_float+0x168>
 8009f9a:	2b61      	cmp	r3, #97	; 0x61
 8009f9c:	e7de      	b.n	8009f5c <_scanf_float+0xec>
 8009f9e:	2b6e      	cmp	r3, #110	; 0x6e
 8009fa0:	d0e9      	beq.n	8009f76 <_scanf_float+0x106>
 8009fa2:	d815      	bhi.n	8009fd0 <_scanf_float+0x160>
 8009fa4:	2b66      	cmp	r3, #102	; 0x66
 8009fa6:	d043      	beq.n	800a030 <_scanf_float+0x1c0>
 8009fa8:	2b69      	cmp	r3, #105	; 0x69
 8009faa:	d19a      	bne.n	8009ee2 <_scanf_float+0x72>
 8009fac:	f1bb 0f00 	cmp.w	fp, #0
 8009fb0:	d138      	bne.n	800a024 <_scanf_float+0x1b4>
 8009fb2:	f1b9 0f00 	cmp.w	r9, #0
 8009fb6:	d197      	bne.n	8009ee8 <_scanf_float+0x78>
 8009fb8:	6821      	ldr	r1, [r4, #0]
 8009fba:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009fbe:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009fc2:	d195      	bne.n	8009ef0 <_scanf_float+0x80>
 8009fc4:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009fc8:	6021      	str	r1, [r4, #0]
 8009fca:	f04f 0b01 	mov.w	fp, #1
 8009fce:	e011      	b.n	8009ff4 <_scanf_float+0x184>
 8009fd0:	2b74      	cmp	r3, #116	; 0x74
 8009fd2:	d034      	beq.n	800a03e <_scanf_float+0x1ce>
 8009fd4:	2b79      	cmp	r3, #121	; 0x79
 8009fd6:	d184      	bne.n	8009ee2 <_scanf_float+0x72>
 8009fd8:	f1bb 0f07 	cmp.w	fp, #7
 8009fdc:	d181      	bne.n	8009ee2 <_scanf_float+0x72>
 8009fde:	f04f 0b08 	mov.w	fp, #8
 8009fe2:	e007      	b.n	8009ff4 <_scanf_float+0x184>
 8009fe4:	eb12 0f0b 	cmn.w	r2, fp
 8009fe8:	f47f af7b 	bne.w	8009ee2 <_scanf_float+0x72>
 8009fec:	6821      	ldr	r1, [r4, #0]
 8009fee:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8009ff2:	6021      	str	r1, [r4, #0]
 8009ff4:	702b      	strb	r3, [r5, #0]
 8009ff6:	3501      	adds	r5, #1
 8009ff8:	e79a      	b.n	8009f30 <_scanf_float+0xc0>
 8009ffa:	6821      	ldr	r1, [r4, #0]
 8009ffc:	0608      	lsls	r0, r1, #24
 8009ffe:	f57f af70 	bpl.w	8009ee2 <_scanf_float+0x72>
 800a002:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a006:	e7f4      	b.n	8009ff2 <_scanf_float+0x182>
 800a008:	2a02      	cmp	r2, #2
 800a00a:	d047      	beq.n	800a09c <_scanf_float+0x22c>
 800a00c:	f1bb 0f01 	cmp.w	fp, #1
 800a010:	d003      	beq.n	800a01a <_scanf_float+0x1aa>
 800a012:	f1bb 0f04 	cmp.w	fp, #4
 800a016:	f47f af64 	bne.w	8009ee2 <_scanf_float+0x72>
 800a01a:	f10b 0b01 	add.w	fp, fp, #1
 800a01e:	fa5f fb8b 	uxtb.w	fp, fp
 800a022:	e7e7      	b.n	8009ff4 <_scanf_float+0x184>
 800a024:	f1bb 0f03 	cmp.w	fp, #3
 800a028:	d0f7      	beq.n	800a01a <_scanf_float+0x1aa>
 800a02a:	f1bb 0f05 	cmp.w	fp, #5
 800a02e:	e7f2      	b.n	800a016 <_scanf_float+0x1a6>
 800a030:	f1bb 0f02 	cmp.w	fp, #2
 800a034:	f47f af55 	bne.w	8009ee2 <_scanf_float+0x72>
 800a038:	f04f 0b03 	mov.w	fp, #3
 800a03c:	e7da      	b.n	8009ff4 <_scanf_float+0x184>
 800a03e:	f1bb 0f06 	cmp.w	fp, #6
 800a042:	f47f af4e 	bne.w	8009ee2 <_scanf_float+0x72>
 800a046:	f04f 0b07 	mov.w	fp, #7
 800a04a:	e7d3      	b.n	8009ff4 <_scanf_float+0x184>
 800a04c:	6821      	ldr	r1, [r4, #0]
 800a04e:	0588      	lsls	r0, r1, #22
 800a050:	f57f af47 	bpl.w	8009ee2 <_scanf_float+0x72>
 800a054:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800a058:	6021      	str	r1, [r4, #0]
 800a05a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a05e:	e7c9      	b.n	8009ff4 <_scanf_float+0x184>
 800a060:	6821      	ldr	r1, [r4, #0]
 800a062:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800a066:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a06a:	d006      	beq.n	800a07a <_scanf_float+0x20a>
 800a06c:	0548      	lsls	r0, r1, #21
 800a06e:	f57f af38 	bpl.w	8009ee2 <_scanf_float+0x72>
 800a072:	f1b9 0f00 	cmp.w	r9, #0
 800a076:	f43f af3b 	beq.w	8009ef0 <_scanf_float+0x80>
 800a07a:	0588      	lsls	r0, r1, #22
 800a07c:	bf58      	it	pl
 800a07e:	9802      	ldrpl	r0, [sp, #8]
 800a080:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a084:	bf58      	it	pl
 800a086:	eba9 0000 	subpl.w	r0, r9, r0
 800a08a:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800a08e:	bf58      	it	pl
 800a090:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800a094:	6021      	str	r1, [r4, #0]
 800a096:	f04f 0900 	mov.w	r9, #0
 800a09a:	e7ab      	b.n	8009ff4 <_scanf_float+0x184>
 800a09c:	2203      	movs	r2, #3
 800a09e:	e7a9      	b.n	8009ff4 <_scanf_float+0x184>
 800a0a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a0a4:	4631      	mov	r1, r6
 800a0a6:	4638      	mov	r0, r7
 800a0a8:	9205      	str	r2, [sp, #20]
 800a0aa:	4798      	blx	r3
 800a0ac:	9a05      	ldr	r2, [sp, #20]
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	f43f af04 	beq.w	8009ebc <_scanf_float+0x4c>
 800a0b4:	e715      	b.n	8009ee2 <_scanf_float+0x72>
 800a0b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0ba:	4632      	mov	r2, r6
 800a0bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	4798      	blx	r3
 800a0c4:	6923      	ldr	r3, [r4, #16]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	6123      	str	r3, [r4, #16]
 800a0ca:	e715      	b.n	8009ef8 <_scanf_float+0x88>
 800a0cc:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a0d0:	2b06      	cmp	r3, #6
 800a0d2:	d80a      	bhi.n	800a0ea <_scanf_float+0x27a>
 800a0d4:	f1bb 0f02 	cmp.w	fp, #2
 800a0d8:	d967      	bls.n	800a1aa <_scanf_float+0x33a>
 800a0da:	f1ab 0b03 	sub.w	fp, fp, #3
 800a0de:	fa5f fb8b 	uxtb.w	fp, fp
 800a0e2:	eba5 0b0b 	sub.w	fp, r5, fp
 800a0e6:	455d      	cmp	r5, fp
 800a0e8:	d14a      	bne.n	800a180 <_scanf_float+0x310>
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	05da      	lsls	r2, r3, #23
 800a0ee:	d51f      	bpl.n	800a130 <_scanf_float+0x2c0>
 800a0f0:	055b      	lsls	r3, r3, #21
 800a0f2:	d467      	bmi.n	800a1c4 <_scanf_float+0x354>
 800a0f4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a0f8:	6923      	ldr	r3, [r4, #16]
 800a0fa:	2965      	cmp	r1, #101	; 0x65
 800a0fc:	f103 33ff 	add.w	r3, r3, #4294967295
 800a100:	f105 3bff 	add.w	fp, r5, #4294967295
 800a104:	6123      	str	r3, [r4, #16]
 800a106:	d00d      	beq.n	800a124 <_scanf_float+0x2b4>
 800a108:	2945      	cmp	r1, #69	; 0x45
 800a10a:	d00b      	beq.n	800a124 <_scanf_float+0x2b4>
 800a10c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a110:	4632      	mov	r2, r6
 800a112:	4638      	mov	r0, r7
 800a114:	4798      	blx	r3
 800a116:	6923      	ldr	r3, [r4, #16]
 800a118:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800a11c:	3b01      	subs	r3, #1
 800a11e:	f1a5 0b02 	sub.w	fp, r5, #2
 800a122:	6123      	str	r3, [r4, #16]
 800a124:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a128:	4632      	mov	r2, r6
 800a12a:	4638      	mov	r0, r7
 800a12c:	4798      	blx	r3
 800a12e:	465d      	mov	r5, fp
 800a130:	6826      	ldr	r6, [r4, #0]
 800a132:	f016 0610 	ands.w	r6, r6, #16
 800a136:	d176      	bne.n	800a226 <_scanf_float+0x3b6>
 800a138:	702e      	strb	r6, [r5, #0]
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a144:	d141      	bne.n	800a1ca <_scanf_float+0x35a>
 800a146:	9b02      	ldr	r3, [sp, #8]
 800a148:	eba9 0303 	sub.w	r3, r9, r3
 800a14c:	425a      	negs	r2, r3
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d148      	bne.n	800a1e4 <_scanf_float+0x374>
 800a152:	4641      	mov	r1, r8
 800a154:	2200      	movs	r2, #0
 800a156:	4638      	mov	r0, r7
 800a158:	f000 ffb2 	bl	800b0c0 <_strtod_r>
 800a15c:	6825      	ldr	r5, [r4, #0]
 800a15e:	4680      	mov	r8, r0
 800a160:	f015 0f02 	tst.w	r5, #2
 800a164:	4689      	mov	r9, r1
 800a166:	f8da 3000 	ldr.w	r3, [sl]
 800a16a:	d046      	beq.n	800a1fa <_scanf_float+0x38a>
 800a16c:	1d1a      	adds	r2, r3, #4
 800a16e:	f8ca 2000 	str.w	r2, [sl]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	e9c3 8900 	strd	r8, r9, [r3]
 800a178:	68e3      	ldr	r3, [r4, #12]
 800a17a:	3301      	adds	r3, #1
 800a17c:	60e3      	str	r3, [r4, #12]
 800a17e:	e6bf      	b.n	8009f00 <_scanf_float+0x90>
 800a180:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a184:	4632      	mov	r2, r6
 800a186:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a18a:	4638      	mov	r0, r7
 800a18c:	4798      	blx	r3
 800a18e:	6923      	ldr	r3, [r4, #16]
 800a190:	3b01      	subs	r3, #1
 800a192:	6123      	str	r3, [r4, #16]
 800a194:	e7a7      	b.n	800a0e6 <_scanf_float+0x276>
 800a196:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a19a:	4632      	mov	r2, r6
 800a19c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a1a0:	4638      	mov	r0, r7
 800a1a2:	4798      	blx	r3
 800a1a4:	6923      	ldr	r3, [r4, #16]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	6123      	str	r3, [r4, #16]
 800a1aa:	4545      	cmp	r5, r8
 800a1ac:	d8f3      	bhi.n	800a196 <_scanf_float+0x326>
 800a1ae:	e6a6      	b.n	8009efe <_scanf_float+0x8e>
 800a1b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1b4:	4632      	mov	r2, r6
 800a1b6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	4798      	blx	r3
 800a1be:	6923      	ldr	r3, [r4, #16]
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	6123      	str	r3, [r4, #16]
 800a1c4:	4545      	cmp	r5, r8
 800a1c6:	d8f3      	bhi.n	800a1b0 <_scanf_float+0x340>
 800a1c8:	e699      	b.n	8009efe <_scanf_float+0x8e>
 800a1ca:	9b03      	ldr	r3, [sp, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d0c0      	beq.n	800a152 <_scanf_float+0x2e2>
 800a1d0:	9904      	ldr	r1, [sp, #16]
 800a1d2:	230a      	movs	r3, #10
 800a1d4:	4632      	mov	r2, r6
 800a1d6:	3101      	adds	r1, #1
 800a1d8:	4638      	mov	r0, r7
 800a1da:	f000 fffd 	bl	800b1d8 <_strtol_r>
 800a1de:	9b03      	ldr	r3, [sp, #12]
 800a1e0:	9d04      	ldr	r5, [sp, #16]
 800a1e2:	1ac2      	subs	r2, r0, r3
 800a1e4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a1e8:	429d      	cmp	r5, r3
 800a1ea:	bf28      	it	cs
 800a1ec:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800a1f0:	490e      	ldr	r1, [pc, #56]	; (800a22c <_scanf_float+0x3bc>)
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	f000 f89c 	bl	800a330 <siprintf>
 800a1f8:	e7ab      	b.n	800a152 <_scanf_float+0x2e2>
 800a1fa:	1d1f      	adds	r7, r3, #4
 800a1fc:	f015 0504 	ands.w	r5, r5, #4
 800a200:	f8ca 7000 	str.w	r7, [sl]
 800a204:	d1b5      	bne.n	800a172 <_scanf_float+0x302>
 800a206:	681f      	ldr	r7, [r3, #0]
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	f7f6 fbfe 	bl	8000a0c <__aeabi_dcmpun>
 800a210:	b120      	cbz	r0, 800a21c <_scanf_float+0x3ac>
 800a212:	4628      	mov	r0, r5
 800a214:	f000 f888 	bl	800a328 <nanf>
 800a218:	6038      	str	r0, [r7, #0]
 800a21a:	e7ad      	b.n	800a178 <_scanf_float+0x308>
 800a21c:	4640      	mov	r0, r8
 800a21e:	4649      	mov	r1, r9
 800a220:	f7f6 fc52 	bl	8000ac8 <__aeabi_d2f>
 800a224:	e7f8      	b.n	800a218 <_scanf_float+0x3a8>
 800a226:	2600      	movs	r6, #0
 800a228:	e66a      	b.n	8009f00 <_scanf_float+0x90>
 800a22a:	bf00      	nop
 800a22c:	0800e3f2 	.word	0x0800e3f2

0800a230 <iprintf>:
 800a230:	b40f      	push	{r0, r1, r2, r3}
 800a232:	4b0a      	ldr	r3, [pc, #40]	; (800a25c <iprintf+0x2c>)
 800a234:	b513      	push	{r0, r1, r4, lr}
 800a236:	681c      	ldr	r4, [r3, #0]
 800a238:	b124      	cbz	r4, 800a244 <iprintf+0x14>
 800a23a:	69a3      	ldr	r3, [r4, #24]
 800a23c:	b913      	cbnz	r3, 800a244 <iprintf+0x14>
 800a23e:	4620      	mov	r0, r4
 800a240:	f001 fff2 	bl	800c228 <__sinit>
 800a244:	ab05      	add	r3, sp, #20
 800a246:	9a04      	ldr	r2, [sp, #16]
 800a248:	68a1      	ldr	r1, [r4, #8]
 800a24a:	4620      	mov	r0, r4
 800a24c:	9301      	str	r3, [sp, #4]
 800a24e:	f003 fc39 	bl	800dac4 <_vfiprintf_r>
 800a252:	b002      	add	sp, #8
 800a254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a258:	b004      	add	sp, #16
 800a25a:	4770      	bx	lr
 800a25c:	2000017c 	.word	0x2000017c

0800a260 <_puts_r>:
 800a260:	b570      	push	{r4, r5, r6, lr}
 800a262:	460e      	mov	r6, r1
 800a264:	4605      	mov	r5, r0
 800a266:	b118      	cbz	r0, 800a270 <_puts_r+0x10>
 800a268:	6983      	ldr	r3, [r0, #24]
 800a26a:	b90b      	cbnz	r3, 800a270 <_puts_r+0x10>
 800a26c:	f001 ffdc 	bl	800c228 <__sinit>
 800a270:	69ab      	ldr	r3, [r5, #24]
 800a272:	68ac      	ldr	r4, [r5, #8]
 800a274:	b913      	cbnz	r3, 800a27c <_puts_r+0x1c>
 800a276:	4628      	mov	r0, r5
 800a278:	f001 ffd6 	bl	800c228 <__sinit>
 800a27c:	4b23      	ldr	r3, [pc, #140]	; (800a30c <_puts_r+0xac>)
 800a27e:	429c      	cmp	r4, r3
 800a280:	d117      	bne.n	800a2b2 <_puts_r+0x52>
 800a282:	686c      	ldr	r4, [r5, #4]
 800a284:	89a3      	ldrh	r3, [r4, #12]
 800a286:	071b      	lsls	r3, r3, #28
 800a288:	d51d      	bpl.n	800a2c6 <_puts_r+0x66>
 800a28a:	6923      	ldr	r3, [r4, #16]
 800a28c:	b1db      	cbz	r3, 800a2c6 <_puts_r+0x66>
 800a28e:	3e01      	subs	r6, #1
 800a290:	68a3      	ldr	r3, [r4, #8]
 800a292:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a296:	3b01      	subs	r3, #1
 800a298:	60a3      	str	r3, [r4, #8]
 800a29a:	b9e9      	cbnz	r1, 800a2d8 <_puts_r+0x78>
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	da2e      	bge.n	800a2fe <_puts_r+0x9e>
 800a2a0:	4622      	mov	r2, r4
 800a2a2:	210a      	movs	r1, #10
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	f000 ffa9 	bl	800b1fc <__swbuf_r>
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	d011      	beq.n	800a2d2 <_puts_r+0x72>
 800a2ae:	200a      	movs	r0, #10
 800a2b0:	e011      	b.n	800a2d6 <_puts_r+0x76>
 800a2b2:	4b17      	ldr	r3, [pc, #92]	; (800a310 <_puts_r+0xb0>)
 800a2b4:	429c      	cmp	r4, r3
 800a2b6:	d101      	bne.n	800a2bc <_puts_r+0x5c>
 800a2b8:	68ac      	ldr	r4, [r5, #8]
 800a2ba:	e7e3      	b.n	800a284 <_puts_r+0x24>
 800a2bc:	4b15      	ldr	r3, [pc, #84]	; (800a314 <_puts_r+0xb4>)
 800a2be:	429c      	cmp	r4, r3
 800a2c0:	bf08      	it	eq
 800a2c2:	68ec      	ldreq	r4, [r5, #12]
 800a2c4:	e7de      	b.n	800a284 <_puts_r+0x24>
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	f000 fffb 	bl	800b2c4 <__swsetup_r>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d0dd      	beq.n	800a28e <_puts_r+0x2e>
 800a2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d6:	bd70      	pop	{r4, r5, r6, pc}
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	da04      	bge.n	800a2e6 <_puts_r+0x86>
 800a2dc:	69a2      	ldr	r2, [r4, #24]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	dc06      	bgt.n	800a2f0 <_puts_r+0x90>
 800a2e2:	290a      	cmp	r1, #10
 800a2e4:	d004      	beq.n	800a2f0 <_puts_r+0x90>
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	1c5a      	adds	r2, r3, #1
 800a2ea:	6022      	str	r2, [r4, #0]
 800a2ec:	7019      	strb	r1, [r3, #0]
 800a2ee:	e7cf      	b.n	800a290 <_puts_r+0x30>
 800a2f0:	4622      	mov	r2, r4
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	f000 ff82 	bl	800b1fc <__swbuf_r>
 800a2f8:	3001      	adds	r0, #1
 800a2fa:	d1c9      	bne.n	800a290 <_puts_r+0x30>
 800a2fc:	e7e9      	b.n	800a2d2 <_puts_r+0x72>
 800a2fe:	200a      	movs	r0, #10
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	1c5a      	adds	r2, r3, #1
 800a304:	6022      	str	r2, [r4, #0]
 800a306:	7018      	strb	r0, [r3, #0]
 800a308:	e7e5      	b.n	800a2d6 <_puts_r+0x76>
 800a30a:	bf00      	nop
 800a30c:	0800e478 	.word	0x0800e478
 800a310:	0800e498 	.word	0x0800e498
 800a314:	0800e458 	.word	0x0800e458

0800a318 <puts>:
 800a318:	4b02      	ldr	r3, [pc, #8]	; (800a324 <puts+0xc>)
 800a31a:	4601      	mov	r1, r0
 800a31c:	6818      	ldr	r0, [r3, #0]
 800a31e:	f7ff bf9f 	b.w	800a260 <_puts_r>
 800a322:	bf00      	nop
 800a324:	2000017c 	.word	0x2000017c

0800a328 <nanf>:
 800a328:	4800      	ldr	r0, [pc, #0]	; (800a32c <nanf+0x4>)
 800a32a:	4770      	bx	lr
 800a32c:	7fc00000 	.word	0x7fc00000

0800a330 <siprintf>:
 800a330:	b40e      	push	{r1, r2, r3}
 800a332:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a336:	b500      	push	{lr}
 800a338:	b09c      	sub	sp, #112	; 0x70
 800a33a:	ab1d      	add	r3, sp, #116	; 0x74
 800a33c:	9002      	str	r0, [sp, #8]
 800a33e:	9006      	str	r0, [sp, #24]
 800a340:	9107      	str	r1, [sp, #28]
 800a342:	9104      	str	r1, [sp, #16]
 800a344:	4808      	ldr	r0, [pc, #32]	; (800a368 <siprintf+0x38>)
 800a346:	4909      	ldr	r1, [pc, #36]	; (800a36c <siprintf+0x3c>)
 800a348:	f853 2b04 	ldr.w	r2, [r3], #4
 800a34c:	9105      	str	r1, [sp, #20]
 800a34e:	6800      	ldr	r0, [r0, #0]
 800a350:	a902      	add	r1, sp, #8
 800a352:	9301      	str	r3, [sp, #4]
 800a354:	f003 f8ec 	bl	800d530 <_svfiprintf_r>
 800a358:	2200      	movs	r2, #0
 800a35a:	9b02      	ldr	r3, [sp, #8]
 800a35c:	701a      	strb	r2, [r3, #0]
 800a35e:	b01c      	add	sp, #112	; 0x70
 800a360:	f85d eb04 	ldr.w	lr, [sp], #4
 800a364:	b003      	add	sp, #12
 800a366:	4770      	bx	lr
 800a368:	2000017c 	.word	0x2000017c
 800a36c:	ffff0208 	.word	0xffff0208

0800a370 <siscanf>:
 800a370:	b40e      	push	{r1, r2, r3}
 800a372:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a376:	b530      	push	{r4, r5, lr}
 800a378:	b09c      	sub	sp, #112	; 0x70
 800a37a:	ac1f      	add	r4, sp, #124	; 0x7c
 800a37c:	f854 5b04 	ldr.w	r5, [r4], #4
 800a380:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a384:	9002      	str	r0, [sp, #8]
 800a386:	9006      	str	r0, [sp, #24]
 800a388:	f7f5 fee2 	bl	8000150 <strlen>
 800a38c:	4b0b      	ldr	r3, [pc, #44]	; (800a3bc <siscanf+0x4c>)
 800a38e:	9003      	str	r0, [sp, #12]
 800a390:	930b      	str	r3, [sp, #44]	; 0x2c
 800a392:	2300      	movs	r3, #0
 800a394:	930f      	str	r3, [sp, #60]	; 0x3c
 800a396:	9314      	str	r3, [sp, #80]	; 0x50
 800a398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a39c:	9007      	str	r0, [sp, #28]
 800a39e:	4808      	ldr	r0, [pc, #32]	; (800a3c0 <siscanf+0x50>)
 800a3a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a3a4:	462a      	mov	r2, r5
 800a3a6:	4623      	mov	r3, r4
 800a3a8:	a902      	add	r1, sp, #8
 800a3aa:	6800      	ldr	r0, [r0, #0]
 800a3ac:	9401      	str	r4, [sp, #4]
 800a3ae:	f003 fa11 	bl	800d7d4 <__ssvfiscanf_r>
 800a3b2:	b01c      	add	sp, #112	; 0x70
 800a3b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3b8:	b003      	add	sp, #12
 800a3ba:	4770      	bx	lr
 800a3bc:	0800a3e7 	.word	0x0800a3e7
 800a3c0:	2000017c 	.word	0x2000017c

0800a3c4 <__sread>:
 800a3c4:	b510      	push	{r4, lr}
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3cc:	f003 fde8 	bl	800dfa0 <_read_r>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	bfab      	itete	ge
 800a3d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a3d8:	181b      	addge	r3, r3, r0
 800a3da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3de:	bfac      	ite	ge
 800a3e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3e2:	81a3      	strhlt	r3, [r4, #12]
 800a3e4:	bd10      	pop	{r4, pc}

0800a3e6 <__seofread>:
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	4770      	bx	lr

0800a3ea <__swrite>:
 800a3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ee:	461f      	mov	r7, r3
 800a3f0:	898b      	ldrh	r3, [r1, #12]
 800a3f2:	4605      	mov	r5, r0
 800a3f4:	05db      	lsls	r3, r3, #23
 800a3f6:	460c      	mov	r4, r1
 800a3f8:	4616      	mov	r6, r2
 800a3fa:	d505      	bpl.n	800a408 <__swrite+0x1e>
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	2200      	movs	r2, #0
 800a400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a404:	f002 fae4 	bl	800c9d0 <_lseek_r>
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	4632      	mov	r2, r6
 800a40c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a410:	81a3      	strh	r3, [r4, #12]
 800a412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a416:	463b      	mov	r3, r7
 800a418:	4628      	mov	r0, r5
 800a41a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a41e:	f000 bf3f 	b.w	800b2a0 <_write_r>

0800a422 <__sseek>:
 800a422:	b510      	push	{r4, lr}
 800a424:	460c      	mov	r4, r1
 800a426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a42a:	f002 fad1 	bl	800c9d0 <_lseek_r>
 800a42e:	1c43      	adds	r3, r0, #1
 800a430:	89a3      	ldrh	r3, [r4, #12]
 800a432:	bf15      	itete	ne
 800a434:	6560      	strne	r0, [r4, #84]	; 0x54
 800a436:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a43a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a43e:	81a3      	strheq	r3, [r4, #12]
 800a440:	bf18      	it	ne
 800a442:	81a3      	strhne	r3, [r4, #12]
 800a444:	bd10      	pop	{r4, pc}

0800a446 <__sclose>:
 800a446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a44a:	f000 bfa9 	b.w	800b3a0 <_close_r>

0800a44e <strlcpy>:
 800a44e:	b510      	push	{r4, lr}
 800a450:	460b      	mov	r3, r1
 800a452:	b162      	cbz	r2, 800a46e <strlcpy+0x20>
 800a454:	3a01      	subs	r2, #1
 800a456:	d008      	beq.n	800a46a <strlcpy+0x1c>
 800a458:	f813 4b01 	ldrb.w	r4, [r3], #1
 800a45c:	f800 4b01 	strb.w	r4, [r0], #1
 800a460:	2c00      	cmp	r4, #0
 800a462:	d1f7      	bne.n	800a454 <strlcpy+0x6>
 800a464:	1a58      	subs	r0, r3, r1
 800a466:	3801      	subs	r0, #1
 800a468:	bd10      	pop	{r4, pc}
 800a46a:	2200      	movs	r2, #0
 800a46c:	7002      	strb	r2, [r0, #0]
 800a46e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a472:	2a00      	cmp	r2, #0
 800a474:	d1fb      	bne.n	800a46e <strlcpy+0x20>
 800a476:	e7f5      	b.n	800a464 <strlcpy+0x16>

0800a478 <sulp>:
 800a478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a47c:	460f      	mov	r7, r1
 800a47e:	4690      	mov	r8, r2
 800a480:	f002 fe1a 	bl	800d0b8 <__ulp>
 800a484:	4604      	mov	r4, r0
 800a486:	460d      	mov	r5, r1
 800a488:	f1b8 0f00 	cmp.w	r8, #0
 800a48c:	d011      	beq.n	800a4b2 <sulp+0x3a>
 800a48e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a492:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a496:	2b00      	cmp	r3, #0
 800a498:	dd0b      	ble.n	800a4b2 <sulp+0x3a>
 800a49a:	2400      	movs	r4, #0
 800a49c:	051b      	lsls	r3, r3, #20
 800a49e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a4a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a4a6:	4622      	mov	r2, r4
 800a4a8:	462b      	mov	r3, r5
 800a4aa:	f7f6 f815 	bl	80004d8 <__aeabi_dmul>
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	460d      	mov	r5, r1
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	4629      	mov	r1, r5
 800a4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4ba:	0000      	movs	r0, r0
 800a4bc:	0000      	movs	r0, r0
	...

0800a4c0 <_strtod_l>:
 800a4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c4:	461f      	mov	r7, r3
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	b0a1      	sub	sp, #132	; 0x84
 800a4ca:	4683      	mov	fp, r0
 800a4cc:	4638      	mov	r0, r7
 800a4ce:	460e      	mov	r6, r1
 800a4d0:	9217      	str	r2, [sp, #92]	; 0x5c
 800a4d2:	931c      	str	r3, [sp, #112]	; 0x70
 800a4d4:	f002 fa6c 	bl	800c9b0 <__localeconv_l>
 800a4d8:	4680      	mov	r8, r0
 800a4da:	6800      	ldr	r0, [r0, #0]
 800a4dc:	f7f5 fe38 	bl	8000150 <strlen>
 800a4e0:	f04f 0900 	mov.w	r9, #0
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	f04f 0a00 	mov.w	sl, #0
 800a4ea:	961b      	str	r6, [sp, #108]	; 0x6c
 800a4ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4ee:	781a      	ldrb	r2, [r3, #0]
 800a4f0:	2a0d      	cmp	r2, #13
 800a4f2:	d832      	bhi.n	800a55a <_strtod_l+0x9a>
 800a4f4:	2a09      	cmp	r2, #9
 800a4f6:	d236      	bcs.n	800a566 <_strtod_l+0xa6>
 800a4f8:	2a00      	cmp	r2, #0
 800a4fa:	d03e      	beq.n	800a57a <_strtod_l+0xba>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	930d      	str	r3, [sp, #52]	; 0x34
 800a500:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a502:	782b      	ldrb	r3, [r5, #0]
 800a504:	2b30      	cmp	r3, #48	; 0x30
 800a506:	f040 80ac 	bne.w	800a662 <_strtod_l+0x1a2>
 800a50a:	786b      	ldrb	r3, [r5, #1]
 800a50c:	2b58      	cmp	r3, #88	; 0x58
 800a50e:	d001      	beq.n	800a514 <_strtod_l+0x54>
 800a510:	2b78      	cmp	r3, #120	; 0x78
 800a512:	d167      	bne.n	800a5e4 <_strtod_l+0x124>
 800a514:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a516:	9702      	str	r7, [sp, #8]
 800a518:	9301      	str	r3, [sp, #4]
 800a51a:	ab1c      	add	r3, sp, #112	; 0x70
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	4a89      	ldr	r2, [pc, #548]	; (800a744 <_strtod_l+0x284>)
 800a520:	ab1d      	add	r3, sp, #116	; 0x74
 800a522:	a91b      	add	r1, sp, #108	; 0x6c
 800a524:	4658      	mov	r0, fp
 800a526:	f001 ff59 	bl	800c3dc <__gethex>
 800a52a:	f010 0407 	ands.w	r4, r0, #7
 800a52e:	4606      	mov	r6, r0
 800a530:	d005      	beq.n	800a53e <_strtod_l+0x7e>
 800a532:	2c06      	cmp	r4, #6
 800a534:	d12b      	bne.n	800a58e <_strtod_l+0xce>
 800a536:	2300      	movs	r3, #0
 800a538:	3501      	adds	r5, #1
 800a53a:	951b      	str	r5, [sp, #108]	; 0x6c
 800a53c:	930d      	str	r3, [sp, #52]	; 0x34
 800a53e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a540:	2b00      	cmp	r3, #0
 800a542:	f040 85a6 	bne.w	800b092 <_strtod_l+0xbd2>
 800a546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a548:	b1e3      	cbz	r3, 800a584 <_strtod_l+0xc4>
 800a54a:	464a      	mov	r2, r9
 800a54c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800a550:	4610      	mov	r0, r2
 800a552:	4619      	mov	r1, r3
 800a554:	b021      	add	sp, #132	; 0x84
 800a556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55a:	2a2b      	cmp	r2, #43	; 0x2b
 800a55c:	d015      	beq.n	800a58a <_strtod_l+0xca>
 800a55e:	2a2d      	cmp	r2, #45	; 0x2d
 800a560:	d004      	beq.n	800a56c <_strtod_l+0xac>
 800a562:	2a20      	cmp	r2, #32
 800a564:	d1ca      	bne.n	800a4fc <_strtod_l+0x3c>
 800a566:	3301      	adds	r3, #1
 800a568:	931b      	str	r3, [sp, #108]	; 0x6c
 800a56a:	e7bf      	b.n	800a4ec <_strtod_l+0x2c>
 800a56c:	2201      	movs	r2, #1
 800a56e:	920d      	str	r2, [sp, #52]	; 0x34
 800a570:	1c5a      	adds	r2, r3, #1
 800a572:	921b      	str	r2, [sp, #108]	; 0x6c
 800a574:	785b      	ldrb	r3, [r3, #1]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1c2      	bne.n	800a500 <_strtod_l+0x40>
 800a57a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a57c:	961b      	str	r6, [sp, #108]	; 0x6c
 800a57e:	2b00      	cmp	r3, #0
 800a580:	f040 8585 	bne.w	800b08e <_strtod_l+0xbce>
 800a584:	464a      	mov	r2, r9
 800a586:	4653      	mov	r3, sl
 800a588:	e7e2      	b.n	800a550 <_strtod_l+0x90>
 800a58a:	2200      	movs	r2, #0
 800a58c:	e7ef      	b.n	800a56e <_strtod_l+0xae>
 800a58e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a590:	b13a      	cbz	r2, 800a5a2 <_strtod_l+0xe2>
 800a592:	2135      	movs	r1, #53	; 0x35
 800a594:	a81e      	add	r0, sp, #120	; 0x78
 800a596:	f002 fe82 	bl	800d29e <__copybits>
 800a59a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a59c:	4658      	mov	r0, fp
 800a59e:	f002 faf4 	bl	800cb8a <_Bfree>
 800a5a2:	3c01      	subs	r4, #1
 800a5a4:	2c04      	cmp	r4, #4
 800a5a6:	d806      	bhi.n	800a5b6 <_strtod_l+0xf6>
 800a5a8:	e8df f004 	tbb	[pc, r4]
 800a5ac:	1714030a 	.word	0x1714030a
 800a5b0:	0a          	.byte	0x0a
 800a5b1:	00          	.byte	0x00
 800a5b2:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800a5b6:	0731      	lsls	r1, r6, #28
 800a5b8:	d5c1      	bpl.n	800a53e <_strtod_l+0x7e>
 800a5ba:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800a5be:	e7be      	b.n	800a53e <_strtod_l+0x7e>
 800a5c0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a5c2:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800a5c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a5ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a5ce:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800a5d2:	e7f0      	b.n	800a5b6 <_strtod_l+0xf6>
 800a5d4:	f8df a170 	ldr.w	sl, [pc, #368]	; 800a748 <_strtod_l+0x288>
 800a5d8:	e7ed      	b.n	800a5b6 <_strtod_l+0xf6>
 800a5da:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800a5de:	f04f 39ff 	mov.w	r9, #4294967295
 800a5e2:	e7e8      	b.n	800a5b6 <_strtod_l+0xf6>
 800a5e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5e6:	1c5a      	adds	r2, r3, #1
 800a5e8:	921b      	str	r2, [sp, #108]	; 0x6c
 800a5ea:	785b      	ldrb	r3, [r3, #1]
 800a5ec:	2b30      	cmp	r3, #48	; 0x30
 800a5ee:	d0f9      	beq.n	800a5e4 <_strtod_l+0x124>
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d0a4      	beq.n	800a53e <_strtod_l+0x7e>
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	2500      	movs	r5, #0
 800a5f8:	220a      	movs	r2, #10
 800a5fa:	9307      	str	r3, [sp, #28]
 800a5fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5fe:	9506      	str	r5, [sp, #24]
 800a600:	9308      	str	r3, [sp, #32]
 800a602:	9504      	str	r5, [sp, #16]
 800a604:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a606:	7807      	ldrb	r7, [r0, #0]
 800a608:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a60c:	b2d9      	uxtb	r1, r3
 800a60e:	2909      	cmp	r1, #9
 800a610:	d929      	bls.n	800a666 <_strtod_l+0x1a6>
 800a612:	4622      	mov	r2, r4
 800a614:	f8d8 1000 	ldr.w	r1, [r8]
 800a618:	f003 fd15 	bl	800e046 <strncmp>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d031      	beq.n	800a684 <_strtod_l+0x1c4>
 800a620:	2000      	movs	r0, #0
 800a622:	463b      	mov	r3, r7
 800a624:	4602      	mov	r2, r0
 800a626:	9c04      	ldr	r4, [sp, #16]
 800a628:	9005      	str	r0, [sp, #20]
 800a62a:	2b65      	cmp	r3, #101	; 0x65
 800a62c:	d001      	beq.n	800a632 <_strtod_l+0x172>
 800a62e:	2b45      	cmp	r3, #69	; 0x45
 800a630:	d114      	bne.n	800a65c <_strtod_l+0x19c>
 800a632:	b924      	cbnz	r4, 800a63e <_strtod_l+0x17e>
 800a634:	b910      	cbnz	r0, 800a63c <_strtod_l+0x17c>
 800a636:	9b07      	ldr	r3, [sp, #28]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d09e      	beq.n	800a57a <_strtod_l+0xba>
 800a63c:	2400      	movs	r4, #0
 800a63e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a640:	1c73      	adds	r3, r6, #1
 800a642:	931b      	str	r3, [sp, #108]	; 0x6c
 800a644:	7873      	ldrb	r3, [r6, #1]
 800a646:	2b2b      	cmp	r3, #43	; 0x2b
 800a648:	d078      	beq.n	800a73c <_strtod_l+0x27c>
 800a64a:	2b2d      	cmp	r3, #45	; 0x2d
 800a64c:	d070      	beq.n	800a730 <_strtod_l+0x270>
 800a64e:	f04f 0c00 	mov.w	ip, #0
 800a652:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800a656:	2f09      	cmp	r7, #9
 800a658:	d97c      	bls.n	800a754 <_strtod_l+0x294>
 800a65a:	961b      	str	r6, [sp, #108]	; 0x6c
 800a65c:	f04f 0e00 	mov.w	lr, #0
 800a660:	e09a      	b.n	800a798 <_strtod_l+0x2d8>
 800a662:	2300      	movs	r3, #0
 800a664:	e7c7      	b.n	800a5f6 <_strtod_l+0x136>
 800a666:	9904      	ldr	r1, [sp, #16]
 800a668:	3001      	adds	r0, #1
 800a66a:	2908      	cmp	r1, #8
 800a66c:	bfd7      	itett	le
 800a66e:	9906      	ldrle	r1, [sp, #24]
 800a670:	fb02 3505 	mlagt	r5, r2, r5, r3
 800a674:	fb02 3301 	mlale	r3, r2, r1, r3
 800a678:	9306      	strle	r3, [sp, #24]
 800a67a:	9b04      	ldr	r3, [sp, #16]
 800a67c:	901b      	str	r0, [sp, #108]	; 0x6c
 800a67e:	3301      	adds	r3, #1
 800a680:	9304      	str	r3, [sp, #16]
 800a682:	e7bf      	b.n	800a604 <_strtod_l+0x144>
 800a684:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a686:	191a      	adds	r2, r3, r4
 800a688:	921b      	str	r2, [sp, #108]	; 0x6c
 800a68a:	9a04      	ldr	r2, [sp, #16]
 800a68c:	5d1b      	ldrb	r3, [r3, r4]
 800a68e:	2a00      	cmp	r2, #0
 800a690:	d037      	beq.n	800a702 <_strtod_l+0x242>
 800a692:	4602      	mov	r2, r0
 800a694:	9c04      	ldr	r4, [sp, #16]
 800a696:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a69a:	2909      	cmp	r1, #9
 800a69c:	d913      	bls.n	800a6c6 <_strtod_l+0x206>
 800a69e:	2101      	movs	r1, #1
 800a6a0:	9105      	str	r1, [sp, #20]
 800a6a2:	e7c2      	b.n	800a62a <_strtod_l+0x16a>
 800a6a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6a6:	3001      	adds	r0, #1
 800a6a8:	1c5a      	adds	r2, r3, #1
 800a6aa:	921b      	str	r2, [sp, #108]	; 0x6c
 800a6ac:	785b      	ldrb	r3, [r3, #1]
 800a6ae:	2b30      	cmp	r3, #48	; 0x30
 800a6b0:	d0f8      	beq.n	800a6a4 <_strtod_l+0x1e4>
 800a6b2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a6b6:	2a08      	cmp	r2, #8
 800a6b8:	f200 84f0 	bhi.w	800b09c <_strtod_l+0xbdc>
 800a6bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a6be:	9208      	str	r2, [sp, #32]
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a6ca:	f100 0101 	add.w	r1, r0, #1
 800a6ce:	d012      	beq.n	800a6f6 <_strtod_l+0x236>
 800a6d0:	440a      	add	r2, r1
 800a6d2:	270a      	movs	r7, #10
 800a6d4:	4621      	mov	r1, r4
 800a6d6:	eb00 0c04 	add.w	ip, r0, r4
 800a6da:	458c      	cmp	ip, r1
 800a6dc:	d113      	bne.n	800a706 <_strtod_l+0x246>
 800a6de:	1821      	adds	r1, r4, r0
 800a6e0:	2908      	cmp	r1, #8
 800a6e2:	f104 0401 	add.w	r4, r4, #1
 800a6e6:	4404      	add	r4, r0
 800a6e8:	dc19      	bgt.n	800a71e <_strtod_l+0x25e>
 800a6ea:	210a      	movs	r1, #10
 800a6ec:	9b06      	ldr	r3, [sp, #24]
 800a6ee:	fb01 e303 	mla	r3, r1, r3, lr
 800a6f2:	9306      	str	r3, [sp, #24]
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6f8:	1c58      	adds	r0, r3, #1
 800a6fa:	901b      	str	r0, [sp, #108]	; 0x6c
 800a6fc:	785b      	ldrb	r3, [r3, #1]
 800a6fe:	4608      	mov	r0, r1
 800a700:	e7c9      	b.n	800a696 <_strtod_l+0x1d6>
 800a702:	9804      	ldr	r0, [sp, #16]
 800a704:	e7d3      	b.n	800a6ae <_strtod_l+0x1ee>
 800a706:	2908      	cmp	r1, #8
 800a708:	f101 0101 	add.w	r1, r1, #1
 800a70c:	dc03      	bgt.n	800a716 <_strtod_l+0x256>
 800a70e:	9b06      	ldr	r3, [sp, #24]
 800a710:	437b      	muls	r3, r7
 800a712:	9306      	str	r3, [sp, #24]
 800a714:	e7e1      	b.n	800a6da <_strtod_l+0x21a>
 800a716:	2910      	cmp	r1, #16
 800a718:	bfd8      	it	le
 800a71a:	437d      	mulle	r5, r7
 800a71c:	e7dd      	b.n	800a6da <_strtod_l+0x21a>
 800a71e:	2c10      	cmp	r4, #16
 800a720:	bfdc      	itt	le
 800a722:	210a      	movle	r1, #10
 800a724:	fb01 e505 	mlale	r5, r1, r5, lr
 800a728:	e7e4      	b.n	800a6f4 <_strtod_l+0x234>
 800a72a:	2301      	movs	r3, #1
 800a72c:	9305      	str	r3, [sp, #20]
 800a72e:	e781      	b.n	800a634 <_strtod_l+0x174>
 800a730:	f04f 0c01 	mov.w	ip, #1
 800a734:	1cb3      	adds	r3, r6, #2
 800a736:	931b      	str	r3, [sp, #108]	; 0x6c
 800a738:	78b3      	ldrb	r3, [r6, #2]
 800a73a:	e78a      	b.n	800a652 <_strtod_l+0x192>
 800a73c:	f04f 0c00 	mov.w	ip, #0
 800a740:	e7f8      	b.n	800a734 <_strtod_l+0x274>
 800a742:	bf00      	nop
 800a744:	0800e3f8 	.word	0x0800e3f8
 800a748:	7ff00000 	.word	0x7ff00000
 800a74c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a74e:	1c5f      	adds	r7, r3, #1
 800a750:	971b      	str	r7, [sp, #108]	; 0x6c
 800a752:	785b      	ldrb	r3, [r3, #1]
 800a754:	2b30      	cmp	r3, #48	; 0x30
 800a756:	d0f9      	beq.n	800a74c <_strtod_l+0x28c>
 800a758:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a75c:	2f08      	cmp	r7, #8
 800a75e:	f63f af7d 	bhi.w	800a65c <_strtod_l+0x19c>
 800a762:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a766:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a768:	9309      	str	r3, [sp, #36]	; 0x24
 800a76a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a76c:	1c5f      	adds	r7, r3, #1
 800a76e:	971b      	str	r7, [sp, #108]	; 0x6c
 800a770:	785b      	ldrb	r3, [r3, #1]
 800a772:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a776:	f1b8 0f09 	cmp.w	r8, #9
 800a77a:	d937      	bls.n	800a7ec <_strtod_l+0x32c>
 800a77c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a77e:	1a7f      	subs	r7, r7, r1
 800a780:	2f08      	cmp	r7, #8
 800a782:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a786:	dc37      	bgt.n	800a7f8 <_strtod_l+0x338>
 800a788:	45be      	cmp	lr, r7
 800a78a:	bfa8      	it	ge
 800a78c:	46be      	movge	lr, r7
 800a78e:	f1bc 0f00 	cmp.w	ip, #0
 800a792:	d001      	beq.n	800a798 <_strtod_l+0x2d8>
 800a794:	f1ce 0e00 	rsb	lr, lr, #0
 800a798:	2c00      	cmp	r4, #0
 800a79a:	d151      	bne.n	800a840 <_strtod_l+0x380>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	f47f aece 	bne.w	800a53e <_strtod_l+0x7e>
 800a7a2:	9a07      	ldr	r2, [sp, #28]
 800a7a4:	2a00      	cmp	r2, #0
 800a7a6:	f47f aeca 	bne.w	800a53e <_strtod_l+0x7e>
 800a7aa:	9a05      	ldr	r2, [sp, #20]
 800a7ac:	2a00      	cmp	r2, #0
 800a7ae:	f47f aee4 	bne.w	800a57a <_strtod_l+0xba>
 800a7b2:	2b4e      	cmp	r3, #78	; 0x4e
 800a7b4:	d027      	beq.n	800a806 <_strtod_l+0x346>
 800a7b6:	dc21      	bgt.n	800a7fc <_strtod_l+0x33c>
 800a7b8:	2b49      	cmp	r3, #73	; 0x49
 800a7ba:	f47f aede 	bne.w	800a57a <_strtod_l+0xba>
 800a7be:	49a4      	ldr	r1, [pc, #656]	; (800aa50 <_strtod_l+0x590>)
 800a7c0:	a81b      	add	r0, sp, #108	; 0x6c
 800a7c2:	f002 f83f 	bl	800c844 <__match>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	f43f aed7 	beq.w	800a57a <_strtod_l+0xba>
 800a7cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7ce:	49a1      	ldr	r1, [pc, #644]	; (800aa54 <_strtod_l+0x594>)
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	a81b      	add	r0, sp, #108	; 0x6c
 800a7d4:	931b      	str	r3, [sp, #108]	; 0x6c
 800a7d6:	f002 f835 	bl	800c844 <__match>
 800a7da:	b910      	cbnz	r0, 800a7e2 <_strtod_l+0x322>
 800a7dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7de:	3301      	adds	r3, #1
 800a7e0:	931b      	str	r3, [sp, #108]	; 0x6c
 800a7e2:	f8df a284 	ldr.w	sl, [pc, #644]	; 800aa68 <_strtod_l+0x5a8>
 800a7e6:	f04f 0900 	mov.w	r9, #0
 800a7ea:	e6a8      	b.n	800a53e <_strtod_l+0x7e>
 800a7ec:	210a      	movs	r1, #10
 800a7ee:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a7f2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a7f6:	e7b8      	b.n	800a76a <_strtod_l+0x2aa>
 800a7f8:	46be      	mov	lr, r7
 800a7fa:	e7c8      	b.n	800a78e <_strtod_l+0x2ce>
 800a7fc:	2b69      	cmp	r3, #105	; 0x69
 800a7fe:	d0de      	beq.n	800a7be <_strtod_l+0x2fe>
 800a800:	2b6e      	cmp	r3, #110	; 0x6e
 800a802:	f47f aeba 	bne.w	800a57a <_strtod_l+0xba>
 800a806:	4994      	ldr	r1, [pc, #592]	; (800aa58 <_strtod_l+0x598>)
 800a808:	a81b      	add	r0, sp, #108	; 0x6c
 800a80a:	f002 f81b 	bl	800c844 <__match>
 800a80e:	2800      	cmp	r0, #0
 800a810:	f43f aeb3 	beq.w	800a57a <_strtod_l+0xba>
 800a814:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	2b28      	cmp	r3, #40	; 0x28
 800a81a:	d10e      	bne.n	800a83a <_strtod_l+0x37a>
 800a81c:	aa1e      	add	r2, sp, #120	; 0x78
 800a81e:	498f      	ldr	r1, [pc, #572]	; (800aa5c <_strtod_l+0x59c>)
 800a820:	a81b      	add	r0, sp, #108	; 0x6c
 800a822:	f002 f823 	bl	800c86c <__hexnan>
 800a826:	2805      	cmp	r0, #5
 800a828:	d107      	bne.n	800a83a <_strtod_l+0x37a>
 800a82a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a82c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800a830:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800a834:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800a838:	e681      	b.n	800a53e <_strtod_l+0x7e>
 800a83a:	f8df a234 	ldr.w	sl, [pc, #564]	; 800aa70 <_strtod_l+0x5b0>
 800a83e:	e7d2      	b.n	800a7e6 <_strtod_l+0x326>
 800a840:	ebae 0302 	sub.w	r3, lr, r2
 800a844:	9307      	str	r3, [sp, #28]
 800a846:	9b04      	ldr	r3, [sp, #16]
 800a848:	9806      	ldr	r0, [sp, #24]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	bf08      	it	eq
 800a84e:	4623      	moveq	r3, r4
 800a850:	2c10      	cmp	r4, #16
 800a852:	9304      	str	r3, [sp, #16]
 800a854:	46a0      	mov	r8, r4
 800a856:	bfa8      	it	ge
 800a858:	f04f 0810 	movge.w	r8, #16
 800a85c:	f7f5 fdc2 	bl	80003e4 <__aeabi_ui2d>
 800a860:	2c09      	cmp	r4, #9
 800a862:	4681      	mov	r9, r0
 800a864:	468a      	mov	sl, r1
 800a866:	dc13      	bgt.n	800a890 <_strtod_l+0x3d0>
 800a868:	9b07      	ldr	r3, [sp, #28]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f43f ae67 	beq.w	800a53e <_strtod_l+0x7e>
 800a870:	9b07      	ldr	r3, [sp, #28]
 800a872:	dd7e      	ble.n	800a972 <_strtod_l+0x4b2>
 800a874:	2b16      	cmp	r3, #22
 800a876:	dc65      	bgt.n	800a944 <_strtod_l+0x484>
 800a878:	4a79      	ldr	r2, [pc, #484]	; (800aa60 <_strtod_l+0x5a0>)
 800a87a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a87e:	464a      	mov	r2, r9
 800a880:	e9de 0100 	ldrd	r0, r1, [lr]
 800a884:	4653      	mov	r3, sl
 800a886:	f7f5 fe27 	bl	80004d8 <__aeabi_dmul>
 800a88a:	4681      	mov	r9, r0
 800a88c:	468a      	mov	sl, r1
 800a88e:	e656      	b.n	800a53e <_strtod_l+0x7e>
 800a890:	4b73      	ldr	r3, [pc, #460]	; (800aa60 <_strtod_l+0x5a0>)
 800a892:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a896:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a89a:	f7f5 fe1d 	bl	80004d8 <__aeabi_dmul>
 800a89e:	4606      	mov	r6, r0
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	460f      	mov	r7, r1
 800a8a4:	f7f5 fd9e 	bl	80003e4 <__aeabi_ui2d>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	4639      	mov	r1, r7
 800a8b0:	f7f5 fc5c 	bl	800016c <__adddf3>
 800a8b4:	2c0f      	cmp	r4, #15
 800a8b6:	4681      	mov	r9, r0
 800a8b8:	468a      	mov	sl, r1
 800a8ba:	ddd5      	ble.n	800a868 <_strtod_l+0x3a8>
 800a8bc:	9b07      	ldr	r3, [sp, #28]
 800a8be:	eba4 0808 	sub.w	r8, r4, r8
 800a8c2:	4498      	add	r8, r3
 800a8c4:	f1b8 0f00 	cmp.w	r8, #0
 800a8c8:	f340 809a 	ble.w	800aa00 <_strtod_l+0x540>
 800a8cc:	f018 030f 	ands.w	r3, r8, #15
 800a8d0:	d00a      	beq.n	800a8e8 <_strtod_l+0x428>
 800a8d2:	4963      	ldr	r1, [pc, #396]	; (800aa60 <_strtod_l+0x5a0>)
 800a8d4:	464a      	mov	r2, r9
 800a8d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a8da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8de:	4653      	mov	r3, sl
 800a8e0:	f7f5 fdfa 	bl	80004d8 <__aeabi_dmul>
 800a8e4:	4681      	mov	r9, r0
 800a8e6:	468a      	mov	sl, r1
 800a8e8:	f038 080f 	bics.w	r8, r8, #15
 800a8ec:	d077      	beq.n	800a9de <_strtod_l+0x51e>
 800a8ee:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a8f2:	dd4b      	ble.n	800a98c <_strtod_l+0x4cc>
 800a8f4:	f04f 0800 	mov.w	r8, #0
 800a8f8:	f8cd 8010 	str.w	r8, [sp, #16]
 800a8fc:	f8cd 8020 	str.w	r8, [sp, #32]
 800a900:	f8cd 8018 	str.w	r8, [sp, #24]
 800a904:	2322      	movs	r3, #34	; 0x22
 800a906:	f04f 0900 	mov.w	r9, #0
 800a90a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800aa68 <_strtod_l+0x5a8>
 800a90e:	f8cb 3000 	str.w	r3, [fp]
 800a912:	9b08      	ldr	r3, [sp, #32]
 800a914:	2b00      	cmp	r3, #0
 800a916:	f43f ae12 	beq.w	800a53e <_strtod_l+0x7e>
 800a91a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a91c:	4658      	mov	r0, fp
 800a91e:	f002 f934 	bl	800cb8a <_Bfree>
 800a922:	9906      	ldr	r1, [sp, #24]
 800a924:	4658      	mov	r0, fp
 800a926:	f002 f930 	bl	800cb8a <_Bfree>
 800a92a:	9904      	ldr	r1, [sp, #16]
 800a92c:	4658      	mov	r0, fp
 800a92e:	f002 f92c 	bl	800cb8a <_Bfree>
 800a932:	9908      	ldr	r1, [sp, #32]
 800a934:	4658      	mov	r0, fp
 800a936:	f002 f928 	bl	800cb8a <_Bfree>
 800a93a:	4641      	mov	r1, r8
 800a93c:	4658      	mov	r0, fp
 800a93e:	f002 f924 	bl	800cb8a <_Bfree>
 800a942:	e5fc      	b.n	800a53e <_strtod_l+0x7e>
 800a944:	9a07      	ldr	r2, [sp, #28]
 800a946:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a94a:	4293      	cmp	r3, r2
 800a94c:	dbb6      	blt.n	800a8bc <_strtod_l+0x3fc>
 800a94e:	4d44      	ldr	r5, [pc, #272]	; (800aa60 <_strtod_l+0x5a0>)
 800a950:	f1c4 040f 	rsb	r4, r4, #15
 800a954:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a958:	464a      	mov	r2, r9
 800a95a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a95e:	4653      	mov	r3, sl
 800a960:	f7f5 fdba 	bl	80004d8 <__aeabi_dmul>
 800a964:	9b07      	ldr	r3, [sp, #28]
 800a966:	1b1c      	subs	r4, r3, r4
 800a968:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a96c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a970:	e789      	b.n	800a886 <_strtod_l+0x3c6>
 800a972:	f113 0f16 	cmn.w	r3, #22
 800a976:	dba1      	blt.n	800a8bc <_strtod_l+0x3fc>
 800a978:	4a39      	ldr	r2, [pc, #228]	; (800aa60 <_strtod_l+0x5a0>)
 800a97a:	4648      	mov	r0, r9
 800a97c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a980:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a984:	4651      	mov	r1, sl
 800a986:	f7f5 fed1 	bl	800072c <__aeabi_ddiv>
 800a98a:	e77e      	b.n	800a88a <_strtod_l+0x3ca>
 800a98c:	2300      	movs	r3, #0
 800a98e:	4648      	mov	r0, r9
 800a990:	4651      	mov	r1, sl
 800a992:	461d      	mov	r5, r3
 800a994:	4e33      	ldr	r6, [pc, #204]	; (800aa64 <_strtod_l+0x5a4>)
 800a996:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a99a:	f1b8 0f01 	cmp.w	r8, #1
 800a99e:	dc21      	bgt.n	800a9e4 <_strtod_l+0x524>
 800a9a0:	b10b      	cbz	r3, 800a9a6 <_strtod_l+0x4e6>
 800a9a2:	4681      	mov	r9, r0
 800a9a4:	468a      	mov	sl, r1
 800a9a6:	4b2f      	ldr	r3, [pc, #188]	; (800aa64 <_strtod_l+0x5a4>)
 800a9a8:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800a9ac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a9b0:	464a      	mov	r2, r9
 800a9b2:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a9b6:	4653      	mov	r3, sl
 800a9b8:	f7f5 fd8e 	bl	80004d8 <__aeabi_dmul>
 800a9bc:	4b2a      	ldr	r3, [pc, #168]	; (800aa68 <_strtod_l+0x5a8>)
 800a9be:	460a      	mov	r2, r1
 800a9c0:	400b      	ands	r3, r1
 800a9c2:	492a      	ldr	r1, [pc, #168]	; (800aa6c <_strtod_l+0x5ac>)
 800a9c4:	4681      	mov	r9, r0
 800a9c6:	428b      	cmp	r3, r1
 800a9c8:	d894      	bhi.n	800a8f4 <_strtod_l+0x434>
 800a9ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a9ce:	428b      	cmp	r3, r1
 800a9d0:	bf86      	itte	hi
 800a9d2:	f04f 39ff 	movhi.w	r9, #4294967295
 800a9d6:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800aa74 <_strtod_l+0x5b4>
 800a9da:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800a9de:	2300      	movs	r3, #0
 800a9e0:	9305      	str	r3, [sp, #20]
 800a9e2:	e07b      	b.n	800aadc <_strtod_l+0x61c>
 800a9e4:	f018 0f01 	tst.w	r8, #1
 800a9e8:	d006      	beq.n	800a9f8 <_strtod_l+0x538>
 800a9ea:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f2:	f7f5 fd71 	bl	80004d8 <__aeabi_dmul>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	3501      	adds	r5, #1
 800a9fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a9fe:	e7cc      	b.n	800a99a <_strtod_l+0x4da>
 800aa00:	d0ed      	beq.n	800a9de <_strtod_l+0x51e>
 800aa02:	f1c8 0800 	rsb	r8, r8, #0
 800aa06:	f018 020f 	ands.w	r2, r8, #15
 800aa0a:	d00a      	beq.n	800aa22 <_strtod_l+0x562>
 800aa0c:	4b14      	ldr	r3, [pc, #80]	; (800aa60 <_strtod_l+0x5a0>)
 800aa0e:	4648      	mov	r0, r9
 800aa10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa14:	4651      	mov	r1, sl
 800aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1a:	f7f5 fe87 	bl	800072c <__aeabi_ddiv>
 800aa1e:	4681      	mov	r9, r0
 800aa20:	468a      	mov	sl, r1
 800aa22:	ea5f 1828 	movs.w	r8, r8, asr #4
 800aa26:	d0da      	beq.n	800a9de <_strtod_l+0x51e>
 800aa28:	f1b8 0f1f 	cmp.w	r8, #31
 800aa2c:	dd24      	ble.n	800aa78 <_strtod_l+0x5b8>
 800aa2e:	f04f 0800 	mov.w	r8, #0
 800aa32:	f8cd 8010 	str.w	r8, [sp, #16]
 800aa36:	f8cd 8020 	str.w	r8, [sp, #32]
 800aa3a:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa3e:	2322      	movs	r3, #34	; 0x22
 800aa40:	f04f 0900 	mov.w	r9, #0
 800aa44:	f04f 0a00 	mov.w	sl, #0
 800aa48:	f8cb 3000 	str.w	r3, [fp]
 800aa4c:	e761      	b.n	800a912 <_strtod_l+0x452>
 800aa4e:	bf00      	nop
 800aa50:	0800e3c5 	.word	0x0800e3c5
 800aa54:	0800e44b 	.word	0x0800e44b
 800aa58:	0800e3cd 	.word	0x0800e3cd
 800aa5c:	0800e40c 	.word	0x0800e40c
 800aa60:	0800e4f0 	.word	0x0800e4f0
 800aa64:	0800e4c8 	.word	0x0800e4c8
 800aa68:	7ff00000 	.word	0x7ff00000
 800aa6c:	7ca00000 	.word	0x7ca00000
 800aa70:	fff80000 	.word	0xfff80000
 800aa74:	7fefffff 	.word	0x7fefffff
 800aa78:	f018 0310 	ands.w	r3, r8, #16
 800aa7c:	bf18      	it	ne
 800aa7e:	236a      	movne	r3, #106	; 0x6a
 800aa80:	4648      	mov	r0, r9
 800aa82:	9305      	str	r3, [sp, #20]
 800aa84:	4651      	mov	r1, sl
 800aa86:	2300      	movs	r3, #0
 800aa88:	4da1      	ldr	r5, [pc, #644]	; (800ad10 <_strtod_l+0x850>)
 800aa8a:	f1b8 0f00 	cmp.w	r8, #0
 800aa8e:	f300 8113 	bgt.w	800acb8 <_strtod_l+0x7f8>
 800aa92:	b10b      	cbz	r3, 800aa98 <_strtod_l+0x5d8>
 800aa94:	4681      	mov	r9, r0
 800aa96:	468a      	mov	sl, r1
 800aa98:	9b05      	ldr	r3, [sp, #20]
 800aa9a:	b1bb      	cbz	r3, 800aacc <_strtod_l+0x60c>
 800aa9c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800aaa0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	4651      	mov	r1, sl
 800aaa8:	dd10      	ble.n	800aacc <_strtod_l+0x60c>
 800aaaa:	2b1f      	cmp	r3, #31
 800aaac:	f340 8110 	ble.w	800acd0 <_strtod_l+0x810>
 800aab0:	2b34      	cmp	r3, #52	; 0x34
 800aab2:	bfd8      	it	le
 800aab4:	f04f 32ff 	movle.w	r2, #4294967295
 800aab8:	f04f 0900 	mov.w	r9, #0
 800aabc:	bfcf      	iteee	gt
 800aabe:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800aac2:	3b20      	suble	r3, #32
 800aac4:	fa02 f303 	lslle.w	r3, r2, r3
 800aac8:	ea03 0a01 	andle.w	sl, r3, r1
 800aacc:	2200      	movs	r2, #0
 800aace:	2300      	movs	r3, #0
 800aad0:	4648      	mov	r0, r9
 800aad2:	4651      	mov	r1, sl
 800aad4:	f7f5 ff68 	bl	80009a8 <__aeabi_dcmpeq>
 800aad8:	2800      	cmp	r0, #0
 800aada:	d1a8      	bne.n	800aa2e <_strtod_l+0x56e>
 800aadc:	9b06      	ldr	r3, [sp, #24]
 800aade:	9a04      	ldr	r2, [sp, #16]
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	9908      	ldr	r1, [sp, #32]
 800aae4:	4623      	mov	r3, r4
 800aae6:	4658      	mov	r0, fp
 800aae8:	f002 f8a1 	bl	800cc2e <__s2b>
 800aaec:	9008      	str	r0, [sp, #32]
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	f43f af00 	beq.w	800a8f4 <_strtod_l+0x434>
 800aaf4:	9a07      	ldr	r2, [sp, #28]
 800aaf6:	9b07      	ldr	r3, [sp, #28]
 800aaf8:	2a00      	cmp	r2, #0
 800aafa:	f1c3 0300 	rsb	r3, r3, #0
 800aafe:	bfa8      	it	ge
 800ab00:	2300      	movge	r3, #0
 800ab02:	f04f 0800 	mov.w	r8, #0
 800ab06:	930e      	str	r3, [sp, #56]	; 0x38
 800ab08:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ab0c:	9316      	str	r3, [sp, #88]	; 0x58
 800ab0e:	f8cd 8010 	str.w	r8, [sp, #16]
 800ab12:	9b08      	ldr	r3, [sp, #32]
 800ab14:	4658      	mov	r0, fp
 800ab16:	6859      	ldr	r1, [r3, #4]
 800ab18:	f002 f803 	bl	800cb22 <_Balloc>
 800ab1c:	9006      	str	r0, [sp, #24]
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	f43f aef0 	beq.w	800a904 <_strtod_l+0x444>
 800ab24:	9b08      	ldr	r3, [sp, #32]
 800ab26:	300c      	adds	r0, #12
 800ab28:	691a      	ldr	r2, [r3, #16]
 800ab2a:	f103 010c 	add.w	r1, r3, #12
 800ab2e:	3202      	adds	r2, #2
 800ab30:	0092      	lsls	r2, r2, #2
 800ab32:	f001 ffeb 	bl	800cb0c <memcpy>
 800ab36:	ab1e      	add	r3, sp, #120	; 0x78
 800ab38:	9301      	str	r3, [sp, #4]
 800ab3a:	ab1d      	add	r3, sp, #116	; 0x74
 800ab3c:	9300      	str	r3, [sp, #0]
 800ab3e:	464a      	mov	r2, r9
 800ab40:	4653      	mov	r3, sl
 800ab42:	4658      	mov	r0, fp
 800ab44:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800ab48:	f002 fb2c 	bl	800d1a4 <__d2b>
 800ab4c:	901c      	str	r0, [sp, #112]	; 0x70
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	f43f aed8 	beq.w	800a904 <_strtod_l+0x444>
 800ab54:	2101      	movs	r1, #1
 800ab56:	4658      	mov	r0, fp
 800ab58:	f002 f8f5 	bl	800cd46 <__i2b>
 800ab5c:	9004      	str	r0, [sp, #16]
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2800      	cmp	r0, #0
 800ab62:	f43f aecf 	beq.w	800a904 <_strtod_l+0x444>
 800ab66:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800ab68:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ab6a:	2d00      	cmp	r5, #0
 800ab6c:	bfab      	itete	ge
 800ab6e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ab70:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ab72:	18ee      	addge	r6, r5, r3
 800ab74:	1b5c      	sublt	r4, r3, r5
 800ab76:	9b05      	ldr	r3, [sp, #20]
 800ab78:	bfa8      	it	ge
 800ab7a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800ab7c:	eba5 0503 	sub.w	r5, r5, r3
 800ab80:	4415      	add	r5, r2
 800ab82:	4b64      	ldr	r3, [pc, #400]	; (800ad14 <_strtod_l+0x854>)
 800ab84:	f105 35ff 	add.w	r5, r5, #4294967295
 800ab88:	bfb8      	it	lt
 800ab8a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800ab8c:	429d      	cmp	r5, r3
 800ab8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ab92:	f280 80af 	bge.w	800acf4 <_strtod_l+0x834>
 800ab96:	1b5b      	subs	r3, r3, r5
 800ab98:	2b1f      	cmp	r3, #31
 800ab9a:	eba2 0203 	sub.w	r2, r2, r3
 800ab9e:	f04f 0701 	mov.w	r7, #1
 800aba2:	f300 809c 	bgt.w	800acde <_strtod_l+0x81e>
 800aba6:	2500      	movs	r5, #0
 800aba8:	fa07 f303 	lsl.w	r3, r7, r3
 800abac:	930f      	str	r3, [sp, #60]	; 0x3c
 800abae:	18b7      	adds	r7, r6, r2
 800abb0:	9b05      	ldr	r3, [sp, #20]
 800abb2:	42be      	cmp	r6, r7
 800abb4:	4414      	add	r4, r2
 800abb6:	441c      	add	r4, r3
 800abb8:	4633      	mov	r3, r6
 800abba:	bfa8      	it	ge
 800abbc:	463b      	movge	r3, r7
 800abbe:	42a3      	cmp	r3, r4
 800abc0:	bfa8      	it	ge
 800abc2:	4623      	movge	r3, r4
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	bfc2      	ittt	gt
 800abc8:	1aff      	subgt	r7, r7, r3
 800abca:	1ae4      	subgt	r4, r4, r3
 800abcc:	1af6      	subgt	r6, r6, r3
 800abce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abd0:	b1bb      	cbz	r3, 800ac02 <_strtod_l+0x742>
 800abd2:	461a      	mov	r2, r3
 800abd4:	9904      	ldr	r1, [sp, #16]
 800abd6:	4658      	mov	r0, fp
 800abd8:	f002 f954 	bl	800ce84 <__pow5mult>
 800abdc:	9004      	str	r0, [sp, #16]
 800abde:	2800      	cmp	r0, #0
 800abe0:	f43f ae90 	beq.w	800a904 <_strtod_l+0x444>
 800abe4:	4601      	mov	r1, r0
 800abe6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800abe8:	4658      	mov	r0, fp
 800abea:	f002 f8b5 	bl	800cd58 <__multiply>
 800abee:	9009      	str	r0, [sp, #36]	; 0x24
 800abf0:	2800      	cmp	r0, #0
 800abf2:	f43f ae87 	beq.w	800a904 <_strtod_l+0x444>
 800abf6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800abf8:	4658      	mov	r0, fp
 800abfa:	f001 ffc6 	bl	800cb8a <_Bfree>
 800abfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac00:	931c      	str	r3, [sp, #112]	; 0x70
 800ac02:	2f00      	cmp	r7, #0
 800ac04:	dc7a      	bgt.n	800acfc <_strtod_l+0x83c>
 800ac06:	9b07      	ldr	r3, [sp, #28]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	dd08      	ble.n	800ac1e <_strtod_l+0x75e>
 800ac0c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ac0e:	9906      	ldr	r1, [sp, #24]
 800ac10:	4658      	mov	r0, fp
 800ac12:	f002 f937 	bl	800ce84 <__pow5mult>
 800ac16:	9006      	str	r0, [sp, #24]
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	f43f ae73 	beq.w	800a904 <_strtod_l+0x444>
 800ac1e:	2c00      	cmp	r4, #0
 800ac20:	dd08      	ble.n	800ac34 <_strtod_l+0x774>
 800ac22:	4622      	mov	r2, r4
 800ac24:	9906      	ldr	r1, [sp, #24]
 800ac26:	4658      	mov	r0, fp
 800ac28:	f002 f97a 	bl	800cf20 <__lshift>
 800ac2c:	9006      	str	r0, [sp, #24]
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	f43f ae68 	beq.w	800a904 <_strtod_l+0x444>
 800ac34:	2e00      	cmp	r6, #0
 800ac36:	dd08      	ble.n	800ac4a <_strtod_l+0x78a>
 800ac38:	4632      	mov	r2, r6
 800ac3a:	9904      	ldr	r1, [sp, #16]
 800ac3c:	4658      	mov	r0, fp
 800ac3e:	f002 f96f 	bl	800cf20 <__lshift>
 800ac42:	9004      	str	r0, [sp, #16]
 800ac44:	2800      	cmp	r0, #0
 800ac46:	f43f ae5d 	beq.w	800a904 <_strtod_l+0x444>
 800ac4a:	9a06      	ldr	r2, [sp, #24]
 800ac4c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ac4e:	4658      	mov	r0, fp
 800ac50:	f002 f9d4 	bl	800cffc <__mdiff>
 800ac54:	4680      	mov	r8, r0
 800ac56:	2800      	cmp	r0, #0
 800ac58:	f43f ae54 	beq.w	800a904 <_strtod_l+0x444>
 800ac5c:	2400      	movs	r4, #0
 800ac5e:	68c3      	ldr	r3, [r0, #12]
 800ac60:	9904      	ldr	r1, [sp, #16]
 800ac62:	60c4      	str	r4, [r0, #12]
 800ac64:	930c      	str	r3, [sp, #48]	; 0x30
 800ac66:	f002 f9af 	bl	800cfc8 <__mcmp>
 800ac6a:	42a0      	cmp	r0, r4
 800ac6c:	da54      	bge.n	800ad18 <_strtod_l+0x858>
 800ac6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac70:	b9f3      	cbnz	r3, 800acb0 <_strtod_l+0x7f0>
 800ac72:	f1b9 0f00 	cmp.w	r9, #0
 800ac76:	d11b      	bne.n	800acb0 <_strtod_l+0x7f0>
 800ac78:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800ac7c:	b9c3      	cbnz	r3, 800acb0 <_strtod_l+0x7f0>
 800ac7e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ac82:	0d1b      	lsrs	r3, r3, #20
 800ac84:	051b      	lsls	r3, r3, #20
 800ac86:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ac8a:	d911      	bls.n	800acb0 <_strtod_l+0x7f0>
 800ac8c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ac90:	b91b      	cbnz	r3, 800ac9a <_strtod_l+0x7da>
 800ac92:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	dd0a      	ble.n	800acb0 <_strtod_l+0x7f0>
 800ac9a:	4641      	mov	r1, r8
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	4658      	mov	r0, fp
 800aca0:	f002 f93e 	bl	800cf20 <__lshift>
 800aca4:	9904      	ldr	r1, [sp, #16]
 800aca6:	4680      	mov	r8, r0
 800aca8:	f002 f98e 	bl	800cfc8 <__mcmp>
 800acac:	2800      	cmp	r0, #0
 800acae:	dc68      	bgt.n	800ad82 <_strtod_l+0x8c2>
 800acb0:	9b05      	ldr	r3, [sp, #20]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d172      	bne.n	800ad9c <_strtod_l+0x8dc>
 800acb6:	e630      	b.n	800a91a <_strtod_l+0x45a>
 800acb8:	f018 0f01 	tst.w	r8, #1
 800acbc:	d004      	beq.n	800acc8 <_strtod_l+0x808>
 800acbe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800acc2:	f7f5 fc09 	bl	80004d8 <__aeabi_dmul>
 800acc6:	2301      	movs	r3, #1
 800acc8:	ea4f 0868 	mov.w	r8, r8, asr #1
 800accc:	3508      	adds	r5, #8
 800acce:	e6dc      	b.n	800aa8a <_strtod_l+0x5ca>
 800acd0:	f04f 32ff 	mov.w	r2, #4294967295
 800acd4:	fa02 f303 	lsl.w	r3, r2, r3
 800acd8:	ea03 0909 	and.w	r9, r3, r9
 800acdc:	e6f6      	b.n	800aacc <_strtod_l+0x60c>
 800acde:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ace2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ace6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800acea:	35e2      	adds	r5, #226	; 0xe2
 800acec:	fa07 f505 	lsl.w	r5, r7, r5
 800acf0:	970f      	str	r7, [sp, #60]	; 0x3c
 800acf2:	e75c      	b.n	800abae <_strtod_l+0x6ee>
 800acf4:	2301      	movs	r3, #1
 800acf6:	2500      	movs	r5, #0
 800acf8:	930f      	str	r3, [sp, #60]	; 0x3c
 800acfa:	e758      	b.n	800abae <_strtod_l+0x6ee>
 800acfc:	463a      	mov	r2, r7
 800acfe:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad00:	4658      	mov	r0, fp
 800ad02:	f002 f90d 	bl	800cf20 <__lshift>
 800ad06:	901c      	str	r0, [sp, #112]	; 0x70
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	f47f af7c 	bne.w	800ac06 <_strtod_l+0x746>
 800ad0e:	e5f9      	b.n	800a904 <_strtod_l+0x444>
 800ad10:	0800e420 	.word	0x0800e420
 800ad14:	fffffc02 	.word	0xfffffc02
 800ad18:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ad1c:	f040 8089 	bne.w	800ae32 <_strtod_l+0x972>
 800ad20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad22:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800ad26:	b342      	cbz	r2, 800ad7a <_strtod_l+0x8ba>
 800ad28:	4aaf      	ldr	r2, [pc, #700]	; (800afe8 <_strtod_l+0xb28>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d156      	bne.n	800addc <_strtod_l+0x91c>
 800ad2e:	9b05      	ldr	r3, [sp, #20]
 800ad30:	4648      	mov	r0, r9
 800ad32:	b1eb      	cbz	r3, 800ad70 <_strtod_l+0x8b0>
 800ad34:	4653      	mov	r3, sl
 800ad36:	4aad      	ldr	r2, [pc, #692]	; (800afec <_strtod_l+0xb2c>)
 800ad38:	f04f 31ff 	mov.w	r1, #4294967295
 800ad3c:	401a      	ands	r2, r3
 800ad3e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ad42:	d818      	bhi.n	800ad76 <_strtod_l+0x8b6>
 800ad44:	0d12      	lsrs	r2, r2, #20
 800ad46:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ad4a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad4e:	4298      	cmp	r0, r3
 800ad50:	d144      	bne.n	800addc <_strtod_l+0x91c>
 800ad52:	4ba7      	ldr	r3, [pc, #668]	; (800aff0 <_strtod_l+0xb30>)
 800ad54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d102      	bne.n	800ad60 <_strtod_l+0x8a0>
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	f43f add2 	beq.w	800a904 <_strtod_l+0x444>
 800ad60:	4ba2      	ldr	r3, [pc, #648]	; (800afec <_strtod_l+0xb2c>)
 800ad62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad64:	f04f 0900 	mov.w	r9, #0
 800ad68:	401a      	ands	r2, r3
 800ad6a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800ad6e:	e79f      	b.n	800acb0 <_strtod_l+0x7f0>
 800ad70:	f04f 33ff 	mov.w	r3, #4294967295
 800ad74:	e7eb      	b.n	800ad4e <_strtod_l+0x88e>
 800ad76:	460b      	mov	r3, r1
 800ad78:	e7e9      	b.n	800ad4e <_strtod_l+0x88e>
 800ad7a:	bb7b      	cbnz	r3, 800addc <_strtod_l+0x91c>
 800ad7c:	f1b9 0f00 	cmp.w	r9, #0
 800ad80:	d12c      	bne.n	800addc <_strtod_l+0x91c>
 800ad82:	9905      	ldr	r1, [sp, #20]
 800ad84:	4653      	mov	r3, sl
 800ad86:	4a99      	ldr	r2, [pc, #612]	; (800afec <_strtod_l+0xb2c>)
 800ad88:	b1f1      	cbz	r1, 800adc8 <_strtod_l+0x908>
 800ad8a:	ea02 010a 	and.w	r1, r2, sl
 800ad8e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ad92:	dc19      	bgt.n	800adc8 <_strtod_l+0x908>
 800ad94:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ad98:	f77f ae51 	ble.w	800aa3e <_strtod_l+0x57e>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	4a95      	ldr	r2, [pc, #596]	; (800aff4 <_strtod_l+0xb34>)
 800ada0:	4648      	mov	r0, r9
 800ada2:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ada6:	4651      	mov	r1, sl
 800ada8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800adac:	f7f5 fb94 	bl	80004d8 <__aeabi_dmul>
 800adb0:	4681      	mov	r9, r0
 800adb2:	468a      	mov	sl, r1
 800adb4:	2900      	cmp	r1, #0
 800adb6:	f47f adb0 	bne.w	800a91a <_strtod_l+0x45a>
 800adba:	2800      	cmp	r0, #0
 800adbc:	f47f adad 	bne.w	800a91a <_strtod_l+0x45a>
 800adc0:	2322      	movs	r3, #34	; 0x22
 800adc2:	f8cb 3000 	str.w	r3, [fp]
 800adc6:	e5a8      	b.n	800a91a <_strtod_l+0x45a>
 800adc8:	4013      	ands	r3, r2
 800adca:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800adce:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800add2:	f04f 39ff 	mov.w	r9, #4294967295
 800add6:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800adda:	e769      	b.n	800acb0 <_strtod_l+0x7f0>
 800addc:	b19d      	cbz	r5, 800ae06 <_strtod_l+0x946>
 800adde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade0:	421d      	tst	r5, r3
 800ade2:	f43f af65 	beq.w	800acb0 <_strtod_l+0x7f0>
 800ade6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ade8:	9a05      	ldr	r2, [sp, #20]
 800adea:	4648      	mov	r0, r9
 800adec:	4651      	mov	r1, sl
 800adee:	b173      	cbz	r3, 800ae0e <_strtod_l+0x94e>
 800adf0:	f7ff fb42 	bl	800a478 <sulp>
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800adfc:	f7f5 f9b6 	bl	800016c <__adddf3>
 800ae00:	4681      	mov	r9, r0
 800ae02:	468a      	mov	sl, r1
 800ae04:	e754      	b.n	800acb0 <_strtod_l+0x7f0>
 800ae06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae08:	ea13 0f09 	tst.w	r3, r9
 800ae0c:	e7e9      	b.n	800ade2 <_strtod_l+0x922>
 800ae0e:	f7ff fb33 	bl	800a478 <sulp>
 800ae12:	4602      	mov	r2, r0
 800ae14:	460b      	mov	r3, r1
 800ae16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae1a:	f7f5 f9a5 	bl	8000168 <__aeabi_dsub>
 800ae1e:	2200      	movs	r2, #0
 800ae20:	2300      	movs	r3, #0
 800ae22:	4681      	mov	r9, r0
 800ae24:	468a      	mov	sl, r1
 800ae26:	f7f5 fdbf 	bl	80009a8 <__aeabi_dcmpeq>
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	f47f ae07 	bne.w	800aa3e <_strtod_l+0x57e>
 800ae30:	e73e      	b.n	800acb0 <_strtod_l+0x7f0>
 800ae32:	9904      	ldr	r1, [sp, #16]
 800ae34:	4640      	mov	r0, r8
 800ae36:	f002 fa04 	bl	800d242 <__ratio>
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae40:	4606      	mov	r6, r0
 800ae42:	460f      	mov	r7, r1
 800ae44:	f7f5 fdc4 	bl	80009d0 <__aeabi_dcmple>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d075      	beq.n	800af38 <_strtod_l+0xa78>
 800ae4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d047      	beq.n	800aee2 <_strtod_l+0xa22>
 800ae52:	2600      	movs	r6, #0
 800ae54:	4f68      	ldr	r7, [pc, #416]	; (800aff8 <_strtod_l+0xb38>)
 800ae56:	4d68      	ldr	r5, [pc, #416]	; (800aff8 <_strtod_l+0xb38>)
 800ae58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae5e:	0d1b      	lsrs	r3, r3, #20
 800ae60:	051b      	lsls	r3, r3, #20
 800ae62:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae66:	4b65      	ldr	r3, [pc, #404]	; (800affc <_strtod_l+0xb3c>)
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	f040 80cf 	bne.w	800b00c <_strtod_l+0xb4c>
 800ae6e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ae72:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ae76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae78:	4648      	mov	r0, r9
 800ae7a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800ae7e:	4651      	mov	r1, sl
 800ae80:	f002 f91a 	bl	800d0b8 <__ulp>
 800ae84:	4602      	mov	r2, r0
 800ae86:	460b      	mov	r3, r1
 800ae88:	4630      	mov	r0, r6
 800ae8a:	4639      	mov	r1, r7
 800ae8c:	f7f5 fb24 	bl	80004d8 <__aeabi_dmul>
 800ae90:	464a      	mov	r2, r9
 800ae92:	4653      	mov	r3, sl
 800ae94:	f7f5 f96a 	bl	800016c <__adddf3>
 800ae98:	460b      	mov	r3, r1
 800ae9a:	4954      	ldr	r1, [pc, #336]	; (800afec <_strtod_l+0xb2c>)
 800ae9c:	4a58      	ldr	r2, [pc, #352]	; (800b000 <_strtod_l+0xb40>)
 800ae9e:	4019      	ands	r1, r3
 800aea0:	4291      	cmp	r1, r2
 800aea2:	4681      	mov	r9, r0
 800aea4:	d95e      	bls.n	800af64 <_strtod_l+0xaa4>
 800aea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aea8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d103      	bne.n	800aeb8 <_strtod_l+0x9f8>
 800aeb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	f43f ad26 	beq.w	800a904 <_strtod_l+0x444>
 800aeb8:	f04f 39ff 	mov.w	r9, #4294967295
 800aebc:	f8df a130 	ldr.w	sl, [pc, #304]	; 800aff0 <_strtod_l+0xb30>
 800aec0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aec2:	4658      	mov	r0, fp
 800aec4:	f001 fe61 	bl	800cb8a <_Bfree>
 800aec8:	9906      	ldr	r1, [sp, #24]
 800aeca:	4658      	mov	r0, fp
 800aecc:	f001 fe5d 	bl	800cb8a <_Bfree>
 800aed0:	9904      	ldr	r1, [sp, #16]
 800aed2:	4658      	mov	r0, fp
 800aed4:	f001 fe59 	bl	800cb8a <_Bfree>
 800aed8:	4641      	mov	r1, r8
 800aeda:	4658      	mov	r0, fp
 800aedc:	f001 fe55 	bl	800cb8a <_Bfree>
 800aee0:	e617      	b.n	800ab12 <_strtod_l+0x652>
 800aee2:	f1b9 0f00 	cmp.w	r9, #0
 800aee6:	d119      	bne.n	800af1c <_strtod_l+0xa5c>
 800aee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aeee:	b9e3      	cbnz	r3, 800af2a <_strtod_l+0xa6a>
 800aef0:	2200      	movs	r2, #0
 800aef2:	4b41      	ldr	r3, [pc, #260]	; (800aff8 <_strtod_l+0xb38>)
 800aef4:	4630      	mov	r0, r6
 800aef6:	4639      	mov	r1, r7
 800aef8:	f7f5 fd60 	bl	80009bc <__aeabi_dcmplt>
 800aefc:	b9c8      	cbnz	r0, 800af32 <_strtod_l+0xa72>
 800aefe:	2200      	movs	r2, #0
 800af00:	4b40      	ldr	r3, [pc, #256]	; (800b004 <_strtod_l+0xb44>)
 800af02:	4630      	mov	r0, r6
 800af04:	4639      	mov	r1, r7
 800af06:	f7f5 fae7 	bl	80004d8 <__aeabi_dmul>
 800af0a:	4604      	mov	r4, r0
 800af0c:	460d      	mov	r5, r1
 800af0e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800af12:	9418      	str	r4, [sp, #96]	; 0x60
 800af14:	9319      	str	r3, [sp, #100]	; 0x64
 800af16:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800af1a:	e79d      	b.n	800ae58 <_strtod_l+0x998>
 800af1c:	f1b9 0f01 	cmp.w	r9, #1
 800af20:	d103      	bne.n	800af2a <_strtod_l+0xa6a>
 800af22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af24:	2b00      	cmp	r3, #0
 800af26:	f43f ad8a 	beq.w	800aa3e <_strtod_l+0x57e>
 800af2a:	2600      	movs	r6, #0
 800af2c:	4f36      	ldr	r7, [pc, #216]	; (800b008 <_strtod_l+0xb48>)
 800af2e:	2400      	movs	r4, #0
 800af30:	e791      	b.n	800ae56 <_strtod_l+0x996>
 800af32:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800af34:	4d33      	ldr	r5, [pc, #204]	; (800b004 <_strtod_l+0xb44>)
 800af36:	e7ea      	b.n	800af0e <_strtod_l+0xa4e>
 800af38:	4b32      	ldr	r3, [pc, #200]	; (800b004 <_strtod_l+0xb44>)
 800af3a:	2200      	movs	r2, #0
 800af3c:	4630      	mov	r0, r6
 800af3e:	4639      	mov	r1, r7
 800af40:	f7f5 faca 	bl	80004d8 <__aeabi_dmul>
 800af44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af46:	4604      	mov	r4, r0
 800af48:	460d      	mov	r5, r1
 800af4a:	b933      	cbnz	r3, 800af5a <_strtod_l+0xa9a>
 800af4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af50:	9010      	str	r0, [sp, #64]	; 0x40
 800af52:	9311      	str	r3, [sp, #68]	; 0x44
 800af54:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800af58:	e77e      	b.n	800ae58 <_strtod_l+0x998>
 800af5a:	4602      	mov	r2, r0
 800af5c:	460b      	mov	r3, r1
 800af5e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800af62:	e7f7      	b.n	800af54 <_strtod_l+0xa94>
 800af64:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800af68:	9b05      	ldr	r3, [sp, #20]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d1a8      	bne.n	800aec0 <_strtod_l+0xa00>
 800af6e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800af72:	0d1b      	lsrs	r3, r3, #20
 800af74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af76:	051b      	lsls	r3, r3, #20
 800af78:	429a      	cmp	r2, r3
 800af7a:	4656      	mov	r6, sl
 800af7c:	d1a0      	bne.n	800aec0 <_strtod_l+0xa00>
 800af7e:	4629      	mov	r1, r5
 800af80:	4620      	mov	r0, r4
 800af82:	f7f5 fd59 	bl	8000a38 <__aeabi_d2iz>
 800af86:	f7f5 fa3d 	bl	8000404 <__aeabi_i2d>
 800af8a:	460b      	mov	r3, r1
 800af8c:	4602      	mov	r2, r0
 800af8e:	4629      	mov	r1, r5
 800af90:	4620      	mov	r0, r4
 800af92:	f7f5 f8e9 	bl	8000168 <__aeabi_dsub>
 800af96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af98:	4604      	mov	r4, r0
 800af9a:	460d      	mov	r5, r1
 800af9c:	b933      	cbnz	r3, 800afac <_strtod_l+0xaec>
 800af9e:	f1b9 0f00 	cmp.w	r9, #0
 800afa2:	d103      	bne.n	800afac <_strtod_l+0xaec>
 800afa4:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800afa8:	2e00      	cmp	r6, #0
 800afaa:	d06a      	beq.n	800b082 <_strtod_l+0xbc2>
 800afac:	a30a      	add	r3, pc, #40	; (adr r3, 800afd8 <_strtod_l+0xb18>)
 800afae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb2:	4620      	mov	r0, r4
 800afb4:	4629      	mov	r1, r5
 800afb6:	f7f5 fd01 	bl	80009bc <__aeabi_dcmplt>
 800afba:	2800      	cmp	r0, #0
 800afbc:	f47f acad 	bne.w	800a91a <_strtod_l+0x45a>
 800afc0:	a307      	add	r3, pc, #28	; (adr r3, 800afe0 <_strtod_l+0xb20>)
 800afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc6:	4620      	mov	r0, r4
 800afc8:	4629      	mov	r1, r5
 800afca:	f7f5 fd15 	bl	80009f8 <__aeabi_dcmpgt>
 800afce:	2800      	cmp	r0, #0
 800afd0:	f43f af76 	beq.w	800aec0 <_strtod_l+0xa00>
 800afd4:	e4a1      	b.n	800a91a <_strtod_l+0x45a>
 800afd6:	bf00      	nop
 800afd8:	94a03595 	.word	0x94a03595
 800afdc:	3fdfffff 	.word	0x3fdfffff
 800afe0:	35afe535 	.word	0x35afe535
 800afe4:	3fe00000 	.word	0x3fe00000
 800afe8:	000fffff 	.word	0x000fffff
 800afec:	7ff00000 	.word	0x7ff00000
 800aff0:	7fefffff 	.word	0x7fefffff
 800aff4:	39500000 	.word	0x39500000
 800aff8:	3ff00000 	.word	0x3ff00000
 800affc:	7fe00000 	.word	0x7fe00000
 800b000:	7c9fffff 	.word	0x7c9fffff
 800b004:	3fe00000 	.word	0x3fe00000
 800b008:	bff00000 	.word	0xbff00000
 800b00c:	9b05      	ldr	r3, [sp, #20]
 800b00e:	b313      	cbz	r3, 800b056 <_strtod_l+0xb96>
 800b010:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b012:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b016:	d81e      	bhi.n	800b056 <_strtod_l+0xb96>
 800b018:	a325      	add	r3, pc, #148	; (adr r3, 800b0b0 <_strtod_l+0xbf0>)
 800b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01e:	4620      	mov	r0, r4
 800b020:	4629      	mov	r1, r5
 800b022:	f7f5 fcd5 	bl	80009d0 <__aeabi_dcmple>
 800b026:	b190      	cbz	r0, 800b04e <_strtod_l+0xb8e>
 800b028:	4629      	mov	r1, r5
 800b02a:	4620      	mov	r0, r4
 800b02c:	f7f5 fd2c 	bl	8000a88 <__aeabi_d2uiz>
 800b030:	2800      	cmp	r0, #0
 800b032:	bf08      	it	eq
 800b034:	2001      	moveq	r0, #1
 800b036:	f7f5 f9d5 	bl	80003e4 <__aeabi_ui2d>
 800b03a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b03c:	4604      	mov	r4, r0
 800b03e:	460d      	mov	r5, r1
 800b040:	b9d3      	cbnz	r3, 800b078 <_strtod_l+0xbb8>
 800b042:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b046:	9012      	str	r0, [sp, #72]	; 0x48
 800b048:	9313      	str	r3, [sp, #76]	; 0x4c
 800b04a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b04e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b050:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b054:	1a9f      	subs	r7, r3, r2
 800b056:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b05a:	f002 f82d 	bl	800d0b8 <__ulp>
 800b05e:	4602      	mov	r2, r0
 800b060:	460b      	mov	r3, r1
 800b062:	4630      	mov	r0, r6
 800b064:	4639      	mov	r1, r7
 800b066:	f7f5 fa37 	bl	80004d8 <__aeabi_dmul>
 800b06a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b06e:	f7f5 f87d 	bl	800016c <__adddf3>
 800b072:	4681      	mov	r9, r0
 800b074:	468a      	mov	sl, r1
 800b076:	e777      	b.n	800af68 <_strtod_l+0xaa8>
 800b078:	4602      	mov	r2, r0
 800b07a:	460b      	mov	r3, r1
 800b07c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b080:	e7e3      	b.n	800b04a <_strtod_l+0xb8a>
 800b082:	a30d      	add	r3, pc, #52	; (adr r3, 800b0b8 <_strtod_l+0xbf8>)
 800b084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b088:	f7f5 fc98 	bl	80009bc <__aeabi_dcmplt>
 800b08c:	e79f      	b.n	800afce <_strtod_l+0xb0e>
 800b08e:	2300      	movs	r3, #0
 800b090:	930d      	str	r3, [sp, #52]	; 0x34
 800b092:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b094:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b096:	6013      	str	r3, [r2, #0]
 800b098:	f7ff ba55 	b.w	800a546 <_strtod_l+0x86>
 800b09c:	2b65      	cmp	r3, #101	; 0x65
 800b09e:	f04f 0200 	mov.w	r2, #0
 800b0a2:	f43f ab42 	beq.w	800a72a <_strtod_l+0x26a>
 800b0a6:	2101      	movs	r1, #1
 800b0a8:	4614      	mov	r4, r2
 800b0aa:	9105      	str	r1, [sp, #20]
 800b0ac:	f7ff babf 	b.w	800a62e <_strtod_l+0x16e>
 800b0b0:	ffc00000 	.word	0xffc00000
 800b0b4:	41dfffff 	.word	0x41dfffff
 800b0b8:	94a03595 	.word	0x94a03595
 800b0bc:	3fcfffff 	.word	0x3fcfffff

0800b0c0 <_strtod_r>:
 800b0c0:	4b05      	ldr	r3, [pc, #20]	; (800b0d8 <_strtod_r+0x18>)
 800b0c2:	b410      	push	{r4}
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4c05      	ldr	r4, [pc, #20]	; (800b0dc <_strtod_r+0x1c>)
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	bf08      	it	eq
 800b0ce:	4623      	moveq	r3, r4
 800b0d0:	bc10      	pop	{r4}
 800b0d2:	f7ff b9f5 	b.w	800a4c0 <_strtod_l>
 800b0d6:	bf00      	nop
 800b0d8:	2000017c 	.word	0x2000017c
 800b0dc:	200001e0 	.word	0x200001e0

0800b0e0 <_strtol_l.isra.0>:
 800b0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e4:	4680      	mov	r8, r0
 800b0e6:	4689      	mov	r9, r1
 800b0e8:	4692      	mov	sl, r2
 800b0ea:	461e      	mov	r6, r3
 800b0ec:	460f      	mov	r7, r1
 800b0ee:	463d      	mov	r5, r7
 800b0f0:	9808      	ldr	r0, [sp, #32]
 800b0f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0f6:	f001 fc49 	bl	800c98c <__locale_ctype_ptr_l>
 800b0fa:	4420      	add	r0, r4
 800b0fc:	7843      	ldrb	r3, [r0, #1]
 800b0fe:	f013 0308 	ands.w	r3, r3, #8
 800b102:	d132      	bne.n	800b16a <_strtol_l.isra.0+0x8a>
 800b104:	2c2d      	cmp	r4, #45	; 0x2d
 800b106:	d132      	bne.n	800b16e <_strtol_l.isra.0+0x8e>
 800b108:	2201      	movs	r2, #1
 800b10a:	787c      	ldrb	r4, [r7, #1]
 800b10c:	1cbd      	adds	r5, r7, #2
 800b10e:	2e00      	cmp	r6, #0
 800b110:	d05d      	beq.n	800b1ce <_strtol_l.isra.0+0xee>
 800b112:	2e10      	cmp	r6, #16
 800b114:	d109      	bne.n	800b12a <_strtol_l.isra.0+0x4a>
 800b116:	2c30      	cmp	r4, #48	; 0x30
 800b118:	d107      	bne.n	800b12a <_strtol_l.isra.0+0x4a>
 800b11a:	782b      	ldrb	r3, [r5, #0]
 800b11c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b120:	2b58      	cmp	r3, #88	; 0x58
 800b122:	d14f      	bne.n	800b1c4 <_strtol_l.isra.0+0xe4>
 800b124:	2610      	movs	r6, #16
 800b126:	786c      	ldrb	r4, [r5, #1]
 800b128:	3502      	adds	r5, #2
 800b12a:	2a00      	cmp	r2, #0
 800b12c:	bf14      	ite	ne
 800b12e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b132:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b136:	2700      	movs	r7, #0
 800b138:	fbb1 fcf6 	udiv	ip, r1, r6
 800b13c:	4638      	mov	r0, r7
 800b13e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b142:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b146:	2b09      	cmp	r3, #9
 800b148:	d817      	bhi.n	800b17a <_strtol_l.isra.0+0x9a>
 800b14a:	461c      	mov	r4, r3
 800b14c:	42a6      	cmp	r6, r4
 800b14e:	dd23      	ble.n	800b198 <_strtol_l.isra.0+0xb8>
 800b150:	1c7b      	adds	r3, r7, #1
 800b152:	d007      	beq.n	800b164 <_strtol_l.isra.0+0x84>
 800b154:	4584      	cmp	ip, r0
 800b156:	d31c      	bcc.n	800b192 <_strtol_l.isra.0+0xb2>
 800b158:	d101      	bne.n	800b15e <_strtol_l.isra.0+0x7e>
 800b15a:	45a6      	cmp	lr, r4
 800b15c:	db19      	blt.n	800b192 <_strtol_l.isra.0+0xb2>
 800b15e:	2701      	movs	r7, #1
 800b160:	fb00 4006 	mla	r0, r0, r6, r4
 800b164:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b168:	e7eb      	b.n	800b142 <_strtol_l.isra.0+0x62>
 800b16a:	462f      	mov	r7, r5
 800b16c:	e7bf      	b.n	800b0ee <_strtol_l.isra.0+0xe>
 800b16e:	2c2b      	cmp	r4, #43	; 0x2b
 800b170:	bf04      	itt	eq
 800b172:	1cbd      	addeq	r5, r7, #2
 800b174:	787c      	ldrbeq	r4, [r7, #1]
 800b176:	461a      	mov	r2, r3
 800b178:	e7c9      	b.n	800b10e <_strtol_l.isra.0+0x2e>
 800b17a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b17e:	2b19      	cmp	r3, #25
 800b180:	d801      	bhi.n	800b186 <_strtol_l.isra.0+0xa6>
 800b182:	3c37      	subs	r4, #55	; 0x37
 800b184:	e7e2      	b.n	800b14c <_strtol_l.isra.0+0x6c>
 800b186:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b18a:	2b19      	cmp	r3, #25
 800b18c:	d804      	bhi.n	800b198 <_strtol_l.isra.0+0xb8>
 800b18e:	3c57      	subs	r4, #87	; 0x57
 800b190:	e7dc      	b.n	800b14c <_strtol_l.isra.0+0x6c>
 800b192:	f04f 37ff 	mov.w	r7, #4294967295
 800b196:	e7e5      	b.n	800b164 <_strtol_l.isra.0+0x84>
 800b198:	1c7b      	adds	r3, r7, #1
 800b19a:	d108      	bne.n	800b1ae <_strtol_l.isra.0+0xce>
 800b19c:	2322      	movs	r3, #34	; 0x22
 800b19e:	4608      	mov	r0, r1
 800b1a0:	f8c8 3000 	str.w	r3, [r8]
 800b1a4:	f1ba 0f00 	cmp.w	sl, #0
 800b1a8:	d107      	bne.n	800b1ba <_strtol_l.isra.0+0xda>
 800b1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ae:	b102      	cbz	r2, 800b1b2 <_strtol_l.isra.0+0xd2>
 800b1b0:	4240      	negs	r0, r0
 800b1b2:	f1ba 0f00 	cmp.w	sl, #0
 800b1b6:	d0f8      	beq.n	800b1aa <_strtol_l.isra.0+0xca>
 800b1b8:	b10f      	cbz	r7, 800b1be <_strtol_l.isra.0+0xde>
 800b1ba:	f105 39ff 	add.w	r9, r5, #4294967295
 800b1be:	f8ca 9000 	str.w	r9, [sl]
 800b1c2:	e7f2      	b.n	800b1aa <_strtol_l.isra.0+0xca>
 800b1c4:	2430      	movs	r4, #48	; 0x30
 800b1c6:	2e00      	cmp	r6, #0
 800b1c8:	d1af      	bne.n	800b12a <_strtol_l.isra.0+0x4a>
 800b1ca:	2608      	movs	r6, #8
 800b1cc:	e7ad      	b.n	800b12a <_strtol_l.isra.0+0x4a>
 800b1ce:	2c30      	cmp	r4, #48	; 0x30
 800b1d0:	d0a3      	beq.n	800b11a <_strtol_l.isra.0+0x3a>
 800b1d2:	260a      	movs	r6, #10
 800b1d4:	e7a9      	b.n	800b12a <_strtol_l.isra.0+0x4a>
	...

0800b1d8 <_strtol_r>:
 800b1d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1da:	4c06      	ldr	r4, [pc, #24]	; (800b1f4 <_strtol_r+0x1c>)
 800b1dc:	4d06      	ldr	r5, [pc, #24]	; (800b1f8 <_strtol_r+0x20>)
 800b1de:	6824      	ldr	r4, [r4, #0]
 800b1e0:	6a24      	ldr	r4, [r4, #32]
 800b1e2:	2c00      	cmp	r4, #0
 800b1e4:	bf08      	it	eq
 800b1e6:	462c      	moveq	r4, r5
 800b1e8:	9400      	str	r4, [sp, #0]
 800b1ea:	f7ff ff79 	bl	800b0e0 <_strtol_l.isra.0>
 800b1ee:	b003      	add	sp, #12
 800b1f0:	bd30      	pop	{r4, r5, pc}
 800b1f2:	bf00      	nop
 800b1f4:	2000017c 	.word	0x2000017c
 800b1f8:	200001e0 	.word	0x200001e0

0800b1fc <__swbuf_r>:
 800b1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fe:	460e      	mov	r6, r1
 800b200:	4614      	mov	r4, r2
 800b202:	4605      	mov	r5, r0
 800b204:	b118      	cbz	r0, 800b20e <__swbuf_r+0x12>
 800b206:	6983      	ldr	r3, [r0, #24]
 800b208:	b90b      	cbnz	r3, 800b20e <__swbuf_r+0x12>
 800b20a:	f001 f80d 	bl	800c228 <__sinit>
 800b20e:	4b21      	ldr	r3, [pc, #132]	; (800b294 <__swbuf_r+0x98>)
 800b210:	429c      	cmp	r4, r3
 800b212:	d12a      	bne.n	800b26a <__swbuf_r+0x6e>
 800b214:	686c      	ldr	r4, [r5, #4]
 800b216:	69a3      	ldr	r3, [r4, #24]
 800b218:	60a3      	str	r3, [r4, #8]
 800b21a:	89a3      	ldrh	r3, [r4, #12]
 800b21c:	071a      	lsls	r2, r3, #28
 800b21e:	d52e      	bpl.n	800b27e <__swbuf_r+0x82>
 800b220:	6923      	ldr	r3, [r4, #16]
 800b222:	b363      	cbz	r3, 800b27e <__swbuf_r+0x82>
 800b224:	6923      	ldr	r3, [r4, #16]
 800b226:	6820      	ldr	r0, [r4, #0]
 800b228:	b2f6      	uxtb	r6, r6
 800b22a:	1ac0      	subs	r0, r0, r3
 800b22c:	6963      	ldr	r3, [r4, #20]
 800b22e:	4637      	mov	r7, r6
 800b230:	4283      	cmp	r3, r0
 800b232:	dc04      	bgt.n	800b23e <__swbuf_r+0x42>
 800b234:	4621      	mov	r1, r4
 800b236:	4628      	mov	r0, r5
 800b238:	f000 ff8c 	bl	800c154 <_fflush_r>
 800b23c:	bb28      	cbnz	r0, 800b28a <__swbuf_r+0x8e>
 800b23e:	68a3      	ldr	r3, [r4, #8]
 800b240:	3001      	adds	r0, #1
 800b242:	3b01      	subs	r3, #1
 800b244:	60a3      	str	r3, [r4, #8]
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	1c5a      	adds	r2, r3, #1
 800b24a:	6022      	str	r2, [r4, #0]
 800b24c:	701e      	strb	r6, [r3, #0]
 800b24e:	6963      	ldr	r3, [r4, #20]
 800b250:	4283      	cmp	r3, r0
 800b252:	d004      	beq.n	800b25e <__swbuf_r+0x62>
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	07db      	lsls	r3, r3, #31
 800b258:	d519      	bpl.n	800b28e <__swbuf_r+0x92>
 800b25a:	2e0a      	cmp	r6, #10
 800b25c:	d117      	bne.n	800b28e <__swbuf_r+0x92>
 800b25e:	4621      	mov	r1, r4
 800b260:	4628      	mov	r0, r5
 800b262:	f000 ff77 	bl	800c154 <_fflush_r>
 800b266:	b190      	cbz	r0, 800b28e <__swbuf_r+0x92>
 800b268:	e00f      	b.n	800b28a <__swbuf_r+0x8e>
 800b26a:	4b0b      	ldr	r3, [pc, #44]	; (800b298 <__swbuf_r+0x9c>)
 800b26c:	429c      	cmp	r4, r3
 800b26e:	d101      	bne.n	800b274 <__swbuf_r+0x78>
 800b270:	68ac      	ldr	r4, [r5, #8]
 800b272:	e7d0      	b.n	800b216 <__swbuf_r+0x1a>
 800b274:	4b09      	ldr	r3, [pc, #36]	; (800b29c <__swbuf_r+0xa0>)
 800b276:	429c      	cmp	r4, r3
 800b278:	bf08      	it	eq
 800b27a:	68ec      	ldreq	r4, [r5, #12]
 800b27c:	e7cb      	b.n	800b216 <__swbuf_r+0x1a>
 800b27e:	4621      	mov	r1, r4
 800b280:	4628      	mov	r0, r5
 800b282:	f000 f81f 	bl	800b2c4 <__swsetup_r>
 800b286:	2800      	cmp	r0, #0
 800b288:	d0cc      	beq.n	800b224 <__swbuf_r+0x28>
 800b28a:	f04f 37ff 	mov.w	r7, #4294967295
 800b28e:	4638      	mov	r0, r7
 800b290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b292:	bf00      	nop
 800b294:	0800e478 	.word	0x0800e478
 800b298:	0800e498 	.word	0x0800e498
 800b29c:	0800e458 	.word	0x0800e458

0800b2a0 <_write_r>:
 800b2a0:	b538      	push	{r3, r4, r5, lr}
 800b2a2:	4605      	mov	r5, r0
 800b2a4:	4608      	mov	r0, r1
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	4c05      	ldr	r4, [pc, #20]	; (800b2c0 <_write_r+0x20>)
 800b2ac:	6022      	str	r2, [r4, #0]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	f7f5 ff34 	bl	800111c <_write>
 800b2b4:	1c43      	adds	r3, r0, #1
 800b2b6:	d102      	bne.n	800b2be <_write_r+0x1e>
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	b103      	cbz	r3, 800b2be <_write_r+0x1e>
 800b2bc:	602b      	str	r3, [r5, #0]
 800b2be:	bd38      	pop	{r3, r4, r5, pc}
 800b2c0:	20001074 	.word	0x20001074

0800b2c4 <__swsetup_r>:
 800b2c4:	4b32      	ldr	r3, [pc, #200]	; (800b390 <__swsetup_r+0xcc>)
 800b2c6:	b570      	push	{r4, r5, r6, lr}
 800b2c8:	681d      	ldr	r5, [r3, #0]
 800b2ca:	4606      	mov	r6, r0
 800b2cc:	460c      	mov	r4, r1
 800b2ce:	b125      	cbz	r5, 800b2da <__swsetup_r+0x16>
 800b2d0:	69ab      	ldr	r3, [r5, #24]
 800b2d2:	b913      	cbnz	r3, 800b2da <__swsetup_r+0x16>
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	f000 ffa7 	bl	800c228 <__sinit>
 800b2da:	4b2e      	ldr	r3, [pc, #184]	; (800b394 <__swsetup_r+0xd0>)
 800b2dc:	429c      	cmp	r4, r3
 800b2de:	d10f      	bne.n	800b300 <__swsetup_r+0x3c>
 800b2e0:	686c      	ldr	r4, [r5, #4]
 800b2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	0715      	lsls	r5, r2, #28
 800b2ea:	d42c      	bmi.n	800b346 <__swsetup_r+0x82>
 800b2ec:	06d0      	lsls	r0, r2, #27
 800b2ee:	d411      	bmi.n	800b314 <__swsetup_r+0x50>
 800b2f0:	2209      	movs	r2, #9
 800b2f2:	6032      	str	r2, [r6, #0]
 800b2f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2f8:	81a3      	strh	r3, [r4, #12]
 800b2fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fe:	e03e      	b.n	800b37e <__swsetup_r+0xba>
 800b300:	4b25      	ldr	r3, [pc, #148]	; (800b398 <__swsetup_r+0xd4>)
 800b302:	429c      	cmp	r4, r3
 800b304:	d101      	bne.n	800b30a <__swsetup_r+0x46>
 800b306:	68ac      	ldr	r4, [r5, #8]
 800b308:	e7eb      	b.n	800b2e2 <__swsetup_r+0x1e>
 800b30a:	4b24      	ldr	r3, [pc, #144]	; (800b39c <__swsetup_r+0xd8>)
 800b30c:	429c      	cmp	r4, r3
 800b30e:	bf08      	it	eq
 800b310:	68ec      	ldreq	r4, [r5, #12]
 800b312:	e7e6      	b.n	800b2e2 <__swsetup_r+0x1e>
 800b314:	0751      	lsls	r1, r2, #29
 800b316:	d512      	bpl.n	800b33e <__swsetup_r+0x7a>
 800b318:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b31a:	b141      	cbz	r1, 800b32e <__swsetup_r+0x6a>
 800b31c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b320:	4299      	cmp	r1, r3
 800b322:	d002      	beq.n	800b32a <__swsetup_r+0x66>
 800b324:	4630      	mov	r0, r6
 800b326:	f002 f803 	bl	800d330 <_free_r>
 800b32a:	2300      	movs	r3, #0
 800b32c:	6363      	str	r3, [r4, #52]	; 0x34
 800b32e:	89a3      	ldrh	r3, [r4, #12]
 800b330:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b334:	81a3      	strh	r3, [r4, #12]
 800b336:	2300      	movs	r3, #0
 800b338:	6063      	str	r3, [r4, #4]
 800b33a:	6923      	ldr	r3, [r4, #16]
 800b33c:	6023      	str	r3, [r4, #0]
 800b33e:	89a3      	ldrh	r3, [r4, #12]
 800b340:	f043 0308 	orr.w	r3, r3, #8
 800b344:	81a3      	strh	r3, [r4, #12]
 800b346:	6923      	ldr	r3, [r4, #16]
 800b348:	b94b      	cbnz	r3, 800b35e <__swsetup_r+0x9a>
 800b34a:	89a3      	ldrh	r3, [r4, #12]
 800b34c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b354:	d003      	beq.n	800b35e <__swsetup_r+0x9a>
 800b356:	4621      	mov	r1, r4
 800b358:	4630      	mov	r0, r6
 800b35a:	f001 fb6f 	bl	800ca3c <__smakebuf_r>
 800b35e:	89a2      	ldrh	r2, [r4, #12]
 800b360:	f012 0301 	ands.w	r3, r2, #1
 800b364:	d00c      	beq.n	800b380 <__swsetup_r+0xbc>
 800b366:	2300      	movs	r3, #0
 800b368:	60a3      	str	r3, [r4, #8]
 800b36a:	6963      	ldr	r3, [r4, #20]
 800b36c:	425b      	negs	r3, r3
 800b36e:	61a3      	str	r3, [r4, #24]
 800b370:	6923      	ldr	r3, [r4, #16]
 800b372:	b953      	cbnz	r3, 800b38a <__swsetup_r+0xc6>
 800b374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b378:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b37c:	d1ba      	bne.n	800b2f4 <__swsetup_r+0x30>
 800b37e:	bd70      	pop	{r4, r5, r6, pc}
 800b380:	0792      	lsls	r2, r2, #30
 800b382:	bf58      	it	pl
 800b384:	6963      	ldrpl	r3, [r4, #20]
 800b386:	60a3      	str	r3, [r4, #8]
 800b388:	e7f2      	b.n	800b370 <__swsetup_r+0xac>
 800b38a:	2000      	movs	r0, #0
 800b38c:	e7f7      	b.n	800b37e <__swsetup_r+0xba>
 800b38e:	bf00      	nop
 800b390:	2000017c 	.word	0x2000017c
 800b394:	0800e478 	.word	0x0800e478
 800b398:	0800e498 	.word	0x0800e498
 800b39c:	0800e458 	.word	0x0800e458

0800b3a0 <_close_r>:
 800b3a0:	b538      	push	{r3, r4, r5, lr}
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	4c05      	ldr	r4, [pc, #20]	; (800b3bc <_close_r+0x1c>)
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	4608      	mov	r0, r1
 800b3aa:	6023      	str	r3, [r4, #0]
 800b3ac:	f7f6 fa21 	bl	80017f2 <_close>
 800b3b0:	1c43      	adds	r3, r0, #1
 800b3b2:	d102      	bne.n	800b3ba <_close_r+0x1a>
 800b3b4:	6823      	ldr	r3, [r4, #0]
 800b3b6:	b103      	cbz	r3, 800b3ba <_close_r+0x1a>
 800b3b8:	602b      	str	r3, [r5, #0]
 800b3ba:	bd38      	pop	{r3, r4, r5, pc}
 800b3bc:	20001074 	.word	0x20001074

0800b3c0 <quorem>:
 800b3c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c4:	6903      	ldr	r3, [r0, #16]
 800b3c6:	690c      	ldr	r4, [r1, #16]
 800b3c8:	4680      	mov	r8, r0
 800b3ca:	42a3      	cmp	r3, r4
 800b3cc:	f2c0 8084 	blt.w	800b4d8 <quorem+0x118>
 800b3d0:	3c01      	subs	r4, #1
 800b3d2:	f101 0714 	add.w	r7, r1, #20
 800b3d6:	f100 0614 	add.w	r6, r0, #20
 800b3da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b3de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b3e2:	3501      	adds	r5, #1
 800b3e4:	fbb0 f5f5 	udiv	r5, r0, r5
 800b3e8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b3ec:	eb06 030c 	add.w	r3, r6, ip
 800b3f0:	eb07 090c 	add.w	r9, r7, ip
 800b3f4:	9301      	str	r3, [sp, #4]
 800b3f6:	b39d      	cbz	r5, 800b460 <quorem+0xa0>
 800b3f8:	f04f 0a00 	mov.w	sl, #0
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	46b6      	mov	lr, r6
 800b400:	46d3      	mov	fp, sl
 800b402:	f850 2b04 	ldr.w	r2, [r0], #4
 800b406:	b293      	uxth	r3, r2
 800b408:	fb05 a303 	mla	r3, r5, r3, sl
 800b40c:	0c12      	lsrs	r2, r2, #16
 800b40e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b412:	fb05 a202 	mla	r2, r5, r2, sl
 800b416:	b29b      	uxth	r3, r3
 800b418:	ebab 0303 	sub.w	r3, fp, r3
 800b41c:	f8de b000 	ldr.w	fp, [lr]
 800b420:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b424:	fa1f fb8b 	uxth.w	fp, fp
 800b428:	445b      	add	r3, fp
 800b42a:	fa1f fb82 	uxth.w	fp, r2
 800b42e:	f8de 2000 	ldr.w	r2, [lr]
 800b432:	4581      	cmp	r9, r0
 800b434:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b438:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b442:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b446:	f84e 3b04 	str.w	r3, [lr], #4
 800b44a:	d2da      	bcs.n	800b402 <quorem+0x42>
 800b44c:	f856 300c 	ldr.w	r3, [r6, ip]
 800b450:	b933      	cbnz	r3, 800b460 <quorem+0xa0>
 800b452:	9b01      	ldr	r3, [sp, #4]
 800b454:	3b04      	subs	r3, #4
 800b456:	429e      	cmp	r6, r3
 800b458:	461a      	mov	r2, r3
 800b45a:	d331      	bcc.n	800b4c0 <quorem+0x100>
 800b45c:	f8c8 4010 	str.w	r4, [r8, #16]
 800b460:	4640      	mov	r0, r8
 800b462:	f001 fdb1 	bl	800cfc8 <__mcmp>
 800b466:	2800      	cmp	r0, #0
 800b468:	db26      	blt.n	800b4b8 <quorem+0xf8>
 800b46a:	4630      	mov	r0, r6
 800b46c:	f04f 0c00 	mov.w	ip, #0
 800b470:	3501      	adds	r5, #1
 800b472:	f857 1b04 	ldr.w	r1, [r7], #4
 800b476:	f8d0 e000 	ldr.w	lr, [r0]
 800b47a:	b28b      	uxth	r3, r1
 800b47c:	ebac 0303 	sub.w	r3, ip, r3
 800b480:	fa1f f28e 	uxth.w	r2, lr
 800b484:	4413      	add	r3, r2
 800b486:	0c0a      	lsrs	r2, r1, #16
 800b488:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b48c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b490:	b29b      	uxth	r3, r3
 800b492:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b496:	45b9      	cmp	r9, r7
 800b498:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b49c:	f840 3b04 	str.w	r3, [r0], #4
 800b4a0:	d2e7      	bcs.n	800b472 <quorem+0xb2>
 800b4a2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b4a6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b4aa:	b92a      	cbnz	r2, 800b4b8 <quorem+0xf8>
 800b4ac:	3b04      	subs	r3, #4
 800b4ae:	429e      	cmp	r6, r3
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	d30b      	bcc.n	800b4cc <quorem+0x10c>
 800b4b4:	f8c8 4010 	str.w	r4, [r8, #16]
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	b003      	add	sp, #12
 800b4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c0:	6812      	ldr	r2, [r2, #0]
 800b4c2:	3b04      	subs	r3, #4
 800b4c4:	2a00      	cmp	r2, #0
 800b4c6:	d1c9      	bne.n	800b45c <quorem+0x9c>
 800b4c8:	3c01      	subs	r4, #1
 800b4ca:	e7c4      	b.n	800b456 <quorem+0x96>
 800b4cc:	6812      	ldr	r2, [r2, #0]
 800b4ce:	3b04      	subs	r3, #4
 800b4d0:	2a00      	cmp	r2, #0
 800b4d2:	d1ef      	bne.n	800b4b4 <quorem+0xf4>
 800b4d4:	3c01      	subs	r4, #1
 800b4d6:	e7ea      	b.n	800b4ae <quorem+0xee>
 800b4d8:	2000      	movs	r0, #0
 800b4da:	e7ee      	b.n	800b4ba <quorem+0xfa>
 800b4dc:	0000      	movs	r0, r0
	...

0800b4e0 <_dtoa_r>:
 800b4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e4:	4616      	mov	r6, r2
 800b4e6:	461f      	mov	r7, r3
 800b4e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b4ea:	b095      	sub	sp, #84	; 0x54
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800b4f2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b4f6:	b93d      	cbnz	r5, 800b508 <_dtoa_r+0x28>
 800b4f8:	2010      	movs	r0, #16
 800b4fa:	f001 fadf 	bl	800cabc <malloc>
 800b4fe:	6260      	str	r0, [r4, #36]	; 0x24
 800b500:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b504:	6005      	str	r5, [r0, #0]
 800b506:	60c5      	str	r5, [r0, #12]
 800b508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b50a:	6819      	ldr	r1, [r3, #0]
 800b50c:	b151      	cbz	r1, 800b524 <_dtoa_r+0x44>
 800b50e:	685a      	ldr	r2, [r3, #4]
 800b510:	2301      	movs	r3, #1
 800b512:	4093      	lsls	r3, r2
 800b514:	604a      	str	r2, [r1, #4]
 800b516:	608b      	str	r3, [r1, #8]
 800b518:	4620      	mov	r0, r4
 800b51a:	f001 fb36 	bl	800cb8a <_Bfree>
 800b51e:	2200      	movs	r2, #0
 800b520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b522:	601a      	str	r2, [r3, #0]
 800b524:	1e3b      	subs	r3, r7, #0
 800b526:	bfaf      	iteee	ge
 800b528:	2300      	movge	r3, #0
 800b52a:	2201      	movlt	r2, #1
 800b52c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b530:	9303      	strlt	r3, [sp, #12]
 800b532:	bfac      	ite	ge
 800b534:	f8c8 3000 	strge.w	r3, [r8]
 800b538:	f8c8 2000 	strlt.w	r2, [r8]
 800b53c:	4bae      	ldr	r3, [pc, #696]	; (800b7f8 <_dtoa_r+0x318>)
 800b53e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b542:	ea33 0308 	bics.w	r3, r3, r8
 800b546:	d11b      	bne.n	800b580 <_dtoa_r+0xa0>
 800b548:	f242 730f 	movw	r3, #9999	; 0x270f
 800b54c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b54e:	6013      	str	r3, [r2, #0]
 800b550:	9b02      	ldr	r3, [sp, #8]
 800b552:	b923      	cbnz	r3, 800b55e <_dtoa_r+0x7e>
 800b554:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b558:	2800      	cmp	r0, #0
 800b55a:	f000 8545 	beq.w	800bfe8 <_dtoa_r+0xb08>
 800b55e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b560:	b953      	cbnz	r3, 800b578 <_dtoa_r+0x98>
 800b562:	4ba6      	ldr	r3, [pc, #664]	; (800b7fc <_dtoa_r+0x31c>)
 800b564:	e021      	b.n	800b5aa <_dtoa_r+0xca>
 800b566:	4ba6      	ldr	r3, [pc, #664]	; (800b800 <_dtoa_r+0x320>)
 800b568:	9306      	str	r3, [sp, #24]
 800b56a:	3308      	adds	r3, #8
 800b56c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b56e:	6013      	str	r3, [r2, #0]
 800b570:	9806      	ldr	r0, [sp, #24]
 800b572:	b015      	add	sp, #84	; 0x54
 800b574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b578:	4ba0      	ldr	r3, [pc, #640]	; (800b7fc <_dtoa_r+0x31c>)
 800b57a:	9306      	str	r3, [sp, #24]
 800b57c:	3303      	adds	r3, #3
 800b57e:	e7f5      	b.n	800b56c <_dtoa_r+0x8c>
 800b580:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b584:	2200      	movs	r2, #0
 800b586:	2300      	movs	r3, #0
 800b588:	4630      	mov	r0, r6
 800b58a:	4639      	mov	r1, r7
 800b58c:	f7f5 fa0c 	bl	80009a8 <__aeabi_dcmpeq>
 800b590:	4682      	mov	sl, r0
 800b592:	b160      	cbz	r0, 800b5ae <_dtoa_r+0xce>
 800b594:	2301      	movs	r3, #1
 800b596:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b598:	6013      	str	r3, [r2, #0]
 800b59a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f000 8520 	beq.w	800bfe2 <_dtoa_r+0xb02>
 800b5a2:	4b98      	ldr	r3, [pc, #608]	; (800b804 <_dtoa_r+0x324>)
 800b5a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b5a6:	6013      	str	r3, [r2, #0]
 800b5a8:	3b01      	subs	r3, #1
 800b5aa:	9306      	str	r3, [sp, #24]
 800b5ac:	e7e0      	b.n	800b570 <_dtoa_r+0x90>
 800b5ae:	ab12      	add	r3, sp, #72	; 0x48
 800b5b0:	9301      	str	r3, [sp, #4]
 800b5b2:	ab13      	add	r3, sp, #76	; 0x4c
 800b5b4:	9300      	str	r3, [sp, #0]
 800b5b6:	4632      	mov	r2, r6
 800b5b8:	463b      	mov	r3, r7
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f001 fdf2 	bl	800d1a4 <__d2b>
 800b5c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b5c4:	4683      	mov	fp, r0
 800b5c6:	2d00      	cmp	r5, #0
 800b5c8:	d07d      	beq.n	800b6c6 <_dtoa_r+0x1e6>
 800b5ca:	46b0      	mov	r8, r6
 800b5cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b5d0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800b5d4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800b5d8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b5dc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	4b89      	ldr	r3, [pc, #548]	; (800b808 <_dtoa_r+0x328>)
 800b5e4:	4640      	mov	r0, r8
 800b5e6:	4649      	mov	r1, r9
 800b5e8:	f7f4 fdbe 	bl	8000168 <__aeabi_dsub>
 800b5ec:	a37c      	add	r3, pc, #496	; (adr r3, 800b7e0 <_dtoa_r+0x300>)
 800b5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f2:	f7f4 ff71 	bl	80004d8 <__aeabi_dmul>
 800b5f6:	a37c      	add	r3, pc, #496	; (adr r3, 800b7e8 <_dtoa_r+0x308>)
 800b5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fc:	f7f4 fdb6 	bl	800016c <__adddf3>
 800b600:	4606      	mov	r6, r0
 800b602:	4628      	mov	r0, r5
 800b604:	460f      	mov	r7, r1
 800b606:	f7f4 fefd 	bl	8000404 <__aeabi_i2d>
 800b60a:	a379      	add	r3, pc, #484	; (adr r3, 800b7f0 <_dtoa_r+0x310>)
 800b60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b610:	f7f4 ff62 	bl	80004d8 <__aeabi_dmul>
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	4630      	mov	r0, r6
 800b61a:	4639      	mov	r1, r7
 800b61c:	f7f4 fda6 	bl	800016c <__adddf3>
 800b620:	4606      	mov	r6, r0
 800b622:	460f      	mov	r7, r1
 800b624:	f7f5 fa08 	bl	8000a38 <__aeabi_d2iz>
 800b628:	2200      	movs	r2, #0
 800b62a:	4682      	mov	sl, r0
 800b62c:	2300      	movs	r3, #0
 800b62e:	4630      	mov	r0, r6
 800b630:	4639      	mov	r1, r7
 800b632:	f7f5 f9c3 	bl	80009bc <__aeabi_dcmplt>
 800b636:	b148      	cbz	r0, 800b64c <_dtoa_r+0x16c>
 800b638:	4650      	mov	r0, sl
 800b63a:	f7f4 fee3 	bl	8000404 <__aeabi_i2d>
 800b63e:	4632      	mov	r2, r6
 800b640:	463b      	mov	r3, r7
 800b642:	f7f5 f9b1 	bl	80009a8 <__aeabi_dcmpeq>
 800b646:	b908      	cbnz	r0, 800b64c <_dtoa_r+0x16c>
 800b648:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b64c:	f1ba 0f16 	cmp.w	sl, #22
 800b650:	d85a      	bhi.n	800b708 <_dtoa_r+0x228>
 800b652:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b656:	496d      	ldr	r1, [pc, #436]	; (800b80c <_dtoa_r+0x32c>)
 800b658:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b65c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b660:	f7f5 f9ca 	bl	80009f8 <__aeabi_dcmpgt>
 800b664:	2800      	cmp	r0, #0
 800b666:	d051      	beq.n	800b70c <_dtoa_r+0x22c>
 800b668:	2300      	movs	r3, #0
 800b66a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b66e:	930d      	str	r3, [sp, #52]	; 0x34
 800b670:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b672:	1b5d      	subs	r5, r3, r5
 800b674:	1e6b      	subs	r3, r5, #1
 800b676:	9307      	str	r3, [sp, #28]
 800b678:	bf43      	ittte	mi
 800b67a:	2300      	movmi	r3, #0
 800b67c:	f1c5 0901 	rsbmi	r9, r5, #1
 800b680:	9307      	strmi	r3, [sp, #28]
 800b682:	f04f 0900 	movpl.w	r9, #0
 800b686:	f1ba 0f00 	cmp.w	sl, #0
 800b68a:	db41      	blt.n	800b710 <_dtoa_r+0x230>
 800b68c:	9b07      	ldr	r3, [sp, #28]
 800b68e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800b692:	4453      	add	r3, sl
 800b694:	9307      	str	r3, [sp, #28]
 800b696:	2300      	movs	r3, #0
 800b698:	9308      	str	r3, [sp, #32]
 800b69a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b69c:	2b09      	cmp	r3, #9
 800b69e:	f200 808f 	bhi.w	800b7c0 <_dtoa_r+0x2e0>
 800b6a2:	2b05      	cmp	r3, #5
 800b6a4:	bfc4      	itt	gt
 800b6a6:	3b04      	subgt	r3, #4
 800b6a8:	931e      	strgt	r3, [sp, #120]	; 0x78
 800b6aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b6ac:	bfc8      	it	gt
 800b6ae:	2500      	movgt	r5, #0
 800b6b0:	f1a3 0302 	sub.w	r3, r3, #2
 800b6b4:	bfd8      	it	le
 800b6b6:	2501      	movle	r5, #1
 800b6b8:	2b03      	cmp	r3, #3
 800b6ba:	f200 808d 	bhi.w	800b7d8 <_dtoa_r+0x2f8>
 800b6be:	e8df f003 	tbb	[pc, r3]
 800b6c2:	7d7b      	.short	0x7d7b
 800b6c4:	6f2f      	.short	0x6f2f
 800b6c6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b6ca:	441d      	add	r5, r3
 800b6cc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b6d0:	2820      	cmp	r0, #32
 800b6d2:	dd13      	ble.n	800b6fc <_dtoa_r+0x21c>
 800b6d4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b6d8:	9b02      	ldr	r3, [sp, #8]
 800b6da:	fa08 f800 	lsl.w	r8, r8, r0
 800b6de:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b6e2:	fa23 f000 	lsr.w	r0, r3, r0
 800b6e6:	ea48 0000 	orr.w	r0, r8, r0
 800b6ea:	f7f4 fe7b 	bl	80003e4 <__aeabi_ui2d>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	4680      	mov	r8, r0
 800b6f2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800b6f6:	3d01      	subs	r5, #1
 800b6f8:	9310      	str	r3, [sp, #64]	; 0x40
 800b6fa:	e771      	b.n	800b5e0 <_dtoa_r+0x100>
 800b6fc:	9b02      	ldr	r3, [sp, #8]
 800b6fe:	f1c0 0020 	rsb	r0, r0, #32
 800b702:	fa03 f000 	lsl.w	r0, r3, r0
 800b706:	e7f0      	b.n	800b6ea <_dtoa_r+0x20a>
 800b708:	2301      	movs	r3, #1
 800b70a:	e7b0      	b.n	800b66e <_dtoa_r+0x18e>
 800b70c:	900d      	str	r0, [sp, #52]	; 0x34
 800b70e:	e7af      	b.n	800b670 <_dtoa_r+0x190>
 800b710:	f1ca 0300 	rsb	r3, sl, #0
 800b714:	9308      	str	r3, [sp, #32]
 800b716:	2300      	movs	r3, #0
 800b718:	eba9 090a 	sub.w	r9, r9, sl
 800b71c:	930c      	str	r3, [sp, #48]	; 0x30
 800b71e:	e7bc      	b.n	800b69a <_dtoa_r+0x1ba>
 800b720:	2301      	movs	r3, #1
 800b722:	9309      	str	r3, [sp, #36]	; 0x24
 800b724:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b726:	2b00      	cmp	r3, #0
 800b728:	dd74      	ble.n	800b814 <_dtoa_r+0x334>
 800b72a:	4698      	mov	r8, r3
 800b72c:	9304      	str	r3, [sp, #16]
 800b72e:	2200      	movs	r2, #0
 800b730:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b732:	6072      	str	r2, [r6, #4]
 800b734:	2204      	movs	r2, #4
 800b736:	f102 0014 	add.w	r0, r2, #20
 800b73a:	4298      	cmp	r0, r3
 800b73c:	6871      	ldr	r1, [r6, #4]
 800b73e:	d96e      	bls.n	800b81e <_dtoa_r+0x33e>
 800b740:	4620      	mov	r0, r4
 800b742:	f001 f9ee 	bl	800cb22 <_Balloc>
 800b746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b748:	6030      	str	r0, [r6, #0]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f1b8 0f0e 	cmp.w	r8, #14
 800b750:	9306      	str	r3, [sp, #24]
 800b752:	f200 80ed 	bhi.w	800b930 <_dtoa_r+0x450>
 800b756:	2d00      	cmp	r5, #0
 800b758:	f000 80ea 	beq.w	800b930 <_dtoa_r+0x450>
 800b75c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b760:	f1ba 0f00 	cmp.w	sl, #0
 800b764:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b768:	dd77      	ble.n	800b85a <_dtoa_r+0x37a>
 800b76a:	4a28      	ldr	r2, [pc, #160]	; (800b80c <_dtoa_r+0x32c>)
 800b76c:	f00a 030f 	and.w	r3, sl, #15
 800b770:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b774:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b778:	06f0      	lsls	r0, r6, #27
 800b77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b782:	d568      	bpl.n	800b856 <_dtoa_r+0x376>
 800b784:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b788:	4b21      	ldr	r3, [pc, #132]	; (800b810 <_dtoa_r+0x330>)
 800b78a:	2503      	movs	r5, #3
 800b78c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b790:	f7f4 ffcc 	bl	800072c <__aeabi_ddiv>
 800b794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b798:	f006 060f 	and.w	r6, r6, #15
 800b79c:	4f1c      	ldr	r7, [pc, #112]	; (800b810 <_dtoa_r+0x330>)
 800b79e:	e04f      	b.n	800b840 <_dtoa_r+0x360>
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b7a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b7a6:	4453      	add	r3, sl
 800b7a8:	f103 0801 	add.w	r8, r3, #1
 800b7ac:	9304      	str	r3, [sp, #16]
 800b7ae:	4643      	mov	r3, r8
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	bfb8      	it	lt
 800b7b4:	2301      	movlt	r3, #1
 800b7b6:	e7ba      	b.n	800b72e <_dtoa_r+0x24e>
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	e7b2      	b.n	800b722 <_dtoa_r+0x242>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	e7f0      	b.n	800b7a2 <_dtoa_r+0x2c2>
 800b7c0:	2501      	movs	r5, #1
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	9509      	str	r5, [sp, #36]	; 0x24
 800b7c6:	931e      	str	r3, [sp, #120]	; 0x78
 800b7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	9304      	str	r3, [sp, #16]
 800b7d0:	4698      	mov	r8, r3
 800b7d2:	2312      	movs	r3, #18
 800b7d4:	921f      	str	r2, [sp, #124]	; 0x7c
 800b7d6:	e7aa      	b.n	800b72e <_dtoa_r+0x24e>
 800b7d8:	2301      	movs	r3, #1
 800b7da:	9309      	str	r3, [sp, #36]	; 0x24
 800b7dc:	e7f4      	b.n	800b7c8 <_dtoa_r+0x2e8>
 800b7de:	bf00      	nop
 800b7e0:	636f4361 	.word	0x636f4361
 800b7e4:	3fd287a7 	.word	0x3fd287a7
 800b7e8:	8b60c8b3 	.word	0x8b60c8b3
 800b7ec:	3fc68a28 	.word	0x3fc68a28
 800b7f0:	509f79fb 	.word	0x509f79fb
 800b7f4:	3fd34413 	.word	0x3fd34413
 800b7f8:	7ff00000 	.word	0x7ff00000
 800b7fc:	0800e451 	.word	0x0800e451
 800b800:	0800e448 	.word	0x0800e448
 800b804:	0800e5ec 	.word	0x0800e5ec
 800b808:	3ff80000 	.word	0x3ff80000
 800b80c:	0800e4f0 	.word	0x0800e4f0
 800b810:	0800e4c8 	.word	0x0800e4c8
 800b814:	2301      	movs	r3, #1
 800b816:	9304      	str	r3, [sp, #16]
 800b818:	4698      	mov	r8, r3
 800b81a:	461a      	mov	r2, r3
 800b81c:	e7da      	b.n	800b7d4 <_dtoa_r+0x2f4>
 800b81e:	3101      	adds	r1, #1
 800b820:	6071      	str	r1, [r6, #4]
 800b822:	0052      	lsls	r2, r2, #1
 800b824:	e787      	b.n	800b736 <_dtoa_r+0x256>
 800b826:	07f1      	lsls	r1, r6, #31
 800b828:	d508      	bpl.n	800b83c <_dtoa_r+0x35c>
 800b82a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b82e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b832:	f7f4 fe51 	bl	80004d8 <__aeabi_dmul>
 800b836:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b83a:	3501      	adds	r5, #1
 800b83c:	1076      	asrs	r6, r6, #1
 800b83e:	3708      	adds	r7, #8
 800b840:	2e00      	cmp	r6, #0
 800b842:	d1f0      	bne.n	800b826 <_dtoa_r+0x346>
 800b844:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b84c:	f7f4 ff6e 	bl	800072c <__aeabi_ddiv>
 800b850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b854:	e01b      	b.n	800b88e <_dtoa_r+0x3ae>
 800b856:	2502      	movs	r5, #2
 800b858:	e7a0      	b.n	800b79c <_dtoa_r+0x2bc>
 800b85a:	f000 80a4 	beq.w	800b9a6 <_dtoa_r+0x4c6>
 800b85e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b862:	f1ca 0600 	rsb	r6, sl, #0
 800b866:	4ba0      	ldr	r3, [pc, #640]	; (800bae8 <_dtoa_r+0x608>)
 800b868:	f006 020f 	and.w	r2, r6, #15
 800b86c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b874:	f7f4 fe30 	bl	80004d8 <__aeabi_dmul>
 800b878:	2502      	movs	r5, #2
 800b87a:	2300      	movs	r3, #0
 800b87c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b880:	4f9a      	ldr	r7, [pc, #616]	; (800baec <_dtoa_r+0x60c>)
 800b882:	1136      	asrs	r6, r6, #4
 800b884:	2e00      	cmp	r6, #0
 800b886:	f040 8083 	bne.w	800b990 <_dtoa_r+0x4b0>
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1e0      	bne.n	800b850 <_dtoa_r+0x370>
 800b88e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b890:	2b00      	cmp	r3, #0
 800b892:	f000 808a 	beq.w	800b9aa <_dtoa_r+0x4ca>
 800b896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b89a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b89e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	4b92      	ldr	r3, [pc, #584]	; (800baf0 <_dtoa_r+0x610>)
 800b8a6:	f7f5 f889 	bl	80009bc <__aeabi_dcmplt>
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	d07d      	beq.n	800b9aa <_dtoa_r+0x4ca>
 800b8ae:	f1b8 0f00 	cmp.w	r8, #0
 800b8b2:	d07a      	beq.n	800b9aa <_dtoa_r+0x4ca>
 800b8b4:	9b04      	ldr	r3, [sp, #16]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	dd36      	ble.n	800b928 <_dtoa_r+0x448>
 800b8ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b8be:	2200      	movs	r2, #0
 800b8c0:	4b8c      	ldr	r3, [pc, #560]	; (800baf4 <_dtoa_r+0x614>)
 800b8c2:	f7f4 fe09 	bl	80004d8 <__aeabi_dmul>
 800b8c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8ca:	9e04      	ldr	r6, [sp, #16]
 800b8cc:	f10a 37ff 	add.w	r7, sl, #4294967295
 800b8d0:	3501      	adds	r5, #1
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	f7f4 fd96 	bl	8000404 <__aeabi_i2d>
 800b8d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8dc:	f7f4 fdfc 	bl	80004d8 <__aeabi_dmul>
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	4b85      	ldr	r3, [pc, #532]	; (800baf8 <_dtoa_r+0x618>)
 800b8e4:	f7f4 fc42 	bl	800016c <__adddf3>
 800b8e8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800b8ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b8f0:	950b      	str	r5, [sp, #44]	; 0x2c
 800b8f2:	2e00      	cmp	r6, #0
 800b8f4:	d15c      	bne.n	800b9b0 <_dtoa_r+0x4d0>
 800b8f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	4b7f      	ldr	r3, [pc, #508]	; (800bafc <_dtoa_r+0x61c>)
 800b8fe:	f7f4 fc33 	bl	8000168 <__aeabi_dsub>
 800b902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b904:	462b      	mov	r3, r5
 800b906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b90a:	f7f5 f875 	bl	80009f8 <__aeabi_dcmpgt>
 800b90e:	2800      	cmp	r0, #0
 800b910:	f040 8281 	bne.w	800be16 <_dtoa_r+0x936>
 800b914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b91a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b91e:	f7f5 f84d 	bl	80009bc <__aeabi_dcmplt>
 800b922:	2800      	cmp	r0, #0
 800b924:	f040 8275 	bne.w	800be12 <_dtoa_r+0x932>
 800b928:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b92c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b930:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b932:	2b00      	cmp	r3, #0
 800b934:	f2c0 814b 	blt.w	800bbce <_dtoa_r+0x6ee>
 800b938:	f1ba 0f0e 	cmp.w	sl, #14
 800b93c:	f300 8147 	bgt.w	800bbce <_dtoa_r+0x6ee>
 800b940:	4b69      	ldr	r3, [pc, #420]	; (800bae8 <_dtoa_r+0x608>)
 800b942:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b94e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b950:	2b00      	cmp	r3, #0
 800b952:	f280 80d7 	bge.w	800bb04 <_dtoa_r+0x624>
 800b956:	f1b8 0f00 	cmp.w	r8, #0
 800b95a:	f300 80d3 	bgt.w	800bb04 <_dtoa_r+0x624>
 800b95e:	f040 8257 	bne.w	800be10 <_dtoa_r+0x930>
 800b962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b966:	2200      	movs	r2, #0
 800b968:	4b64      	ldr	r3, [pc, #400]	; (800bafc <_dtoa_r+0x61c>)
 800b96a:	f7f4 fdb5 	bl	80004d8 <__aeabi_dmul>
 800b96e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b972:	f7f5 f837 	bl	80009e4 <__aeabi_dcmpge>
 800b976:	4646      	mov	r6, r8
 800b978:	4647      	mov	r7, r8
 800b97a:	2800      	cmp	r0, #0
 800b97c:	f040 822d 	bne.w	800bdda <_dtoa_r+0x8fa>
 800b980:	9b06      	ldr	r3, [sp, #24]
 800b982:	9a06      	ldr	r2, [sp, #24]
 800b984:	1c5d      	adds	r5, r3, #1
 800b986:	2331      	movs	r3, #49	; 0x31
 800b988:	f10a 0a01 	add.w	sl, sl, #1
 800b98c:	7013      	strb	r3, [r2, #0]
 800b98e:	e228      	b.n	800bde2 <_dtoa_r+0x902>
 800b990:	07f2      	lsls	r2, r6, #31
 800b992:	d505      	bpl.n	800b9a0 <_dtoa_r+0x4c0>
 800b994:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b998:	f7f4 fd9e 	bl	80004d8 <__aeabi_dmul>
 800b99c:	2301      	movs	r3, #1
 800b99e:	3501      	adds	r5, #1
 800b9a0:	1076      	asrs	r6, r6, #1
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	e76e      	b.n	800b884 <_dtoa_r+0x3a4>
 800b9a6:	2502      	movs	r5, #2
 800b9a8:	e771      	b.n	800b88e <_dtoa_r+0x3ae>
 800b9aa:	4657      	mov	r7, sl
 800b9ac:	4646      	mov	r6, r8
 800b9ae:	e790      	b.n	800b8d2 <_dtoa_r+0x3f2>
 800b9b0:	4b4d      	ldr	r3, [pc, #308]	; (800bae8 <_dtoa_r+0x608>)
 800b9b2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b9b6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d048      	beq.n	800ba52 <_dtoa_r+0x572>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	2000      	movs	r0, #0
 800b9c6:	494e      	ldr	r1, [pc, #312]	; (800bb00 <_dtoa_r+0x620>)
 800b9c8:	f7f4 feb0 	bl	800072c <__aeabi_ddiv>
 800b9cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b9d0:	f7f4 fbca 	bl	8000168 <__aeabi_dsub>
 800b9d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b9d8:	9d06      	ldr	r5, [sp, #24]
 800b9da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9de:	f7f5 f82b 	bl	8000a38 <__aeabi_d2iz>
 800b9e2:	9011      	str	r0, [sp, #68]	; 0x44
 800b9e4:	f7f4 fd0e 	bl	8000404 <__aeabi_i2d>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9f0:	f7f4 fbba 	bl	8000168 <__aeabi_dsub>
 800b9f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9fa:	3330      	adds	r3, #48	; 0x30
 800b9fc:	f805 3b01 	strb.w	r3, [r5], #1
 800ba00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ba04:	f7f4 ffda 	bl	80009bc <__aeabi_dcmplt>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d163      	bne.n	800bad4 <_dtoa_r+0x5f4>
 800ba0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba10:	2000      	movs	r0, #0
 800ba12:	4937      	ldr	r1, [pc, #220]	; (800baf0 <_dtoa_r+0x610>)
 800ba14:	f7f4 fba8 	bl	8000168 <__aeabi_dsub>
 800ba18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ba1c:	f7f4 ffce 	bl	80009bc <__aeabi_dcmplt>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	f040 80b5 	bne.w	800bb90 <_dtoa_r+0x6b0>
 800ba26:	9b06      	ldr	r3, [sp, #24]
 800ba28:	1aeb      	subs	r3, r5, r3
 800ba2a:	429e      	cmp	r6, r3
 800ba2c:	f77f af7c 	ble.w	800b928 <_dtoa_r+0x448>
 800ba30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba34:	2200      	movs	r2, #0
 800ba36:	4b2f      	ldr	r3, [pc, #188]	; (800baf4 <_dtoa_r+0x614>)
 800ba38:	f7f4 fd4e 	bl	80004d8 <__aeabi_dmul>
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ba42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba46:	4b2b      	ldr	r3, [pc, #172]	; (800baf4 <_dtoa_r+0x614>)
 800ba48:	f7f4 fd46 	bl	80004d8 <__aeabi_dmul>
 800ba4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba50:	e7c3      	b.n	800b9da <_dtoa_r+0x4fa>
 800ba52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ba56:	f7f4 fd3f 	bl	80004d8 <__aeabi_dmul>
 800ba5a:	9b06      	ldr	r3, [sp, #24]
 800ba5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ba60:	199d      	adds	r5, r3, r6
 800ba62:	461e      	mov	r6, r3
 800ba64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba68:	f7f4 ffe6 	bl	8000a38 <__aeabi_d2iz>
 800ba6c:	9011      	str	r0, [sp, #68]	; 0x44
 800ba6e:	f7f4 fcc9 	bl	8000404 <__aeabi_i2d>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba7a:	f7f4 fb75 	bl	8000168 <__aeabi_dsub>
 800ba7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba84:	3330      	adds	r3, #48	; 0x30
 800ba86:	f806 3b01 	strb.w	r3, [r6], #1
 800ba8a:	42ae      	cmp	r6, r5
 800ba8c:	f04f 0200 	mov.w	r2, #0
 800ba90:	d124      	bne.n	800badc <_dtoa_r+0x5fc>
 800ba92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba96:	4b1a      	ldr	r3, [pc, #104]	; (800bb00 <_dtoa_r+0x620>)
 800ba98:	f7f4 fb68 	bl	800016c <__adddf3>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	460b      	mov	r3, r1
 800baa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baa4:	f7f4 ffa8 	bl	80009f8 <__aeabi_dcmpgt>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d171      	bne.n	800bb90 <_dtoa_r+0x6b0>
 800baac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bab0:	2000      	movs	r0, #0
 800bab2:	4913      	ldr	r1, [pc, #76]	; (800bb00 <_dtoa_r+0x620>)
 800bab4:	f7f4 fb58 	bl	8000168 <__aeabi_dsub>
 800bab8:	4602      	mov	r2, r0
 800baba:	460b      	mov	r3, r1
 800babc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bac0:	f7f4 ff7c 	bl	80009bc <__aeabi_dcmplt>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	f43f af2f 	beq.w	800b928 <_dtoa_r+0x448>
 800baca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bace:	1e6a      	subs	r2, r5, #1
 800bad0:	2b30      	cmp	r3, #48	; 0x30
 800bad2:	d001      	beq.n	800bad8 <_dtoa_r+0x5f8>
 800bad4:	46ba      	mov	sl, r7
 800bad6:	e04a      	b.n	800bb6e <_dtoa_r+0x68e>
 800bad8:	4615      	mov	r5, r2
 800bada:	e7f6      	b.n	800baca <_dtoa_r+0x5ea>
 800badc:	4b05      	ldr	r3, [pc, #20]	; (800baf4 <_dtoa_r+0x614>)
 800bade:	f7f4 fcfb 	bl	80004d8 <__aeabi_dmul>
 800bae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bae6:	e7bd      	b.n	800ba64 <_dtoa_r+0x584>
 800bae8:	0800e4f0 	.word	0x0800e4f0
 800baec:	0800e4c8 	.word	0x0800e4c8
 800baf0:	3ff00000 	.word	0x3ff00000
 800baf4:	40240000 	.word	0x40240000
 800baf8:	401c0000 	.word	0x401c0000
 800bafc:	40140000 	.word	0x40140000
 800bb00:	3fe00000 	.word	0x3fe00000
 800bb04:	9d06      	ldr	r5, [sp, #24]
 800bb06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bb0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb0e:	4630      	mov	r0, r6
 800bb10:	4639      	mov	r1, r7
 800bb12:	f7f4 fe0b 	bl	800072c <__aeabi_ddiv>
 800bb16:	f7f4 ff8f 	bl	8000a38 <__aeabi_d2iz>
 800bb1a:	4681      	mov	r9, r0
 800bb1c:	f7f4 fc72 	bl	8000404 <__aeabi_i2d>
 800bb20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb24:	f7f4 fcd8 	bl	80004d8 <__aeabi_dmul>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	4630      	mov	r0, r6
 800bb2e:	4639      	mov	r1, r7
 800bb30:	f7f4 fb1a 	bl	8000168 <__aeabi_dsub>
 800bb34:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800bb38:	f805 6b01 	strb.w	r6, [r5], #1
 800bb3c:	9e06      	ldr	r6, [sp, #24]
 800bb3e:	4602      	mov	r2, r0
 800bb40:	1bae      	subs	r6, r5, r6
 800bb42:	45b0      	cmp	r8, r6
 800bb44:	460b      	mov	r3, r1
 800bb46:	d135      	bne.n	800bbb4 <_dtoa_r+0x6d4>
 800bb48:	f7f4 fb10 	bl	800016c <__adddf3>
 800bb4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb50:	4606      	mov	r6, r0
 800bb52:	460f      	mov	r7, r1
 800bb54:	f7f4 ff50 	bl	80009f8 <__aeabi_dcmpgt>
 800bb58:	b9c8      	cbnz	r0, 800bb8e <_dtoa_r+0x6ae>
 800bb5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb5e:	4630      	mov	r0, r6
 800bb60:	4639      	mov	r1, r7
 800bb62:	f7f4 ff21 	bl	80009a8 <__aeabi_dcmpeq>
 800bb66:	b110      	cbz	r0, 800bb6e <_dtoa_r+0x68e>
 800bb68:	f019 0f01 	tst.w	r9, #1
 800bb6c:	d10f      	bne.n	800bb8e <_dtoa_r+0x6ae>
 800bb6e:	4659      	mov	r1, fp
 800bb70:	4620      	mov	r0, r4
 800bb72:	f001 f80a 	bl	800cb8a <_Bfree>
 800bb76:	2300      	movs	r3, #0
 800bb78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bb7a:	702b      	strb	r3, [r5, #0]
 800bb7c:	f10a 0301 	add.w	r3, sl, #1
 800bb80:	6013      	str	r3, [r2, #0]
 800bb82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f43f acf3 	beq.w	800b570 <_dtoa_r+0x90>
 800bb8a:	601d      	str	r5, [r3, #0]
 800bb8c:	e4f0      	b.n	800b570 <_dtoa_r+0x90>
 800bb8e:	4657      	mov	r7, sl
 800bb90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb94:	1e6b      	subs	r3, r5, #1
 800bb96:	2a39      	cmp	r2, #57	; 0x39
 800bb98:	d106      	bne.n	800bba8 <_dtoa_r+0x6c8>
 800bb9a:	9a06      	ldr	r2, [sp, #24]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d107      	bne.n	800bbb0 <_dtoa_r+0x6d0>
 800bba0:	2330      	movs	r3, #48	; 0x30
 800bba2:	7013      	strb	r3, [r2, #0]
 800bba4:	4613      	mov	r3, r2
 800bba6:	3701      	adds	r7, #1
 800bba8:	781a      	ldrb	r2, [r3, #0]
 800bbaa:	3201      	adds	r2, #1
 800bbac:	701a      	strb	r2, [r3, #0]
 800bbae:	e791      	b.n	800bad4 <_dtoa_r+0x5f4>
 800bbb0:	461d      	mov	r5, r3
 800bbb2:	e7ed      	b.n	800bb90 <_dtoa_r+0x6b0>
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	4b99      	ldr	r3, [pc, #612]	; (800be1c <_dtoa_r+0x93c>)
 800bbb8:	f7f4 fc8e 	bl	80004d8 <__aeabi_dmul>
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	4606      	mov	r6, r0
 800bbc2:	460f      	mov	r7, r1
 800bbc4:	f7f4 fef0 	bl	80009a8 <__aeabi_dcmpeq>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d09e      	beq.n	800bb0a <_dtoa_r+0x62a>
 800bbcc:	e7cf      	b.n	800bb6e <_dtoa_r+0x68e>
 800bbce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbd0:	2a00      	cmp	r2, #0
 800bbd2:	f000 8088 	beq.w	800bce6 <_dtoa_r+0x806>
 800bbd6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bbd8:	2a01      	cmp	r2, #1
 800bbda:	dc6d      	bgt.n	800bcb8 <_dtoa_r+0x7d8>
 800bbdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bbde:	2a00      	cmp	r2, #0
 800bbe0:	d066      	beq.n	800bcb0 <_dtoa_r+0x7d0>
 800bbe2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bbe6:	464d      	mov	r5, r9
 800bbe8:	9e08      	ldr	r6, [sp, #32]
 800bbea:	9a07      	ldr	r2, [sp, #28]
 800bbec:	2101      	movs	r1, #1
 800bbee:	441a      	add	r2, r3
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	4499      	add	r9, r3
 800bbf4:	9207      	str	r2, [sp, #28]
 800bbf6:	f001 f8a6 	bl	800cd46 <__i2b>
 800bbfa:	4607      	mov	r7, r0
 800bbfc:	2d00      	cmp	r5, #0
 800bbfe:	dd0b      	ble.n	800bc18 <_dtoa_r+0x738>
 800bc00:	9b07      	ldr	r3, [sp, #28]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	dd08      	ble.n	800bc18 <_dtoa_r+0x738>
 800bc06:	42ab      	cmp	r3, r5
 800bc08:	bfa8      	it	ge
 800bc0a:	462b      	movge	r3, r5
 800bc0c:	9a07      	ldr	r2, [sp, #28]
 800bc0e:	eba9 0903 	sub.w	r9, r9, r3
 800bc12:	1aed      	subs	r5, r5, r3
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	9307      	str	r3, [sp, #28]
 800bc18:	9b08      	ldr	r3, [sp, #32]
 800bc1a:	b1eb      	cbz	r3, 800bc58 <_dtoa_r+0x778>
 800bc1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d065      	beq.n	800bcee <_dtoa_r+0x80e>
 800bc22:	b18e      	cbz	r6, 800bc48 <_dtoa_r+0x768>
 800bc24:	4639      	mov	r1, r7
 800bc26:	4632      	mov	r2, r6
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f001 f92b 	bl	800ce84 <__pow5mult>
 800bc2e:	465a      	mov	r2, fp
 800bc30:	4601      	mov	r1, r0
 800bc32:	4607      	mov	r7, r0
 800bc34:	4620      	mov	r0, r4
 800bc36:	f001 f88f 	bl	800cd58 <__multiply>
 800bc3a:	4659      	mov	r1, fp
 800bc3c:	900a      	str	r0, [sp, #40]	; 0x28
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f000 ffa3 	bl	800cb8a <_Bfree>
 800bc44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc46:	469b      	mov	fp, r3
 800bc48:	9b08      	ldr	r3, [sp, #32]
 800bc4a:	1b9a      	subs	r2, r3, r6
 800bc4c:	d004      	beq.n	800bc58 <_dtoa_r+0x778>
 800bc4e:	4659      	mov	r1, fp
 800bc50:	4620      	mov	r0, r4
 800bc52:	f001 f917 	bl	800ce84 <__pow5mult>
 800bc56:	4683      	mov	fp, r0
 800bc58:	2101      	movs	r1, #1
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f001 f873 	bl	800cd46 <__i2b>
 800bc60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc62:	4606      	mov	r6, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	f000 81c6 	beq.w	800bff6 <_dtoa_r+0xb16>
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	4601      	mov	r1, r0
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f001 f908 	bl	800ce84 <__pow5mult>
 800bc74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bc76:	4606      	mov	r6, r0
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	dc3e      	bgt.n	800bcfa <_dtoa_r+0x81a>
 800bc7c:	9b02      	ldr	r3, [sp, #8]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d137      	bne.n	800bcf2 <_dtoa_r+0x812>
 800bc82:	9b03      	ldr	r3, [sp, #12]
 800bc84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d134      	bne.n	800bcf6 <_dtoa_r+0x816>
 800bc8c:	9b03      	ldr	r3, [sp, #12]
 800bc8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc92:	0d1b      	lsrs	r3, r3, #20
 800bc94:	051b      	lsls	r3, r3, #20
 800bc96:	b12b      	cbz	r3, 800bca4 <_dtoa_r+0x7c4>
 800bc98:	9b07      	ldr	r3, [sp, #28]
 800bc9a:	f109 0901 	add.w	r9, r9, #1
 800bc9e:	3301      	adds	r3, #1
 800bca0:	9307      	str	r3, [sp, #28]
 800bca2:	2301      	movs	r3, #1
 800bca4:	9308      	str	r3, [sp, #32]
 800bca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d128      	bne.n	800bcfe <_dtoa_r+0x81e>
 800bcac:	2001      	movs	r0, #1
 800bcae:	e02e      	b.n	800bd0e <_dtoa_r+0x82e>
 800bcb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bcb2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bcb6:	e796      	b.n	800bbe6 <_dtoa_r+0x706>
 800bcb8:	9b08      	ldr	r3, [sp, #32]
 800bcba:	f108 36ff 	add.w	r6, r8, #4294967295
 800bcbe:	42b3      	cmp	r3, r6
 800bcc0:	bfb7      	itett	lt
 800bcc2:	9b08      	ldrlt	r3, [sp, #32]
 800bcc4:	1b9e      	subge	r6, r3, r6
 800bcc6:	1af2      	sublt	r2, r6, r3
 800bcc8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800bcca:	bfbf      	itttt	lt
 800bccc:	9608      	strlt	r6, [sp, #32]
 800bcce:	189b      	addlt	r3, r3, r2
 800bcd0:	930c      	strlt	r3, [sp, #48]	; 0x30
 800bcd2:	2600      	movlt	r6, #0
 800bcd4:	f1b8 0f00 	cmp.w	r8, #0
 800bcd8:	bfb9      	ittee	lt
 800bcda:	eba9 0508 	sublt.w	r5, r9, r8
 800bcde:	2300      	movlt	r3, #0
 800bce0:	464d      	movge	r5, r9
 800bce2:	4643      	movge	r3, r8
 800bce4:	e781      	b.n	800bbea <_dtoa_r+0x70a>
 800bce6:	9e08      	ldr	r6, [sp, #32]
 800bce8:	464d      	mov	r5, r9
 800bcea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bcec:	e786      	b.n	800bbfc <_dtoa_r+0x71c>
 800bcee:	9a08      	ldr	r2, [sp, #32]
 800bcf0:	e7ad      	b.n	800bc4e <_dtoa_r+0x76e>
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	e7d6      	b.n	800bca4 <_dtoa_r+0x7c4>
 800bcf6:	9b02      	ldr	r3, [sp, #8]
 800bcf8:	e7d4      	b.n	800bca4 <_dtoa_r+0x7c4>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	9308      	str	r3, [sp, #32]
 800bcfe:	6933      	ldr	r3, [r6, #16]
 800bd00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd04:	6918      	ldr	r0, [r3, #16]
 800bd06:	f000 ffd0 	bl	800ccaa <__hi0bits>
 800bd0a:	f1c0 0020 	rsb	r0, r0, #32
 800bd0e:	9b07      	ldr	r3, [sp, #28]
 800bd10:	4418      	add	r0, r3
 800bd12:	f010 001f 	ands.w	r0, r0, #31
 800bd16:	d047      	beq.n	800bda8 <_dtoa_r+0x8c8>
 800bd18:	f1c0 0320 	rsb	r3, r0, #32
 800bd1c:	2b04      	cmp	r3, #4
 800bd1e:	dd3b      	ble.n	800bd98 <_dtoa_r+0x8b8>
 800bd20:	9b07      	ldr	r3, [sp, #28]
 800bd22:	f1c0 001c 	rsb	r0, r0, #28
 800bd26:	4481      	add	r9, r0
 800bd28:	4405      	add	r5, r0
 800bd2a:	4403      	add	r3, r0
 800bd2c:	9307      	str	r3, [sp, #28]
 800bd2e:	f1b9 0f00 	cmp.w	r9, #0
 800bd32:	dd05      	ble.n	800bd40 <_dtoa_r+0x860>
 800bd34:	4659      	mov	r1, fp
 800bd36:	464a      	mov	r2, r9
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f001 f8f1 	bl	800cf20 <__lshift>
 800bd3e:	4683      	mov	fp, r0
 800bd40:	9b07      	ldr	r3, [sp, #28]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	dd05      	ble.n	800bd52 <_dtoa_r+0x872>
 800bd46:	4631      	mov	r1, r6
 800bd48:	461a      	mov	r2, r3
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	f001 f8e8 	bl	800cf20 <__lshift>
 800bd50:	4606      	mov	r6, r0
 800bd52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd54:	b353      	cbz	r3, 800bdac <_dtoa_r+0x8cc>
 800bd56:	4631      	mov	r1, r6
 800bd58:	4658      	mov	r0, fp
 800bd5a:	f001 f935 	bl	800cfc8 <__mcmp>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	da24      	bge.n	800bdac <_dtoa_r+0x8cc>
 800bd62:	2300      	movs	r3, #0
 800bd64:	4659      	mov	r1, fp
 800bd66:	220a      	movs	r2, #10
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f000 ff25 	bl	800cbb8 <__multadd>
 800bd6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd70:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd74:	4683      	mov	fp, r0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f000 8144 	beq.w	800c004 <_dtoa_r+0xb24>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	4639      	mov	r1, r7
 800bd80:	220a      	movs	r2, #10
 800bd82:	4620      	mov	r0, r4
 800bd84:	f000 ff18 	bl	800cbb8 <__multadd>
 800bd88:	9b04      	ldr	r3, [sp, #16]
 800bd8a:	4607      	mov	r7, r0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	dc4d      	bgt.n	800be2c <_dtoa_r+0x94c>
 800bd90:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bd92:	2b02      	cmp	r3, #2
 800bd94:	dd4a      	ble.n	800be2c <_dtoa_r+0x94c>
 800bd96:	e011      	b.n	800bdbc <_dtoa_r+0x8dc>
 800bd98:	d0c9      	beq.n	800bd2e <_dtoa_r+0x84e>
 800bd9a:	9a07      	ldr	r2, [sp, #28]
 800bd9c:	331c      	adds	r3, #28
 800bd9e:	441a      	add	r2, r3
 800bda0:	4499      	add	r9, r3
 800bda2:	441d      	add	r5, r3
 800bda4:	4613      	mov	r3, r2
 800bda6:	e7c1      	b.n	800bd2c <_dtoa_r+0x84c>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	e7f6      	b.n	800bd9a <_dtoa_r+0x8ba>
 800bdac:	f1b8 0f00 	cmp.w	r8, #0
 800bdb0:	dc36      	bgt.n	800be20 <_dtoa_r+0x940>
 800bdb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bdb4:	2b02      	cmp	r3, #2
 800bdb6:	dd33      	ble.n	800be20 <_dtoa_r+0x940>
 800bdb8:	f8cd 8010 	str.w	r8, [sp, #16]
 800bdbc:	9b04      	ldr	r3, [sp, #16]
 800bdbe:	b963      	cbnz	r3, 800bdda <_dtoa_r+0x8fa>
 800bdc0:	4631      	mov	r1, r6
 800bdc2:	2205      	movs	r2, #5
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	f000 fef7 	bl	800cbb8 <__multadd>
 800bdca:	4601      	mov	r1, r0
 800bdcc:	4606      	mov	r6, r0
 800bdce:	4658      	mov	r0, fp
 800bdd0:	f001 f8fa 	bl	800cfc8 <__mcmp>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	f73f add3 	bgt.w	800b980 <_dtoa_r+0x4a0>
 800bdda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bddc:	9d06      	ldr	r5, [sp, #24]
 800bdde:	ea6f 0a03 	mvn.w	sl, r3
 800bde2:	f04f 0900 	mov.w	r9, #0
 800bde6:	4631      	mov	r1, r6
 800bde8:	4620      	mov	r0, r4
 800bdea:	f000 fece 	bl	800cb8a <_Bfree>
 800bdee:	2f00      	cmp	r7, #0
 800bdf0:	f43f aebd 	beq.w	800bb6e <_dtoa_r+0x68e>
 800bdf4:	f1b9 0f00 	cmp.w	r9, #0
 800bdf8:	d005      	beq.n	800be06 <_dtoa_r+0x926>
 800bdfa:	45b9      	cmp	r9, r7
 800bdfc:	d003      	beq.n	800be06 <_dtoa_r+0x926>
 800bdfe:	4649      	mov	r1, r9
 800be00:	4620      	mov	r0, r4
 800be02:	f000 fec2 	bl	800cb8a <_Bfree>
 800be06:	4639      	mov	r1, r7
 800be08:	4620      	mov	r0, r4
 800be0a:	f000 febe 	bl	800cb8a <_Bfree>
 800be0e:	e6ae      	b.n	800bb6e <_dtoa_r+0x68e>
 800be10:	2600      	movs	r6, #0
 800be12:	4637      	mov	r7, r6
 800be14:	e7e1      	b.n	800bdda <_dtoa_r+0x8fa>
 800be16:	46ba      	mov	sl, r7
 800be18:	4637      	mov	r7, r6
 800be1a:	e5b1      	b.n	800b980 <_dtoa_r+0x4a0>
 800be1c:	40240000 	.word	0x40240000
 800be20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be22:	f8cd 8010 	str.w	r8, [sp, #16]
 800be26:	2b00      	cmp	r3, #0
 800be28:	f000 80f3 	beq.w	800c012 <_dtoa_r+0xb32>
 800be2c:	2d00      	cmp	r5, #0
 800be2e:	dd05      	ble.n	800be3c <_dtoa_r+0x95c>
 800be30:	4639      	mov	r1, r7
 800be32:	462a      	mov	r2, r5
 800be34:	4620      	mov	r0, r4
 800be36:	f001 f873 	bl	800cf20 <__lshift>
 800be3a:	4607      	mov	r7, r0
 800be3c:	9b08      	ldr	r3, [sp, #32]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d04c      	beq.n	800bedc <_dtoa_r+0x9fc>
 800be42:	6879      	ldr	r1, [r7, #4]
 800be44:	4620      	mov	r0, r4
 800be46:	f000 fe6c 	bl	800cb22 <_Balloc>
 800be4a:	4605      	mov	r5, r0
 800be4c:	693a      	ldr	r2, [r7, #16]
 800be4e:	f107 010c 	add.w	r1, r7, #12
 800be52:	3202      	adds	r2, #2
 800be54:	0092      	lsls	r2, r2, #2
 800be56:	300c      	adds	r0, #12
 800be58:	f000 fe58 	bl	800cb0c <memcpy>
 800be5c:	2201      	movs	r2, #1
 800be5e:	4629      	mov	r1, r5
 800be60:	4620      	mov	r0, r4
 800be62:	f001 f85d 	bl	800cf20 <__lshift>
 800be66:	46b9      	mov	r9, r7
 800be68:	4607      	mov	r7, r0
 800be6a:	9b06      	ldr	r3, [sp, #24]
 800be6c:	9307      	str	r3, [sp, #28]
 800be6e:	9b02      	ldr	r3, [sp, #8]
 800be70:	f003 0301 	and.w	r3, r3, #1
 800be74:	9308      	str	r3, [sp, #32]
 800be76:	4631      	mov	r1, r6
 800be78:	4658      	mov	r0, fp
 800be7a:	f7ff faa1 	bl	800b3c0 <quorem>
 800be7e:	4649      	mov	r1, r9
 800be80:	4605      	mov	r5, r0
 800be82:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800be86:	4658      	mov	r0, fp
 800be88:	f001 f89e 	bl	800cfc8 <__mcmp>
 800be8c:	463a      	mov	r2, r7
 800be8e:	9002      	str	r0, [sp, #8]
 800be90:	4631      	mov	r1, r6
 800be92:	4620      	mov	r0, r4
 800be94:	f001 f8b2 	bl	800cffc <__mdiff>
 800be98:	68c3      	ldr	r3, [r0, #12]
 800be9a:	4602      	mov	r2, r0
 800be9c:	bb03      	cbnz	r3, 800bee0 <_dtoa_r+0xa00>
 800be9e:	4601      	mov	r1, r0
 800bea0:	9009      	str	r0, [sp, #36]	; 0x24
 800bea2:	4658      	mov	r0, fp
 800bea4:	f001 f890 	bl	800cfc8 <__mcmp>
 800bea8:	4603      	mov	r3, r0
 800beaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800beac:	4611      	mov	r1, r2
 800beae:	4620      	mov	r0, r4
 800beb0:	9309      	str	r3, [sp, #36]	; 0x24
 800beb2:	f000 fe6a 	bl	800cb8a <_Bfree>
 800beb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beb8:	b9a3      	cbnz	r3, 800bee4 <_dtoa_r+0xa04>
 800beba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bebc:	b992      	cbnz	r2, 800bee4 <_dtoa_r+0xa04>
 800bebe:	9a08      	ldr	r2, [sp, #32]
 800bec0:	b982      	cbnz	r2, 800bee4 <_dtoa_r+0xa04>
 800bec2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bec6:	d029      	beq.n	800bf1c <_dtoa_r+0xa3c>
 800bec8:	9b02      	ldr	r3, [sp, #8]
 800beca:	2b00      	cmp	r3, #0
 800becc:	dd01      	ble.n	800bed2 <_dtoa_r+0x9f2>
 800bece:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800bed2:	9b07      	ldr	r3, [sp, #28]
 800bed4:	1c5d      	adds	r5, r3, #1
 800bed6:	f883 8000 	strb.w	r8, [r3]
 800beda:	e784      	b.n	800bde6 <_dtoa_r+0x906>
 800bedc:	4638      	mov	r0, r7
 800bede:	e7c2      	b.n	800be66 <_dtoa_r+0x986>
 800bee0:	2301      	movs	r3, #1
 800bee2:	e7e3      	b.n	800beac <_dtoa_r+0x9cc>
 800bee4:	9a02      	ldr	r2, [sp, #8]
 800bee6:	2a00      	cmp	r2, #0
 800bee8:	db04      	blt.n	800bef4 <_dtoa_r+0xa14>
 800beea:	d123      	bne.n	800bf34 <_dtoa_r+0xa54>
 800beec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800beee:	bb0a      	cbnz	r2, 800bf34 <_dtoa_r+0xa54>
 800bef0:	9a08      	ldr	r2, [sp, #32]
 800bef2:	b9fa      	cbnz	r2, 800bf34 <_dtoa_r+0xa54>
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	ddec      	ble.n	800bed2 <_dtoa_r+0x9f2>
 800bef8:	4659      	mov	r1, fp
 800befa:	2201      	movs	r2, #1
 800befc:	4620      	mov	r0, r4
 800befe:	f001 f80f 	bl	800cf20 <__lshift>
 800bf02:	4631      	mov	r1, r6
 800bf04:	4683      	mov	fp, r0
 800bf06:	f001 f85f 	bl	800cfc8 <__mcmp>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	dc03      	bgt.n	800bf16 <_dtoa_r+0xa36>
 800bf0e:	d1e0      	bne.n	800bed2 <_dtoa_r+0x9f2>
 800bf10:	f018 0f01 	tst.w	r8, #1
 800bf14:	d0dd      	beq.n	800bed2 <_dtoa_r+0x9f2>
 800bf16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bf1a:	d1d8      	bne.n	800bece <_dtoa_r+0x9ee>
 800bf1c:	9b07      	ldr	r3, [sp, #28]
 800bf1e:	9a07      	ldr	r2, [sp, #28]
 800bf20:	1c5d      	adds	r5, r3, #1
 800bf22:	2339      	movs	r3, #57	; 0x39
 800bf24:	7013      	strb	r3, [r2, #0]
 800bf26:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf2a:	1e6a      	subs	r2, r5, #1
 800bf2c:	2b39      	cmp	r3, #57	; 0x39
 800bf2e:	d04d      	beq.n	800bfcc <_dtoa_r+0xaec>
 800bf30:	3301      	adds	r3, #1
 800bf32:	e052      	b.n	800bfda <_dtoa_r+0xafa>
 800bf34:	9a07      	ldr	r2, [sp, #28]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	f102 0501 	add.w	r5, r2, #1
 800bf3c:	dd06      	ble.n	800bf4c <_dtoa_r+0xa6c>
 800bf3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bf42:	d0eb      	beq.n	800bf1c <_dtoa_r+0xa3c>
 800bf44:	f108 0801 	add.w	r8, r8, #1
 800bf48:	9b07      	ldr	r3, [sp, #28]
 800bf4a:	e7c4      	b.n	800bed6 <_dtoa_r+0x9f6>
 800bf4c:	9b06      	ldr	r3, [sp, #24]
 800bf4e:	9a04      	ldr	r2, [sp, #16]
 800bf50:	1aeb      	subs	r3, r5, r3
 800bf52:	4293      	cmp	r3, r2
 800bf54:	f805 8c01 	strb.w	r8, [r5, #-1]
 800bf58:	d021      	beq.n	800bf9e <_dtoa_r+0xabe>
 800bf5a:	4659      	mov	r1, fp
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	220a      	movs	r2, #10
 800bf60:	4620      	mov	r0, r4
 800bf62:	f000 fe29 	bl	800cbb8 <__multadd>
 800bf66:	45b9      	cmp	r9, r7
 800bf68:	4683      	mov	fp, r0
 800bf6a:	f04f 0300 	mov.w	r3, #0
 800bf6e:	f04f 020a 	mov.w	r2, #10
 800bf72:	4649      	mov	r1, r9
 800bf74:	4620      	mov	r0, r4
 800bf76:	d105      	bne.n	800bf84 <_dtoa_r+0xaa4>
 800bf78:	f000 fe1e 	bl	800cbb8 <__multadd>
 800bf7c:	4681      	mov	r9, r0
 800bf7e:	4607      	mov	r7, r0
 800bf80:	9507      	str	r5, [sp, #28]
 800bf82:	e778      	b.n	800be76 <_dtoa_r+0x996>
 800bf84:	f000 fe18 	bl	800cbb8 <__multadd>
 800bf88:	4639      	mov	r1, r7
 800bf8a:	4681      	mov	r9, r0
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	220a      	movs	r2, #10
 800bf90:	4620      	mov	r0, r4
 800bf92:	f000 fe11 	bl	800cbb8 <__multadd>
 800bf96:	4607      	mov	r7, r0
 800bf98:	e7f2      	b.n	800bf80 <_dtoa_r+0xaa0>
 800bf9a:	f04f 0900 	mov.w	r9, #0
 800bf9e:	4659      	mov	r1, fp
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f000 ffbc 	bl	800cf20 <__lshift>
 800bfa8:	4631      	mov	r1, r6
 800bfaa:	4683      	mov	fp, r0
 800bfac:	f001 f80c 	bl	800cfc8 <__mcmp>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	dcb8      	bgt.n	800bf26 <_dtoa_r+0xa46>
 800bfb4:	d102      	bne.n	800bfbc <_dtoa_r+0xadc>
 800bfb6:	f018 0f01 	tst.w	r8, #1
 800bfba:	d1b4      	bne.n	800bf26 <_dtoa_r+0xa46>
 800bfbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bfc0:	1e6a      	subs	r2, r5, #1
 800bfc2:	2b30      	cmp	r3, #48	; 0x30
 800bfc4:	f47f af0f 	bne.w	800bde6 <_dtoa_r+0x906>
 800bfc8:	4615      	mov	r5, r2
 800bfca:	e7f7      	b.n	800bfbc <_dtoa_r+0xadc>
 800bfcc:	9b06      	ldr	r3, [sp, #24]
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d105      	bne.n	800bfde <_dtoa_r+0xafe>
 800bfd2:	2331      	movs	r3, #49	; 0x31
 800bfd4:	9a06      	ldr	r2, [sp, #24]
 800bfd6:	f10a 0a01 	add.w	sl, sl, #1
 800bfda:	7013      	strb	r3, [r2, #0]
 800bfdc:	e703      	b.n	800bde6 <_dtoa_r+0x906>
 800bfde:	4615      	mov	r5, r2
 800bfe0:	e7a1      	b.n	800bf26 <_dtoa_r+0xa46>
 800bfe2:	4b17      	ldr	r3, [pc, #92]	; (800c040 <_dtoa_r+0xb60>)
 800bfe4:	f7ff bae1 	b.w	800b5aa <_dtoa_r+0xca>
 800bfe8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f47f aabb 	bne.w	800b566 <_dtoa_r+0x86>
 800bff0:	4b14      	ldr	r3, [pc, #80]	; (800c044 <_dtoa_r+0xb64>)
 800bff2:	f7ff bada 	b.w	800b5aa <_dtoa_r+0xca>
 800bff6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	f77f ae3f 	ble.w	800bc7c <_dtoa_r+0x79c>
 800bffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c000:	9308      	str	r3, [sp, #32]
 800c002:	e653      	b.n	800bcac <_dtoa_r+0x7cc>
 800c004:	9b04      	ldr	r3, [sp, #16]
 800c006:	2b00      	cmp	r3, #0
 800c008:	dc03      	bgt.n	800c012 <_dtoa_r+0xb32>
 800c00a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c00c:	2b02      	cmp	r3, #2
 800c00e:	f73f aed5 	bgt.w	800bdbc <_dtoa_r+0x8dc>
 800c012:	9d06      	ldr	r5, [sp, #24]
 800c014:	4631      	mov	r1, r6
 800c016:	4658      	mov	r0, fp
 800c018:	f7ff f9d2 	bl	800b3c0 <quorem>
 800c01c:	9b06      	ldr	r3, [sp, #24]
 800c01e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c022:	f805 8b01 	strb.w	r8, [r5], #1
 800c026:	9a04      	ldr	r2, [sp, #16]
 800c028:	1aeb      	subs	r3, r5, r3
 800c02a:	429a      	cmp	r2, r3
 800c02c:	ddb5      	ble.n	800bf9a <_dtoa_r+0xaba>
 800c02e:	4659      	mov	r1, fp
 800c030:	2300      	movs	r3, #0
 800c032:	220a      	movs	r2, #10
 800c034:	4620      	mov	r0, r4
 800c036:	f000 fdbf 	bl	800cbb8 <__multadd>
 800c03a:	4683      	mov	fp, r0
 800c03c:	e7ea      	b.n	800c014 <_dtoa_r+0xb34>
 800c03e:	bf00      	nop
 800c040:	0800e5eb 	.word	0x0800e5eb
 800c044:	0800e448 	.word	0x0800e448

0800c048 <__sflush_r>:
 800c048:	898a      	ldrh	r2, [r1, #12]
 800c04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c04e:	4605      	mov	r5, r0
 800c050:	0710      	lsls	r0, r2, #28
 800c052:	460c      	mov	r4, r1
 800c054:	d458      	bmi.n	800c108 <__sflush_r+0xc0>
 800c056:	684b      	ldr	r3, [r1, #4]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	dc05      	bgt.n	800c068 <__sflush_r+0x20>
 800c05c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c05e:	2b00      	cmp	r3, #0
 800c060:	dc02      	bgt.n	800c068 <__sflush_r+0x20>
 800c062:	2000      	movs	r0, #0
 800c064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c06a:	2e00      	cmp	r6, #0
 800c06c:	d0f9      	beq.n	800c062 <__sflush_r+0x1a>
 800c06e:	2300      	movs	r3, #0
 800c070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c074:	682f      	ldr	r7, [r5, #0]
 800c076:	6a21      	ldr	r1, [r4, #32]
 800c078:	602b      	str	r3, [r5, #0]
 800c07a:	d032      	beq.n	800c0e2 <__sflush_r+0x9a>
 800c07c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c07e:	89a3      	ldrh	r3, [r4, #12]
 800c080:	075a      	lsls	r2, r3, #29
 800c082:	d505      	bpl.n	800c090 <__sflush_r+0x48>
 800c084:	6863      	ldr	r3, [r4, #4]
 800c086:	1ac0      	subs	r0, r0, r3
 800c088:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c08a:	b10b      	cbz	r3, 800c090 <__sflush_r+0x48>
 800c08c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c08e:	1ac0      	subs	r0, r0, r3
 800c090:	2300      	movs	r3, #0
 800c092:	4602      	mov	r2, r0
 800c094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c096:	6a21      	ldr	r1, [r4, #32]
 800c098:	4628      	mov	r0, r5
 800c09a:	47b0      	blx	r6
 800c09c:	1c43      	adds	r3, r0, #1
 800c09e:	89a3      	ldrh	r3, [r4, #12]
 800c0a0:	d106      	bne.n	800c0b0 <__sflush_r+0x68>
 800c0a2:	6829      	ldr	r1, [r5, #0]
 800c0a4:	291d      	cmp	r1, #29
 800c0a6:	d848      	bhi.n	800c13a <__sflush_r+0xf2>
 800c0a8:	4a29      	ldr	r2, [pc, #164]	; (800c150 <__sflush_r+0x108>)
 800c0aa:	40ca      	lsrs	r2, r1
 800c0ac:	07d6      	lsls	r6, r2, #31
 800c0ae:	d544      	bpl.n	800c13a <__sflush_r+0xf2>
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	6062      	str	r2, [r4, #4]
 800c0b4:	6922      	ldr	r2, [r4, #16]
 800c0b6:	04d9      	lsls	r1, r3, #19
 800c0b8:	6022      	str	r2, [r4, #0]
 800c0ba:	d504      	bpl.n	800c0c6 <__sflush_r+0x7e>
 800c0bc:	1c42      	adds	r2, r0, #1
 800c0be:	d101      	bne.n	800c0c4 <__sflush_r+0x7c>
 800c0c0:	682b      	ldr	r3, [r5, #0]
 800c0c2:	b903      	cbnz	r3, 800c0c6 <__sflush_r+0x7e>
 800c0c4:	6560      	str	r0, [r4, #84]	; 0x54
 800c0c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0c8:	602f      	str	r7, [r5, #0]
 800c0ca:	2900      	cmp	r1, #0
 800c0cc:	d0c9      	beq.n	800c062 <__sflush_r+0x1a>
 800c0ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0d2:	4299      	cmp	r1, r3
 800c0d4:	d002      	beq.n	800c0dc <__sflush_r+0x94>
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	f001 f92a 	bl	800d330 <_free_r>
 800c0dc:	2000      	movs	r0, #0
 800c0de:	6360      	str	r0, [r4, #52]	; 0x34
 800c0e0:	e7c0      	b.n	800c064 <__sflush_r+0x1c>
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	47b0      	blx	r6
 800c0e8:	1c41      	adds	r1, r0, #1
 800c0ea:	d1c8      	bne.n	800c07e <__sflush_r+0x36>
 800c0ec:	682b      	ldr	r3, [r5, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d0c5      	beq.n	800c07e <__sflush_r+0x36>
 800c0f2:	2b1d      	cmp	r3, #29
 800c0f4:	d001      	beq.n	800c0fa <__sflush_r+0xb2>
 800c0f6:	2b16      	cmp	r3, #22
 800c0f8:	d101      	bne.n	800c0fe <__sflush_r+0xb6>
 800c0fa:	602f      	str	r7, [r5, #0]
 800c0fc:	e7b1      	b.n	800c062 <__sflush_r+0x1a>
 800c0fe:	89a3      	ldrh	r3, [r4, #12]
 800c100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c104:	81a3      	strh	r3, [r4, #12]
 800c106:	e7ad      	b.n	800c064 <__sflush_r+0x1c>
 800c108:	690f      	ldr	r7, [r1, #16]
 800c10a:	2f00      	cmp	r7, #0
 800c10c:	d0a9      	beq.n	800c062 <__sflush_r+0x1a>
 800c10e:	0793      	lsls	r3, r2, #30
 800c110:	bf18      	it	ne
 800c112:	2300      	movne	r3, #0
 800c114:	680e      	ldr	r6, [r1, #0]
 800c116:	bf08      	it	eq
 800c118:	694b      	ldreq	r3, [r1, #20]
 800c11a:	eba6 0807 	sub.w	r8, r6, r7
 800c11e:	600f      	str	r7, [r1, #0]
 800c120:	608b      	str	r3, [r1, #8]
 800c122:	f1b8 0f00 	cmp.w	r8, #0
 800c126:	dd9c      	ble.n	800c062 <__sflush_r+0x1a>
 800c128:	4643      	mov	r3, r8
 800c12a:	463a      	mov	r2, r7
 800c12c:	6a21      	ldr	r1, [r4, #32]
 800c12e:	4628      	mov	r0, r5
 800c130:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c132:	47b0      	blx	r6
 800c134:	2800      	cmp	r0, #0
 800c136:	dc06      	bgt.n	800c146 <__sflush_r+0xfe>
 800c138:	89a3      	ldrh	r3, [r4, #12]
 800c13a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c13e:	81a3      	strh	r3, [r4, #12]
 800c140:	f04f 30ff 	mov.w	r0, #4294967295
 800c144:	e78e      	b.n	800c064 <__sflush_r+0x1c>
 800c146:	4407      	add	r7, r0
 800c148:	eba8 0800 	sub.w	r8, r8, r0
 800c14c:	e7e9      	b.n	800c122 <__sflush_r+0xda>
 800c14e:	bf00      	nop
 800c150:	20400001 	.word	0x20400001

0800c154 <_fflush_r>:
 800c154:	b538      	push	{r3, r4, r5, lr}
 800c156:	690b      	ldr	r3, [r1, #16]
 800c158:	4605      	mov	r5, r0
 800c15a:	460c      	mov	r4, r1
 800c15c:	b1db      	cbz	r3, 800c196 <_fflush_r+0x42>
 800c15e:	b118      	cbz	r0, 800c168 <_fflush_r+0x14>
 800c160:	6983      	ldr	r3, [r0, #24]
 800c162:	b90b      	cbnz	r3, 800c168 <_fflush_r+0x14>
 800c164:	f000 f860 	bl	800c228 <__sinit>
 800c168:	4b0c      	ldr	r3, [pc, #48]	; (800c19c <_fflush_r+0x48>)
 800c16a:	429c      	cmp	r4, r3
 800c16c:	d109      	bne.n	800c182 <_fflush_r+0x2e>
 800c16e:	686c      	ldr	r4, [r5, #4]
 800c170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c174:	b17b      	cbz	r3, 800c196 <_fflush_r+0x42>
 800c176:	4621      	mov	r1, r4
 800c178:	4628      	mov	r0, r5
 800c17a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c17e:	f7ff bf63 	b.w	800c048 <__sflush_r>
 800c182:	4b07      	ldr	r3, [pc, #28]	; (800c1a0 <_fflush_r+0x4c>)
 800c184:	429c      	cmp	r4, r3
 800c186:	d101      	bne.n	800c18c <_fflush_r+0x38>
 800c188:	68ac      	ldr	r4, [r5, #8]
 800c18a:	e7f1      	b.n	800c170 <_fflush_r+0x1c>
 800c18c:	4b05      	ldr	r3, [pc, #20]	; (800c1a4 <_fflush_r+0x50>)
 800c18e:	429c      	cmp	r4, r3
 800c190:	bf08      	it	eq
 800c192:	68ec      	ldreq	r4, [r5, #12]
 800c194:	e7ec      	b.n	800c170 <_fflush_r+0x1c>
 800c196:	2000      	movs	r0, #0
 800c198:	bd38      	pop	{r3, r4, r5, pc}
 800c19a:	bf00      	nop
 800c19c:	0800e478 	.word	0x0800e478
 800c1a0:	0800e498 	.word	0x0800e498
 800c1a4:	0800e458 	.word	0x0800e458

0800c1a8 <std>:
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	b510      	push	{r4, lr}
 800c1ac:	4604      	mov	r4, r0
 800c1ae:	e9c0 3300 	strd	r3, r3, [r0]
 800c1b2:	6083      	str	r3, [r0, #8]
 800c1b4:	8181      	strh	r1, [r0, #12]
 800c1b6:	6643      	str	r3, [r0, #100]	; 0x64
 800c1b8:	81c2      	strh	r2, [r0, #14]
 800c1ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1be:	6183      	str	r3, [r0, #24]
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	2208      	movs	r2, #8
 800c1c4:	305c      	adds	r0, #92	; 0x5c
 800c1c6:	f7fd f9fb 	bl	80095c0 <memset>
 800c1ca:	4b05      	ldr	r3, [pc, #20]	; (800c1e0 <std+0x38>)
 800c1cc:	6224      	str	r4, [r4, #32]
 800c1ce:	6263      	str	r3, [r4, #36]	; 0x24
 800c1d0:	4b04      	ldr	r3, [pc, #16]	; (800c1e4 <std+0x3c>)
 800c1d2:	62a3      	str	r3, [r4, #40]	; 0x28
 800c1d4:	4b04      	ldr	r3, [pc, #16]	; (800c1e8 <std+0x40>)
 800c1d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c1d8:	4b04      	ldr	r3, [pc, #16]	; (800c1ec <std+0x44>)
 800c1da:	6323      	str	r3, [r4, #48]	; 0x30
 800c1dc:	bd10      	pop	{r4, pc}
 800c1de:	bf00      	nop
 800c1e0:	0800a3c5 	.word	0x0800a3c5
 800c1e4:	0800a3eb 	.word	0x0800a3eb
 800c1e8:	0800a423 	.word	0x0800a423
 800c1ec:	0800a447 	.word	0x0800a447

0800c1f0 <_cleanup_r>:
 800c1f0:	4901      	ldr	r1, [pc, #4]	; (800c1f8 <_cleanup_r+0x8>)
 800c1f2:	f000 b885 	b.w	800c300 <_fwalk_reent>
 800c1f6:	bf00      	nop
 800c1f8:	0800c155 	.word	0x0800c155

0800c1fc <__sfmoreglue>:
 800c1fc:	b570      	push	{r4, r5, r6, lr}
 800c1fe:	2568      	movs	r5, #104	; 0x68
 800c200:	1e4a      	subs	r2, r1, #1
 800c202:	4355      	muls	r5, r2
 800c204:	460e      	mov	r6, r1
 800c206:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c20a:	f001 f8dd 	bl	800d3c8 <_malloc_r>
 800c20e:	4604      	mov	r4, r0
 800c210:	b140      	cbz	r0, 800c224 <__sfmoreglue+0x28>
 800c212:	2100      	movs	r1, #0
 800c214:	e9c0 1600 	strd	r1, r6, [r0]
 800c218:	300c      	adds	r0, #12
 800c21a:	60a0      	str	r0, [r4, #8]
 800c21c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c220:	f7fd f9ce 	bl	80095c0 <memset>
 800c224:	4620      	mov	r0, r4
 800c226:	bd70      	pop	{r4, r5, r6, pc}

0800c228 <__sinit>:
 800c228:	6983      	ldr	r3, [r0, #24]
 800c22a:	b510      	push	{r4, lr}
 800c22c:	4604      	mov	r4, r0
 800c22e:	bb33      	cbnz	r3, 800c27e <__sinit+0x56>
 800c230:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c234:	6503      	str	r3, [r0, #80]	; 0x50
 800c236:	4b12      	ldr	r3, [pc, #72]	; (800c280 <__sinit+0x58>)
 800c238:	4a12      	ldr	r2, [pc, #72]	; (800c284 <__sinit+0x5c>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	6282      	str	r2, [r0, #40]	; 0x28
 800c23e:	4298      	cmp	r0, r3
 800c240:	bf04      	itt	eq
 800c242:	2301      	moveq	r3, #1
 800c244:	6183      	streq	r3, [r0, #24]
 800c246:	f000 f81f 	bl	800c288 <__sfp>
 800c24a:	6060      	str	r0, [r4, #4]
 800c24c:	4620      	mov	r0, r4
 800c24e:	f000 f81b 	bl	800c288 <__sfp>
 800c252:	60a0      	str	r0, [r4, #8]
 800c254:	4620      	mov	r0, r4
 800c256:	f000 f817 	bl	800c288 <__sfp>
 800c25a:	2200      	movs	r2, #0
 800c25c:	60e0      	str	r0, [r4, #12]
 800c25e:	2104      	movs	r1, #4
 800c260:	6860      	ldr	r0, [r4, #4]
 800c262:	f7ff ffa1 	bl	800c1a8 <std>
 800c266:	2201      	movs	r2, #1
 800c268:	2109      	movs	r1, #9
 800c26a:	68a0      	ldr	r0, [r4, #8]
 800c26c:	f7ff ff9c 	bl	800c1a8 <std>
 800c270:	2202      	movs	r2, #2
 800c272:	2112      	movs	r1, #18
 800c274:	68e0      	ldr	r0, [r4, #12]
 800c276:	f7ff ff97 	bl	800c1a8 <std>
 800c27a:	2301      	movs	r3, #1
 800c27c:	61a3      	str	r3, [r4, #24]
 800c27e:	bd10      	pop	{r4, pc}
 800c280:	0800e3bc 	.word	0x0800e3bc
 800c284:	0800c1f1 	.word	0x0800c1f1

0800c288 <__sfp>:
 800c288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28a:	4b1b      	ldr	r3, [pc, #108]	; (800c2f8 <__sfp+0x70>)
 800c28c:	4607      	mov	r7, r0
 800c28e:	681e      	ldr	r6, [r3, #0]
 800c290:	69b3      	ldr	r3, [r6, #24]
 800c292:	b913      	cbnz	r3, 800c29a <__sfp+0x12>
 800c294:	4630      	mov	r0, r6
 800c296:	f7ff ffc7 	bl	800c228 <__sinit>
 800c29a:	3648      	adds	r6, #72	; 0x48
 800c29c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c2a0:	3b01      	subs	r3, #1
 800c2a2:	d503      	bpl.n	800c2ac <__sfp+0x24>
 800c2a4:	6833      	ldr	r3, [r6, #0]
 800c2a6:	b133      	cbz	r3, 800c2b6 <__sfp+0x2e>
 800c2a8:	6836      	ldr	r6, [r6, #0]
 800c2aa:	e7f7      	b.n	800c29c <__sfp+0x14>
 800c2ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c2b0:	b16d      	cbz	r5, 800c2ce <__sfp+0x46>
 800c2b2:	3468      	adds	r4, #104	; 0x68
 800c2b4:	e7f4      	b.n	800c2a0 <__sfp+0x18>
 800c2b6:	2104      	movs	r1, #4
 800c2b8:	4638      	mov	r0, r7
 800c2ba:	f7ff ff9f 	bl	800c1fc <__sfmoreglue>
 800c2be:	6030      	str	r0, [r6, #0]
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	d1f1      	bne.n	800c2a8 <__sfp+0x20>
 800c2c4:	230c      	movs	r3, #12
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	603b      	str	r3, [r7, #0]
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2ce:	4b0b      	ldr	r3, [pc, #44]	; (800c2fc <__sfp+0x74>)
 800c2d0:	6665      	str	r5, [r4, #100]	; 0x64
 800c2d2:	e9c4 5500 	strd	r5, r5, [r4]
 800c2d6:	60a5      	str	r5, [r4, #8]
 800c2d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c2dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c2e0:	2208      	movs	r2, #8
 800c2e2:	4629      	mov	r1, r5
 800c2e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c2e8:	f7fd f96a 	bl	80095c0 <memset>
 800c2ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c2f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c2f4:	e7e9      	b.n	800c2ca <__sfp+0x42>
 800c2f6:	bf00      	nop
 800c2f8:	0800e3bc 	.word	0x0800e3bc
 800c2fc:	ffff0001 	.word	0xffff0001

0800c300 <_fwalk_reent>:
 800c300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c304:	4680      	mov	r8, r0
 800c306:	4689      	mov	r9, r1
 800c308:	2600      	movs	r6, #0
 800c30a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c30e:	b914      	cbnz	r4, 800c316 <_fwalk_reent+0x16>
 800c310:	4630      	mov	r0, r6
 800c312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c316:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c31a:	3f01      	subs	r7, #1
 800c31c:	d501      	bpl.n	800c322 <_fwalk_reent+0x22>
 800c31e:	6824      	ldr	r4, [r4, #0]
 800c320:	e7f5      	b.n	800c30e <_fwalk_reent+0xe>
 800c322:	89ab      	ldrh	r3, [r5, #12]
 800c324:	2b01      	cmp	r3, #1
 800c326:	d907      	bls.n	800c338 <_fwalk_reent+0x38>
 800c328:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c32c:	3301      	adds	r3, #1
 800c32e:	d003      	beq.n	800c338 <_fwalk_reent+0x38>
 800c330:	4629      	mov	r1, r5
 800c332:	4640      	mov	r0, r8
 800c334:	47c8      	blx	r9
 800c336:	4306      	orrs	r6, r0
 800c338:	3568      	adds	r5, #104	; 0x68
 800c33a:	e7ee      	b.n	800c31a <_fwalk_reent+0x1a>

0800c33c <rshift>:
 800c33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c33e:	6906      	ldr	r6, [r0, #16]
 800c340:	114b      	asrs	r3, r1, #5
 800c342:	429e      	cmp	r6, r3
 800c344:	f100 0414 	add.w	r4, r0, #20
 800c348:	dd31      	ble.n	800c3ae <rshift+0x72>
 800c34a:	f011 011f 	ands.w	r1, r1, #31
 800c34e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c352:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c356:	d108      	bne.n	800c36a <rshift+0x2e>
 800c358:	4621      	mov	r1, r4
 800c35a:	42b2      	cmp	r2, r6
 800c35c:	460b      	mov	r3, r1
 800c35e:	d211      	bcs.n	800c384 <rshift+0x48>
 800c360:	f852 3b04 	ldr.w	r3, [r2], #4
 800c364:	f841 3b04 	str.w	r3, [r1], #4
 800c368:	e7f7      	b.n	800c35a <rshift+0x1e>
 800c36a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c36e:	4623      	mov	r3, r4
 800c370:	f1c1 0c20 	rsb	ip, r1, #32
 800c374:	40cd      	lsrs	r5, r1
 800c376:	3204      	adds	r2, #4
 800c378:	42b2      	cmp	r2, r6
 800c37a:	4617      	mov	r7, r2
 800c37c:	d30d      	bcc.n	800c39a <rshift+0x5e>
 800c37e:	601d      	str	r5, [r3, #0]
 800c380:	b105      	cbz	r5, 800c384 <rshift+0x48>
 800c382:	3304      	adds	r3, #4
 800c384:	42a3      	cmp	r3, r4
 800c386:	eba3 0204 	sub.w	r2, r3, r4
 800c38a:	bf08      	it	eq
 800c38c:	2300      	moveq	r3, #0
 800c38e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c392:	6102      	str	r2, [r0, #16]
 800c394:	bf08      	it	eq
 800c396:	6143      	streq	r3, [r0, #20]
 800c398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c39a:	683f      	ldr	r7, [r7, #0]
 800c39c:	fa07 f70c 	lsl.w	r7, r7, ip
 800c3a0:	433d      	orrs	r5, r7
 800c3a2:	f843 5b04 	str.w	r5, [r3], #4
 800c3a6:	f852 5b04 	ldr.w	r5, [r2], #4
 800c3aa:	40cd      	lsrs	r5, r1
 800c3ac:	e7e4      	b.n	800c378 <rshift+0x3c>
 800c3ae:	4623      	mov	r3, r4
 800c3b0:	e7e8      	b.n	800c384 <rshift+0x48>

0800c3b2 <__hexdig_fun>:
 800c3b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c3b6:	2b09      	cmp	r3, #9
 800c3b8:	d802      	bhi.n	800c3c0 <__hexdig_fun+0xe>
 800c3ba:	3820      	subs	r0, #32
 800c3bc:	b2c0      	uxtb	r0, r0
 800c3be:	4770      	bx	lr
 800c3c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c3c4:	2b05      	cmp	r3, #5
 800c3c6:	d801      	bhi.n	800c3cc <__hexdig_fun+0x1a>
 800c3c8:	3847      	subs	r0, #71	; 0x47
 800c3ca:	e7f7      	b.n	800c3bc <__hexdig_fun+0xa>
 800c3cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c3d0:	2b05      	cmp	r3, #5
 800c3d2:	d801      	bhi.n	800c3d8 <__hexdig_fun+0x26>
 800c3d4:	3827      	subs	r0, #39	; 0x27
 800c3d6:	e7f1      	b.n	800c3bc <__hexdig_fun+0xa>
 800c3d8:	2000      	movs	r0, #0
 800c3da:	4770      	bx	lr

0800c3dc <__gethex>:
 800c3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e0:	b08b      	sub	sp, #44	; 0x2c
 800c3e2:	9002      	str	r0, [sp, #8]
 800c3e4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c3e6:	468a      	mov	sl, r1
 800c3e8:	4690      	mov	r8, r2
 800c3ea:	9306      	str	r3, [sp, #24]
 800c3ec:	f000 fae0 	bl	800c9b0 <__localeconv_l>
 800c3f0:	6803      	ldr	r3, [r0, #0]
 800c3f2:	f04f 0b00 	mov.w	fp, #0
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	9303      	str	r3, [sp, #12]
 800c3fa:	f7f3 fea9 	bl	8000150 <strlen>
 800c3fe:	9b03      	ldr	r3, [sp, #12]
 800c400:	9001      	str	r0, [sp, #4]
 800c402:	4403      	add	r3, r0
 800c404:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c408:	9307      	str	r3, [sp, #28]
 800c40a:	f8da 3000 	ldr.w	r3, [sl]
 800c40e:	3302      	adds	r3, #2
 800c410:	461f      	mov	r7, r3
 800c412:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c416:	2830      	cmp	r0, #48	; 0x30
 800c418:	d06c      	beq.n	800c4f4 <__gethex+0x118>
 800c41a:	f7ff ffca 	bl	800c3b2 <__hexdig_fun>
 800c41e:	4604      	mov	r4, r0
 800c420:	2800      	cmp	r0, #0
 800c422:	d16a      	bne.n	800c4fa <__gethex+0x11e>
 800c424:	9a01      	ldr	r2, [sp, #4]
 800c426:	9903      	ldr	r1, [sp, #12]
 800c428:	4638      	mov	r0, r7
 800c42a:	f001 fe0c 	bl	800e046 <strncmp>
 800c42e:	2800      	cmp	r0, #0
 800c430:	d166      	bne.n	800c500 <__gethex+0x124>
 800c432:	9b01      	ldr	r3, [sp, #4]
 800c434:	5cf8      	ldrb	r0, [r7, r3]
 800c436:	18fe      	adds	r6, r7, r3
 800c438:	f7ff ffbb 	bl	800c3b2 <__hexdig_fun>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	d062      	beq.n	800c506 <__gethex+0x12a>
 800c440:	4633      	mov	r3, r6
 800c442:	7818      	ldrb	r0, [r3, #0]
 800c444:	461f      	mov	r7, r3
 800c446:	2830      	cmp	r0, #48	; 0x30
 800c448:	f103 0301 	add.w	r3, r3, #1
 800c44c:	d0f9      	beq.n	800c442 <__gethex+0x66>
 800c44e:	f7ff ffb0 	bl	800c3b2 <__hexdig_fun>
 800c452:	fab0 f580 	clz	r5, r0
 800c456:	4634      	mov	r4, r6
 800c458:	f04f 0b01 	mov.w	fp, #1
 800c45c:	096d      	lsrs	r5, r5, #5
 800c45e:	463a      	mov	r2, r7
 800c460:	4616      	mov	r6, r2
 800c462:	7830      	ldrb	r0, [r6, #0]
 800c464:	3201      	adds	r2, #1
 800c466:	f7ff ffa4 	bl	800c3b2 <__hexdig_fun>
 800c46a:	2800      	cmp	r0, #0
 800c46c:	d1f8      	bne.n	800c460 <__gethex+0x84>
 800c46e:	9a01      	ldr	r2, [sp, #4]
 800c470:	9903      	ldr	r1, [sp, #12]
 800c472:	4630      	mov	r0, r6
 800c474:	f001 fde7 	bl	800e046 <strncmp>
 800c478:	b950      	cbnz	r0, 800c490 <__gethex+0xb4>
 800c47a:	b954      	cbnz	r4, 800c492 <__gethex+0xb6>
 800c47c:	9b01      	ldr	r3, [sp, #4]
 800c47e:	18f4      	adds	r4, r6, r3
 800c480:	4622      	mov	r2, r4
 800c482:	4616      	mov	r6, r2
 800c484:	7830      	ldrb	r0, [r6, #0]
 800c486:	3201      	adds	r2, #1
 800c488:	f7ff ff93 	bl	800c3b2 <__hexdig_fun>
 800c48c:	2800      	cmp	r0, #0
 800c48e:	d1f8      	bne.n	800c482 <__gethex+0xa6>
 800c490:	b10c      	cbz	r4, 800c496 <__gethex+0xba>
 800c492:	1ba4      	subs	r4, r4, r6
 800c494:	00a4      	lsls	r4, r4, #2
 800c496:	7833      	ldrb	r3, [r6, #0]
 800c498:	2b50      	cmp	r3, #80	; 0x50
 800c49a:	d001      	beq.n	800c4a0 <__gethex+0xc4>
 800c49c:	2b70      	cmp	r3, #112	; 0x70
 800c49e:	d140      	bne.n	800c522 <__gethex+0x146>
 800c4a0:	7873      	ldrb	r3, [r6, #1]
 800c4a2:	2b2b      	cmp	r3, #43	; 0x2b
 800c4a4:	d031      	beq.n	800c50a <__gethex+0x12e>
 800c4a6:	2b2d      	cmp	r3, #45	; 0x2d
 800c4a8:	d033      	beq.n	800c512 <__gethex+0x136>
 800c4aa:	f04f 0900 	mov.w	r9, #0
 800c4ae:	1c71      	adds	r1, r6, #1
 800c4b0:	7808      	ldrb	r0, [r1, #0]
 800c4b2:	f7ff ff7e 	bl	800c3b2 <__hexdig_fun>
 800c4b6:	1e43      	subs	r3, r0, #1
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	2b18      	cmp	r3, #24
 800c4bc:	d831      	bhi.n	800c522 <__gethex+0x146>
 800c4be:	f1a0 0210 	sub.w	r2, r0, #16
 800c4c2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c4c6:	f7ff ff74 	bl	800c3b2 <__hexdig_fun>
 800c4ca:	1e43      	subs	r3, r0, #1
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	2b18      	cmp	r3, #24
 800c4d0:	d922      	bls.n	800c518 <__gethex+0x13c>
 800c4d2:	f1b9 0f00 	cmp.w	r9, #0
 800c4d6:	d000      	beq.n	800c4da <__gethex+0xfe>
 800c4d8:	4252      	negs	r2, r2
 800c4da:	4414      	add	r4, r2
 800c4dc:	f8ca 1000 	str.w	r1, [sl]
 800c4e0:	b30d      	cbz	r5, 800c526 <__gethex+0x14a>
 800c4e2:	f1bb 0f00 	cmp.w	fp, #0
 800c4e6:	bf0c      	ite	eq
 800c4e8:	2706      	moveq	r7, #6
 800c4ea:	2700      	movne	r7, #0
 800c4ec:	4638      	mov	r0, r7
 800c4ee:	b00b      	add	sp, #44	; 0x2c
 800c4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f4:	f10b 0b01 	add.w	fp, fp, #1
 800c4f8:	e78a      	b.n	800c410 <__gethex+0x34>
 800c4fa:	2500      	movs	r5, #0
 800c4fc:	462c      	mov	r4, r5
 800c4fe:	e7ae      	b.n	800c45e <__gethex+0x82>
 800c500:	463e      	mov	r6, r7
 800c502:	2501      	movs	r5, #1
 800c504:	e7c7      	b.n	800c496 <__gethex+0xba>
 800c506:	4604      	mov	r4, r0
 800c508:	e7fb      	b.n	800c502 <__gethex+0x126>
 800c50a:	f04f 0900 	mov.w	r9, #0
 800c50e:	1cb1      	adds	r1, r6, #2
 800c510:	e7ce      	b.n	800c4b0 <__gethex+0xd4>
 800c512:	f04f 0901 	mov.w	r9, #1
 800c516:	e7fa      	b.n	800c50e <__gethex+0x132>
 800c518:	230a      	movs	r3, #10
 800c51a:	fb03 0202 	mla	r2, r3, r2, r0
 800c51e:	3a10      	subs	r2, #16
 800c520:	e7cf      	b.n	800c4c2 <__gethex+0xe6>
 800c522:	4631      	mov	r1, r6
 800c524:	e7da      	b.n	800c4dc <__gethex+0x100>
 800c526:	4629      	mov	r1, r5
 800c528:	1bf3      	subs	r3, r6, r7
 800c52a:	3b01      	subs	r3, #1
 800c52c:	2b07      	cmp	r3, #7
 800c52e:	dc49      	bgt.n	800c5c4 <__gethex+0x1e8>
 800c530:	9802      	ldr	r0, [sp, #8]
 800c532:	f000 faf6 	bl	800cb22 <_Balloc>
 800c536:	f04f 0b00 	mov.w	fp, #0
 800c53a:	4605      	mov	r5, r0
 800c53c:	46da      	mov	sl, fp
 800c53e:	9b01      	ldr	r3, [sp, #4]
 800c540:	f100 0914 	add.w	r9, r0, #20
 800c544:	f1c3 0301 	rsb	r3, r3, #1
 800c548:	f8cd 9010 	str.w	r9, [sp, #16]
 800c54c:	9308      	str	r3, [sp, #32]
 800c54e:	42b7      	cmp	r7, r6
 800c550:	d33b      	bcc.n	800c5ca <__gethex+0x1ee>
 800c552:	9804      	ldr	r0, [sp, #16]
 800c554:	f840 ab04 	str.w	sl, [r0], #4
 800c558:	eba0 0009 	sub.w	r0, r0, r9
 800c55c:	1080      	asrs	r0, r0, #2
 800c55e:	6128      	str	r0, [r5, #16]
 800c560:	0147      	lsls	r7, r0, #5
 800c562:	4650      	mov	r0, sl
 800c564:	f000 fba1 	bl	800ccaa <__hi0bits>
 800c568:	f8d8 6000 	ldr.w	r6, [r8]
 800c56c:	1a3f      	subs	r7, r7, r0
 800c56e:	42b7      	cmp	r7, r6
 800c570:	dd64      	ble.n	800c63c <__gethex+0x260>
 800c572:	1bbf      	subs	r7, r7, r6
 800c574:	4639      	mov	r1, r7
 800c576:	4628      	mov	r0, r5
 800c578:	f000 feab 	bl	800d2d2 <__any_on>
 800c57c:	4682      	mov	sl, r0
 800c57e:	b178      	cbz	r0, 800c5a0 <__gethex+0x1c4>
 800c580:	f04f 0a01 	mov.w	sl, #1
 800c584:	1e7b      	subs	r3, r7, #1
 800c586:	1159      	asrs	r1, r3, #5
 800c588:	f003 021f 	and.w	r2, r3, #31
 800c58c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c590:	fa0a f202 	lsl.w	r2, sl, r2
 800c594:	420a      	tst	r2, r1
 800c596:	d003      	beq.n	800c5a0 <__gethex+0x1c4>
 800c598:	4553      	cmp	r3, sl
 800c59a:	dc46      	bgt.n	800c62a <__gethex+0x24e>
 800c59c:	f04f 0a02 	mov.w	sl, #2
 800c5a0:	4639      	mov	r1, r7
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	f7ff feca 	bl	800c33c <rshift>
 800c5a8:	443c      	add	r4, r7
 800c5aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5ae:	42a3      	cmp	r3, r4
 800c5b0:	da52      	bge.n	800c658 <__gethex+0x27c>
 800c5b2:	4629      	mov	r1, r5
 800c5b4:	9802      	ldr	r0, [sp, #8]
 800c5b6:	f000 fae8 	bl	800cb8a <_Bfree>
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c5be:	27a3      	movs	r7, #163	; 0xa3
 800c5c0:	6013      	str	r3, [r2, #0]
 800c5c2:	e793      	b.n	800c4ec <__gethex+0x110>
 800c5c4:	3101      	adds	r1, #1
 800c5c6:	105b      	asrs	r3, r3, #1
 800c5c8:	e7b0      	b.n	800c52c <__gethex+0x150>
 800c5ca:	1e73      	subs	r3, r6, #1
 800c5cc:	9305      	str	r3, [sp, #20]
 800c5ce:	9a07      	ldr	r2, [sp, #28]
 800c5d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d018      	beq.n	800c60a <__gethex+0x22e>
 800c5d8:	f1bb 0f20 	cmp.w	fp, #32
 800c5dc:	d107      	bne.n	800c5ee <__gethex+0x212>
 800c5de:	9b04      	ldr	r3, [sp, #16]
 800c5e0:	f8c3 a000 	str.w	sl, [r3]
 800c5e4:	f04f 0a00 	mov.w	sl, #0
 800c5e8:	46d3      	mov	fp, sl
 800c5ea:	3304      	adds	r3, #4
 800c5ec:	9304      	str	r3, [sp, #16]
 800c5ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c5f2:	f7ff fede 	bl	800c3b2 <__hexdig_fun>
 800c5f6:	f000 000f 	and.w	r0, r0, #15
 800c5fa:	fa00 f00b 	lsl.w	r0, r0, fp
 800c5fe:	ea4a 0a00 	orr.w	sl, sl, r0
 800c602:	f10b 0b04 	add.w	fp, fp, #4
 800c606:	9b05      	ldr	r3, [sp, #20]
 800c608:	e00d      	b.n	800c626 <__gethex+0x24a>
 800c60a:	9b05      	ldr	r3, [sp, #20]
 800c60c:	9a08      	ldr	r2, [sp, #32]
 800c60e:	4413      	add	r3, r2
 800c610:	42bb      	cmp	r3, r7
 800c612:	d3e1      	bcc.n	800c5d8 <__gethex+0x1fc>
 800c614:	4618      	mov	r0, r3
 800c616:	9a01      	ldr	r2, [sp, #4]
 800c618:	9903      	ldr	r1, [sp, #12]
 800c61a:	9309      	str	r3, [sp, #36]	; 0x24
 800c61c:	f001 fd13 	bl	800e046 <strncmp>
 800c620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c622:	2800      	cmp	r0, #0
 800c624:	d1d8      	bne.n	800c5d8 <__gethex+0x1fc>
 800c626:	461e      	mov	r6, r3
 800c628:	e791      	b.n	800c54e <__gethex+0x172>
 800c62a:	1eb9      	subs	r1, r7, #2
 800c62c:	4628      	mov	r0, r5
 800c62e:	f000 fe50 	bl	800d2d2 <__any_on>
 800c632:	2800      	cmp	r0, #0
 800c634:	d0b2      	beq.n	800c59c <__gethex+0x1c0>
 800c636:	f04f 0a03 	mov.w	sl, #3
 800c63a:	e7b1      	b.n	800c5a0 <__gethex+0x1c4>
 800c63c:	da09      	bge.n	800c652 <__gethex+0x276>
 800c63e:	1bf7      	subs	r7, r6, r7
 800c640:	4629      	mov	r1, r5
 800c642:	463a      	mov	r2, r7
 800c644:	9802      	ldr	r0, [sp, #8]
 800c646:	f000 fc6b 	bl	800cf20 <__lshift>
 800c64a:	4605      	mov	r5, r0
 800c64c:	1be4      	subs	r4, r4, r7
 800c64e:	f100 0914 	add.w	r9, r0, #20
 800c652:	f04f 0a00 	mov.w	sl, #0
 800c656:	e7a8      	b.n	800c5aa <__gethex+0x1ce>
 800c658:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c65c:	42a0      	cmp	r0, r4
 800c65e:	dd6b      	ble.n	800c738 <__gethex+0x35c>
 800c660:	1b04      	subs	r4, r0, r4
 800c662:	42a6      	cmp	r6, r4
 800c664:	dc2e      	bgt.n	800c6c4 <__gethex+0x2e8>
 800c666:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	d022      	beq.n	800c6b4 <__gethex+0x2d8>
 800c66e:	2b03      	cmp	r3, #3
 800c670:	d024      	beq.n	800c6bc <__gethex+0x2e0>
 800c672:	2b01      	cmp	r3, #1
 800c674:	d115      	bne.n	800c6a2 <__gethex+0x2c6>
 800c676:	42a6      	cmp	r6, r4
 800c678:	d113      	bne.n	800c6a2 <__gethex+0x2c6>
 800c67a:	2e01      	cmp	r6, #1
 800c67c:	dc0b      	bgt.n	800c696 <__gethex+0x2ba>
 800c67e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c682:	9a06      	ldr	r2, [sp, #24]
 800c684:	2762      	movs	r7, #98	; 0x62
 800c686:	6013      	str	r3, [r2, #0]
 800c688:	2301      	movs	r3, #1
 800c68a:	612b      	str	r3, [r5, #16]
 800c68c:	f8c9 3000 	str.w	r3, [r9]
 800c690:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c692:	601d      	str	r5, [r3, #0]
 800c694:	e72a      	b.n	800c4ec <__gethex+0x110>
 800c696:	1e71      	subs	r1, r6, #1
 800c698:	4628      	mov	r0, r5
 800c69a:	f000 fe1a 	bl	800d2d2 <__any_on>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d1ed      	bne.n	800c67e <__gethex+0x2a2>
 800c6a2:	4629      	mov	r1, r5
 800c6a4:	9802      	ldr	r0, [sp, #8]
 800c6a6:	f000 fa70 	bl	800cb8a <_Bfree>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c6ae:	2750      	movs	r7, #80	; 0x50
 800c6b0:	6013      	str	r3, [r2, #0]
 800c6b2:	e71b      	b.n	800c4ec <__gethex+0x110>
 800c6b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d0e1      	beq.n	800c67e <__gethex+0x2a2>
 800c6ba:	e7f2      	b.n	800c6a2 <__gethex+0x2c6>
 800c6bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d1dd      	bne.n	800c67e <__gethex+0x2a2>
 800c6c2:	e7ee      	b.n	800c6a2 <__gethex+0x2c6>
 800c6c4:	1e67      	subs	r7, r4, #1
 800c6c6:	f1ba 0f00 	cmp.w	sl, #0
 800c6ca:	d132      	bne.n	800c732 <__gethex+0x356>
 800c6cc:	b127      	cbz	r7, 800c6d8 <__gethex+0x2fc>
 800c6ce:	4639      	mov	r1, r7
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	f000 fdfe 	bl	800d2d2 <__any_on>
 800c6d6:	4682      	mov	sl, r0
 800c6d8:	2301      	movs	r3, #1
 800c6da:	117a      	asrs	r2, r7, #5
 800c6dc:	f007 071f 	and.w	r7, r7, #31
 800c6e0:	fa03 f707 	lsl.w	r7, r3, r7
 800c6e4:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c6e8:	4621      	mov	r1, r4
 800c6ea:	421f      	tst	r7, r3
 800c6ec:	f04f 0702 	mov.w	r7, #2
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	bf18      	it	ne
 800c6f4:	f04a 0a02 	orrne.w	sl, sl, #2
 800c6f8:	1b36      	subs	r6, r6, r4
 800c6fa:	f7ff fe1f 	bl	800c33c <rshift>
 800c6fe:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c702:	f1ba 0f00 	cmp.w	sl, #0
 800c706:	d048      	beq.n	800c79a <__gethex+0x3be>
 800c708:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c70c:	2b02      	cmp	r3, #2
 800c70e:	d015      	beq.n	800c73c <__gethex+0x360>
 800c710:	2b03      	cmp	r3, #3
 800c712:	d017      	beq.n	800c744 <__gethex+0x368>
 800c714:	2b01      	cmp	r3, #1
 800c716:	d109      	bne.n	800c72c <__gethex+0x350>
 800c718:	f01a 0f02 	tst.w	sl, #2
 800c71c:	d006      	beq.n	800c72c <__gethex+0x350>
 800c71e:	f8d9 3000 	ldr.w	r3, [r9]
 800c722:	ea4a 0a03 	orr.w	sl, sl, r3
 800c726:	f01a 0f01 	tst.w	sl, #1
 800c72a:	d10e      	bne.n	800c74a <__gethex+0x36e>
 800c72c:	f047 0710 	orr.w	r7, r7, #16
 800c730:	e033      	b.n	800c79a <__gethex+0x3be>
 800c732:	f04f 0a01 	mov.w	sl, #1
 800c736:	e7cf      	b.n	800c6d8 <__gethex+0x2fc>
 800c738:	2701      	movs	r7, #1
 800c73a:	e7e2      	b.n	800c702 <__gethex+0x326>
 800c73c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c73e:	f1c3 0301 	rsb	r3, r3, #1
 800c742:	9315      	str	r3, [sp, #84]	; 0x54
 800c744:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c746:	2b00      	cmp	r3, #0
 800c748:	d0f0      	beq.n	800c72c <__gethex+0x350>
 800c74a:	f04f 0c00 	mov.w	ip, #0
 800c74e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c752:	f105 0314 	add.w	r3, r5, #20
 800c756:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800c75a:	eb03 010a 	add.w	r1, r3, sl
 800c75e:	4618      	mov	r0, r3
 800c760:	f853 2b04 	ldr.w	r2, [r3], #4
 800c764:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c768:	d01c      	beq.n	800c7a4 <__gethex+0x3c8>
 800c76a:	3201      	adds	r2, #1
 800c76c:	6002      	str	r2, [r0, #0]
 800c76e:	2f02      	cmp	r7, #2
 800c770:	f105 0314 	add.w	r3, r5, #20
 800c774:	d138      	bne.n	800c7e8 <__gethex+0x40c>
 800c776:	f8d8 2000 	ldr.w	r2, [r8]
 800c77a:	3a01      	subs	r2, #1
 800c77c:	42b2      	cmp	r2, r6
 800c77e:	d10a      	bne.n	800c796 <__gethex+0x3ba>
 800c780:	2201      	movs	r2, #1
 800c782:	1171      	asrs	r1, r6, #5
 800c784:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c788:	f006 061f 	and.w	r6, r6, #31
 800c78c:	fa02 f606 	lsl.w	r6, r2, r6
 800c790:	421e      	tst	r6, r3
 800c792:	bf18      	it	ne
 800c794:	4617      	movne	r7, r2
 800c796:	f047 0720 	orr.w	r7, r7, #32
 800c79a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c79c:	601d      	str	r5, [r3, #0]
 800c79e:	9b06      	ldr	r3, [sp, #24]
 800c7a0:	601c      	str	r4, [r3, #0]
 800c7a2:	e6a3      	b.n	800c4ec <__gethex+0x110>
 800c7a4:	4299      	cmp	r1, r3
 800c7a6:	f843 cc04 	str.w	ip, [r3, #-4]
 800c7aa:	d8d8      	bhi.n	800c75e <__gethex+0x382>
 800c7ac:	68ab      	ldr	r3, [r5, #8]
 800c7ae:	4599      	cmp	r9, r3
 800c7b0:	db12      	blt.n	800c7d8 <__gethex+0x3fc>
 800c7b2:	6869      	ldr	r1, [r5, #4]
 800c7b4:	9802      	ldr	r0, [sp, #8]
 800c7b6:	3101      	adds	r1, #1
 800c7b8:	f000 f9b3 	bl	800cb22 <_Balloc>
 800c7bc:	4683      	mov	fp, r0
 800c7be:	692a      	ldr	r2, [r5, #16]
 800c7c0:	f105 010c 	add.w	r1, r5, #12
 800c7c4:	3202      	adds	r2, #2
 800c7c6:	0092      	lsls	r2, r2, #2
 800c7c8:	300c      	adds	r0, #12
 800c7ca:	f000 f99f 	bl	800cb0c <memcpy>
 800c7ce:	4629      	mov	r1, r5
 800c7d0:	9802      	ldr	r0, [sp, #8]
 800c7d2:	f000 f9da 	bl	800cb8a <_Bfree>
 800c7d6:	465d      	mov	r5, fp
 800c7d8:	692b      	ldr	r3, [r5, #16]
 800c7da:	1c5a      	adds	r2, r3, #1
 800c7dc:	612a      	str	r2, [r5, #16]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c7e4:	615a      	str	r2, [r3, #20]
 800c7e6:	e7c2      	b.n	800c76e <__gethex+0x392>
 800c7e8:	692a      	ldr	r2, [r5, #16]
 800c7ea:	454a      	cmp	r2, r9
 800c7ec:	dd0b      	ble.n	800c806 <__gethex+0x42a>
 800c7ee:	2101      	movs	r1, #1
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	f7ff fda3 	bl	800c33c <rshift>
 800c7f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7fa:	3401      	adds	r4, #1
 800c7fc:	42a3      	cmp	r3, r4
 800c7fe:	f6ff aed8 	blt.w	800c5b2 <__gethex+0x1d6>
 800c802:	2701      	movs	r7, #1
 800c804:	e7c7      	b.n	800c796 <__gethex+0x3ba>
 800c806:	f016 061f 	ands.w	r6, r6, #31
 800c80a:	d0fa      	beq.n	800c802 <__gethex+0x426>
 800c80c:	449a      	add	sl, r3
 800c80e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c812:	f000 fa4a 	bl	800ccaa <__hi0bits>
 800c816:	f1c6 0620 	rsb	r6, r6, #32
 800c81a:	42b0      	cmp	r0, r6
 800c81c:	dbe7      	blt.n	800c7ee <__gethex+0x412>
 800c81e:	e7f0      	b.n	800c802 <__gethex+0x426>

0800c820 <L_shift>:
 800c820:	f1c2 0208 	rsb	r2, r2, #8
 800c824:	0092      	lsls	r2, r2, #2
 800c826:	b570      	push	{r4, r5, r6, lr}
 800c828:	f1c2 0620 	rsb	r6, r2, #32
 800c82c:	6843      	ldr	r3, [r0, #4]
 800c82e:	6804      	ldr	r4, [r0, #0]
 800c830:	fa03 f506 	lsl.w	r5, r3, r6
 800c834:	432c      	orrs	r4, r5
 800c836:	40d3      	lsrs	r3, r2
 800c838:	6004      	str	r4, [r0, #0]
 800c83a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c83e:	4288      	cmp	r0, r1
 800c840:	d3f4      	bcc.n	800c82c <L_shift+0xc>
 800c842:	bd70      	pop	{r4, r5, r6, pc}

0800c844 <__match>:
 800c844:	b530      	push	{r4, r5, lr}
 800c846:	6803      	ldr	r3, [r0, #0]
 800c848:	3301      	adds	r3, #1
 800c84a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c84e:	b914      	cbnz	r4, 800c856 <__match+0x12>
 800c850:	6003      	str	r3, [r0, #0]
 800c852:	2001      	movs	r0, #1
 800c854:	bd30      	pop	{r4, r5, pc}
 800c856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c85a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c85e:	2d19      	cmp	r5, #25
 800c860:	bf98      	it	ls
 800c862:	3220      	addls	r2, #32
 800c864:	42a2      	cmp	r2, r4
 800c866:	d0f0      	beq.n	800c84a <__match+0x6>
 800c868:	2000      	movs	r0, #0
 800c86a:	e7f3      	b.n	800c854 <__match+0x10>

0800c86c <__hexnan>:
 800c86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c870:	2500      	movs	r5, #0
 800c872:	680b      	ldr	r3, [r1, #0]
 800c874:	4682      	mov	sl, r0
 800c876:	115f      	asrs	r7, r3, #5
 800c878:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c87c:	f013 031f 	ands.w	r3, r3, #31
 800c880:	bf18      	it	ne
 800c882:	3704      	addne	r7, #4
 800c884:	1f3e      	subs	r6, r7, #4
 800c886:	4690      	mov	r8, r2
 800c888:	46b1      	mov	r9, r6
 800c88a:	4634      	mov	r4, r6
 800c88c:	46ab      	mov	fp, r5
 800c88e:	b087      	sub	sp, #28
 800c890:	6801      	ldr	r1, [r0, #0]
 800c892:	9301      	str	r3, [sp, #4]
 800c894:	f847 5c04 	str.w	r5, [r7, #-4]
 800c898:	9502      	str	r5, [sp, #8]
 800c89a:	784a      	ldrb	r2, [r1, #1]
 800c89c:	1c4b      	adds	r3, r1, #1
 800c89e:	9303      	str	r3, [sp, #12]
 800c8a0:	b342      	cbz	r2, 800c8f4 <__hexnan+0x88>
 800c8a2:	4610      	mov	r0, r2
 800c8a4:	9105      	str	r1, [sp, #20]
 800c8a6:	9204      	str	r2, [sp, #16]
 800c8a8:	f7ff fd83 	bl	800c3b2 <__hexdig_fun>
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	d143      	bne.n	800c938 <__hexnan+0xcc>
 800c8b0:	9a04      	ldr	r2, [sp, #16]
 800c8b2:	9905      	ldr	r1, [sp, #20]
 800c8b4:	2a20      	cmp	r2, #32
 800c8b6:	d818      	bhi.n	800c8ea <__hexnan+0x7e>
 800c8b8:	9b02      	ldr	r3, [sp, #8]
 800c8ba:	459b      	cmp	fp, r3
 800c8bc:	dd13      	ble.n	800c8e6 <__hexnan+0x7a>
 800c8be:	454c      	cmp	r4, r9
 800c8c0:	d206      	bcs.n	800c8d0 <__hexnan+0x64>
 800c8c2:	2d07      	cmp	r5, #7
 800c8c4:	dc04      	bgt.n	800c8d0 <__hexnan+0x64>
 800c8c6:	462a      	mov	r2, r5
 800c8c8:	4649      	mov	r1, r9
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	f7ff ffa8 	bl	800c820 <L_shift>
 800c8d0:	4544      	cmp	r4, r8
 800c8d2:	d944      	bls.n	800c95e <__hexnan+0xf2>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	f1a4 0904 	sub.w	r9, r4, #4
 800c8da:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8de:	461d      	mov	r5, r3
 800c8e0:	464c      	mov	r4, r9
 800c8e2:	f8cd b008 	str.w	fp, [sp, #8]
 800c8e6:	9903      	ldr	r1, [sp, #12]
 800c8e8:	e7d7      	b.n	800c89a <__hexnan+0x2e>
 800c8ea:	2a29      	cmp	r2, #41	; 0x29
 800c8ec:	d14a      	bne.n	800c984 <__hexnan+0x118>
 800c8ee:	3102      	adds	r1, #2
 800c8f0:	f8ca 1000 	str.w	r1, [sl]
 800c8f4:	f1bb 0f00 	cmp.w	fp, #0
 800c8f8:	d044      	beq.n	800c984 <__hexnan+0x118>
 800c8fa:	454c      	cmp	r4, r9
 800c8fc:	d206      	bcs.n	800c90c <__hexnan+0xa0>
 800c8fe:	2d07      	cmp	r5, #7
 800c900:	dc04      	bgt.n	800c90c <__hexnan+0xa0>
 800c902:	462a      	mov	r2, r5
 800c904:	4649      	mov	r1, r9
 800c906:	4620      	mov	r0, r4
 800c908:	f7ff ff8a 	bl	800c820 <L_shift>
 800c90c:	4544      	cmp	r4, r8
 800c90e:	d928      	bls.n	800c962 <__hexnan+0xf6>
 800c910:	4643      	mov	r3, r8
 800c912:	f854 2b04 	ldr.w	r2, [r4], #4
 800c916:	42a6      	cmp	r6, r4
 800c918:	f843 2b04 	str.w	r2, [r3], #4
 800c91c:	d2f9      	bcs.n	800c912 <__hexnan+0xa6>
 800c91e:	2200      	movs	r2, #0
 800c920:	f843 2b04 	str.w	r2, [r3], #4
 800c924:	429e      	cmp	r6, r3
 800c926:	d2fb      	bcs.n	800c920 <__hexnan+0xb4>
 800c928:	6833      	ldr	r3, [r6, #0]
 800c92a:	b91b      	cbnz	r3, 800c934 <__hexnan+0xc8>
 800c92c:	4546      	cmp	r6, r8
 800c92e:	d127      	bne.n	800c980 <__hexnan+0x114>
 800c930:	2301      	movs	r3, #1
 800c932:	6033      	str	r3, [r6, #0]
 800c934:	2005      	movs	r0, #5
 800c936:	e026      	b.n	800c986 <__hexnan+0x11a>
 800c938:	3501      	adds	r5, #1
 800c93a:	2d08      	cmp	r5, #8
 800c93c:	f10b 0b01 	add.w	fp, fp, #1
 800c940:	dd06      	ble.n	800c950 <__hexnan+0xe4>
 800c942:	4544      	cmp	r4, r8
 800c944:	d9cf      	bls.n	800c8e6 <__hexnan+0x7a>
 800c946:	2300      	movs	r3, #0
 800c948:	2501      	movs	r5, #1
 800c94a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c94e:	3c04      	subs	r4, #4
 800c950:	6822      	ldr	r2, [r4, #0]
 800c952:	f000 000f 	and.w	r0, r0, #15
 800c956:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c95a:	6020      	str	r0, [r4, #0]
 800c95c:	e7c3      	b.n	800c8e6 <__hexnan+0x7a>
 800c95e:	2508      	movs	r5, #8
 800c960:	e7c1      	b.n	800c8e6 <__hexnan+0x7a>
 800c962:	9b01      	ldr	r3, [sp, #4]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d0df      	beq.n	800c928 <__hexnan+0xbc>
 800c968:	f04f 32ff 	mov.w	r2, #4294967295
 800c96c:	f1c3 0320 	rsb	r3, r3, #32
 800c970:	fa22 f303 	lsr.w	r3, r2, r3
 800c974:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c978:	401a      	ands	r2, r3
 800c97a:	f847 2c04 	str.w	r2, [r7, #-4]
 800c97e:	e7d3      	b.n	800c928 <__hexnan+0xbc>
 800c980:	3e04      	subs	r6, #4
 800c982:	e7d1      	b.n	800c928 <__hexnan+0xbc>
 800c984:	2004      	movs	r0, #4
 800c986:	b007      	add	sp, #28
 800c988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c98c <__locale_ctype_ptr_l>:
 800c98c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c990:	4770      	bx	lr
	...

0800c994 <__locale_ctype_ptr>:
 800c994:	4b04      	ldr	r3, [pc, #16]	; (800c9a8 <__locale_ctype_ptr+0x14>)
 800c996:	4a05      	ldr	r2, [pc, #20]	; (800c9ac <__locale_ctype_ptr+0x18>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	6a1b      	ldr	r3, [r3, #32]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	bf08      	it	eq
 800c9a0:	4613      	moveq	r3, r2
 800c9a2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800c9a6:	4770      	bx	lr
 800c9a8:	2000017c 	.word	0x2000017c
 800c9ac:	200001e0 	.word	0x200001e0

0800c9b0 <__localeconv_l>:
 800c9b0:	30f0      	adds	r0, #240	; 0xf0
 800c9b2:	4770      	bx	lr

0800c9b4 <_localeconv_r>:
 800c9b4:	4b04      	ldr	r3, [pc, #16]	; (800c9c8 <_localeconv_r+0x14>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	6a18      	ldr	r0, [r3, #32]
 800c9ba:	4b04      	ldr	r3, [pc, #16]	; (800c9cc <_localeconv_r+0x18>)
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	bf08      	it	eq
 800c9c0:	4618      	moveq	r0, r3
 800c9c2:	30f0      	adds	r0, #240	; 0xf0
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	2000017c 	.word	0x2000017c
 800c9cc:	200001e0 	.word	0x200001e0

0800c9d0 <_lseek_r>:
 800c9d0:	b538      	push	{r3, r4, r5, lr}
 800c9d2:	4605      	mov	r5, r0
 800c9d4:	4608      	mov	r0, r1
 800c9d6:	4611      	mov	r1, r2
 800c9d8:	2200      	movs	r2, #0
 800c9da:	4c05      	ldr	r4, [pc, #20]	; (800c9f0 <_lseek_r+0x20>)
 800c9dc:	6022      	str	r2, [r4, #0]
 800c9de:	461a      	mov	r2, r3
 800c9e0:	f7f4 ff2b 	bl	800183a <_lseek>
 800c9e4:	1c43      	adds	r3, r0, #1
 800c9e6:	d102      	bne.n	800c9ee <_lseek_r+0x1e>
 800c9e8:	6823      	ldr	r3, [r4, #0]
 800c9ea:	b103      	cbz	r3, 800c9ee <_lseek_r+0x1e>
 800c9ec:	602b      	str	r3, [r5, #0]
 800c9ee:	bd38      	pop	{r3, r4, r5, pc}
 800c9f0:	20001074 	.word	0x20001074

0800c9f4 <__swhatbuf_r>:
 800c9f4:	b570      	push	{r4, r5, r6, lr}
 800c9f6:	460e      	mov	r6, r1
 800c9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9fc:	b096      	sub	sp, #88	; 0x58
 800c9fe:	2900      	cmp	r1, #0
 800ca00:	4614      	mov	r4, r2
 800ca02:	461d      	mov	r5, r3
 800ca04:	da07      	bge.n	800ca16 <__swhatbuf_r+0x22>
 800ca06:	2300      	movs	r3, #0
 800ca08:	602b      	str	r3, [r5, #0]
 800ca0a:	89b3      	ldrh	r3, [r6, #12]
 800ca0c:	061a      	lsls	r2, r3, #24
 800ca0e:	d410      	bmi.n	800ca32 <__swhatbuf_r+0x3e>
 800ca10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca14:	e00e      	b.n	800ca34 <__swhatbuf_r+0x40>
 800ca16:	466a      	mov	r2, sp
 800ca18:	f001 fbfa 	bl	800e210 <_fstat_r>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	dbf2      	blt.n	800ca06 <__swhatbuf_r+0x12>
 800ca20:	9a01      	ldr	r2, [sp, #4]
 800ca22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca2a:	425a      	negs	r2, r3
 800ca2c:	415a      	adcs	r2, r3
 800ca2e:	602a      	str	r2, [r5, #0]
 800ca30:	e7ee      	b.n	800ca10 <__swhatbuf_r+0x1c>
 800ca32:	2340      	movs	r3, #64	; 0x40
 800ca34:	2000      	movs	r0, #0
 800ca36:	6023      	str	r3, [r4, #0]
 800ca38:	b016      	add	sp, #88	; 0x58
 800ca3a:	bd70      	pop	{r4, r5, r6, pc}

0800ca3c <__smakebuf_r>:
 800ca3c:	898b      	ldrh	r3, [r1, #12]
 800ca3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca40:	079d      	lsls	r5, r3, #30
 800ca42:	4606      	mov	r6, r0
 800ca44:	460c      	mov	r4, r1
 800ca46:	d507      	bpl.n	800ca58 <__smakebuf_r+0x1c>
 800ca48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca4c:	6023      	str	r3, [r4, #0]
 800ca4e:	6123      	str	r3, [r4, #16]
 800ca50:	2301      	movs	r3, #1
 800ca52:	6163      	str	r3, [r4, #20]
 800ca54:	b002      	add	sp, #8
 800ca56:	bd70      	pop	{r4, r5, r6, pc}
 800ca58:	ab01      	add	r3, sp, #4
 800ca5a:	466a      	mov	r2, sp
 800ca5c:	f7ff ffca 	bl	800c9f4 <__swhatbuf_r>
 800ca60:	9900      	ldr	r1, [sp, #0]
 800ca62:	4605      	mov	r5, r0
 800ca64:	4630      	mov	r0, r6
 800ca66:	f000 fcaf 	bl	800d3c8 <_malloc_r>
 800ca6a:	b948      	cbnz	r0, 800ca80 <__smakebuf_r+0x44>
 800ca6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca70:	059a      	lsls	r2, r3, #22
 800ca72:	d4ef      	bmi.n	800ca54 <__smakebuf_r+0x18>
 800ca74:	f023 0303 	bic.w	r3, r3, #3
 800ca78:	f043 0302 	orr.w	r3, r3, #2
 800ca7c:	81a3      	strh	r3, [r4, #12]
 800ca7e:	e7e3      	b.n	800ca48 <__smakebuf_r+0xc>
 800ca80:	4b0d      	ldr	r3, [pc, #52]	; (800cab8 <__smakebuf_r+0x7c>)
 800ca82:	62b3      	str	r3, [r6, #40]	; 0x28
 800ca84:	89a3      	ldrh	r3, [r4, #12]
 800ca86:	6020      	str	r0, [r4, #0]
 800ca88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca8c:	81a3      	strh	r3, [r4, #12]
 800ca8e:	9b00      	ldr	r3, [sp, #0]
 800ca90:	6120      	str	r0, [r4, #16]
 800ca92:	6163      	str	r3, [r4, #20]
 800ca94:	9b01      	ldr	r3, [sp, #4]
 800ca96:	b15b      	cbz	r3, 800cab0 <__smakebuf_r+0x74>
 800ca98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	f001 fbc9 	bl	800e234 <_isatty_r>
 800caa2:	b128      	cbz	r0, 800cab0 <__smakebuf_r+0x74>
 800caa4:	89a3      	ldrh	r3, [r4, #12]
 800caa6:	f023 0303 	bic.w	r3, r3, #3
 800caaa:	f043 0301 	orr.w	r3, r3, #1
 800caae:	81a3      	strh	r3, [r4, #12]
 800cab0:	89a3      	ldrh	r3, [r4, #12]
 800cab2:	431d      	orrs	r5, r3
 800cab4:	81a5      	strh	r5, [r4, #12]
 800cab6:	e7cd      	b.n	800ca54 <__smakebuf_r+0x18>
 800cab8:	0800c1f1 	.word	0x0800c1f1

0800cabc <malloc>:
 800cabc:	4b02      	ldr	r3, [pc, #8]	; (800cac8 <malloc+0xc>)
 800cabe:	4601      	mov	r1, r0
 800cac0:	6818      	ldr	r0, [r3, #0]
 800cac2:	f000 bc81 	b.w	800d3c8 <_malloc_r>
 800cac6:	bf00      	nop
 800cac8:	2000017c 	.word	0x2000017c

0800cacc <__ascii_mbtowc>:
 800cacc:	b082      	sub	sp, #8
 800cace:	b901      	cbnz	r1, 800cad2 <__ascii_mbtowc+0x6>
 800cad0:	a901      	add	r1, sp, #4
 800cad2:	b142      	cbz	r2, 800cae6 <__ascii_mbtowc+0x1a>
 800cad4:	b14b      	cbz	r3, 800caea <__ascii_mbtowc+0x1e>
 800cad6:	7813      	ldrb	r3, [r2, #0]
 800cad8:	600b      	str	r3, [r1, #0]
 800cada:	7812      	ldrb	r2, [r2, #0]
 800cadc:	1c10      	adds	r0, r2, #0
 800cade:	bf18      	it	ne
 800cae0:	2001      	movne	r0, #1
 800cae2:	b002      	add	sp, #8
 800cae4:	4770      	bx	lr
 800cae6:	4610      	mov	r0, r2
 800cae8:	e7fb      	b.n	800cae2 <__ascii_mbtowc+0x16>
 800caea:	f06f 0001 	mvn.w	r0, #1
 800caee:	e7f8      	b.n	800cae2 <__ascii_mbtowc+0x16>

0800caf0 <memchr>:
 800caf0:	b510      	push	{r4, lr}
 800caf2:	b2c9      	uxtb	r1, r1
 800caf4:	4402      	add	r2, r0
 800caf6:	4290      	cmp	r0, r2
 800caf8:	4603      	mov	r3, r0
 800cafa:	d101      	bne.n	800cb00 <memchr+0x10>
 800cafc:	2300      	movs	r3, #0
 800cafe:	e003      	b.n	800cb08 <memchr+0x18>
 800cb00:	781c      	ldrb	r4, [r3, #0]
 800cb02:	3001      	adds	r0, #1
 800cb04:	428c      	cmp	r4, r1
 800cb06:	d1f6      	bne.n	800caf6 <memchr+0x6>
 800cb08:	4618      	mov	r0, r3
 800cb0a:	bd10      	pop	{r4, pc}

0800cb0c <memcpy>:
 800cb0c:	b510      	push	{r4, lr}
 800cb0e:	1e43      	subs	r3, r0, #1
 800cb10:	440a      	add	r2, r1
 800cb12:	4291      	cmp	r1, r2
 800cb14:	d100      	bne.n	800cb18 <memcpy+0xc>
 800cb16:	bd10      	pop	{r4, pc}
 800cb18:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb20:	e7f7      	b.n	800cb12 <memcpy+0x6>

0800cb22 <_Balloc>:
 800cb22:	b570      	push	{r4, r5, r6, lr}
 800cb24:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cb26:	4604      	mov	r4, r0
 800cb28:	460e      	mov	r6, r1
 800cb2a:	b93d      	cbnz	r5, 800cb3c <_Balloc+0x1a>
 800cb2c:	2010      	movs	r0, #16
 800cb2e:	f7ff ffc5 	bl	800cabc <malloc>
 800cb32:	6260      	str	r0, [r4, #36]	; 0x24
 800cb34:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cb38:	6005      	str	r5, [r0, #0]
 800cb3a:	60c5      	str	r5, [r0, #12]
 800cb3c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cb3e:	68eb      	ldr	r3, [r5, #12]
 800cb40:	b183      	cbz	r3, 800cb64 <_Balloc+0x42>
 800cb42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb44:	68db      	ldr	r3, [r3, #12]
 800cb46:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cb4a:	b9b8      	cbnz	r0, 800cb7c <_Balloc+0x5a>
 800cb4c:	2101      	movs	r1, #1
 800cb4e:	fa01 f506 	lsl.w	r5, r1, r6
 800cb52:	1d6a      	adds	r2, r5, #5
 800cb54:	0092      	lsls	r2, r2, #2
 800cb56:	4620      	mov	r0, r4
 800cb58:	f000 fbdc 	bl	800d314 <_calloc_r>
 800cb5c:	b160      	cbz	r0, 800cb78 <_Balloc+0x56>
 800cb5e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800cb62:	e00e      	b.n	800cb82 <_Balloc+0x60>
 800cb64:	2221      	movs	r2, #33	; 0x21
 800cb66:	2104      	movs	r1, #4
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f000 fbd3 	bl	800d314 <_calloc_r>
 800cb6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb70:	60e8      	str	r0, [r5, #12]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d1e4      	bne.n	800cb42 <_Balloc+0x20>
 800cb78:	2000      	movs	r0, #0
 800cb7a:	bd70      	pop	{r4, r5, r6, pc}
 800cb7c:	6802      	ldr	r2, [r0, #0]
 800cb7e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800cb82:	2300      	movs	r3, #0
 800cb84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb88:	e7f7      	b.n	800cb7a <_Balloc+0x58>

0800cb8a <_Bfree>:
 800cb8a:	b570      	push	{r4, r5, r6, lr}
 800cb8c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cb8e:	4606      	mov	r6, r0
 800cb90:	460d      	mov	r5, r1
 800cb92:	b93c      	cbnz	r4, 800cba4 <_Bfree+0x1a>
 800cb94:	2010      	movs	r0, #16
 800cb96:	f7ff ff91 	bl	800cabc <malloc>
 800cb9a:	6270      	str	r0, [r6, #36]	; 0x24
 800cb9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cba0:	6004      	str	r4, [r0, #0]
 800cba2:	60c4      	str	r4, [r0, #12]
 800cba4:	b13d      	cbz	r5, 800cbb6 <_Bfree+0x2c>
 800cba6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cba8:	686a      	ldr	r2, [r5, #4]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbb0:	6029      	str	r1, [r5, #0]
 800cbb2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cbb6:	bd70      	pop	{r4, r5, r6, pc}

0800cbb8 <__multadd>:
 800cbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbbc:	461f      	mov	r7, r3
 800cbbe:	4606      	mov	r6, r0
 800cbc0:	460c      	mov	r4, r1
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	690d      	ldr	r5, [r1, #16]
 800cbc6:	f101 0c14 	add.w	ip, r1, #20
 800cbca:	f8dc 0000 	ldr.w	r0, [ip]
 800cbce:	3301      	adds	r3, #1
 800cbd0:	b281      	uxth	r1, r0
 800cbd2:	fb02 7101 	mla	r1, r2, r1, r7
 800cbd6:	0c00      	lsrs	r0, r0, #16
 800cbd8:	0c0f      	lsrs	r7, r1, #16
 800cbda:	fb02 7000 	mla	r0, r2, r0, r7
 800cbde:	b289      	uxth	r1, r1
 800cbe0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800cbe4:	429d      	cmp	r5, r3
 800cbe6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800cbea:	f84c 1b04 	str.w	r1, [ip], #4
 800cbee:	dcec      	bgt.n	800cbca <__multadd+0x12>
 800cbf0:	b1d7      	cbz	r7, 800cc28 <__multadd+0x70>
 800cbf2:	68a3      	ldr	r3, [r4, #8]
 800cbf4:	42ab      	cmp	r3, r5
 800cbf6:	dc12      	bgt.n	800cc1e <__multadd+0x66>
 800cbf8:	6861      	ldr	r1, [r4, #4]
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	3101      	adds	r1, #1
 800cbfe:	f7ff ff90 	bl	800cb22 <_Balloc>
 800cc02:	4680      	mov	r8, r0
 800cc04:	6922      	ldr	r2, [r4, #16]
 800cc06:	f104 010c 	add.w	r1, r4, #12
 800cc0a:	3202      	adds	r2, #2
 800cc0c:	0092      	lsls	r2, r2, #2
 800cc0e:	300c      	adds	r0, #12
 800cc10:	f7ff ff7c 	bl	800cb0c <memcpy>
 800cc14:	4621      	mov	r1, r4
 800cc16:	4630      	mov	r0, r6
 800cc18:	f7ff ffb7 	bl	800cb8a <_Bfree>
 800cc1c:	4644      	mov	r4, r8
 800cc1e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc22:	3501      	adds	r5, #1
 800cc24:	615f      	str	r7, [r3, #20]
 800cc26:	6125      	str	r5, [r4, #16]
 800cc28:	4620      	mov	r0, r4
 800cc2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cc2e <__s2b>:
 800cc2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc32:	4615      	mov	r5, r2
 800cc34:	2209      	movs	r2, #9
 800cc36:	461f      	mov	r7, r3
 800cc38:	3308      	adds	r3, #8
 800cc3a:	460c      	mov	r4, r1
 800cc3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc40:	4606      	mov	r6, r0
 800cc42:	2201      	movs	r2, #1
 800cc44:	2100      	movs	r1, #0
 800cc46:	429a      	cmp	r2, r3
 800cc48:	db20      	blt.n	800cc8c <__s2b+0x5e>
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	f7ff ff69 	bl	800cb22 <_Balloc>
 800cc50:	9b08      	ldr	r3, [sp, #32]
 800cc52:	2d09      	cmp	r5, #9
 800cc54:	6143      	str	r3, [r0, #20]
 800cc56:	f04f 0301 	mov.w	r3, #1
 800cc5a:	6103      	str	r3, [r0, #16]
 800cc5c:	dd19      	ble.n	800cc92 <__s2b+0x64>
 800cc5e:	f104 0809 	add.w	r8, r4, #9
 800cc62:	46c1      	mov	r9, r8
 800cc64:	442c      	add	r4, r5
 800cc66:	f819 3b01 	ldrb.w	r3, [r9], #1
 800cc6a:	4601      	mov	r1, r0
 800cc6c:	3b30      	subs	r3, #48	; 0x30
 800cc6e:	220a      	movs	r2, #10
 800cc70:	4630      	mov	r0, r6
 800cc72:	f7ff ffa1 	bl	800cbb8 <__multadd>
 800cc76:	45a1      	cmp	r9, r4
 800cc78:	d1f5      	bne.n	800cc66 <__s2b+0x38>
 800cc7a:	eb08 0405 	add.w	r4, r8, r5
 800cc7e:	3c08      	subs	r4, #8
 800cc80:	1b2d      	subs	r5, r5, r4
 800cc82:	1963      	adds	r3, r4, r5
 800cc84:	42bb      	cmp	r3, r7
 800cc86:	db07      	blt.n	800cc98 <__s2b+0x6a>
 800cc88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc8c:	0052      	lsls	r2, r2, #1
 800cc8e:	3101      	adds	r1, #1
 800cc90:	e7d9      	b.n	800cc46 <__s2b+0x18>
 800cc92:	340a      	adds	r4, #10
 800cc94:	2509      	movs	r5, #9
 800cc96:	e7f3      	b.n	800cc80 <__s2b+0x52>
 800cc98:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc9c:	4601      	mov	r1, r0
 800cc9e:	3b30      	subs	r3, #48	; 0x30
 800cca0:	220a      	movs	r2, #10
 800cca2:	4630      	mov	r0, r6
 800cca4:	f7ff ff88 	bl	800cbb8 <__multadd>
 800cca8:	e7eb      	b.n	800cc82 <__s2b+0x54>

0800ccaa <__hi0bits>:
 800ccaa:	0c02      	lsrs	r2, r0, #16
 800ccac:	0412      	lsls	r2, r2, #16
 800ccae:	4603      	mov	r3, r0
 800ccb0:	b9b2      	cbnz	r2, 800cce0 <__hi0bits+0x36>
 800ccb2:	0403      	lsls	r3, r0, #16
 800ccb4:	2010      	movs	r0, #16
 800ccb6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ccba:	bf04      	itt	eq
 800ccbc:	021b      	lsleq	r3, r3, #8
 800ccbe:	3008      	addeq	r0, #8
 800ccc0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ccc4:	bf04      	itt	eq
 800ccc6:	011b      	lsleq	r3, r3, #4
 800ccc8:	3004      	addeq	r0, #4
 800ccca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ccce:	bf04      	itt	eq
 800ccd0:	009b      	lsleq	r3, r3, #2
 800ccd2:	3002      	addeq	r0, #2
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	db06      	blt.n	800cce6 <__hi0bits+0x3c>
 800ccd8:	005b      	lsls	r3, r3, #1
 800ccda:	d503      	bpl.n	800cce4 <__hi0bits+0x3a>
 800ccdc:	3001      	adds	r0, #1
 800ccde:	4770      	bx	lr
 800cce0:	2000      	movs	r0, #0
 800cce2:	e7e8      	b.n	800ccb6 <__hi0bits+0xc>
 800cce4:	2020      	movs	r0, #32
 800cce6:	4770      	bx	lr

0800cce8 <__lo0bits>:
 800cce8:	6803      	ldr	r3, [r0, #0]
 800ccea:	4601      	mov	r1, r0
 800ccec:	f013 0207 	ands.w	r2, r3, #7
 800ccf0:	d00b      	beq.n	800cd0a <__lo0bits+0x22>
 800ccf2:	07da      	lsls	r2, r3, #31
 800ccf4:	d423      	bmi.n	800cd3e <__lo0bits+0x56>
 800ccf6:	0798      	lsls	r0, r3, #30
 800ccf8:	bf49      	itett	mi
 800ccfa:	085b      	lsrmi	r3, r3, #1
 800ccfc:	089b      	lsrpl	r3, r3, #2
 800ccfe:	2001      	movmi	r0, #1
 800cd00:	600b      	strmi	r3, [r1, #0]
 800cd02:	bf5c      	itt	pl
 800cd04:	600b      	strpl	r3, [r1, #0]
 800cd06:	2002      	movpl	r0, #2
 800cd08:	4770      	bx	lr
 800cd0a:	b298      	uxth	r0, r3
 800cd0c:	b9a8      	cbnz	r0, 800cd3a <__lo0bits+0x52>
 800cd0e:	2010      	movs	r0, #16
 800cd10:	0c1b      	lsrs	r3, r3, #16
 800cd12:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cd16:	bf04      	itt	eq
 800cd18:	0a1b      	lsreq	r3, r3, #8
 800cd1a:	3008      	addeq	r0, #8
 800cd1c:	071a      	lsls	r2, r3, #28
 800cd1e:	bf04      	itt	eq
 800cd20:	091b      	lsreq	r3, r3, #4
 800cd22:	3004      	addeq	r0, #4
 800cd24:	079a      	lsls	r2, r3, #30
 800cd26:	bf04      	itt	eq
 800cd28:	089b      	lsreq	r3, r3, #2
 800cd2a:	3002      	addeq	r0, #2
 800cd2c:	07da      	lsls	r2, r3, #31
 800cd2e:	d402      	bmi.n	800cd36 <__lo0bits+0x4e>
 800cd30:	085b      	lsrs	r3, r3, #1
 800cd32:	d006      	beq.n	800cd42 <__lo0bits+0x5a>
 800cd34:	3001      	adds	r0, #1
 800cd36:	600b      	str	r3, [r1, #0]
 800cd38:	4770      	bx	lr
 800cd3a:	4610      	mov	r0, r2
 800cd3c:	e7e9      	b.n	800cd12 <__lo0bits+0x2a>
 800cd3e:	2000      	movs	r0, #0
 800cd40:	4770      	bx	lr
 800cd42:	2020      	movs	r0, #32
 800cd44:	4770      	bx	lr

0800cd46 <__i2b>:
 800cd46:	b510      	push	{r4, lr}
 800cd48:	460c      	mov	r4, r1
 800cd4a:	2101      	movs	r1, #1
 800cd4c:	f7ff fee9 	bl	800cb22 <_Balloc>
 800cd50:	2201      	movs	r2, #1
 800cd52:	6144      	str	r4, [r0, #20]
 800cd54:	6102      	str	r2, [r0, #16]
 800cd56:	bd10      	pop	{r4, pc}

0800cd58 <__multiply>:
 800cd58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5c:	4614      	mov	r4, r2
 800cd5e:	690a      	ldr	r2, [r1, #16]
 800cd60:	6923      	ldr	r3, [r4, #16]
 800cd62:	4688      	mov	r8, r1
 800cd64:	429a      	cmp	r2, r3
 800cd66:	bfbe      	ittt	lt
 800cd68:	460b      	movlt	r3, r1
 800cd6a:	46a0      	movlt	r8, r4
 800cd6c:	461c      	movlt	r4, r3
 800cd6e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cd72:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cd76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd7a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cd7e:	eb07 0609 	add.w	r6, r7, r9
 800cd82:	42b3      	cmp	r3, r6
 800cd84:	bfb8      	it	lt
 800cd86:	3101      	addlt	r1, #1
 800cd88:	f7ff fecb 	bl	800cb22 <_Balloc>
 800cd8c:	f100 0514 	add.w	r5, r0, #20
 800cd90:	462b      	mov	r3, r5
 800cd92:	2200      	movs	r2, #0
 800cd94:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800cd98:	4573      	cmp	r3, lr
 800cd9a:	d316      	bcc.n	800cdca <__multiply+0x72>
 800cd9c:	f104 0214 	add.w	r2, r4, #20
 800cda0:	f108 0114 	add.w	r1, r8, #20
 800cda4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800cda8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800cdac:	9300      	str	r3, [sp, #0]
 800cdae:	9b00      	ldr	r3, [sp, #0]
 800cdb0:	9201      	str	r2, [sp, #4]
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d80c      	bhi.n	800cdd0 <__multiply+0x78>
 800cdb6:	2e00      	cmp	r6, #0
 800cdb8:	dd03      	ble.n	800cdc2 <__multiply+0x6a>
 800cdba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d05d      	beq.n	800ce7e <__multiply+0x126>
 800cdc2:	6106      	str	r6, [r0, #16]
 800cdc4:	b003      	add	sp, #12
 800cdc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdca:	f843 2b04 	str.w	r2, [r3], #4
 800cdce:	e7e3      	b.n	800cd98 <__multiply+0x40>
 800cdd0:	f8b2 b000 	ldrh.w	fp, [r2]
 800cdd4:	f1bb 0f00 	cmp.w	fp, #0
 800cdd8:	d023      	beq.n	800ce22 <__multiply+0xca>
 800cdda:	4689      	mov	r9, r1
 800cddc:	46ac      	mov	ip, r5
 800cdde:	f04f 0800 	mov.w	r8, #0
 800cde2:	f859 4b04 	ldr.w	r4, [r9], #4
 800cde6:	f8dc a000 	ldr.w	sl, [ip]
 800cdea:	b2a3      	uxth	r3, r4
 800cdec:	fa1f fa8a 	uxth.w	sl, sl
 800cdf0:	fb0b a303 	mla	r3, fp, r3, sl
 800cdf4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cdf8:	f8dc 4000 	ldr.w	r4, [ip]
 800cdfc:	4443      	add	r3, r8
 800cdfe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ce02:	fb0b 840a 	mla	r4, fp, sl, r8
 800ce06:	46e2      	mov	sl, ip
 800ce08:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ce12:	454f      	cmp	r7, r9
 800ce14:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ce18:	f84a 3b04 	str.w	r3, [sl], #4
 800ce1c:	d82b      	bhi.n	800ce76 <__multiply+0x11e>
 800ce1e:	f8cc 8004 	str.w	r8, [ip, #4]
 800ce22:	9b01      	ldr	r3, [sp, #4]
 800ce24:	3204      	adds	r2, #4
 800ce26:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ce2a:	f1ba 0f00 	cmp.w	sl, #0
 800ce2e:	d020      	beq.n	800ce72 <__multiply+0x11a>
 800ce30:	4689      	mov	r9, r1
 800ce32:	46a8      	mov	r8, r5
 800ce34:	f04f 0b00 	mov.w	fp, #0
 800ce38:	682b      	ldr	r3, [r5, #0]
 800ce3a:	f8b9 c000 	ldrh.w	ip, [r9]
 800ce3e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	fb0a 440c 	mla	r4, sl, ip, r4
 800ce48:	46c4      	mov	ip, r8
 800ce4a:	445c      	add	r4, fp
 800ce4c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ce50:	f84c 3b04 	str.w	r3, [ip], #4
 800ce54:	f859 3b04 	ldr.w	r3, [r9], #4
 800ce58:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ce5c:	0c1b      	lsrs	r3, r3, #16
 800ce5e:	fb0a b303 	mla	r3, sl, r3, fp
 800ce62:	454f      	cmp	r7, r9
 800ce64:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ce68:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ce6c:	d805      	bhi.n	800ce7a <__multiply+0x122>
 800ce6e:	f8c8 3004 	str.w	r3, [r8, #4]
 800ce72:	3504      	adds	r5, #4
 800ce74:	e79b      	b.n	800cdae <__multiply+0x56>
 800ce76:	46d4      	mov	ip, sl
 800ce78:	e7b3      	b.n	800cde2 <__multiply+0x8a>
 800ce7a:	46e0      	mov	r8, ip
 800ce7c:	e7dd      	b.n	800ce3a <__multiply+0xe2>
 800ce7e:	3e01      	subs	r6, #1
 800ce80:	e799      	b.n	800cdb6 <__multiply+0x5e>
	...

0800ce84 <__pow5mult>:
 800ce84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce88:	4615      	mov	r5, r2
 800ce8a:	f012 0203 	ands.w	r2, r2, #3
 800ce8e:	4606      	mov	r6, r0
 800ce90:	460f      	mov	r7, r1
 800ce92:	d007      	beq.n	800cea4 <__pow5mult+0x20>
 800ce94:	4c21      	ldr	r4, [pc, #132]	; (800cf1c <__pow5mult+0x98>)
 800ce96:	3a01      	subs	r2, #1
 800ce98:	2300      	movs	r3, #0
 800ce9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce9e:	f7ff fe8b 	bl	800cbb8 <__multadd>
 800cea2:	4607      	mov	r7, r0
 800cea4:	10ad      	asrs	r5, r5, #2
 800cea6:	d035      	beq.n	800cf14 <__pow5mult+0x90>
 800cea8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ceaa:	b93c      	cbnz	r4, 800cebc <__pow5mult+0x38>
 800ceac:	2010      	movs	r0, #16
 800ceae:	f7ff fe05 	bl	800cabc <malloc>
 800ceb2:	6270      	str	r0, [r6, #36]	; 0x24
 800ceb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ceb8:	6004      	str	r4, [r0, #0]
 800ceba:	60c4      	str	r4, [r0, #12]
 800cebc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cec0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cec4:	b94c      	cbnz	r4, 800ceda <__pow5mult+0x56>
 800cec6:	f240 2171 	movw	r1, #625	; 0x271
 800ceca:	4630      	mov	r0, r6
 800cecc:	f7ff ff3b 	bl	800cd46 <__i2b>
 800ced0:	2300      	movs	r3, #0
 800ced2:	4604      	mov	r4, r0
 800ced4:	f8c8 0008 	str.w	r0, [r8, #8]
 800ced8:	6003      	str	r3, [r0, #0]
 800ceda:	f04f 0800 	mov.w	r8, #0
 800cede:	07eb      	lsls	r3, r5, #31
 800cee0:	d50a      	bpl.n	800cef8 <__pow5mult+0x74>
 800cee2:	4639      	mov	r1, r7
 800cee4:	4622      	mov	r2, r4
 800cee6:	4630      	mov	r0, r6
 800cee8:	f7ff ff36 	bl	800cd58 <__multiply>
 800ceec:	4681      	mov	r9, r0
 800ceee:	4639      	mov	r1, r7
 800cef0:	4630      	mov	r0, r6
 800cef2:	f7ff fe4a 	bl	800cb8a <_Bfree>
 800cef6:	464f      	mov	r7, r9
 800cef8:	106d      	asrs	r5, r5, #1
 800cefa:	d00b      	beq.n	800cf14 <__pow5mult+0x90>
 800cefc:	6820      	ldr	r0, [r4, #0]
 800cefe:	b938      	cbnz	r0, 800cf10 <__pow5mult+0x8c>
 800cf00:	4622      	mov	r2, r4
 800cf02:	4621      	mov	r1, r4
 800cf04:	4630      	mov	r0, r6
 800cf06:	f7ff ff27 	bl	800cd58 <__multiply>
 800cf0a:	6020      	str	r0, [r4, #0]
 800cf0c:	f8c0 8000 	str.w	r8, [r0]
 800cf10:	4604      	mov	r4, r0
 800cf12:	e7e4      	b.n	800cede <__pow5mult+0x5a>
 800cf14:	4638      	mov	r0, r7
 800cf16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf1a:	bf00      	nop
 800cf1c:	0800e5b8 	.word	0x0800e5b8

0800cf20 <__lshift>:
 800cf20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf24:	460c      	mov	r4, r1
 800cf26:	4607      	mov	r7, r0
 800cf28:	4616      	mov	r6, r2
 800cf2a:	6923      	ldr	r3, [r4, #16]
 800cf2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf30:	eb0a 0903 	add.w	r9, sl, r3
 800cf34:	6849      	ldr	r1, [r1, #4]
 800cf36:	68a3      	ldr	r3, [r4, #8]
 800cf38:	f109 0501 	add.w	r5, r9, #1
 800cf3c:	42ab      	cmp	r3, r5
 800cf3e:	db32      	blt.n	800cfa6 <__lshift+0x86>
 800cf40:	4638      	mov	r0, r7
 800cf42:	f7ff fdee 	bl	800cb22 <_Balloc>
 800cf46:	2300      	movs	r3, #0
 800cf48:	4680      	mov	r8, r0
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	f100 0114 	add.w	r1, r0, #20
 800cf50:	4553      	cmp	r3, sl
 800cf52:	db2b      	blt.n	800cfac <__lshift+0x8c>
 800cf54:	6920      	ldr	r0, [r4, #16]
 800cf56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf5a:	f104 0314 	add.w	r3, r4, #20
 800cf5e:	f016 021f 	ands.w	r2, r6, #31
 800cf62:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf66:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf6a:	d025      	beq.n	800cfb8 <__lshift+0x98>
 800cf6c:	2000      	movs	r0, #0
 800cf6e:	f1c2 0e20 	rsb	lr, r2, #32
 800cf72:	468a      	mov	sl, r1
 800cf74:	681e      	ldr	r6, [r3, #0]
 800cf76:	4096      	lsls	r6, r2
 800cf78:	4330      	orrs	r0, r6
 800cf7a:	f84a 0b04 	str.w	r0, [sl], #4
 800cf7e:	f853 0b04 	ldr.w	r0, [r3], #4
 800cf82:	459c      	cmp	ip, r3
 800cf84:	fa20 f00e 	lsr.w	r0, r0, lr
 800cf88:	d814      	bhi.n	800cfb4 <__lshift+0x94>
 800cf8a:	6048      	str	r0, [r1, #4]
 800cf8c:	b108      	cbz	r0, 800cf92 <__lshift+0x72>
 800cf8e:	f109 0502 	add.w	r5, r9, #2
 800cf92:	3d01      	subs	r5, #1
 800cf94:	4638      	mov	r0, r7
 800cf96:	f8c8 5010 	str.w	r5, [r8, #16]
 800cf9a:	4621      	mov	r1, r4
 800cf9c:	f7ff fdf5 	bl	800cb8a <_Bfree>
 800cfa0:	4640      	mov	r0, r8
 800cfa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfa6:	3101      	adds	r1, #1
 800cfa8:	005b      	lsls	r3, r3, #1
 800cfaa:	e7c7      	b.n	800cf3c <__lshift+0x1c>
 800cfac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	e7cd      	b.n	800cf50 <__lshift+0x30>
 800cfb4:	4651      	mov	r1, sl
 800cfb6:	e7dc      	b.n	800cf72 <__lshift+0x52>
 800cfb8:	3904      	subs	r1, #4
 800cfba:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfbe:	459c      	cmp	ip, r3
 800cfc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800cfc4:	d8f9      	bhi.n	800cfba <__lshift+0x9a>
 800cfc6:	e7e4      	b.n	800cf92 <__lshift+0x72>

0800cfc8 <__mcmp>:
 800cfc8:	6903      	ldr	r3, [r0, #16]
 800cfca:	690a      	ldr	r2, [r1, #16]
 800cfcc:	b530      	push	{r4, r5, lr}
 800cfce:	1a9b      	subs	r3, r3, r2
 800cfd0:	d10c      	bne.n	800cfec <__mcmp+0x24>
 800cfd2:	0092      	lsls	r2, r2, #2
 800cfd4:	3014      	adds	r0, #20
 800cfd6:	3114      	adds	r1, #20
 800cfd8:	1884      	adds	r4, r0, r2
 800cfda:	4411      	add	r1, r2
 800cfdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cfe0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cfe4:	4295      	cmp	r5, r2
 800cfe6:	d003      	beq.n	800cff0 <__mcmp+0x28>
 800cfe8:	d305      	bcc.n	800cff6 <__mcmp+0x2e>
 800cfea:	2301      	movs	r3, #1
 800cfec:	4618      	mov	r0, r3
 800cfee:	bd30      	pop	{r4, r5, pc}
 800cff0:	42a0      	cmp	r0, r4
 800cff2:	d3f3      	bcc.n	800cfdc <__mcmp+0x14>
 800cff4:	e7fa      	b.n	800cfec <__mcmp+0x24>
 800cff6:	f04f 33ff 	mov.w	r3, #4294967295
 800cffa:	e7f7      	b.n	800cfec <__mcmp+0x24>

0800cffc <__mdiff>:
 800cffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d000:	460d      	mov	r5, r1
 800d002:	4607      	mov	r7, r0
 800d004:	4611      	mov	r1, r2
 800d006:	4628      	mov	r0, r5
 800d008:	4614      	mov	r4, r2
 800d00a:	f7ff ffdd 	bl	800cfc8 <__mcmp>
 800d00e:	1e06      	subs	r6, r0, #0
 800d010:	d108      	bne.n	800d024 <__mdiff+0x28>
 800d012:	4631      	mov	r1, r6
 800d014:	4638      	mov	r0, r7
 800d016:	f7ff fd84 	bl	800cb22 <_Balloc>
 800d01a:	2301      	movs	r3, #1
 800d01c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d024:	bfa4      	itt	ge
 800d026:	4623      	movge	r3, r4
 800d028:	462c      	movge	r4, r5
 800d02a:	4638      	mov	r0, r7
 800d02c:	6861      	ldr	r1, [r4, #4]
 800d02e:	bfa6      	itte	ge
 800d030:	461d      	movge	r5, r3
 800d032:	2600      	movge	r6, #0
 800d034:	2601      	movlt	r6, #1
 800d036:	f7ff fd74 	bl	800cb22 <_Balloc>
 800d03a:	f04f 0e00 	mov.w	lr, #0
 800d03e:	60c6      	str	r6, [r0, #12]
 800d040:	692b      	ldr	r3, [r5, #16]
 800d042:	6926      	ldr	r6, [r4, #16]
 800d044:	f104 0214 	add.w	r2, r4, #20
 800d048:	f105 0914 	add.w	r9, r5, #20
 800d04c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d050:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d054:	f100 0114 	add.w	r1, r0, #20
 800d058:	f852 ab04 	ldr.w	sl, [r2], #4
 800d05c:	f859 5b04 	ldr.w	r5, [r9], #4
 800d060:	fa1f f38a 	uxth.w	r3, sl
 800d064:	4473      	add	r3, lr
 800d066:	b2ac      	uxth	r4, r5
 800d068:	1b1b      	subs	r3, r3, r4
 800d06a:	0c2c      	lsrs	r4, r5, #16
 800d06c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800d070:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800d074:	b29b      	uxth	r3, r3
 800d076:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800d07a:	45c8      	cmp	r8, r9
 800d07c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800d080:	4694      	mov	ip, r2
 800d082:	f841 4b04 	str.w	r4, [r1], #4
 800d086:	d8e7      	bhi.n	800d058 <__mdiff+0x5c>
 800d088:	45bc      	cmp	ip, r7
 800d08a:	d304      	bcc.n	800d096 <__mdiff+0x9a>
 800d08c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d090:	b183      	cbz	r3, 800d0b4 <__mdiff+0xb8>
 800d092:	6106      	str	r6, [r0, #16]
 800d094:	e7c4      	b.n	800d020 <__mdiff+0x24>
 800d096:	f85c 4b04 	ldr.w	r4, [ip], #4
 800d09a:	b2a2      	uxth	r2, r4
 800d09c:	4472      	add	r2, lr
 800d09e:	1413      	asrs	r3, r2, #16
 800d0a0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d0a4:	b292      	uxth	r2, r2
 800d0a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d0aa:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d0ae:	f841 2b04 	str.w	r2, [r1], #4
 800d0b2:	e7e9      	b.n	800d088 <__mdiff+0x8c>
 800d0b4:	3e01      	subs	r6, #1
 800d0b6:	e7e9      	b.n	800d08c <__mdiff+0x90>

0800d0b8 <__ulp>:
 800d0b8:	4b10      	ldr	r3, [pc, #64]	; (800d0fc <__ulp+0x44>)
 800d0ba:	400b      	ands	r3, r1
 800d0bc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	dd02      	ble.n	800d0ca <__ulp+0x12>
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	4770      	bx	lr
 800d0ca:	425b      	negs	r3, r3
 800d0cc:	151b      	asrs	r3, r3, #20
 800d0ce:	2b13      	cmp	r3, #19
 800d0d0:	f04f 0000 	mov.w	r0, #0
 800d0d4:	f04f 0100 	mov.w	r1, #0
 800d0d8:	dc04      	bgt.n	800d0e4 <__ulp+0x2c>
 800d0da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d0de:	fa42 f103 	asr.w	r1, r2, r3
 800d0e2:	4770      	bx	lr
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	3b14      	subs	r3, #20
 800d0e8:	2b1e      	cmp	r3, #30
 800d0ea:	bfce      	itee	gt
 800d0ec:	4613      	movgt	r3, r2
 800d0ee:	f1c3 031f 	rsble	r3, r3, #31
 800d0f2:	fa02 f303 	lslle.w	r3, r2, r3
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop
 800d0fc:	7ff00000 	.word	0x7ff00000

0800d100 <__b2d>:
 800d100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d104:	6907      	ldr	r7, [r0, #16]
 800d106:	f100 0914 	add.w	r9, r0, #20
 800d10a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d10e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d112:	f1a7 0804 	sub.w	r8, r7, #4
 800d116:	4630      	mov	r0, r6
 800d118:	f7ff fdc7 	bl	800ccaa <__hi0bits>
 800d11c:	f1c0 0320 	rsb	r3, r0, #32
 800d120:	280a      	cmp	r0, #10
 800d122:	600b      	str	r3, [r1, #0]
 800d124:	491e      	ldr	r1, [pc, #120]	; (800d1a0 <__b2d+0xa0>)
 800d126:	dc17      	bgt.n	800d158 <__b2d+0x58>
 800d128:	45c1      	cmp	r9, r8
 800d12a:	bf28      	it	cs
 800d12c:	2200      	movcs	r2, #0
 800d12e:	f1c0 0c0b 	rsb	ip, r0, #11
 800d132:	fa26 f30c 	lsr.w	r3, r6, ip
 800d136:	bf38      	it	cc
 800d138:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d13c:	ea43 0501 	orr.w	r5, r3, r1
 800d140:	f100 0315 	add.w	r3, r0, #21
 800d144:	fa06 f303 	lsl.w	r3, r6, r3
 800d148:	fa22 f20c 	lsr.w	r2, r2, ip
 800d14c:	ea43 0402 	orr.w	r4, r3, r2
 800d150:	4620      	mov	r0, r4
 800d152:	4629      	mov	r1, r5
 800d154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d158:	45c1      	cmp	r9, r8
 800d15a:	bf3a      	itte	cc
 800d15c:	f1a7 0808 	subcc.w	r8, r7, #8
 800d160:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d164:	2200      	movcs	r2, #0
 800d166:	f1b0 030b 	subs.w	r3, r0, #11
 800d16a:	d015      	beq.n	800d198 <__b2d+0x98>
 800d16c:	409e      	lsls	r6, r3
 800d16e:	f1c3 0720 	rsb	r7, r3, #32
 800d172:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800d176:	fa22 f107 	lsr.w	r1, r2, r7
 800d17a:	45c8      	cmp	r8, r9
 800d17c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800d180:	ea46 0501 	orr.w	r5, r6, r1
 800d184:	bf94      	ite	ls
 800d186:	2100      	movls	r1, #0
 800d188:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d18c:	fa02 f003 	lsl.w	r0, r2, r3
 800d190:	40f9      	lsrs	r1, r7
 800d192:	ea40 0401 	orr.w	r4, r0, r1
 800d196:	e7db      	b.n	800d150 <__b2d+0x50>
 800d198:	ea46 0501 	orr.w	r5, r6, r1
 800d19c:	4614      	mov	r4, r2
 800d19e:	e7d7      	b.n	800d150 <__b2d+0x50>
 800d1a0:	3ff00000 	.word	0x3ff00000

0800d1a4 <__d2b>:
 800d1a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d1a8:	461c      	mov	r4, r3
 800d1aa:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800d1ae:	2101      	movs	r1, #1
 800d1b0:	4690      	mov	r8, r2
 800d1b2:	f7ff fcb6 	bl	800cb22 <_Balloc>
 800d1b6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800d1ba:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800d1be:	4607      	mov	r7, r0
 800d1c0:	bb34      	cbnz	r4, 800d210 <__d2b+0x6c>
 800d1c2:	9201      	str	r2, [sp, #4]
 800d1c4:	f1b8 0200 	subs.w	r2, r8, #0
 800d1c8:	d027      	beq.n	800d21a <__d2b+0x76>
 800d1ca:	a802      	add	r0, sp, #8
 800d1cc:	f840 2d08 	str.w	r2, [r0, #-8]!
 800d1d0:	f7ff fd8a 	bl	800cce8 <__lo0bits>
 800d1d4:	9900      	ldr	r1, [sp, #0]
 800d1d6:	b1f0      	cbz	r0, 800d216 <__d2b+0x72>
 800d1d8:	9a01      	ldr	r2, [sp, #4]
 800d1da:	f1c0 0320 	rsb	r3, r0, #32
 800d1de:	fa02 f303 	lsl.w	r3, r2, r3
 800d1e2:	430b      	orrs	r3, r1
 800d1e4:	40c2      	lsrs	r2, r0
 800d1e6:	617b      	str	r3, [r7, #20]
 800d1e8:	9201      	str	r2, [sp, #4]
 800d1ea:	9b01      	ldr	r3, [sp, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	bf14      	ite	ne
 800d1f0:	2102      	movne	r1, #2
 800d1f2:	2101      	moveq	r1, #1
 800d1f4:	61bb      	str	r3, [r7, #24]
 800d1f6:	6139      	str	r1, [r7, #16]
 800d1f8:	b1c4      	cbz	r4, 800d22c <__d2b+0x88>
 800d1fa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d1fe:	4404      	add	r4, r0
 800d200:	6034      	str	r4, [r6, #0]
 800d202:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d206:	6028      	str	r0, [r5, #0]
 800d208:	4638      	mov	r0, r7
 800d20a:	b002      	add	sp, #8
 800d20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d210:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d214:	e7d5      	b.n	800d1c2 <__d2b+0x1e>
 800d216:	6179      	str	r1, [r7, #20]
 800d218:	e7e7      	b.n	800d1ea <__d2b+0x46>
 800d21a:	a801      	add	r0, sp, #4
 800d21c:	f7ff fd64 	bl	800cce8 <__lo0bits>
 800d220:	2101      	movs	r1, #1
 800d222:	9b01      	ldr	r3, [sp, #4]
 800d224:	6139      	str	r1, [r7, #16]
 800d226:	617b      	str	r3, [r7, #20]
 800d228:	3020      	adds	r0, #32
 800d22a:	e7e5      	b.n	800d1f8 <__d2b+0x54>
 800d22c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d230:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d234:	6030      	str	r0, [r6, #0]
 800d236:	6918      	ldr	r0, [r3, #16]
 800d238:	f7ff fd37 	bl	800ccaa <__hi0bits>
 800d23c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d240:	e7e1      	b.n	800d206 <__d2b+0x62>

0800d242 <__ratio>:
 800d242:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d246:	4688      	mov	r8, r1
 800d248:	4669      	mov	r1, sp
 800d24a:	4681      	mov	r9, r0
 800d24c:	f7ff ff58 	bl	800d100 <__b2d>
 800d250:	468b      	mov	fp, r1
 800d252:	4606      	mov	r6, r0
 800d254:	460f      	mov	r7, r1
 800d256:	4640      	mov	r0, r8
 800d258:	a901      	add	r1, sp, #4
 800d25a:	f7ff ff51 	bl	800d100 <__b2d>
 800d25e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d262:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d266:	460d      	mov	r5, r1
 800d268:	eba3 0c02 	sub.w	ip, r3, r2
 800d26c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d270:	1a9b      	subs	r3, r3, r2
 800d272:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d276:	2b00      	cmp	r3, #0
 800d278:	bfd5      	itete	le
 800d27a:	460a      	movle	r2, r1
 800d27c:	463a      	movgt	r2, r7
 800d27e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d282:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d286:	bfd8      	it	le
 800d288:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800d28c:	462b      	mov	r3, r5
 800d28e:	4602      	mov	r2, r0
 800d290:	4659      	mov	r1, fp
 800d292:	4630      	mov	r0, r6
 800d294:	f7f3 fa4a 	bl	800072c <__aeabi_ddiv>
 800d298:	b003      	add	sp, #12
 800d29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d29e <__copybits>:
 800d29e:	3901      	subs	r1, #1
 800d2a0:	b510      	push	{r4, lr}
 800d2a2:	1149      	asrs	r1, r1, #5
 800d2a4:	6914      	ldr	r4, [r2, #16]
 800d2a6:	3101      	adds	r1, #1
 800d2a8:	f102 0314 	add.w	r3, r2, #20
 800d2ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d2b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d2b4:	42a3      	cmp	r3, r4
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	d303      	bcc.n	800d2c2 <__copybits+0x24>
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	428a      	cmp	r2, r1
 800d2be:	d305      	bcc.n	800d2cc <__copybits+0x2e>
 800d2c0:	bd10      	pop	{r4, pc}
 800d2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2c6:	f840 2b04 	str.w	r2, [r0], #4
 800d2ca:	e7f3      	b.n	800d2b4 <__copybits+0x16>
 800d2cc:	f842 3b04 	str.w	r3, [r2], #4
 800d2d0:	e7f4      	b.n	800d2bc <__copybits+0x1e>

0800d2d2 <__any_on>:
 800d2d2:	f100 0214 	add.w	r2, r0, #20
 800d2d6:	6900      	ldr	r0, [r0, #16]
 800d2d8:	114b      	asrs	r3, r1, #5
 800d2da:	4298      	cmp	r0, r3
 800d2dc:	b510      	push	{r4, lr}
 800d2de:	db11      	blt.n	800d304 <__any_on+0x32>
 800d2e0:	dd0a      	ble.n	800d2f8 <__any_on+0x26>
 800d2e2:	f011 011f 	ands.w	r1, r1, #31
 800d2e6:	d007      	beq.n	800d2f8 <__any_on+0x26>
 800d2e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d2ec:	fa24 f001 	lsr.w	r0, r4, r1
 800d2f0:	fa00 f101 	lsl.w	r1, r0, r1
 800d2f4:	428c      	cmp	r4, r1
 800d2f6:	d10b      	bne.n	800d310 <__any_on+0x3e>
 800d2f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d803      	bhi.n	800d308 <__any_on+0x36>
 800d300:	2000      	movs	r0, #0
 800d302:	bd10      	pop	{r4, pc}
 800d304:	4603      	mov	r3, r0
 800d306:	e7f7      	b.n	800d2f8 <__any_on+0x26>
 800d308:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d30c:	2900      	cmp	r1, #0
 800d30e:	d0f5      	beq.n	800d2fc <__any_on+0x2a>
 800d310:	2001      	movs	r0, #1
 800d312:	e7f6      	b.n	800d302 <__any_on+0x30>

0800d314 <_calloc_r>:
 800d314:	b538      	push	{r3, r4, r5, lr}
 800d316:	fb02 f401 	mul.w	r4, r2, r1
 800d31a:	4621      	mov	r1, r4
 800d31c:	f000 f854 	bl	800d3c8 <_malloc_r>
 800d320:	4605      	mov	r5, r0
 800d322:	b118      	cbz	r0, 800d32c <_calloc_r+0x18>
 800d324:	4622      	mov	r2, r4
 800d326:	2100      	movs	r1, #0
 800d328:	f7fc f94a 	bl	80095c0 <memset>
 800d32c:	4628      	mov	r0, r5
 800d32e:	bd38      	pop	{r3, r4, r5, pc}

0800d330 <_free_r>:
 800d330:	b538      	push	{r3, r4, r5, lr}
 800d332:	4605      	mov	r5, r0
 800d334:	2900      	cmp	r1, #0
 800d336:	d043      	beq.n	800d3c0 <_free_r+0x90>
 800d338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d33c:	1f0c      	subs	r4, r1, #4
 800d33e:	2b00      	cmp	r3, #0
 800d340:	bfb8      	it	lt
 800d342:	18e4      	addlt	r4, r4, r3
 800d344:	f000 ff9f 	bl	800e286 <__malloc_lock>
 800d348:	4a1e      	ldr	r2, [pc, #120]	; (800d3c4 <_free_r+0x94>)
 800d34a:	6813      	ldr	r3, [r2, #0]
 800d34c:	4610      	mov	r0, r2
 800d34e:	b933      	cbnz	r3, 800d35e <_free_r+0x2e>
 800d350:	6063      	str	r3, [r4, #4]
 800d352:	6014      	str	r4, [r2, #0]
 800d354:	4628      	mov	r0, r5
 800d356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d35a:	f000 bf95 	b.w	800e288 <__malloc_unlock>
 800d35e:	42a3      	cmp	r3, r4
 800d360:	d90b      	bls.n	800d37a <_free_r+0x4a>
 800d362:	6821      	ldr	r1, [r4, #0]
 800d364:	1862      	adds	r2, r4, r1
 800d366:	4293      	cmp	r3, r2
 800d368:	bf01      	itttt	eq
 800d36a:	681a      	ldreq	r2, [r3, #0]
 800d36c:	685b      	ldreq	r3, [r3, #4]
 800d36e:	1852      	addeq	r2, r2, r1
 800d370:	6022      	streq	r2, [r4, #0]
 800d372:	6063      	str	r3, [r4, #4]
 800d374:	6004      	str	r4, [r0, #0]
 800d376:	e7ed      	b.n	800d354 <_free_r+0x24>
 800d378:	4613      	mov	r3, r2
 800d37a:	685a      	ldr	r2, [r3, #4]
 800d37c:	b10a      	cbz	r2, 800d382 <_free_r+0x52>
 800d37e:	42a2      	cmp	r2, r4
 800d380:	d9fa      	bls.n	800d378 <_free_r+0x48>
 800d382:	6819      	ldr	r1, [r3, #0]
 800d384:	1858      	adds	r0, r3, r1
 800d386:	42a0      	cmp	r0, r4
 800d388:	d10b      	bne.n	800d3a2 <_free_r+0x72>
 800d38a:	6820      	ldr	r0, [r4, #0]
 800d38c:	4401      	add	r1, r0
 800d38e:	1858      	adds	r0, r3, r1
 800d390:	4282      	cmp	r2, r0
 800d392:	6019      	str	r1, [r3, #0]
 800d394:	d1de      	bne.n	800d354 <_free_r+0x24>
 800d396:	6810      	ldr	r0, [r2, #0]
 800d398:	6852      	ldr	r2, [r2, #4]
 800d39a:	4401      	add	r1, r0
 800d39c:	6019      	str	r1, [r3, #0]
 800d39e:	605a      	str	r2, [r3, #4]
 800d3a0:	e7d8      	b.n	800d354 <_free_r+0x24>
 800d3a2:	d902      	bls.n	800d3aa <_free_r+0x7a>
 800d3a4:	230c      	movs	r3, #12
 800d3a6:	602b      	str	r3, [r5, #0]
 800d3a8:	e7d4      	b.n	800d354 <_free_r+0x24>
 800d3aa:	6820      	ldr	r0, [r4, #0]
 800d3ac:	1821      	adds	r1, r4, r0
 800d3ae:	428a      	cmp	r2, r1
 800d3b0:	bf01      	itttt	eq
 800d3b2:	6811      	ldreq	r1, [r2, #0]
 800d3b4:	6852      	ldreq	r2, [r2, #4]
 800d3b6:	1809      	addeq	r1, r1, r0
 800d3b8:	6021      	streq	r1, [r4, #0]
 800d3ba:	6062      	str	r2, [r4, #4]
 800d3bc:	605c      	str	r4, [r3, #4]
 800d3be:	e7c9      	b.n	800d354 <_free_r+0x24>
 800d3c0:	bd38      	pop	{r3, r4, r5, pc}
 800d3c2:	bf00      	nop
 800d3c4:	20000594 	.word	0x20000594

0800d3c8 <_malloc_r>:
 800d3c8:	b570      	push	{r4, r5, r6, lr}
 800d3ca:	1ccd      	adds	r5, r1, #3
 800d3cc:	f025 0503 	bic.w	r5, r5, #3
 800d3d0:	3508      	adds	r5, #8
 800d3d2:	2d0c      	cmp	r5, #12
 800d3d4:	bf38      	it	cc
 800d3d6:	250c      	movcc	r5, #12
 800d3d8:	2d00      	cmp	r5, #0
 800d3da:	4606      	mov	r6, r0
 800d3dc:	db01      	blt.n	800d3e2 <_malloc_r+0x1a>
 800d3de:	42a9      	cmp	r1, r5
 800d3e0:	d903      	bls.n	800d3ea <_malloc_r+0x22>
 800d3e2:	230c      	movs	r3, #12
 800d3e4:	6033      	str	r3, [r6, #0]
 800d3e6:	2000      	movs	r0, #0
 800d3e8:	bd70      	pop	{r4, r5, r6, pc}
 800d3ea:	f000 ff4c 	bl	800e286 <__malloc_lock>
 800d3ee:	4a21      	ldr	r2, [pc, #132]	; (800d474 <_malloc_r+0xac>)
 800d3f0:	6814      	ldr	r4, [r2, #0]
 800d3f2:	4621      	mov	r1, r4
 800d3f4:	b991      	cbnz	r1, 800d41c <_malloc_r+0x54>
 800d3f6:	4c20      	ldr	r4, [pc, #128]	; (800d478 <_malloc_r+0xb0>)
 800d3f8:	6823      	ldr	r3, [r4, #0]
 800d3fa:	b91b      	cbnz	r3, 800d404 <_malloc_r+0x3c>
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	f000 fde1 	bl	800dfc4 <_sbrk_r>
 800d402:	6020      	str	r0, [r4, #0]
 800d404:	4629      	mov	r1, r5
 800d406:	4630      	mov	r0, r6
 800d408:	f000 fddc 	bl	800dfc4 <_sbrk_r>
 800d40c:	1c43      	adds	r3, r0, #1
 800d40e:	d124      	bne.n	800d45a <_malloc_r+0x92>
 800d410:	230c      	movs	r3, #12
 800d412:	4630      	mov	r0, r6
 800d414:	6033      	str	r3, [r6, #0]
 800d416:	f000 ff37 	bl	800e288 <__malloc_unlock>
 800d41a:	e7e4      	b.n	800d3e6 <_malloc_r+0x1e>
 800d41c:	680b      	ldr	r3, [r1, #0]
 800d41e:	1b5b      	subs	r3, r3, r5
 800d420:	d418      	bmi.n	800d454 <_malloc_r+0x8c>
 800d422:	2b0b      	cmp	r3, #11
 800d424:	d90f      	bls.n	800d446 <_malloc_r+0x7e>
 800d426:	600b      	str	r3, [r1, #0]
 800d428:	18cc      	adds	r4, r1, r3
 800d42a:	50cd      	str	r5, [r1, r3]
 800d42c:	4630      	mov	r0, r6
 800d42e:	f000 ff2b 	bl	800e288 <__malloc_unlock>
 800d432:	f104 000b 	add.w	r0, r4, #11
 800d436:	1d23      	adds	r3, r4, #4
 800d438:	f020 0007 	bic.w	r0, r0, #7
 800d43c:	1ac3      	subs	r3, r0, r3
 800d43e:	d0d3      	beq.n	800d3e8 <_malloc_r+0x20>
 800d440:	425a      	negs	r2, r3
 800d442:	50e2      	str	r2, [r4, r3]
 800d444:	e7d0      	b.n	800d3e8 <_malloc_r+0x20>
 800d446:	684b      	ldr	r3, [r1, #4]
 800d448:	428c      	cmp	r4, r1
 800d44a:	bf16      	itet	ne
 800d44c:	6063      	strne	r3, [r4, #4]
 800d44e:	6013      	streq	r3, [r2, #0]
 800d450:	460c      	movne	r4, r1
 800d452:	e7eb      	b.n	800d42c <_malloc_r+0x64>
 800d454:	460c      	mov	r4, r1
 800d456:	6849      	ldr	r1, [r1, #4]
 800d458:	e7cc      	b.n	800d3f4 <_malloc_r+0x2c>
 800d45a:	1cc4      	adds	r4, r0, #3
 800d45c:	f024 0403 	bic.w	r4, r4, #3
 800d460:	42a0      	cmp	r0, r4
 800d462:	d005      	beq.n	800d470 <_malloc_r+0xa8>
 800d464:	1a21      	subs	r1, r4, r0
 800d466:	4630      	mov	r0, r6
 800d468:	f000 fdac 	bl	800dfc4 <_sbrk_r>
 800d46c:	3001      	adds	r0, #1
 800d46e:	d0cf      	beq.n	800d410 <_malloc_r+0x48>
 800d470:	6025      	str	r5, [r4, #0]
 800d472:	e7db      	b.n	800d42c <_malloc_r+0x64>
 800d474:	20000594 	.word	0x20000594
 800d478:	20000598 	.word	0x20000598

0800d47c <__ssputs_r>:
 800d47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d480:	688e      	ldr	r6, [r1, #8]
 800d482:	4682      	mov	sl, r0
 800d484:	429e      	cmp	r6, r3
 800d486:	460c      	mov	r4, r1
 800d488:	4690      	mov	r8, r2
 800d48a:	4699      	mov	r9, r3
 800d48c:	d837      	bhi.n	800d4fe <__ssputs_r+0x82>
 800d48e:	898a      	ldrh	r2, [r1, #12]
 800d490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d494:	d031      	beq.n	800d4fa <__ssputs_r+0x7e>
 800d496:	2302      	movs	r3, #2
 800d498:	6825      	ldr	r5, [r4, #0]
 800d49a:	6909      	ldr	r1, [r1, #16]
 800d49c:	1a6f      	subs	r7, r5, r1
 800d49e:	6965      	ldr	r5, [r4, #20]
 800d4a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4a4:	fb95 f5f3 	sdiv	r5, r5, r3
 800d4a8:	f109 0301 	add.w	r3, r9, #1
 800d4ac:	443b      	add	r3, r7
 800d4ae:	429d      	cmp	r5, r3
 800d4b0:	bf38      	it	cc
 800d4b2:	461d      	movcc	r5, r3
 800d4b4:	0553      	lsls	r3, r2, #21
 800d4b6:	d530      	bpl.n	800d51a <__ssputs_r+0x9e>
 800d4b8:	4629      	mov	r1, r5
 800d4ba:	f7ff ff85 	bl	800d3c8 <_malloc_r>
 800d4be:	4606      	mov	r6, r0
 800d4c0:	b950      	cbnz	r0, 800d4d8 <__ssputs_r+0x5c>
 800d4c2:	230c      	movs	r3, #12
 800d4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c8:	f8ca 3000 	str.w	r3, [sl]
 800d4cc:	89a3      	ldrh	r3, [r4, #12]
 800d4ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4d2:	81a3      	strh	r3, [r4, #12]
 800d4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4d8:	463a      	mov	r2, r7
 800d4da:	6921      	ldr	r1, [r4, #16]
 800d4dc:	f7ff fb16 	bl	800cb0c <memcpy>
 800d4e0:	89a3      	ldrh	r3, [r4, #12]
 800d4e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d4e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4ea:	81a3      	strh	r3, [r4, #12]
 800d4ec:	6126      	str	r6, [r4, #16]
 800d4ee:	443e      	add	r6, r7
 800d4f0:	6026      	str	r6, [r4, #0]
 800d4f2:	464e      	mov	r6, r9
 800d4f4:	6165      	str	r5, [r4, #20]
 800d4f6:	1bed      	subs	r5, r5, r7
 800d4f8:	60a5      	str	r5, [r4, #8]
 800d4fa:	454e      	cmp	r6, r9
 800d4fc:	d900      	bls.n	800d500 <__ssputs_r+0x84>
 800d4fe:	464e      	mov	r6, r9
 800d500:	4632      	mov	r2, r6
 800d502:	4641      	mov	r1, r8
 800d504:	6820      	ldr	r0, [r4, #0]
 800d506:	f000 fea5 	bl	800e254 <memmove>
 800d50a:	68a3      	ldr	r3, [r4, #8]
 800d50c:	2000      	movs	r0, #0
 800d50e:	1b9b      	subs	r3, r3, r6
 800d510:	60a3      	str	r3, [r4, #8]
 800d512:	6823      	ldr	r3, [r4, #0]
 800d514:	441e      	add	r6, r3
 800d516:	6026      	str	r6, [r4, #0]
 800d518:	e7dc      	b.n	800d4d4 <__ssputs_r+0x58>
 800d51a:	462a      	mov	r2, r5
 800d51c:	f000 feb5 	bl	800e28a <_realloc_r>
 800d520:	4606      	mov	r6, r0
 800d522:	2800      	cmp	r0, #0
 800d524:	d1e2      	bne.n	800d4ec <__ssputs_r+0x70>
 800d526:	6921      	ldr	r1, [r4, #16]
 800d528:	4650      	mov	r0, sl
 800d52a:	f7ff ff01 	bl	800d330 <_free_r>
 800d52e:	e7c8      	b.n	800d4c2 <__ssputs_r+0x46>

0800d530 <_svfiprintf_r>:
 800d530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d534:	461d      	mov	r5, r3
 800d536:	898b      	ldrh	r3, [r1, #12]
 800d538:	b09d      	sub	sp, #116	; 0x74
 800d53a:	061f      	lsls	r7, r3, #24
 800d53c:	4680      	mov	r8, r0
 800d53e:	460c      	mov	r4, r1
 800d540:	4616      	mov	r6, r2
 800d542:	d50f      	bpl.n	800d564 <_svfiprintf_r+0x34>
 800d544:	690b      	ldr	r3, [r1, #16]
 800d546:	b96b      	cbnz	r3, 800d564 <_svfiprintf_r+0x34>
 800d548:	2140      	movs	r1, #64	; 0x40
 800d54a:	f7ff ff3d 	bl	800d3c8 <_malloc_r>
 800d54e:	6020      	str	r0, [r4, #0]
 800d550:	6120      	str	r0, [r4, #16]
 800d552:	b928      	cbnz	r0, 800d560 <_svfiprintf_r+0x30>
 800d554:	230c      	movs	r3, #12
 800d556:	f8c8 3000 	str.w	r3, [r8]
 800d55a:	f04f 30ff 	mov.w	r0, #4294967295
 800d55e:	e0c8      	b.n	800d6f2 <_svfiprintf_r+0x1c2>
 800d560:	2340      	movs	r3, #64	; 0x40
 800d562:	6163      	str	r3, [r4, #20]
 800d564:	2300      	movs	r3, #0
 800d566:	9309      	str	r3, [sp, #36]	; 0x24
 800d568:	2320      	movs	r3, #32
 800d56a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d56e:	2330      	movs	r3, #48	; 0x30
 800d570:	f04f 0b01 	mov.w	fp, #1
 800d574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d578:	9503      	str	r5, [sp, #12]
 800d57a:	4637      	mov	r7, r6
 800d57c:	463d      	mov	r5, r7
 800d57e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d582:	b10b      	cbz	r3, 800d588 <_svfiprintf_r+0x58>
 800d584:	2b25      	cmp	r3, #37	; 0x25
 800d586:	d13e      	bne.n	800d606 <_svfiprintf_r+0xd6>
 800d588:	ebb7 0a06 	subs.w	sl, r7, r6
 800d58c:	d00b      	beq.n	800d5a6 <_svfiprintf_r+0x76>
 800d58e:	4653      	mov	r3, sl
 800d590:	4632      	mov	r2, r6
 800d592:	4621      	mov	r1, r4
 800d594:	4640      	mov	r0, r8
 800d596:	f7ff ff71 	bl	800d47c <__ssputs_r>
 800d59a:	3001      	adds	r0, #1
 800d59c:	f000 80a4 	beq.w	800d6e8 <_svfiprintf_r+0x1b8>
 800d5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5a2:	4453      	add	r3, sl
 800d5a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d5a6:	783b      	ldrb	r3, [r7, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	f000 809d 	beq.w	800d6e8 <_svfiprintf_r+0x1b8>
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5b8:	9304      	str	r3, [sp, #16]
 800d5ba:	9307      	str	r3, [sp, #28]
 800d5bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5c0:	931a      	str	r3, [sp, #104]	; 0x68
 800d5c2:	462f      	mov	r7, r5
 800d5c4:	2205      	movs	r2, #5
 800d5c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d5ca:	4850      	ldr	r0, [pc, #320]	; (800d70c <_svfiprintf_r+0x1dc>)
 800d5cc:	f7ff fa90 	bl	800caf0 <memchr>
 800d5d0:	9b04      	ldr	r3, [sp, #16]
 800d5d2:	b9d0      	cbnz	r0, 800d60a <_svfiprintf_r+0xda>
 800d5d4:	06d9      	lsls	r1, r3, #27
 800d5d6:	bf44      	itt	mi
 800d5d8:	2220      	movmi	r2, #32
 800d5da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d5de:	071a      	lsls	r2, r3, #28
 800d5e0:	bf44      	itt	mi
 800d5e2:	222b      	movmi	r2, #43	; 0x2b
 800d5e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d5e8:	782a      	ldrb	r2, [r5, #0]
 800d5ea:	2a2a      	cmp	r2, #42	; 0x2a
 800d5ec:	d015      	beq.n	800d61a <_svfiprintf_r+0xea>
 800d5ee:	462f      	mov	r7, r5
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	250a      	movs	r5, #10
 800d5f4:	9a07      	ldr	r2, [sp, #28]
 800d5f6:	4639      	mov	r1, r7
 800d5f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5fc:	3b30      	subs	r3, #48	; 0x30
 800d5fe:	2b09      	cmp	r3, #9
 800d600:	d94d      	bls.n	800d69e <_svfiprintf_r+0x16e>
 800d602:	b1b8      	cbz	r0, 800d634 <_svfiprintf_r+0x104>
 800d604:	e00f      	b.n	800d626 <_svfiprintf_r+0xf6>
 800d606:	462f      	mov	r7, r5
 800d608:	e7b8      	b.n	800d57c <_svfiprintf_r+0x4c>
 800d60a:	4a40      	ldr	r2, [pc, #256]	; (800d70c <_svfiprintf_r+0x1dc>)
 800d60c:	463d      	mov	r5, r7
 800d60e:	1a80      	subs	r0, r0, r2
 800d610:	fa0b f000 	lsl.w	r0, fp, r0
 800d614:	4318      	orrs	r0, r3
 800d616:	9004      	str	r0, [sp, #16]
 800d618:	e7d3      	b.n	800d5c2 <_svfiprintf_r+0x92>
 800d61a:	9a03      	ldr	r2, [sp, #12]
 800d61c:	1d11      	adds	r1, r2, #4
 800d61e:	6812      	ldr	r2, [r2, #0]
 800d620:	9103      	str	r1, [sp, #12]
 800d622:	2a00      	cmp	r2, #0
 800d624:	db01      	blt.n	800d62a <_svfiprintf_r+0xfa>
 800d626:	9207      	str	r2, [sp, #28]
 800d628:	e004      	b.n	800d634 <_svfiprintf_r+0x104>
 800d62a:	4252      	negs	r2, r2
 800d62c:	f043 0302 	orr.w	r3, r3, #2
 800d630:	9207      	str	r2, [sp, #28]
 800d632:	9304      	str	r3, [sp, #16]
 800d634:	783b      	ldrb	r3, [r7, #0]
 800d636:	2b2e      	cmp	r3, #46	; 0x2e
 800d638:	d10c      	bne.n	800d654 <_svfiprintf_r+0x124>
 800d63a:	787b      	ldrb	r3, [r7, #1]
 800d63c:	2b2a      	cmp	r3, #42	; 0x2a
 800d63e:	d133      	bne.n	800d6a8 <_svfiprintf_r+0x178>
 800d640:	9b03      	ldr	r3, [sp, #12]
 800d642:	3702      	adds	r7, #2
 800d644:	1d1a      	adds	r2, r3, #4
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	9203      	str	r2, [sp, #12]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	bfb8      	it	lt
 800d64e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d652:	9305      	str	r3, [sp, #20]
 800d654:	4d2e      	ldr	r5, [pc, #184]	; (800d710 <_svfiprintf_r+0x1e0>)
 800d656:	2203      	movs	r2, #3
 800d658:	7839      	ldrb	r1, [r7, #0]
 800d65a:	4628      	mov	r0, r5
 800d65c:	f7ff fa48 	bl	800caf0 <memchr>
 800d660:	b138      	cbz	r0, 800d672 <_svfiprintf_r+0x142>
 800d662:	2340      	movs	r3, #64	; 0x40
 800d664:	1b40      	subs	r0, r0, r5
 800d666:	fa03 f000 	lsl.w	r0, r3, r0
 800d66a:	9b04      	ldr	r3, [sp, #16]
 800d66c:	3701      	adds	r7, #1
 800d66e:	4303      	orrs	r3, r0
 800d670:	9304      	str	r3, [sp, #16]
 800d672:	7839      	ldrb	r1, [r7, #0]
 800d674:	2206      	movs	r2, #6
 800d676:	4827      	ldr	r0, [pc, #156]	; (800d714 <_svfiprintf_r+0x1e4>)
 800d678:	1c7e      	adds	r6, r7, #1
 800d67a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d67e:	f7ff fa37 	bl	800caf0 <memchr>
 800d682:	2800      	cmp	r0, #0
 800d684:	d038      	beq.n	800d6f8 <_svfiprintf_r+0x1c8>
 800d686:	4b24      	ldr	r3, [pc, #144]	; (800d718 <_svfiprintf_r+0x1e8>)
 800d688:	bb13      	cbnz	r3, 800d6d0 <_svfiprintf_r+0x1a0>
 800d68a:	9b03      	ldr	r3, [sp, #12]
 800d68c:	3307      	adds	r3, #7
 800d68e:	f023 0307 	bic.w	r3, r3, #7
 800d692:	3308      	adds	r3, #8
 800d694:	9303      	str	r3, [sp, #12]
 800d696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d698:	444b      	add	r3, r9
 800d69a:	9309      	str	r3, [sp, #36]	; 0x24
 800d69c:	e76d      	b.n	800d57a <_svfiprintf_r+0x4a>
 800d69e:	fb05 3202 	mla	r2, r5, r2, r3
 800d6a2:	2001      	movs	r0, #1
 800d6a4:	460f      	mov	r7, r1
 800d6a6:	e7a6      	b.n	800d5f6 <_svfiprintf_r+0xc6>
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	250a      	movs	r5, #10
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	3701      	adds	r7, #1
 800d6b0:	9305      	str	r3, [sp, #20]
 800d6b2:	4638      	mov	r0, r7
 800d6b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6b8:	3a30      	subs	r2, #48	; 0x30
 800d6ba:	2a09      	cmp	r2, #9
 800d6bc:	d903      	bls.n	800d6c6 <_svfiprintf_r+0x196>
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d0c8      	beq.n	800d654 <_svfiprintf_r+0x124>
 800d6c2:	9105      	str	r1, [sp, #20]
 800d6c4:	e7c6      	b.n	800d654 <_svfiprintf_r+0x124>
 800d6c6:	fb05 2101 	mla	r1, r5, r1, r2
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	4607      	mov	r7, r0
 800d6ce:	e7f0      	b.n	800d6b2 <_svfiprintf_r+0x182>
 800d6d0:	ab03      	add	r3, sp, #12
 800d6d2:	9300      	str	r3, [sp, #0]
 800d6d4:	4622      	mov	r2, r4
 800d6d6:	4b11      	ldr	r3, [pc, #68]	; (800d71c <_svfiprintf_r+0x1ec>)
 800d6d8:	a904      	add	r1, sp, #16
 800d6da:	4640      	mov	r0, r8
 800d6dc:	f7fc f80a 	bl	80096f4 <_printf_float>
 800d6e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d6e4:	4681      	mov	r9, r0
 800d6e6:	d1d6      	bne.n	800d696 <_svfiprintf_r+0x166>
 800d6e8:	89a3      	ldrh	r3, [r4, #12]
 800d6ea:	065b      	lsls	r3, r3, #25
 800d6ec:	f53f af35 	bmi.w	800d55a <_svfiprintf_r+0x2a>
 800d6f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6f2:	b01d      	add	sp, #116	; 0x74
 800d6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6f8:	ab03      	add	r3, sp, #12
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	4622      	mov	r2, r4
 800d6fe:	4b07      	ldr	r3, [pc, #28]	; (800d71c <_svfiprintf_r+0x1ec>)
 800d700:	a904      	add	r1, sp, #16
 800d702:	4640      	mov	r0, r8
 800d704:	f7fc faa2 	bl	8009c4c <_printf_i>
 800d708:	e7ea      	b.n	800d6e0 <_svfiprintf_r+0x1b0>
 800d70a:	bf00      	nop
 800d70c:	0800e5c4 	.word	0x0800e5c4
 800d710:	0800e5ca 	.word	0x0800e5ca
 800d714:	0800e5ce 	.word	0x0800e5ce
 800d718:	080096f5 	.word	0x080096f5
 800d71c:	0800d47d 	.word	0x0800d47d

0800d720 <_sungetc_r>:
 800d720:	b538      	push	{r3, r4, r5, lr}
 800d722:	1c4b      	adds	r3, r1, #1
 800d724:	4614      	mov	r4, r2
 800d726:	d103      	bne.n	800d730 <_sungetc_r+0x10>
 800d728:	f04f 35ff 	mov.w	r5, #4294967295
 800d72c:	4628      	mov	r0, r5
 800d72e:	bd38      	pop	{r3, r4, r5, pc}
 800d730:	8993      	ldrh	r3, [r2, #12]
 800d732:	b2cd      	uxtb	r5, r1
 800d734:	f023 0320 	bic.w	r3, r3, #32
 800d738:	8193      	strh	r3, [r2, #12]
 800d73a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d73c:	6852      	ldr	r2, [r2, #4]
 800d73e:	b18b      	cbz	r3, 800d764 <_sungetc_r+0x44>
 800d740:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d742:	4293      	cmp	r3, r2
 800d744:	dd08      	ble.n	800d758 <_sungetc_r+0x38>
 800d746:	6823      	ldr	r3, [r4, #0]
 800d748:	1e5a      	subs	r2, r3, #1
 800d74a:	6022      	str	r2, [r4, #0]
 800d74c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d750:	6863      	ldr	r3, [r4, #4]
 800d752:	3301      	adds	r3, #1
 800d754:	6063      	str	r3, [r4, #4]
 800d756:	e7e9      	b.n	800d72c <_sungetc_r+0xc>
 800d758:	4621      	mov	r1, r4
 800d75a:	f000 fd13 	bl	800e184 <__submore>
 800d75e:	2800      	cmp	r0, #0
 800d760:	d0f1      	beq.n	800d746 <_sungetc_r+0x26>
 800d762:	e7e1      	b.n	800d728 <_sungetc_r+0x8>
 800d764:	6921      	ldr	r1, [r4, #16]
 800d766:	6823      	ldr	r3, [r4, #0]
 800d768:	b151      	cbz	r1, 800d780 <_sungetc_r+0x60>
 800d76a:	4299      	cmp	r1, r3
 800d76c:	d208      	bcs.n	800d780 <_sungetc_r+0x60>
 800d76e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d772:	42a9      	cmp	r1, r5
 800d774:	d104      	bne.n	800d780 <_sungetc_r+0x60>
 800d776:	3b01      	subs	r3, #1
 800d778:	3201      	adds	r2, #1
 800d77a:	6023      	str	r3, [r4, #0]
 800d77c:	6062      	str	r2, [r4, #4]
 800d77e:	e7d5      	b.n	800d72c <_sungetc_r+0xc>
 800d780:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d788:	6363      	str	r3, [r4, #52]	; 0x34
 800d78a:	2303      	movs	r3, #3
 800d78c:	63a3      	str	r3, [r4, #56]	; 0x38
 800d78e:	4623      	mov	r3, r4
 800d790:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d794:	6023      	str	r3, [r4, #0]
 800d796:	2301      	movs	r3, #1
 800d798:	e7dc      	b.n	800d754 <_sungetc_r+0x34>

0800d79a <__ssrefill_r>:
 800d79a:	b510      	push	{r4, lr}
 800d79c:	460c      	mov	r4, r1
 800d79e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d7a0:	b169      	cbz	r1, 800d7be <__ssrefill_r+0x24>
 800d7a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7a6:	4299      	cmp	r1, r3
 800d7a8:	d001      	beq.n	800d7ae <__ssrefill_r+0x14>
 800d7aa:	f7ff fdc1 	bl	800d330 <_free_r>
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d7b2:	6360      	str	r0, [r4, #52]	; 0x34
 800d7b4:	6063      	str	r3, [r4, #4]
 800d7b6:	b113      	cbz	r3, 800d7be <__ssrefill_r+0x24>
 800d7b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d7ba:	6023      	str	r3, [r4, #0]
 800d7bc:	bd10      	pop	{r4, pc}
 800d7be:	6923      	ldr	r3, [r4, #16]
 800d7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7c4:	6023      	str	r3, [r4, #0]
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	6063      	str	r3, [r4, #4]
 800d7ca:	89a3      	ldrh	r3, [r4, #12]
 800d7cc:	f043 0320 	orr.w	r3, r3, #32
 800d7d0:	81a3      	strh	r3, [r4, #12]
 800d7d2:	e7f3      	b.n	800d7bc <__ssrefill_r+0x22>

0800d7d4 <__ssvfiscanf_r>:
 800d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d8:	460c      	mov	r4, r1
 800d7da:	2100      	movs	r1, #0
 800d7dc:	4606      	mov	r6, r0
 800d7de:	4692      	mov	sl, r2
 800d7e0:	270a      	movs	r7, #10
 800d7e2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800d7e6:	9144      	str	r1, [sp, #272]	; 0x110
 800d7e8:	9145      	str	r1, [sp, #276]	; 0x114
 800d7ea:	499e      	ldr	r1, [pc, #632]	; (800da64 <__ssvfiscanf_r+0x290>)
 800d7ec:	f10d 0804 	add.w	r8, sp, #4
 800d7f0:	91a0      	str	r1, [sp, #640]	; 0x280
 800d7f2:	499d      	ldr	r1, [pc, #628]	; (800da68 <__ssvfiscanf_r+0x294>)
 800d7f4:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800da6c <__ssvfiscanf_r+0x298>
 800d7f8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d7fc:	91a1      	str	r1, [sp, #644]	; 0x284
 800d7fe:	9300      	str	r3, [sp, #0]
 800d800:	f89a 3000 	ldrb.w	r3, [sl]
 800d804:	2b00      	cmp	r3, #0
 800d806:	f000 812a 	beq.w	800da5e <__ssvfiscanf_r+0x28a>
 800d80a:	4655      	mov	r5, sl
 800d80c:	f7ff f8c2 	bl	800c994 <__locale_ctype_ptr>
 800d810:	f815 bb01 	ldrb.w	fp, [r5], #1
 800d814:	4458      	add	r0, fp
 800d816:	7843      	ldrb	r3, [r0, #1]
 800d818:	f013 0308 	ands.w	r3, r3, #8
 800d81c:	d01c      	beq.n	800d858 <__ssvfiscanf_r+0x84>
 800d81e:	6863      	ldr	r3, [r4, #4]
 800d820:	2b00      	cmp	r3, #0
 800d822:	dd12      	ble.n	800d84a <__ssvfiscanf_r+0x76>
 800d824:	f7ff f8b6 	bl	800c994 <__locale_ctype_ptr>
 800d828:	6823      	ldr	r3, [r4, #0]
 800d82a:	781a      	ldrb	r2, [r3, #0]
 800d82c:	4410      	add	r0, r2
 800d82e:	7842      	ldrb	r2, [r0, #1]
 800d830:	0712      	lsls	r2, r2, #28
 800d832:	d401      	bmi.n	800d838 <__ssvfiscanf_r+0x64>
 800d834:	46aa      	mov	sl, r5
 800d836:	e7e3      	b.n	800d800 <__ssvfiscanf_r+0x2c>
 800d838:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d83a:	3301      	adds	r3, #1
 800d83c:	3201      	adds	r2, #1
 800d83e:	9245      	str	r2, [sp, #276]	; 0x114
 800d840:	6862      	ldr	r2, [r4, #4]
 800d842:	6023      	str	r3, [r4, #0]
 800d844:	3a01      	subs	r2, #1
 800d846:	6062      	str	r2, [r4, #4]
 800d848:	e7e9      	b.n	800d81e <__ssvfiscanf_r+0x4a>
 800d84a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d84c:	4621      	mov	r1, r4
 800d84e:	4630      	mov	r0, r6
 800d850:	4798      	blx	r3
 800d852:	2800      	cmp	r0, #0
 800d854:	d0e6      	beq.n	800d824 <__ssvfiscanf_r+0x50>
 800d856:	e7ed      	b.n	800d834 <__ssvfiscanf_r+0x60>
 800d858:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800d85c:	f040 8082 	bne.w	800d964 <__ssvfiscanf_r+0x190>
 800d860:	9343      	str	r3, [sp, #268]	; 0x10c
 800d862:	9341      	str	r3, [sp, #260]	; 0x104
 800d864:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800d868:	2b2a      	cmp	r3, #42	; 0x2a
 800d86a:	d103      	bne.n	800d874 <__ssvfiscanf_r+0xa0>
 800d86c:	2310      	movs	r3, #16
 800d86e:	f10a 0502 	add.w	r5, sl, #2
 800d872:	9341      	str	r3, [sp, #260]	; 0x104
 800d874:	46aa      	mov	sl, r5
 800d876:	f815 1b01 	ldrb.w	r1, [r5], #1
 800d87a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800d87e:	2a09      	cmp	r2, #9
 800d880:	d922      	bls.n	800d8c8 <__ssvfiscanf_r+0xf4>
 800d882:	2203      	movs	r2, #3
 800d884:	4879      	ldr	r0, [pc, #484]	; (800da6c <__ssvfiscanf_r+0x298>)
 800d886:	f7ff f933 	bl	800caf0 <memchr>
 800d88a:	b138      	cbz	r0, 800d89c <__ssvfiscanf_r+0xc8>
 800d88c:	eba0 0309 	sub.w	r3, r0, r9
 800d890:	2001      	movs	r0, #1
 800d892:	46aa      	mov	sl, r5
 800d894:	4098      	lsls	r0, r3
 800d896:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d898:	4318      	orrs	r0, r3
 800d89a:	9041      	str	r0, [sp, #260]	; 0x104
 800d89c:	f89a 3000 	ldrb.w	r3, [sl]
 800d8a0:	f10a 0501 	add.w	r5, sl, #1
 800d8a4:	2b67      	cmp	r3, #103	; 0x67
 800d8a6:	d82b      	bhi.n	800d900 <__ssvfiscanf_r+0x12c>
 800d8a8:	2b65      	cmp	r3, #101	; 0x65
 800d8aa:	f080 809f 	bcs.w	800d9ec <__ssvfiscanf_r+0x218>
 800d8ae:	2b47      	cmp	r3, #71	; 0x47
 800d8b0:	d810      	bhi.n	800d8d4 <__ssvfiscanf_r+0x100>
 800d8b2:	2b45      	cmp	r3, #69	; 0x45
 800d8b4:	f080 809a 	bcs.w	800d9ec <__ssvfiscanf_r+0x218>
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d06c      	beq.n	800d996 <__ssvfiscanf_r+0x1c2>
 800d8bc:	2b25      	cmp	r3, #37	; 0x25
 800d8be:	d051      	beq.n	800d964 <__ssvfiscanf_r+0x190>
 800d8c0:	2303      	movs	r3, #3
 800d8c2:	9742      	str	r7, [sp, #264]	; 0x108
 800d8c4:	9347      	str	r3, [sp, #284]	; 0x11c
 800d8c6:	e027      	b.n	800d918 <__ssvfiscanf_r+0x144>
 800d8c8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d8ca:	fb07 1303 	mla	r3, r7, r3, r1
 800d8ce:	3b30      	subs	r3, #48	; 0x30
 800d8d0:	9343      	str	r3, [sp, #268]	; 0x10c
 800d8d2:	e7cf      	b.n	800d874 <__ssvfiscanf_r+0xa0>
 800d8d4:	2b5b      	cmp	r3, #91	; 0x5b
 800d8d6:	d06a      	beq.n	800d9ae <__ssvfiscanf_r+0x1da>
 800d8d8:	d80c      	bhi.n	800d8f4 <__ssvfiscanf_r+0x120>
 800d8da:	2b58      	cmp	r3, #88	; 0x58
 800d8dc:	d1f0      	bne.n	800d8c0 <__ssvfiscanf_r+0xec>
 800d8de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d8e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8e4:	9241      	str	r2, [sp, #260]	; 0x104
 800d8e6:	2210      	movs	r2, #16
 800d8e8:	9242      	str	r2, [sp, #264]	; 0x108
 800d8ea:	2b6e      	cmp	r3, #110	; 0x6e
 800d8ec:	bf8c      	ite	hi
 800d8ee:	2304      	movhi	r3, #4
 800d8f0:	2303      	movls	r3, #3
 800d8f2:	e010      	b.n	800d916 <__ssvfiscanf_r+0x142>
 800d8f4:	2b63      	cmp	r3, #99	; 0x63
 800d8f6:	d065      	beq.n	800d9c4 <__ssvfiscanf_r+0x1f0>
 800d8f8:	2b64      	cmp	r3, #100	; 0x64
 800d8fa:	d1e1      	bne.n	800d8c0 <__ssvfiscanf_r+0xec>
 800d8fc:	9742      	str	r7, [sp, #264]	; 0x108
 800d8fe:	e7f4      	b.n	800d8ea <__ssvfiscanf_r+0x116>
 800d900:	2b70      	cmp	r3, #112	; 0x70
 800d902:	d04b      	beq.n	800d99c <__ssvfiscanf_r+0x1c8>
 800d904:	d826      	bhi.n	800d954 <__ssvfiscanf_r+0x180>
 800d906:	2b6e      	cmp	r3, #110	; 0x6e
 800d908:	d062      	beq.n	800d9d0 <__ssvfiscanf_r+0x1fc>
 800d90a:	d84c      	bhi.n	800d9a6 <__ssvfiscanf_r+0x1d2>
 800d90c:	2b69      	cmp	r3, #105	; 0x69
 800d90e:	d1d7      	bne.n	800d8c0 <__ssvfiscanf_r+0xec>
 800d910:	2300      	movs	r3, #0
 800d912:	9342      	str	r3, [sp, #264]	; 0x108
 800d914:	2303      	movs	r3, #3
 800d916:	9347      	str	r3, [sp, #284]	; 0x11c
 800d918:	6863      	ldr	r3, [r4, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	dd68      	ble.n	800d9f0 <__ssvfiscanf_r+0x21c>
 800d91e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d920:	0659      	lsls	r1, r3, #25
 800d922:	d407      	bmi.n	800d934 <__ssvfiscanf_r+0x160>
 800d924:	f7ff f836 	bl	800c994 <__locale_ctype_ptr>
 800d928:	6823      	ldr	r3, [r4, #0]
 800d92a:	781a      	ldrb	r2, [r3, #0]
 800d92c:	4410      	add	r0, r2
 800d92e:	7842      	ldrb	r2, [r0, #1]
 800d930:	0712      	lsls	r2, r2, #28
 800d932:	d464      	bmi.n	800d9fe <__ssvfiscanf_r+0x22a>
 800d934:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d936:	2b02      	cmp	r3, #2
 800d938:	dc73      	bgt.n	800da22 <__ssvfiscanf_r+0x24e>
 800d93a:	466b      	mov	r3, sp
 800d93c:	4622      	mov	r2, r4
 800d93e:	a941      	add	r1, sp, #260	; 0x104
 800d940:	4630      	mov	r0, r6
 800d942:	f000 f9d5 	bl	800dcf0 <_scanf_chars>
 800d946:	2801      	cmp	r0, #1
 800d948:	f000 8089 	beq.w	800da5e <__ssvfiscanf_r+0x28a>
 800d94c:	2802      	cmp	r0, #2
 800d94e:	f47f af71 	bne.w	800d834 <__ssvfiscanf_r+0x60>
 800d952:	e01d      	b.n	800d990 <__ssvfiscanf_r+0x1bc>
 800d954:	2b75      	cmp	r3, #117	; 0x75
 800d956:	d0d1      	beq.n	800d8fc <__ssvfiscanf_r+0x128>
 800d958:	2b78      	cmp	r3, #120	; 0x78
 800d95a:	d0c0      	beq.n	800d8de <__ssvfiscanf_r+0x10a>
 800d95c:	2b73      	cmp	r3, #115	; 0x73
 800d95e:	d1af      	bne.n	800d8c0 <__ssvfiscanf_r+0xec>
 800d960:	2302      	movs	r3, #2
 800d962:	e7d8      	b.n	800d916 <__ssvfiscanf_r+0x142>
 800d964:	6863      	ldr	r3, [r4, #4]
 800d966:	2b00      	cmp	r3, #0
 800d968:	dd0c      	ble.n	800d984 <__ssvfiscanf_r+0x1b0>
 800d96a:	6823      	ldr	r3, [r4, #0]
 800d96c:	781a      	ldrb	r2, [r3, #0]
 800d96e:	455a      	cmp	r2, fp
 800d970:	d175      	bne.n	800da5e <__ssvfiscanf_r+0x28a>
 800d972:	3301      	adds	r3, #1
 800d974:	6862      	ldr	r2, [r4, #4]
 800d976:	6023      	str	r3, [r4, #0]
 800d978:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d97a:	3a01      	subs	r2, #1
 800d97c:	3301      	adds	r3, #1
 800d97e:	6062      	str	r2, [r4, #4]
 800d980:	9345      	str	r3, [sp, #276]	; 0x114
 800d982:	e757      	b.n	800d834 <__ssvfiscanf_r+0x60>
 800d984:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d986:	4621      	mov	r1, r4
 800d988:	4630      	mov	r0, r6
 800d98a:	4798      	blx	r3
 800d98c:	2800      	cmp	r0, #0
 800d98e:	d0ec      	beq.n	800d96a <__ssvfiscanf_r+0x196>
 800d990:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d992:	2800      	cmp	r0, #0
 800d994:	d159      	bne.n	800da4a <__ssvfiscanf_r+0x276>
 800d996:	f04f 30ff 	mov.w	r0, #4294967295
 800d99a:	e05c      	b.n	800da56 <__ssvfiscanf_r+0x282>
 800d99c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d99e:	f042 0220 	orr.w	r2, r2, #32
 800d9a2:	9241      	str	r2, [sp, #260]	; 0x104
 800d9a4:	e79b      	b.n	800d8de <__ssvfiscanf_r+0x10a>
 800d9a6:	2308      	movs	r3, #8
 800d9a8:	9342      	str	r3, [sp, #264]	; 0x108
 800d9aa:	2304      	movs	r3, #4
 800d9ac:	e7b3      	b.n	800d916 <__ssvfiscanf_r+0x142>
 800d9ae:	4629      	mov	r1, r5
 800d9b0:	4640      	mov	r0, r8
 800d9b2:	f000 fb17 	bl	800dfe4 <__sccl>
 800d9b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d9b8:	4605      	mov	r5, r0
 800d9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9be:	9341      	str	r3, [sp, #260]	; 0x104
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	e7a8      	b.n	800d916 <__ssvfiscanf_r+0x142>
 800d9c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d9c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9ca:	9341      	str	r3, [sp, #260]	; 0x104
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	e7a2      	b.n	800d916 <__ssvfiscanf_r+0x142>
 800d9d0:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d9d2:	06c3      	lsls	r3, r0, #27
 800d9d4:	f53f af2e 	bmi.w	800d834 <__ssvfiscanf_r+0x60>
 800d9d8:	9b00      	ldr	r3, [sp, #0]
 800d9da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d9dc:	1d19      	adds	r1, r3, #4
 800d9de:	9100      	str	r1, [sp, #0]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	07c0      	lsls	r0, r0, #31
 800d9e4:	bf4c      	ite	mi
 800d9e6:	801a      	strhmi	r2, [r3, #0]
 800d9e8:	601a      	strpl	r2, [r3, #0]
 800d9ea:	e723      	b.n	800d834 <__ssvfiscanf_r+0x60>
 800d9ec:	2305      	movs	r3, #5
 800d9ee:	e792      	b.n	800d916 <__ssvfiscanf_r+0x142>
 800d9f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d9f2:	4621      	mov	r1, r4
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	4798      	blx	r3
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	d090      	beq.n	800d91e <__ssvfiscanf_r+0x14a>
 800d9fc:	e7c8      	b.n	800d990 <__ssvfiscanf_r+0x1bc>
 800d9fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800da00:	3201      	adds	r2, #1
 800da02:	9245      	str	r2, [sp, #276]	; 0x114
 800da04:	6862      	ldr	r2, [r4, #4]
 800da06:	3a01      	subs	r2, #1
 800da08:	2a00      	cmp	r2, #0
 800da0a:	6062      	str	r2, [r4, #4]
 800da0c:	dd02      	ble.n	800da14 <__ssvfiscanf_r+0x240>
 800da0e:	3301      	adds	r3, #1
 800da10:	6023      	str	r3, [r4, #0]
 800da12:	e787      	b.n	800d924 <__ssvfiscanf_r+0x150>
 800da14:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800da16:	4621      	mov	r1, r4
 800da18:	4630      	mov	r0, r6
 800da1a:	4798      	blx	r3
 800da1c:	2800      	cmp	r0, #0
 800da1e:	d081      	beq.n	800d924 <__ssvfiscanf_r+0x150>
 800da20:	e7b6      	b.n	800d990 <__ssvfiscanf_r+0x1bc>
 800da22:	2b04      	cmp	r3, #4
 800da24:	dc06      	bgt.n	800da34 <__ssvfiscanf_r+0x260>
 800da26:	466b      	mov	r3, sp
 800da28:	4622      	mov	r2, r4
 800da2a:	a941      	add	r1, sp, #260	; 0x104
 800da2c:	4630      	mov	r0, r6
 800da2e:	f000 f9c1 	bl	800ddb4 <_scanf_i>
 800da32:	e788      	b.n	800d946 <__ssvfiscanf_r+0x172>
 800da34:	4b0e      	ldr	r3, [pc, #56]	; (800da70 <__ssvfiscanf_r+0x29c>)
 800da36:	2b00      	cmp	r3, #0
 800da38:	f43f aefc 	beq.w	800d834 <__ssvfiscanf_r+0x60>
 800da3c:	466b      	mov	r3, sp
 800da3e:	4622      	mov	r2, r4
 800da40:	a941      	add	r1, sp, #260	; 0x104
 800da42:	4630      	mov	r0, r6
 800da44:	f7fc fa14 	bl	8009e70 <_scanf_float>
 800da48:	e77d      	b.n	800d946 <__ssvfiscanf_r+0x172>
 800da4a:	89a3      	ldrh	r3, [r4, #12]
 800da4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800da50:	bf18      	it	ne
 800da52:	f04f 30ff 	movne.w	r0, #4294967295
 800da56:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800da5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da5e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800da60:	e7f9      	b.n	800da56 <__ssvfiscanf_r+0x282>
 800da62:	bf00      	nop
 800da64:	0800d721 	.word	0x0800d721
 800da68:	0800d79b 	.word	0x0800d79b
 800da6c:	0800e5ca 	.word	0x0800e5ca
 800da70:	08009e71 	.word	0x08009e71

0800da74 <__sfputc_r>:
 800da74:	6893      	ldr	r3, [r2, #8]
 800da76:	b410      	push	{r4}
 800da78:	3b01      	subs	r3, #1
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	6093      	str	r3, [r2, #8]
 800da7e:	da07      	bge.n	800da90 <__sfputc_r+0x1c>
 800da80:	6994      	ldr	r4, [r2, #24]
 800da82:	42a3      	cmp	r3, r4
 800da84:	db01      	blt.n	800da8a <__sfputc_r+0x16>
 800da86:	290a      	cmp	r1, #10
 800da88:	d102      	bne.n	800da90 <__sfputc_r+0x1c>
 800da8a:	bc10      	pop	{r4}
 800da8c:	f7fd bbb6 	b.w	800b1fc <__swbuf_r>
 800da90:	6813      	ldr	r3, [r2, #0]
 800da92:	1c58      	adds	r0, r3, #1
 800da94:	6010      	str	r0, [r2, #0]
 800da96:	7019      	strb	r1, [r3, #0]
 800da98:	4608      	mov	r0, r1
 800da9a:	bc10      	pop	{r4}
 800da9c:	4770      	bx	lr

0800da9e <__sfputs_r>:
 800da9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daa0:	4606      	mov	r6, r0
 800daa2:	460f      	mov	r7, r1
 800daa4:	4614      	mov	r4, r2
 800daa6:	18d5      	adds	r5, r2, r3
 800daa8:	42ac      	cmp	r4, r5
 800daaa:	d101      	bne.n	800dab0 <__sfputs_r+0x12>
 800daac:	2000      	movs	r0, #0
 800daae:	e007      	b.n	800dac0 <__sfputs_r+0x22>
 800dab0:	463a      	mov	r2, r7
 800dab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dab6:	4630      	mov	r0, r6
 800dab8:	f7ff ffdc 	bl	800da74 <__sfputc_r>
 800dabc:	1c43      	adds	r3, r0, #1
 800dabe:	d1f3      	bne.n	800daa8 <__sfputs_r+0xa>
 800dac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dac4 <_vfiprintf_r>:
 800dac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac8:	460c      	mov	r4, r1
 800daca:	b09d      	sub	sp, #116	; 0x74
 800dacc:	4617      	mov	r7, r2
 800dace:	461d      	mov	r5, r3
 800dad0:	4606      	mov	r6, r0
 800dad2:	b118      	cbz	r0, 800dadc <_vfiprintf_r+0x18>
 800dad4:	6983      	ldr	r3, [r0, #24]
 800dad6:	b90b      	cbnz	r3, 800dadc <_vfiprintf_r+0x18>
 800dad8:	f7fe fba6 	bl	800c228 <__sinit>
 800dadc:	4b7c      	ldr	r3, [pc, #496]	; (800dcd0 <_vfiprintf_r+0x20c>)
 800dade:	429c      	cmp	r4, r3
 800dae0:	d158      	bne.n	800db94 <_vfiprintf_r+0xd0>
 800dae2:	6874      	ldr	r4, [r6, #4]
 800dae4:	89a3      	ldrh	r3, [r4, #12]
 800dae6:	0718      	lsls	r0, r3, #28
 800dae8:	d55e      	bpl.n	800dba8 <_vfiprintf_r+0xe4>
 800daea:	6923      	ldr	r3, [r4, #16]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d05b      	beq.n	800dba8 <_vfiprintf_r+0xe4>
 800daf0:	2300      	movs	r3, #0
 800daf2:	9309      	str	r3, [sp, #36]	; 0x24
 800daf4:	2320      	movs	r3, #32
 800daf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dafa:	2330      	movs	r3, #48	; 0x30
 800dafc:	f04f 0b01 	mov.w	fp, #1
 800db00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db04:	9503      	str	r5, [sp, #12]
 800db06:	46b8      	mov	r8, r7
 800db08:	4645      	mov	r5, r8
 800db0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800db0e:	b10b      	cbz	r3, 800db14 <_vfiprintf_r+0x50>
 800db10:	2b25      	cmp	r3, #37	; 0x25
 800db12:	d154      	bne.n	800dbbe <_vfiprintf_r+0xfa>
 800db14:	ebb8 0a07 	subs.w	sl, r8, r7
 800db18:	d00b      	beq.n	800db32 <_vfiprintf_r+0x6e>
 800db1a:	4653      	mov	r3, sl
 800db1c:	463a      	mov	r2, r7
 800db1e:	4621      	mov	r1, r4
 800db20:	4630      	mov	r0, r6
 800db22:	f7ff ffbc 	bl	800da9e <__sfputs_r>
 800db26:	3001      	adds	r0, #1
 800db28:	f000 80c2 	beq.w	800dcb0 <_vfiprintf_r+0x1ec>
 800db2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db2e:	4453      	add	r3, sl
 800db30:	9309      	str	r3, [sp, #36]	; 0x24
 800db32:	f898 3000 	ldrb.w	r3, [r8]
 800db36:	2b00      	cmp	r3, #0
 800db38:	f000 80ba 	beq.w	800dcb0 <_vfiprintf_r+0x1ec>
 800db3c:	2300      	movs	r3, #0
 800db3e:	f04f 32ff 	mov.w	r2, #4294967295
 800db42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db46:	9304      	str	r3, [sp, #16]
 800db48:	9307      	str	r3, [sp, #28]
 800db4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db4e:	931a      	str	r3, [sp, #104]	; 0x68
 800db50:	46a8      	mov	r8, r5
 800db52:	2205      	movs	r2, #5
 800db54:	f818 1b01 	ldrb.w	r1, [r8], #1
 800db58:	485e      	ldr	r0, [pc, #376]	; (800dcd4 <_vfiprintf_r+0x210>)
 800db5a:	f7fe ffc9 	bl	800caf0 <memchr>
 800db5e:	9b04      	ldr	r3, [sp, #16]
 800db60:	bb78      	cbnz	r0, 800dbc2 <_vfiprintf_r+0xfe>
 800db62:	06d9      	lsls	r1, r3, #27
 800db64:	bf44      	itt	mi
 800db66:	2220      	movmi	r2, #32
 800db68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800db6c:	071a      	lsls	r2, r3, #28
 800db6e:	bf44      	itt	mi
 800db70:	222b      	movmi	r2, #43	; 0x2b
 800db72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800db76:	782a      	ldrb	r2, [r5, #0]
 800db78:	2a2a      	cmp	r2, #42	; 0x2a
 800db7a:	d02a      	beq.n	800dbd2 <_vfiprintf_r+0x10e>
 800db7c:	46a8      	mov	r8, r5
 800db7e:	2000      	movs	r0, #0
 800db80:	250a      	movs	r5, #10
 800db82:	9a07      	ldr	r2, [sp, #28]
 800db84:	4641      	mov	r1, r8
 800db86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db8a:	3b30      	subs	r3, #48	; 0x30
 800db8c:	2b09      	cmp	r3, #9
 800db8e:	d969      	bls.n	800dc64 <_vfiprintf_r+0x1a0>
 800db90:	b360      	cbz	r0, 800dbec <_vfiprintf_r+0x128>
 800db92:	e024      	b.n	800dbde <_vfiprintf_r+0x11a>
 800db94:	4b50      	ldr	r3, [pc, #320]	; (800dcd8 <_vfiprintf_r+0x214>)
 800db96:	429c      	cmp	r4, r3
 800db98:	d101      	bne.n	800db9e <_vfiprintf_r+0xda>
 800db9a:	68b4      	ldr	r4, [r6, #8]
 800db9c:	e7a2      	b.n	800dae4 <_vfiprintf_r+0x20>
 800db9e:	4b4f      	ldr	r3, [pc, #316]	; (800dcdc <_vfiprintf_r+0x218>)
 800dba0:	429c      	cmp	r4, r3
 800dba2:	bf08      	it	eq
 800dba4:	68f4      	ldreq	r4, [r6, #12]
 800dba6:	e79d      	b.n	800dae4 <_vfiprintf_r+0x20>
 800dba8:	4621      	mov	r1, r4
 800dbaa:	4630      	mov	r0, r6
 800dbac:	f7fd fb8a 	bl	800b2c4 <__swsetup_r>
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d09d      	beq.n	800daf0 <_vfiprintf_r+0x2c>
 800dbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb8:	b01d      	add	sp, #116	; 0x74
 800dbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbbe:	46a8      	mov	r8, r5
 800dbc0:	e7a2      	b.n	800db08 <_vfiprintf_r+0x44>
 800dbc2:	4a44      	ldr	r2, [pc, #272]	; (800dcd4 <_vfiprintf_r+0x210>)
 800dbc4:	4645      	mov	r5, r8
 800dbc6:	1a80      	subs	r0, r0, r2
 800dbc8:	fa0b f000 	lsl.w	r0, fp, r0
 800dbcc:	4318      	orrs	r0, r3
 800dbce:	9004      	str	r0, [sp, #16]
 800dbd0:	e7be      	b.n	800db50 <_vfiprintf_r+0x8c>
 800dbd2:	9a03      	ldr	r2, [sp, #12]
 800dbd4:	1d11      	adds	r1, r2, #4
 800dbd6:	6812      	ldr	r2, [r2, #0]
 800dbd8:	9103      	str	r1, [sp, #12]
 800dbda:	2a00      	cmp	r2, #0
 800dbdc:	db01      	blt.n	800dbe2 <_vfiprintf_r+0x11e>
 800dbde:	9207      	str	r2, [sp, #28]
 800dbe0:	e004      	b.n	800dbec <_vfiprintf_r+0x128>
 800dbe2:	4252      	negs	r2, r2
 800dbe4:	f043 0302 	orr.w	r3, r3, #2
 800dbe8:	9207      	str	r2, [sp, #28]
 800dbea:	9304      	str	r3, [sp, #16]
 800dbec:	f898 3000 	ldrb.w	r3, [r8]
 800dbf0:	2b2e      	cmp	r3, #46	; 0x2e
 800dbf2:	d10e      	bne.n	800dc12 <_vfiprintf_r+0x14e>
 800dbf4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dbf8:	2b2a      	cmp	r3, #42	; 0x2a
 800dbfa:	d138      	bne.n	800dc6e <_vfiprintf_r+0x1aa>
 800dbfc:	9b03      	ldr	r3, [sp, #12]
 800dbfe:	f108 0802 	add.w	r8, r8, #2
 800dc02:	1d1a      	adds	r2, r3, #4
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	9203      	str	r2, [sp, #12]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	bfb8      	it	lt
 800dc0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc10:	9305      	str	r3, [sp, #20]
 800dc12:	4d33      	ldr	r5, [pc, #204]	; (800dce0 <_vfiprintf_r+0x21c>)
 800dc14:	2203      	movs	r2, #3
 800dc16:	f898 1000 	ldrb.w	r1, [r8]
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	f7fe ff68 	bl	800caf0 <memchr>
 800dc20:	b140      	cbz	r0, 800dc34 <_vfiprintf_r+0x170>
 800dc22:	2340      	movs	r3, #64	; 0x40
 800dc24:	1b40      	subs	r0, r0, r5
 800dc26:	fa03 f000 	lsl.w	r0, r3, r0
 800dc2a:	9b04      	ldr	r3, [sp, #16]
 800dc2c:	f108 0801 	add.w	r8, r8, #1
 800dc30:	4303      	orrs	r3, r0
 800dc32:	9304      	str	r3, [sp, #16]
 800dc34:	f898 1000 	ldrb.w	r1, [r8]
 800dc38:	2206      	movs	r2, #6
 800dc3a:	482a      	ldr	r0, [pc, #168]	; (800dce4 <_vfiprintf_r+0x220>)
 800dc3c:	f108 0701 	add.w	r7, r8, #1
 800dc40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc44:	f7fe ff54 	bl	800caf0 <memchr>
 800dc48:	2800      	cmp	r0, #0
 800dc4a:	d037      	beq.n	800dcbc <_vfiprintf_r+0x1f8>
 800dc4c:	4b26      	ldr	r3, [pc, #152]	; (800dce8 <_vfiprintf_r+0x224>)
 800dc4e:	bb1b      	cbnz	r3, 800dc98 <_vfiprintf_r+0x1d4>
 800dc50:	9b03      	ldr	r3, [sp, #12]
 800dc52:	3307      	adds	r3, #7
 800dc54:	f023 0307 	bic.w	r3, r3, #7
 800dc58:	3308      	adds	r3, #8
 800dc5a:	9303      	str	r3, [sp, #12]
 800dc5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc5e:	444b      	add	r3, r9
 800dc60:	9309      	str	r3, [sp, #36]	; 0x24
 800dc62:	e750      	b.n	800db06 <_vfiprintf_r+0x42>
 800dc64:	fb05 3202 	mla	r2, r5, r2, r3
 800dc68:	2001      	movs	r0, #1
 800dc6a:	4688      	mov	r8, r1
 800dc6c:	e78a      	b.n	800db84 <_vfiprintf_r+0xc0>
 800dc6e:	2300      	movs	r3, #0
 800dc70:	250a      	movs	r5, #10
 800dc72:	4619      	mov	r1, r3
 800dc74:	f108 0801 	add.w	r8, r8, #1
 800dc78:	9305      	str	r3, [sp, #20]
 800dc7a:	4640      	mov	r0, r8
 800dc7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc80:	3a30      	subs	r2, #48	; 0x30
 800dc82:	2a09      	cmp	r2, #9
 800dc84:	d903      	bls.n	800dc8e <_vfiprintf_r+0x1ca>
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d0c3      	beq.n	800dc12 <_vfiprintf_r+0x14e>
 800dc8a:	9105      	str	r1, [sp, #20]
 800dc8c:	e7c1      	b.n	800dc12 <_vfiprintf_r+0x14e>
 800dc8e:	fb05 2101 	mla	r1, r5, r1, r2
 800dc92:	2301      	movs	r3, #1
 800dc94:	4680      	mov	r8, r0
 800dc96:	e7f0      	b.n	800dc7a <_vfiprintf_r+0x1b6>
 800dc98:	ab03      	add	r3, sp, #12
 800dc9a:	9300      	str	r3, [sp, #0]
 800dc9c:	4622      	mov	r2, r4
 800dc9e:	4b13      	ldr	r3, [pc, #76]	; (800dcec <_vfiprintf_r+0x228>)
 800dca0:	a904      	add	r1, sp, #16
 800dca2:	4630      	mov	r0, r6
 800dca4:	f7fb fd26 	bl	80096f4 <_printf_float>
 800dca8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dcac:	4681      	mov	r9, r0
 800dcae:	d1d5      	bne.n	800dc5c <_vfiprintf_r+0x198>
 800dcb0:	89a3      	ldrh	r3, [r4, #12]
 800dcb2:	065b      	lsls	r3, r3, #25
 800dcb4:	f53f af7e 	bmi.w	800dbb4 <_vfiprintf_r+0xf0>
 800dcb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dcba:	e77d      	b.n	800dbb8 <_vfiprintf_r+0xf4>
 800dcbc:	ab03      	add	r3, sp, #12
 800dcbe:	9300      	str	r3, [sp, #0]
 800dcc0:	4622      	mov	r2, r4
 800dcc2:	4b0a      	ldr	r3, [pc, #40]	; (800dcec <_vfiprintf_r+0x228>)
 800dcc4:	a904      	add	r1, sp, #16
 800dcc6:	4630      	mov	r0, r6
 800dcc8:	f7fb ffc0 	bl	8009c4c <_printf_i>
 800dccc:	e7ec      	b.n	800dca8 <_vfiprintf_r+0x1e4>
 800dcce:	bf00      	nop
 800dcd0:	0800e478 	.word	0x0800e478
 800dcd4:	0800e5c4 	.word	0x0800e5c4
 800dcd8:	0800e498 	.word	0x0800e498
 800dcdc:	0800e458 	.word	0x0800e458
 800dce0:	0800e5ca 	.word	0x0800e5ca
 800dce4:	0800e5ce 	.word	0x0800e5ce
 800dce8:	080096f5 	.word	0x080096f5
 800dcec:	0800da9f 	.word	0x0800da9f

0800dcf0 <_scanf_chars>:
 800dcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcf4:	4615      	mov	r5, r2
 800dcf6:	688a      	ldr	r2, [r1, #8]
 800dcf8:	4680      	mov	r8, r0
 800dcfa:	460c      	mov	r4, r1
 800dcfc:	b932      	cbnz	r2, 800dd0c <_scanf_chars+0x1c>
 800dcfe:	698a      	ldr	r2, [r1, #24]
 800dd00:	2a00      	cmp	r2, #0
 800dd02:	bf14      	ite	ne
 800dd04:	f04f 32ff 	movne.w	r2, #4294967295
 800dd08:	2201      	moveq	r2, #1
 800dd0a:	608a      	str	r2, [r1, #8]
 800dd0c:	2600      	movs	r6, #0
 800dd0e:	6822      	ldr	r2, [r4, #0]
 800dd10:	06d1      	lsls	r1, r2, #27
 800dd12:	bf5f      	itttt	pl
 800dd14:	681a      	ldrpl	r2, [r3, #0]
 800dd16:	1d11      	addpl	r1, r2, #4
 800dd18:	6019      	strpl	r1, [r3, #0]
 800dd1a:	6817      	ldrpl	r7, [r2, #0]
 800dd1c:	69a3      	ldr	r3, [r4, #24]
 800dd1e:	b1db      	cbz	r3, 800dd58 <_scanf_chars+0x68>
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d107      	bne.n	800dd34 <_scanf_chars+0x44>
 800dd24:	682b      	ldr	r3, [r5, #0]
 800dd26:	6962      	ldr	r2, [r4, #20]
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	5cd3      	ldrb	r3, [r2, r3]
 800dd2c:	b9a3      	cbnz	r3, 800dd58 <_scanf_chars+0x68>
 800dd2e:	2e00      	cmp	r6, #0
 800dd30:	d131      	bne.n	800dd96 <_scanf_chars+0xa6>
 800dd32:	e006      	b.n	800dd42 <_scanf_chars+0x52>
 800dd34:	2b02      	cmp	r3, #2
 800dd36:	d007      	beq.n	800dd48 <_scanf_chars+0x58>
 800dd38:	2e00      	cmp	r6, #0
 800dd3a:	d12c      	bne.n	800dd96 <_scanf_chars+0xa6>
 800dd3c:	69a3      	ldr	r3, [r4, #24]
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d129      	bne.n	800dd96 <_scanf_chars+0xa6>
 800dd42:	2001      	movs	r0, #1
 800dd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd48:	f7fe fe24 	bl	800c994 <__locale_ctype_ptr>
 800dd4c:	682b      	ldr	r3, [r5, #0]
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	4418      	add	r0, r3
 800dd52:	7843      	ldrb	r3, [r0, #1]
 800dd54:	071b      	lsls	r3, r3, #28
 800dd56:	d4ef      	bmi.n	800dd38 <_scanf_chars+0x48>
 800dd58:	6823      	ldr	r3, [r4, #0]
 800dd5a:	3601      	adds	r6, #1
 800dd5c:	06da      	lsls	r2, r3, #27
 800dd5e:	bf5e      	ittt	pl
 800dd60:	682b      	ldrpl	r3, [r5, #0]
 800dd62:	781b      	ldrbpl	r3, [r3, #0]
 800dd64:	703b      	strbpl	r3, [r7, #0]
 800dd66:	682a      	ldr	r2, [r5, #0]
 800dd68:	686b      	ldr	r3, [r5, #4]
 800dd6a:	f102 0201 	add.w	r2, r2, #1
 800dd6e:	602a      	str	r2, [r5, #0]
 800dd70:	68a2      	ldr	r2, [r4, #8]
 800dd72:	f103 33ff 	add.w	r3, r3, #4294967295
 800dd76:	f102 32ff 	add.w	r2, r2, #4294967295
 800dd7a:	606b      	str	r3, [r5, #4]
 800dd7c:	bf58      	it	pl
 800dd7e:	3701      	addpl	r7, #1
 800dd80:	60a2      	str	r2, [r4, #8]
 800dd82:	b142      	cbz	r2, 800dd96 <_scanf_chars+0xa6>
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	dcc9      	bgt.n	800dd1c <_scanf_chars+0x2c>
 800dd88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dd8c:	4629      	mov	r1, r5
 800dd8e:	4640      	mov	r0, r8
 800dd90:	4798      	blx	r3
 800dd92:	2800      	cmp	r0, #0
 800dd94:	d0c2      	beq.n	800dd1c <_scanf_chars+0x2c>
 800dd96:	6823      	ldr	r3, [r4, #0]
 800dd98:	f013 0310 	ands.w	r3, r3, #16
 800dd9c:	d105      	bne.n	800ddaa <_scanf_chars+0xba>
 800dd9e:	68e2      	ldr	r2, [r4, #12]
 800dda0:	3201      	adds	r2, #1
 800dda2:	60e2      	str	r2, [r4, #12]
 800dda4:	69a2      	ldr	r2, [r4, #24]
 800dda6:	b102      	cbz	r2, 800ddaa <_scanf_chars+0xba>
 800dda8:	703b      	strb	r3, [r7, #0]
 800ddaa:	6923      	ldr	r3, [r4, #16]
 800ddac:	2000      	movs	r0, #0
 800ddae:	441e      	add	r6, r3
 800ddb0:	6126      	str	r6, [r4, #16]
 800ddb2:	e7c7      	b.n	800dd44 <_scanf_chars+0x54>

0800ddb4 <_scanf_i>:
 800ddb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb8:	460c      	mov	r4, r1
 800ddba:	469a      	mov	sl, r3
 800ddbc:	4b74      	ldr	r3, [pc, #464]	; (800df90 <_scanf_i+0x1dc>)
 800ddbe:	b087      	sub	sp, #28
 800ddc0:	4683      	mov	fp, r0
 800ddc2:	4616      	mov	r6, r2
 800ddc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ddc8:	ab03      	add	r3, sp, #12
 800ddca:	68a7      	ldr	r7, [r4, #8]
 800ddcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ddd0:	4b70      	ldr	r3, [pc, #448]	; (800df94 <_scanf_i+0x1e0>)
 800ddd2:	69a1      	ldr	r1, [r4, #24]
 800ddd4:	4a70      	ldr	r2, [pc, #448]	; (800df98 <_scanf_i+0x1e4>)
 800ddd6:	f104 091c 	add.w	r9, r4, #28
 800ddda:	2903      	cmp	r1, #3
 800dddc:	bf08      	it	eq
 800ddde:	461a      	moveq	r2, r3
 800dde0:	1e7b      	subs	r3, r7, #1
 800dde2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800dde6:	bf84      	itt	hi
 800dde8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ddec:	60a3      	strhi	r3, [r4, #8]
 800ddee:	6823      	ldr	r3, [r4, #0]
 800ddf0:	bf88      	it	hi
 800ddf2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ddf6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ddfa:	6023      	str	r3, [r4, #0]
 800ddfc:	bf98      	it	ls
 800ddfe:	2700      	movls	r7, #0
 800de00:	464b      	mov	r3, r9
 800de02:	f04f 0800 	mov.w	r8, #0
 800de06:	9200      	str	r2, [sp, #0]
 800de08:	bf88      	it	hi
 800de0a:	197f      	addhi	r7, r7, r5
 800de0c:	6831      	ldr	r1, [r6, #0]
 800de0e:	9301      	str	r3, [sp, #4]
 800de10:	ab03      	add	r3, sp, #12
 800de12:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800de16:	2202      	movs	r2, #2
 800de18:	7809      	ldrb	r1, [r1, #0]
 800de1a:	f7fe fe69 	bl	800caf0 <memchr>
 800de1e:	9b01      	ldr	r3, [sp, #4]
 800de20:	b330      	cbz	r0, 800de70 <_scanf_i+0xbc>
 800de22:	f1b8 0f01 	cmp.w	r8, #1
 800de26:	d15a      	bne.n	800dede <_scanf_i+0x12a>
 800de28:	6862      	ldr	r2, [r4, #4]
 800de2a:	b92a      	cbnz	r2, 800de38 <_scanf_i+0x84>
 800de2c:	2108      	movs	r1, #8
 800de2e:	6822      	ldr	r2, [r4, #0]
 800de30:	6061      	str	r1, [r4, #4]
 800de32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de36:	6022      	str	r2, [r4, #0]
 800de38:	6822      	ldr	r2, [r4, #0]
 800de3a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800de3e:	6022      	str	r2, [r4, #0]
 800de40:	68a2      	ldr	r2, [r4, #8]
 800de42:	1e51      	subs	r1, r2, #1
 800de44:	60a1      	str	r1, [r4, #8]
 800de46:	b19a      	cbz	r2, 800de70 <_scanf_i+0xbc>
 800de48:	6832      	ldr	r2, [r6, #0]
 800de4a:	1c5d      	adds	r5, r3, #1
 800de4c:	1c51      	adds	r1, r2, #1
 800de4e:	6031      	str	r1, [r6, #0]
 800de50:	7812      	ldrb	r2, [r2, #0]
 800de52:	701a      	strb	r2, [r3, #0]
 800de54:	6873      	ldr	r3, [r6, #4]
 800de56:	3b01      	subs	r3, #1
 800de58:	2b00      	cmp	r3, #0
 800de5a:	6073      	str	r3, [r6, #4]
 800de5c:	dc07      	bgt.n	800de6e <_scanf_i+0xba>
 800de5e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800de62:	4631      	mov	r1, r6
 800de64:	4658      	mov	r0, fp
 800de66:	4798      	blx	r3
 800de68:	2800      	cmp	r0, #0
 800de6a:	f040 8087 	bne.w	800df7c <_scanf_i+0x1c8>
 800de6e:	462b      	mov	r3, r5
 800de70:	f108 0801 	add.w	r8, r8, #1
 800de74:	f1b8 0f03 	cmp.w	r8, #3
 800de78:	d1c8      	bne.n	800de0c <_scanf_i+0x58>
 800de7a:	6862      	ldr	r2, [r4, #4]
 800de7c:	b90a      	cbnz	r2, 800de82 <_scanf_i+0xce>
 800de7e:	220a      	movs	r2, #10
 800de80:	6062      	str	r2, [r4, #4]
 800de82:	6862      	ldr	r2, [r4, #4]
 800de84:	4945      	ldr	r1, [pc, #276]	; (800df9c <_scanf_i+0x1e8>)
 800de86:	6960      	ldr	r0, [r4, #20]
 800de88:	1a89      	subs	r1, r1, r2
 800de8a:	9301      	str	r3, [sp, #4]
 800de8c:	f000 f8aa 	bl	800dfe4 <__sccl>
 800de90:	9b01      	ldr	r3, [sp, #4]
 800de92:	f04f 0800 	mov.w	r8, #0
 800de96:	461d      	mov	r5, r3
 800de98:	68a3      	ldr	r3, [r4, #8]
 800de9a:	6822      	ldr	r2, [r4, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d03b      	beq.n	800df18 <_scanf_i+0x164>
 800dea0:	6831      	ldr	r1, [r6, #0]
 800dea2:	6960      	ldr	r0, [r4, #20]
 800dea4:	f891 c000 	ldrb.w	ip, [r1]
 800dea8:	f810 000c 	ldrb.w	r0, [r0, ip]
 800deac:	2800      	cmp	r0, #0
 800deae:	d033      	beq.n	800df18 <_scanf_i+0x164>
 800deb0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800deb4:	d121      	bne.n	800defa <_scanf_i+0x146>
 800deb6:	0510      	lsls	r0, r2, #20
 800deb8:	d51f      	bpl.n	800defa <_scanf_i+0x146>
 800deba:	f108 0801 	add.w	r8, r8, #1
 800debe:	b117      	cbz	r7, 800dec6 <_scanf_i+0x112>
 800dec0:	3301      	adds	r3, #1
 800dec2:	3f01      	subs	r7, #1
 800dec4:	60a3      	str	r3, [r4, #8]
 800dec6:	6873      	ldr	r3, [r6, #4]
 800dec8:	3b01      	subs	r3, #1
 800deca:	2b00      	cmp	r3, #0
 800decc:	6073      	str	r3, [r6, #4]
 800dece:	dd1c      	ble.n	800df0a <_scanf_i+0x156>
 800ded0:	6833      	ldr	r3, [r6, #0]
 800ded2:	3301      	adds	r3, #1
 800ded4:	6033      	str	r3, [r6, #0]
 800ded6:	68a3      	ldr	r3, [r4, #8]
 800ded8:	3b01      	subs	r3, #1
 800deda:	60a3      	str	r3, [r4, #8]
 800dedc:	e7dc      	b.n	800de98 <_scanf_i+0xe4>
 800dede:	f1b8 0f02 	cmp.w	r8, #2
 800dee2:	d1ad      	bne.n	800de40 <_scanf_i+0x8c>
 800dee4:	6822      	ldr	r2, [r4, #0]
 800dee6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800deea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800deee:	d1bf      	bne.n	800de70 <_scanf_i+0xbc>
 800def0:	2110      	movs	r1, #16
 800def2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800def6:	6061      	str	r1, [r4, #4]
 800def8:	e7a1      	b.n	800de3e <_scanf_i+0x8a>
 800defa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800defe:	6022      	str	r2, [r4, #0]
 800df00:	780b      	ldrb	r3, [r1, #0]
 800df02:	3501      	adds	r5, #1
 800df04:	f805 3c01 	strb.w	r3, [r5, #-1]
 800df08:	e7dd      	b.n	800dec6 <_scanf_i+0x112>
 800df0a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800df0e:	4631      	mov	r1, r6
 800df10:	4658      	mov	r0, fp
 800df12:	4798      	blx	r3
 800df14:	2800      	cmp	r0, #0
 800df16:	d0de      	beq.n	800ded6 <_scanf_i+0x122>
 800df18:	6823      	ldr	r3, [r4, #0]
 800df1a:	05d9      	lsls	r1, r3, #23
 800df1c:	d50c      	bpl.n	800df38 <_scanf_i+0x184>
 800df1e:	454d      	cmp	r5, r9
 800df20:	d908      	bls.n	800df34 <_scanf_i+0x180>
 800df22:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800df26:	1e6f      	subs	r7, r5, #1
 800df28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800df2c:	4632      	mov	r2, r6
 800df2e:	4658      	mov	r0, fp
 800df30:	4798      	blx	r3
 800df32:	463d      	mov	r5, r7
 800df34:	454d      	cmp	r5, r9
 800df36:	d029      	beq.n	800df8c <_scanf_i+0x1d8>
 800df38:	6822      	ldr	r2, [r4, #0]
 800df3a:	f012 0210 	ands.w	r2, r2, #16
 800df3e:	d113      	bne.n	800df68 <_scanf_i+0x1b4>
 800df40:	702a      	strb	r2, [r5, #0]
 800df42:	6863      	ldr	r3, [r4, #4]
 800df44:	4649      	mov	r1, r9
 800df46:	4658      	mov	r0, fp
 800df48:	9e00      	ldr	r6, [sp, #0]
 800df4a:	47b0      	blx	r6
 800df4c:	f8da 3000 	ldr.w	r3, [sl]
 800df50:	6821      	ldr	r1, [r4, #0]
 800df52:	1d1a      	adds	r2, r3, #4
 800df54:	f8ca 2000 	str.w	r2, [sl]
 800df58:	f011 0f20 	tst.w	r1, #32
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	d010      	beq.n	800df82 <_scanf_i+0x1ce>
 800df60:	6018      	str	r0, [r3, #0]
 800df62:	68e3      	ldr	r3, [r4, #12]
 800df64:	3301      	adds	r3, #1
 800df66:	60e3      	str	r3, [r4, #12]
 800df68:	2000      	movs	r0, #0
 800df6a:	eba5 0509 	sub.w	r5, r5, r9
 800df6e:	44a8      	add	r8, r5
 800df70:	6925      	ldr	r5, [r4, #16]
 800df72:	4445      	add	r5, r8
 800df74:	6125      	str	r5, [r4, #16]
 800df76:	b007      	add	sp, #28
 800df78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df7c:	f04f 0800 	mov.w	r8, #0
 800df80:	e7ca      	b.n	800df18 <_scanf_i+0x164>
 800df82:	07ca      	lsls	r2, r1, #31
 800df84:	bf4c      	ite	mi
 800df86:	8018      	strhmi	r0, [r3, #0]
 800df88:	6018      	strpl	r0, [r3, #0]
 800df8a:	e7ea      	b.n	800df62 <_scanf_i+0x1ae>
 800df8c:	2001      	movs	r0, #1
 800df8e:	e7f2      	b.n	800df76 <_scanf_i+0x1c2>
 800df90:	0800e3a0 	.word	0x0800e3a0
 800df94:	0800b1d9 	.word	0x0800b1d9
 800df98:	0800e161 	.word	0x0800e161
 800df9c:	0800e5e5 	.word	0x0800e5e5

0800dfa0 <_read_r>:
 800dfa0:	b538      	push	{r3, r4, r5, lr}
 800dfa2:	4605      	mov	r5, r0
 800dfa4:	4608      	mov	r0, r1
 800dfa6:	4611      	mov	r1, r2
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	4c05      	ldr	r4, [pc, #20]	; (800dfc0 <_read_r+0x20>)
 800dfac:	6022      	str	r2, [r4, #0]
 800dfae:	461a      	mov	r2, r3
 800dfb0:	f7f3 fc02 	bl	80017b8 <_read>
 800dfb4:	1c43      	adds	r3, r0, #1
 800dfb6:	d102      	bne.n	800dfbe <_read_r+0x1e>
 800dfb8:	6823      	ldr	r3, [r4, #0]
 800dfba:	b103      	cbz	r3, 800dfbe <_read_r+0x1e>
 800dfbc:	602b      	str	r3, [r5, #0]
 800dfbe:	bd38      	pop	{r3, r4, r5, pc}
 800dfc0:	20001074 	.word	0x20001074

0800dfc4 <_sbrk_r>:
 800dfc4:	b538      	push	{r3, r4, r5, lr}
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	4c05      	ldr	r4, [pc, #20]	; (800dfe0 <_sbrk_r+0x1c>)
 800dfca:	4605      	mov	r5, r0
 800dfcc:	4608      	mov	r0, r1
 800dfce:	6023      	str	r3, [r4, #0]
 800dfd0:	f7f3 fc40 	bl	8001854 <_sbrk>
 800dfd4:	1c43      	adds	r3, r0, #1
 800dfd6:	d102      	bne.n	800dfde <_sbrk_r+0x1a>
 800dfd8:	6823      	ldr	r3, [r4, #0]
 800dfda:	b103      	cbz	r3, 800dfde <_sbrk_r+0x1a>
 800dfdc:	602b      	str	r3, [r5, #0]
 800dfde:	bd38      	pop	{r3, r4, r5, pc}
 800dfe0:	20001074 	.word	0x20001074

0800dfe4 <__sccl>:
 800dfe4:	b570      	push	{r4, r5, r6, lr}
 800dfe6:	780b      	ldrb	r3, [r1, #0]
 800dfe8:	1e44      	subs	r4, r0, #1
 800dfea:	2b5e      	cmp	r3, #94	; 0x5e
 800dfec:	bf13      	iteet	ne
 800dfee:	1c4a      	addne	r2, r1, #1
 800dff0:	1c8a      	addeq	r2, r1, #2
 800dff2:	784b      	ldrbeq	r3, [r1, #1]
 800dff4:	2100      	movne	r1, #0
 800dff6:	bf08      	it	eq
 800dff8:	2101      	moveq	r1, #1
 800dffa:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800dffe:	f804 1f01 	strb.w	r1, [r4, #1]!
 800e002:	42ac      	cmp	r4, r5
 800e004:	d1fb      	bne.n	800dffe <__sccl+0x1a>
 800e006:	b913      	cbnz	r3, 800e00e <__sccl+0x2a>
 800e008:	3a01      	subs	r2, #1
 800e00a:	4610      	mov	r0, r2
 800e00c:	bd70      	pop	{r4, r5, r6, pc}
 800e00e:	f081 0401 	eor.w	r4, r1, #1
 800e012:	54c4      	strb	r4, [r0, r3]
 800e014:	1c51      	adds	r1, r2, #1
 800e016:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800e01a:	1e4e      	subs	r6, r1, #1
 800e01c:	2d2d      	cmp	r5, #45	; 0x2d
 800e01e:	460a      	mov	r2, r1
 800e020:	d006      	beq.n	800e030 <__sccl+0x4c>
 800e022:	2d5d      	cmp	r5, #93	; 0x5d
 800e024:	d0f1      	beq.n	800e00a <__sccl+0x26>
 800e026:	b90d      	cbnz	r5, 800e02c <__sccl+0x48>
 800e028:	4632      	mov	r2, r6
 800e02a:	e7ee      	b.n	800e00a <__sccl+0x26>
 800e02c:	462b      	mov	r3, r5
 800e02e:	e7f0      	b.n	800e012 <__sccl+0x2e>
 800e030:	780e      	ldrb	r6, [r1, #0]
 800e032:	2e5d      	cmp	r6, #93	; 0x5d
 800e034:	d0fa      	beq.n	800e02c <__sccl+0x48>
 800e036:	42b3      	cmp	r3, r6
 800e038:	dcf8      	bgt.n	800e02c <__sccl+0x48>
 800e03a:	3301      	adds	r3, #1
 800e03c:	429e      	cmp	r6, r3
 800e03e:	54c4      	strb	r4, [r0, r3]
 800e040:	dcfb      	bgt.n	800e03a <__sccl+0x56>
 800e042:	3102      	adds	r1, #2
 800e044:	e7e7      	b.n	800e016 <__sccl+0x32>

0800e046 <strncmp>:
 800e046:	b510      	push	{r4, lr}
 800e048:	b16a      	cbz	r2, 800e066 <strncmp+0x20>
 800e04a:	3901      	subs	r1, #1
 800e04c:	1884      	adds	r4, r0, r2
 800e04e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e052:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e056:	4293      	cmp	r3, r2
 800e058:	d103      	bne.n	800e062 <strncmp+0x1c>
 800e05a:	42a0      	cmp	r0, r4
 800e05c:	d001      	beq.n	800e062 <strncmp+0x1c>
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d1f5      	bne.n	800e04e <strncmp+0x8>
 800e062:	1a98      	subs	r0, r3, r2
 800e064:	bd10      	pop	{r4, pc}
 800e066:	4610      	mov	r0, r2
 800e068:	e7fc      	b.n	800e064 <strncmp+0x1e>

0800e06a <_strtoul_l.isra.0>:
 800e06a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e06e:	4680      	mov	r8, r0
 800e070:	4689      	mov	r9, r1
 800e072:	4692      	mov	sl, r2
 800e074:	461e      	mov	r6, r3
 800e076:	460f      	mov	r7, r1
 800e078:	463d      	mov	r5, r7
 800e07a:	9808      	ldr	r0, [sp, #32]
 800e07c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e080:	f7fe fc84 	bl	800c98c <__locale_ctype_ptr_l>
 800e084:	4420      	add	r0, r4
 800e086:	7843      	ldrb	r3, [r0, #1]
 800e088:	f013 0308 	ands.w	r3, r3, #8
 800e08c:	d130      	bne.n	800e0f0 <_strtoul_l.isra.0+0x86>
 800e08e:	2c2d      	cmp	r4, #45	; 0x2d
 800e090:	d130      	bne.n	800e0f4 <_strtoul_l.isra.0+0x8a>
 800e092:	2101      	movs	r1, #1
 800e094:	787c      	ldrb	r4, [r7, #1]
 800e096:	1cbd      	adds	r5, r7, #2
 800e098:	2e00      	cmp	r6, #0
 800e09a:	d05c      	beq.n	800e156 <_strtoul_l.isra.0+0xec>
 800e09c:	2e10      	cmp	r6, #16
 800e09e:	d109      	bne.n	800e0b4 <_strtoul_l.isra.0+0x4a>
 800e0a0:	2c30      	cmp	r4, #48	; 0x30
 800e0a2:	d107      	bne.n	800e0b4 <_strtoul_l.isra.0+0x4a>
 800e0a4:	782b      	ldrb	r3, [r5, #0]
 800e0a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e0aa:	2b58      	cmp	r3, #88	; 0x58
 800e0ac:	d14e      	bne.n	800e14c <_strtoul_l.isra.0+0xe2>
 800e0ae:	2610      	movs	r6, #16
 800e0b0:	786c      	ldrb	r4, [r5, #1]
 800e0b2:	3502      	adds	r5, #2
 800e0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e0b8:	fbb2 f2f6 	udiv	r2, r2, r6
 800e0bc:	2300      	movs	r3, #0
 800e0be:	fb06 fc02 	mul.w	ip, r6, r2
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	ea6f 0c0c 	mvn.w	ip, ip
 800e0c8:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e0cc:	2f09      	cmp	r7, #9
 800e0ce:	d817      	bhi.n	800e100 <_strtoul_l.isra.0+0x96>
 800e0d0:	463c      	mov	r4, r7
 800e0d2:	42a6      	cmp	r6, r4
 800e0d4:	dd23      	ble.n	800e11e <_strtoul_l.isra.0+0xb4>
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	db1e      	blt.n	800e118 <_strtoul_l.isra.0+0xae>
 800e0da:	4282      	cmp	r2, r0
 800e0dc:	d31c      	bcc.n	800e118 <_strtoul_l.isra.0+0xae>
 800e0de:	d101      	bne.n	800e0e4 <_strtoul_l.isra.0+0x7a>
 800e0e0:	45a4      	cmp	ip, r4
 800e0e2:	db19      	blt.n	800e118 <_strtoul_l.isra.0+0xae>
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	fb00 4006 	mla	r0, r0, r6, r4
 800e0ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e0ee:	e7eb      	b.n	800e0c8 <_strtoul_l.isra.0+0x5e>
 800e0f0:	462f      	mov	r7, r5
 800e0f2:	e7c1      	b.n	800e078 <_strtoul_l.isra.0+0xe>
 800e0f4:	2c2b      	cmp	r4, #43	; 0x2b
 800e0f6:	bf04      	itt	eq
 800e0f8:	1cbd      	addeq	r5, r7, #2
 800e0fa:	787c      	ldrbeq	r4, [r7, #1]
 800e0fc:	4619      	mov	r1, r3
 800e0fe:	e7cb      	b.n	800e098 <_strtoul_l.isra.0+0x2e>
 800e100:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e104:	2f19      	cmp	r7, #25
 800e106:	d801      	bhi.n	800e10c <_strtoul_l.isra.0+0xa2>
 800e108:	3c37      	subs	r4, #55	; 0x37
 800e10a:	e7e2      	b.n	800e0d2 <_strtoul_l.isra.0+0x68>
 800e10c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e110:	2f19      	cmp	r7, #25
 800e112:	d804      	bhi.n	800e11e <_strtoul_l.isra.0+0xb4>
 800e114:	3c57      	subs	r4, #87	; 0x57
 800e116:	e7dc      	b.n	800e0d2 <_strtoul_l.isra.0+0x68>
 800e118:	f04f 33ff 	mov.w	r3, #4294967295
 800e11c:	e7e5      	b.n	800e0ea <_strtoul_l.isra.0+0x80>
 800e11e:	2b00      	cmp	r3, #0
 800e120:	da09      	bge.n	800e136 <_strtoul_l.isra.0+0xcc>
 800e122:	2322      	movs	r3, #34	; 0x22
 800e124:	f04f 30ff 	mov.w	r0, #4294967295
 800e128:	f8c8 3000 	str.w	r3, [r8]
 800e12c:	f1ba 0f00 	cmp.w	sl, #0
 800e130:	d107      	bne.n	800e142 <_strtoul_l.isra.0+0xd8>
 800e132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e136:	b101      	cbz	r1, 800e13a <_strtoul_l.isra.0+0xd0>
 800e138:	4240      	negs	r0, r0
 800e13a:	f1ba 0f00 	cmp.w	sl, #0
 800e13e:	d0f8      	beq.n	800e132 <_strtoul_l.isra.0+0xc8>
 800e140:	b10b      	cbz	r3, 800e146 <_strtoul_l.isra.0+0xdc>
 800e142:	f105 39ff 	add.w	r9, r5, #4294967295
 800e146:	f8ca 9000 	str.w	r9, [sl]
 800e14a:	e7f2      	b.n	800e132 <_strtoul_l.isra.0+0xc8>
 800e14c:	2430      	movs	r4, #48	; 0x30
 800e14e:	2e00      	cmp	r6, #0
 800e150:	d1b0      	bne.n	800e0b4 <_strtoul_l.isra.0+0x4a>
 800e152:	2608      	movs	r6, #8
 800e154:	e7ae      	b.n	800e0b4 <_strtoul_l.isra.0+0x4a>
 800e156:	2c30      	cmp	r4, #48	; 0x30
 800e158:	d0a4      	beq.n	800e0a4 <_strtoul_l.isra.0+0x3a>
 800e15a:	260a      	movs	r6, #10
 800e15c:	e7aa      	b.n	800e0b4 <_strtoul_l.isra.0+0x4a>
	...

0800e160 <_strtoul_r>:
 800e160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e162:	4c06      	ldr	r4, [pc, #24]	; (800e17c <_strtoul_r+0x1c>)
 800e164:	4d06      	ldr	r5, [pc, #24]	; (800e180 <_strtoul_r+0x20>)
 800e166:	6824      	ldr	r4, [r4, #0]
 800e168:	6a24      	ldr	r4, [r4, #32]
 800e16a:	2c00      	cmp	r4, #0
 800e16c:	bf08      	it	eq
 800e16e:	462c      	moveq	r4, r5
 800e170:	9400      	str	r4, [sp, #0]
 800e172:	f7ff ff7a 	bl	800e06a <_strtoul_l.isra.0>
 800e176:	b003      	add	sp, #12
 800e178:	bd30      	pop	{r4, r5, pc}
 800e17a:	bf00      	nop
 800e17c:	2000017c 	.word	0x2000017c
 800e180:	200001e0 	.word	0x200001e0

0800e184 <__submore>:
 800e184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e188:	460c      	mov	r4, r1
 800e18a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e18c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e190:	4299      	cmp	r1, r3
 800e192:	d11b      	bne.n	800e1cc <__submore+0x48>
 800e194:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e198:	f7ff f916 	bl	800d3c8 <_malloc_r>
 800e19c:	b918      	cbnz	r0, 800e1a6 <__submore+0x22>
 800e19e:	f04f 30ff 	mov.w	r0, #4294967295
 800e1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1aa:	63a3      	str	r3, [r4, #56]	; 0x38
 800e1ac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e1b0:	6360      	str	r0, [r4, #52]	; 0x34
 800e1b2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e1b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e1ba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e1be:	7043      	strb	r3, [r0, #1]
 800e1c0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e1c4:	7003      	strb	r3, [r0, #0]
 800e1c6:	6020      	str	r0, [r4, #0]
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	e7ea      	b.n	800e1a2 <__submore+0x1e>
 800e1cc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e1ce:	0077      	lsls	r7, r6, #1
 800e1d0:	463a      	mov	r2, r7
 800e1d2:	f000 f85a 	bl	800e28a <_realloc_r>
 800e1d6:	4605      	mov	r5, r0
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	d0e0      	beq.n	800e19e <__submore+0x1a>
 800e1dc:	eb00 0806 	add.w	r8, r0, r6
 800e1e0:	4601      	mov	r1, r0
 800e1e2:	4632      	mov	r2, r6
 800e1e4:	4640      	mov	r0, r8
 800e1e6:	f7fe fc91 	bl	800cb0c <memcpy>
 800e1ea:	f8c4 8000 	str.w	r8, [r4]
 800e1ee:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e1f2:	e7e9      	b.n	800e1c8 <__submore+0x44>

0800e1f4 <__ascii_wctomb>:
 800e1f4:	b149      	cbz	r1, 800e20a <__ascii_wctomb+0x16>
 800e1f6:	2aff      	cmp	r2, #255	; 0xff
 800e1f8:	bf8b      	itete	hi
 800e1fa:	238a      	movhi	r3, #138	; 0x8a
 800e1fc:	700a      	strbls	r2, [r1, #0]
 800e1fe:	6003      	strhi	r3, [r0, #0]
 800e200:	2001      	movls	r0, #1
 800e202:	bf88      	it	hi
 800e204:	f04f 30ff 	movhi.w	r0, #4294967295
 800e208:	4770      	bx	lr
 800e20a:	4608      	mov	r0, r1
 800e20c:	4770      	bx	lr
	...

0800e210 <_fstat_r>:
 800e210:	b538      	push	{r3, r4, r5, lr}
 800e212:	2300      	movs	r3, #0
 800e214:	4c06      	ldr	r4, [pc, #24]	; (800e230 <_fstat_r+0x20>)
 800e216:	4605      	mov	r5, r0
 800e218:	4608      	mov	r0, r1
 800e21a:	4611      	mov	r1, r2
 800e21c:	6023      	str	r3, [r4, #0]
 800e21e:	f7f3 faf3 	bl	8001808 <_fstat>
 800e222:	1c43      	adds	r3, r0, #1
 800e224:	d102      	bne.n	800e22c <_fstat_r+0x1c>
 800e226:	6823      	ldr	r3, [r4, #0]
 800e228:	b103      	cbz	r3, 800e22c <_fstat_r+0x1c>
 800e22a:	602b      	str	r3, [r5, #0]
 800e22c:	bd38      	pop	{r3, r4, r5, pc}
 800e22e:	bf00      	nop
 800e230:	20001074 	.word	0x20001074

0800e234 <_isatty_r>:
 800e234:	b538      	push	{r3, r4, r5, lr}
 800e236:	2300      	movs	r3, #0
 800e238:	4c05      	ldr	r4, [pc, #20]	; (800e250 <_isatty_r+0x1c>)
 800e23a:	4605      	mov	r5, r0
 800e23c:	4608      	mov	r0, r1
 800e23e:	6023      	str	r3, [r4, #0]
 800e240:	f7f3 faf1 	bl	8001826 <_isatty>
 800e244:	1c43      	adds	r3, r0, #1
 800e246:	d102      	bne.n	800e24e <_isatty_r+0x1a>
 800e248:	6823      	ldr	r3, [r4, #0]
 800e24a:	b103      	cbz	r3, 800e24e <_isatty_r+0x1a>
 800e24c:	602b      	str	r3, [r5, #0]
 800e24e:	bd38      	pop	{r3, r4, r5, pc}
 800e250:	20001074 	.word	0x20001074

0800e254 <memmove>:
 800e254:	4288      	cmp	r0, r1
 800e256:	b510      	push	{r4, lr}
 800e258:	eb01 0302 	add.w	r3, r1, r2
 800e25c:	d807      	bhi.n	800e26e <memmove+0x1a>
 800e25e:	1e42      	subs	r2, r0, #1
 800e260:	4299      	cmp	r1, r3
 800e262:	d00a      	beq.n	800e27a <memmove+0x26>
 800e264:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e268:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e26c:	e7f8      	b.n	800e260 <memmove+0xc>
 800e26e:	4283      	cmp	r3, r0
 800e270:	d9f5      	bls.n	800e25e <memmove+0xa>
 800e272:	1881      	adds	r1, r0, r2
 800e274:	1ad2      	subs	r2, r2, r3
 800e276:	42d3      	cmn	r3, r2
 800e278:	d100      	bne.n	800e27c <memmove+0x28>
 800e27a:	bd10      	pop	{r4, pc}
 800e27c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e280:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e284:	e7f7      	b.n	800e276 <memmove+0x22>

0800e286 <__malloc_lock>:
 800e286:	4770      	bx	lr

0800e288 <__malloc_unlock>:
 800e288:	4770      	bx	lr

0800e28a <_realloc_r>:
 800e28a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e28c:	4607      	mov	r7, r0
 800e28e:	4614      	mov	r4, r2
 800e290:	460e      	mov	r6, r1
 800e292:	b921      	cbnz	r1, 800e29e <_realloc_r+0x14>
 800e294:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e298:	4611      	mov	r1, r2
 800e29a:	f7ff b895 	b.w	800d3c8 <_malloc_r>
 800e29e:	b922      	cbnz	r2, 800e2aa <_realloc_r+0x20>
 800e2a0:	f7ff f846 	bl	800d330 <_free_r>
 800e2a4:	4625      	mov	r5, r4
 800e2a6:	4628      	mov	r0, r5
 800e2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2aa:	f000 f814 	bl	800e2d6 <_malloc_usable_size_r>
 800e2ae:	42a0      	cmp	r0, r4
 800e2b0:	d20f      	bcs.n	800e2d2 <_realloc_r+0x48>
 800e2b2:	4621      	mov	r1, r4
 800e2b4:	4638      	mov	r0, r7
 800e2b6:	f7ff f887 	bl	800d3c8 <_malloc_r>
 800e2ba:	4605      	mov	r5, r0
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	d0f2      	beq.n	800e2a6 <_realloc_r+0x1c>
 800e2c0:	4631      	mov	r1, r6
 800e2c2:	4622      	mov	r2, r4
 800e2c4:	f7fe fc22 	bl	800cb0c <memcpy>
 800e2c8:	4631      	mov	r1, r6
 800e2ca:	4638      	mov	r0, r7
 800e2cc:	f7ff f830 	bl	800d330 <_free_r>
 800e2d0:	e7e9      	b.n	800e2a6 <_realloc_r+0x1c>
 800e2d2:	4635      	mov	r5, r6
 800e2d4:	e7e7      	b.n	800e2a6 <_realloc_r+0x1c>

0800e2d6 <_malloc_usable_size_r>:
 800e2d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2da:	1f18      	subs	r0, r3, #4
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	bfbc      	itt	lt
 800e2e0:	580b      	ldrlt	r3, [r1, r0]
 800e2e2:	18c0      	addlt	r0, r0, r3
 800e2e4:	4770      	bx	lr
	...

0800e2e8 <_init>:
 800e2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ea:	bf00      	nop
 800e2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ee:	bc08      	pop	{r3}
 800e2f0:	469e      	mov	lr, r3
 800e2f2:	4770      	bx	lr

0800e2f4 <_fini>:
 800e2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2f6:	bf00      	nop
 800e2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2fa:	bc08      	pop	{r3}
 800e2fc:	469e      	mov	lr, r3
 800e2fe:	4770      	bx	lr
