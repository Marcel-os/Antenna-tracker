
Antenna tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bae0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800bbf0  0800bbf0  0001bbf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf88  0800bf88  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bf88  0800bf88  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bf88  0800bf88  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf88  0800bf88  0001bf88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf8c  0800bf8c  0001bf8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800bf90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b98  2000034c  0800c2dc  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ee4  0800c2dc  00020ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f8b  00000000  00000000  00020375  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e7c  00000000  00000000  00032300  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b50  00000000  00000000  00035180  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d8  00000000  00000000  00035cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a7b0  00000000  00000000  000366a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d6f2  00000000  00000000  00050e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008590e  00000000  00000000  0005e54a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3e58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dfc  00000000  00000000  000e3ed4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000034c 	.word	0x2000034c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bbd8 	.word	0x0800bbd8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000350 	.word	0x20000350
 800014c:	0800bbd8 	.word	0x0800bbd8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <MX_GPIO_Init+0x8c>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a1c      	ldr	r2, [pc, #112]	; (8000bf4 <MX_GPIO_Init+0x8c>)
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_GPIO_Init+0x8c>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0310 	and.w	r3, r3, #16
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_GPIO_Init+0x8c>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a16      	ldr	r2, [pc, #88]	; (8000bf4 <MX_GPIO_Init+0x8c>)
 8000b9a:	f043 0320 	orr.w	r3, r3, #32
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_GPIO_Init+0x8c>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0320 	and.w	r3, r3, #32
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_GPIO_Init+0x8c>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a10      	ldr	r2, [pc, #64]	; (8000bf4 <MX_GPIO_Init+0x8c>)
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_GPIO_Init+0x8c>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	480b      	ldr	r0, [pc, #44]	; (8000bf8 <MX_GPIO_Init+0x90>)
 8000bca:	f000 fcbf 	bl	800154c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bce:	230f      	movs	r3, #15
 8000bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0310 	add.w	r3, r7, #16
 8000be2:	4619      	mov	r1, r3
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_GPIO_Init+0x90>)
 8000be6:	f000 fb57 	bl	8001298 <HAL_GPIO_Init>

}
 8000bea:	bf00      	nop
 8000bec:	3720      	adds	r7, #32
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40010800 	.word	0x40010800

08000bfc <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
    //HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
    CDC_Transmit_FS((uint8_t*)ptr, len);
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	68b8      	ldr	r0, [r7, #8]
 8000c0c:	f006 f9c6 	bl	8006f9c <CDC_Transmit_FS>
    return len;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c22:	f000 f9a7 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c26:	f000 f82b 	bl	8000c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2a:	f7ff ff9d 	bl	8000b68 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000c2e:	f006 f8db 	bl	8006de8 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ReceivedDataFlag == 1){
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <main+0x50>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d113      	bne.n	8000c62 <main+0x46>
	  	ReceivedDataFlag = 0;
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <main+0x50>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]

	  	MessageLength = sprintf(DataToSend, "%s \r\n", ReceivedData);
 8000c40:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <main+0x54>)
 8000c42:	490c      	ldr	r1, [pc, #48]	; (8000c74 <main+0x58>)
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <main+0x5c>)
 8000c46:	f007 fc09 	bl	800845c <siprintf>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <main+0x60>)
 8000c50:	701a      	strb	r2, [r3, #0]
	  	//printf("kupa", 10.7, 20.7);
//	  	subString = strtok(ReceivedData,"\""); // find the first double quote
//	  	subString = strtok(NULL,"\"");   // find the second double quote
	  	//CDC_Transmit_FS(DataToSend, MessageLength);
	  	int num = atoi(ReceivedData);
 8000c52:	4807      	ldr	r0, [pc, #28]	; (8000c70 <main+0x54>)
 8000c54:	f006 fd80 	bl	8007758 <atoi>
 8000c58:	6078      	str	r0, [r7, #4]
	  	printf(num);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f007 fbe1 	bl	8008424 <iprintf>
	  //printf("{\"enkoder1\":%f,\"enkoder2\":%f}\r\n", 10.7, 20.7);
	  //HAL_Delay(100);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 8000c62:	2064      	movs	r0, #100	; 0x64
 8000c64:	f000 f9e8 	bl	8001038 <HAL_Delay>
	  if(ReceivedDataFlag == 1){
 8000c68:	e7e3      	b.n	8000c32 <main+0x16>
 8000c6a:	bf00      	nop
 8000c6c:	20000369 	.word	0x20000369
 8000c70:	20000600 	.word	0x20000600
 8000c74:	0800bbf0 	.word	0x0800bbf0
 8000c78:	2000059c 	.word	0x2000059c
 8000c7c:	20000368 	.word	0x20000368

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b094      	sub	sp, #80	; 0x50
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c8a:	2228      	movs	r2, #40	; 0x28
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f006 fd90 	bl	80077b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ccc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 ffd4 	bl	8002c84 <HAL_RCC_OscConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ce2:	f000 f827 	bl	8000d34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce6:	230f      	movs	r3, #15
 8000ce8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2102      	movs	r1, #2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f002 fa3e 	bl	8003184 <HAL_RCC_ClockConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d0e:	f000 f811 	bl	8000d34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d12:	2310      	movs	r3, #16
 8000d14:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 fb9b 	bl	8003458 <HAL_RCCEx_PeriphCLKConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000d28:	f000 f804 	bl	8000d34 <Error_Handler>
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	3750      	adds	r7, #80	; 0x50
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <HAL_MspInit+0x6c>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	4a18      	ldr	r2, [pc, #96]	; (8000dac <HAL_MspInit+0x6c>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6193      	str	r3, [r2, #24]
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <HAL_MspInit+0x6c>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <HAL_MspInit+0x6c>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	4a12      	ldr	r2, [pc, #72]	; (8000dac <HAL_MspInit+0x6c>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	61d3      	str	r3, [r2, #28]
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <HAL_MspInit+0x6c>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2005      	movs	r0, #5
 8000d7c:	f000 fa55 	bl	800122a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000d80:	2005      	movs	r0, #5
 8000d82:	f000 fa6e 	bl	8001262 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_MspInit+0x70>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_MspInit+0x70>)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010000 	.word	0x40010000

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <HardFault_Handler+0x4>

08000dc6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <MemManage_Handler+0x4>

08000dcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <BusFault_Handler+0x4>

08000dd2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <UsageFault_Handler+0x4>

08000dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e00:	f000 f8fe 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000e1a:	f000 fce0 	bl	80017de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000bf4 	.word	0x20000bf4

08000e28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	e00a      	b.n	8000e50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e3a:	f3af 8000 	nop.w
 8000e3e:	4601      	mov	r1, r0
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	60ba      	str	r2, [r7, #8]
 8000e46:	b2ca      	uxtb	r2, r1
 8000e48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dbf0      	blt.n	8000e3a <_read+0x12>
	}

return len;
 8000e58:	687b      	ldr	r3, [r7, #4]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
	return -1;
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e88:	605a      	str	r2, [r3, #4]
	return 0;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <_isatty>:

int _isatty(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b085      	sub	sp, #20
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
	return 0;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
	...

08000ec4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <_sbrk+0x50>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_sbrk+0x16>
		heap_end = &end;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <_sbrk+0x50>)
 8000ed6:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <_sbrk+0x54>)
 8000ed8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <_sbrk+0x50>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <_sbrk+0x50>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	466a      	mov	r2, sp
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d907      	bls.n	8000efe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000eee:	f006 fc37 	bl	8007760 <__errno>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	230c      	movs	r3, #12
 8000ef6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8000efc:	e006      	b.n	8000f0c <_sbrk+0x48>
	}

	heap_end += incr;
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <_sbrk+0x50>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a03      	ldr	r2, [pc, #12]	; (8000f14 <_sbrk+0x50>)
 8000f08:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000036c 	.word	0x2000036c
 8000f18:	20000ee8 	.word	0x20000ee8

08000f1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f28:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f2a:	e003      	b.n	8000f34 <LoopCopyDataInit>

08000f2c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f2e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f30:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f32:	3104      	adds	r1, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f34:	480a      	ldr	r0, [pc, #40]	; (8000f60 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f38:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f3a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f3c:	d3f6      	bcc.n	8000f2c <CopyDataInit>
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f40:	e002      	b.n	8000f48 <LoopFillZerobss>

08000f42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f44:	f842 3b04 	str.w	r3, [r2], #4

08000f48 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f4a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f4c:	d3f9      	bcc.n	8000f42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f4e:	f7ff ffe5 	bl	8000f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f52:	f006 fc0b 	bl	800776c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f56:	f7ff fe61 	bl	8000c1c <main>
  bx lr
 8000f5a:	4770      	bx	lr
  ldr r3, =_sidata
 8000f5c:	0800bf90 	.word	0x0800bf90
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f64:	2000034c 	.word	0x2000034c
  ldr r2, =_sbss
 8000f68:	2000034c 	.word	0x2000034c
  ldr r3, = _ebss
 8000f6c:	20000ee4 	.word	0x20000ee4

08000f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC1_2_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_Init+0x28>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_Init+0x28>)
 8000f7e:	f043 0310 	orr.w	r3, r3, #16
 8000f82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f000 f945 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 f808 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f7ff fed6 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40022000 	.word	0x40022000

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x58>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f95d 	bl	800127e <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00e      	b.n	8000fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d80a      	bhi.n	8000fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f000 f925 	bl	800122a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <HAL_InitTick+0x5c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000004 	.word	0x20000004

08001000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_IncTick+0x1c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_IncTick+0x20>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a03      	ldr	r2, [pc, #12]	; (8001020 <HAL_IncTick+0x20>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	20000008 	.word	0x20000008
 8001020:	20000664 	.word	0x20000664

08001024 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b02      	ldr	r3, [pc, #8]	; (8001034 <HAL_GetTick+0x10>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	20000664 	.word	0x20000664

08001038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001040:	f7ff fff0 	bl	8001024 <HAL_GetTick>
 8001044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001050:	d005      	beq.n	800105e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_Delay+0x40>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800105e:	bf00      	nop
 8001060:	f7ff ffe0 	bl	8001024 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	429a      	cmp	r2, r3
 800106e:	d8f7      	bhi.n	8001060 <HAL_Delay+0x28>
  {
  }
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000008 	.word	0x20000008

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4906      	ldr	r1, [pc, #24]	; (8001114 <__NVIC_EnableIRQ+0x34>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f7ff ff90 	bl	8001118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff2d 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123c:	f7ff ff42 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f7ff ff90 	bl	800116c <NVIC_EncodePriority>
 800124c:	4602      	mov	r2, r0
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff5f 	bl	8001118 <__NVIC_SetPriority>
}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff35 	bl	80010e0 <__NVIC_EnableIRQ>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffa2 	bl	80011d0 <SysTick_Config>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001298:	b480      	push	{r7}
 800129a:	b08b      	sub	sp, #44	; 0x2c
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012aa:	e127      	b.n	80014fc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012ac:	2201      	movs	r2, #1
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	69fa      	ldr	r2, [r7, #28]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	f040 8116 	bne.w	80014f6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b12      	cmp	r3, #18
 80012d0:	d034      	beq.n	800133c <HAL_GPIO_Init+0xa4>
 80012d2:	2b12      	cmp	r3, #18
 80012d4:	d80d      	bhi.n	80012f2 <HAL_GPIO_Init+0x5a>
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d02b      	beq.n	8001332 <HAL_GPIO_Init+0x9a>
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d804      	bhi.n	80012e8 <HAL_GPIO_Init+0x50>
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d031      	beq.n	8001346 <HAL_GPIO_Init+0xae>
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d01c      	beq.n	8001320 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012e6:	e048      	b.n	800137a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	d043      	beq.n	8001374 <HAL_GPIO_Init+0xdc>
 80012ec:	2b11      	cmp	r3, #17
 80012ee:	d01b      	beq.n	8001328 <HAL_GPIO_Init+0x90>
          break;
 80012f0:	e043      	b.n	800137a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012f2:	4a89      	ldr	r2, [pc, #548]	; (8001518 <HAL_GPIO_Init+0x280>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d026      	beq.n	8001346 <HAL_GPIO_Init+0xae>
 80012f8:	4a87      	ldr	r2, [pc, #540]	; (8001518 <HAL_GPIO_Init+0x280>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d806      	bhi.n	800130c <HAL_GPIO_Init+0x74>
 80012fe:	4a87      	ldr	r2, [pc, #540]	; (800151c <HAL_GPIO_Init+0x284>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d020      	beq.n	8001346 <HAL_GPIO_Init+0xae>
 8001304:	4a86      	ldr	r2, [pc, #536]	; (8001520 <HAL_GPIO_Init+0x288>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d01d      	beq.n	8001346 <HAL_GPIO_Init+0xae>
          break;
 800130a:	e036      	b.n	800137a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800130c:	4a85      	ldr	r2, [pc, #532]	; (8001524 <HAL_GPIO_Init+0x28c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d019      	beq.n	8001346 <HAL_GPIO_Init+0xae>
 8001312:	4a85      	ldr	r2, [pc, #532]	; (8001528 <HAL_GPIO_Init+0x290>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d016      	beq.n	8001346 <HAL_GPIO_Init+0xae>
 8001318:	4a84      	ldr	r2, [pc, #528]	; (800152c <HAL_GPIO_Init+0x294>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d013      	beq.n	8001346 <HAL_GPIO_Init+0xae>
          break;
 800131e:	e02c      	b.n	800137a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	623b      	str	r3, [r7, #32]
          break;
 8001326:	e028      	b.n	800137a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	3304      	adds	r3, #4
 800132e:	623b      	str	r3, [r7, #32]
          break;
 8001330:	e023      	b.n	800137a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	3308      	adds	r3, #8
 8001338:	623b      	str	r3, [r7, #32]
          break;
 800133a:	e01e      	b.n	800137a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	330c      	adds	r3, #12
 8001342:	623b      	str	r3, [r7, #32]
          break;
 8001344:	e019      	b.n	800137a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800134e:	2304      	movs	r3, #4
 8001350:	623b      	str	r3, [r7, #32]
          break;
 8001352:	e012      	b.n	800137a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d105      	bne.n	8001368 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800135c:	2308      	movs	r3, #8
 800135e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	611a      	str	r2, [r3, #16]
          break;
 8001366:	e008      	b.n	800137a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001368:	2308      	movs	r3, #8
 800136a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	615a      	str	r2, [r3, #20]
          break;
 8001372:	e002      	b.n	800137a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
          break;
 8001378:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	2bff      	cmp	r3, #255	; 0xff
 800137e:	d801      	bhi.n	8001384 <HAL_GPIO_Init+0xec>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	e001      	b.n	8001388 <HAL_GPIO_Init+0xf0>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3304      	adds	r3, #4
 8001388:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	2bff      	cmp	r3, #255	; 0xff
 800138e:	d802      	bhi.n	8001396 <HAL_GPIO_Init+0xfe>
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	e002      	b.n	800139c <HAL_GPIO_Init+0x104>
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	3b08      	subs	r3, #8
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	210f      	movs	r1, #15
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	401a      	ands	r2, r3
 80013ae:	6a39      	ldr	r1, [r7, #32]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	431a      	orrs	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 8096 	beq.w	80014f6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013ca:	4b59      	ldr	r3, [pc, #356]	; (8001530 <HAL_GPIO_Init+0x298>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	4a58      	ldr	r2, [pc, #352]	; (8001530 <HAL_GPIO_Init+0x298>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6193      	str	r3, [r2, #24]
 80013d6:	4b56      	ldr	r3, [pc, #344]	; (8001530 <HAL_GPIO_Init+0x298>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013e2:	4a54      	ldr	r2, [pc, #336]	; (8001534 <HAL_GPIO_Init+0x29c>)
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	3302      	adds	r3, #2
 80013ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	220f      	movs	r2, #15
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4013      	ands	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4b      	ldr	r2, [pc, #300]	; (8001538 <HAL_GPIO_Init+0x2a0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d013      	beq.n	8001436 <HAL_GPIO_Init+0x19e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4a      	ldr	r2, [pc, #296]	; (800153c <HAL_GPIO_Init+0x2a4>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d00d      	beq.n	8001432 <HAL_GPIO_Init+0x19a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a49      	ldr	r2, [pc, #292]	; (8001540 <HAL_GPIO_Init+0x2a8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d007      	beq.n	800142e <HAL_GPIO_Init+0x196>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a48      	ldr	r2, [pc, #288]	; (8001544 <HAL_GPIO_Init+0x2ac>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d101      	bne.n	800142a <HAL_GPIO_Init+0x192>
 8001426:	2303      	movs	r3, #3
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x1a0>
 800142a:	2304      	movs	r3, #4
 800142c:	e004      	b.n	8001438 <HAL_GPIO_Init+0x1a0>
 800142e:	2302      	movs	r3, #2
 8001430:	e002      	b.n	8001438 <HAL_GPIO_Init+0x1a0>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_GPIO_Init+0x1a0>
 8001436:	2300      	movs	r3, #0
 8001438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800143a:	f002 0203 	and.w	r2, r2, #3
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4093      	lsls	r3, r2
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001448:	493a      	ldr	r1, [pc, #232]	; (8001534 <HAL_GPIO_Init+0x29c>)
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d006      	beq.n	8001470 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001462:	4b39      	ldr	r3, [pc, #228]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	4938      	ldr	r1, [pc, #224]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]
 800146e:	e006      	b.n	800147e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001470:	4b35      	ldr	r3, [pc, #212]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	43db      	mvns	r3, r3
 8001478:	4933      	ldr	r1, [pc, #204]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 800147a:	4013      	ands	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d006      	beq.n	8001498 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800148a:	4b2f      	ldr	r3, [pc, #188]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	492e      	ldr	r1, [pc, #184]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	604b      	str	r3, [r1, #4]
 8001496:	e006      	b.n	80014a6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001498:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	43db      	mvns	r3, r3
 80014a0:	4929      	ldr	r1, [pc, #164]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d006      	beq.n	80014c0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014b2:	4b25      	ldr	r3, [pc, #148]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	4924      	ldr	r1, [pc, #144]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	608b      	str	r3, [r1, #8]
 80014be:	e006      	b.n	80014ce <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	491f      	ldr	r1, [pc, #124]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	491a      	ldr	r1, [pc, #104]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	60cb      	str	r3, [r1, #12]
 80014e6:	e006      	b.n	80014f6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	4915      	ldr	r1, [pc, #84]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	3301      	adds	r3, #1
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	fa22 f303 	lsr.w	r3, r2, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	f47f aed0 	bne.w	80012ac <HAL_GPIO_Init+0x14>
  }
}
 800150c:	bf00      	nop
 800150e:	372c      	adds	r7, #44	; 0x2c
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	10210000 	.word	0x10210000
 800151c:	10110000 	.word	0x10110000
 8001520:	10120000 	.word	0x10120000
 8001524:	10310000 	.word	0x10310000
 8001528:	10320000 	.word	0x10320000
 800152c:	10220000 	.word	0x10220000
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000
 8001538:	40010800 	.word	0x40010800
 800153c:	40010c00 	.word	0x40010c00
 8001540:	40011000 	.word	0x40011000
 8001544:	40011400 	.word	0x40011400
 8001548:	40010400 	.word	0x40010400

0800154c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
 8001558:	4613      	mov	r3, r2
 800155a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800155c:	787b      	ldrb	r3, [r7, #1]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001562:	887a      	ldrh	r2, [r7, #2]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001568:	e003      	b.n	8001572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	041a      	lsls	r2, r3, #16
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	611a      	str	r2, [r3, #16]
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	b08b      	sub	sp, #44	; 0x2c
 8001580:	af06      	add	r7, sp, #24
 8001582:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e0fd      	b.n	800178a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d106      	bne.n	80015a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f005 fe2e 	bl	8007204 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2203      	movs	r2, #3
 80015ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f002 f82b 	bl	8003610 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	687e      	ldr	r6, [r7, #4]
 80015c2:	466d      	mov	r5, sp
 80015c4:	f106 0410 	add.w	r4, r6, #16
 80015c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	602b      	str	r3, [r5, #0]
 80015d0:	1d33      	adds	r3, r6, #4
 80015d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d4:	6838      	ldr	r0, [r7, #0]
 80015d6:	f001 fff5 	bl	80035c4 <USB_CoreInit>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0ce      	b.n	800178a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 f826 	bl	8003644 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e04c      	b.n	8001698 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	440b      	add	r3, r1
 800160e:	3301      	adds	r3, #1
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	440b      	add	r3, r1
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001628:	7bfa      	ldrb	r2, [r7, #15]
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	b298      	uxth	r0, r3
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	440b      	add	r3, r1
 800163a:	3336      	adds	r3, #54	; 0x36
 800163c:	4602      	mov	r2, r0
 800163e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	440b      	add	r3, r1
 8001650:	3303      	adds	r3, #3
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001656:	7bfa      	ldrb	r2, [r7, #15]
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	440b      	add	r3, r1
 8001664:	3338      	adds	r3, #56	; 0x38
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	440b      	add	r3, r1
 8001678:	333c      	adds	r3, #60	; 0x3c
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800167e:	7bfa      	ldrb	r2, [r7, #15]
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	440b      	add	r3, r1
 800168c:	3340      	adds	r3, #64	; 0x40
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	3301      	adds	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d3ad      	bcc.n	80015fe <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	e044      	b.n	8001732 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	440b      	add	r3, r1
 80016b6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	440b      	add	r3, r1
 80016cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016d4:	7bfa      	ldrb	r2, [r7, #15]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	440b      	add	r3, r1
 80016e2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016ea:	7bfa      	ldrb	r2, [r7, #15]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	440b      	add	r3, r1
 80016f8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001716:	7bfa      	ldrb	r2, [r7, #15]
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	440b      	add	r3, r1
 8001724:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	3301      	adds	r3, #1
 8001730:	73fb      	strb	r3, [r7, #15]
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	429a      	cmp	r2, r3
 800173a:	d3b5      	bcc.n	80016a8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	687e      	ldr	r6, [r7, #4]
 8001744:	466d      	mov	r5, sp
 8001746:	f106 0410 	add.w	r4, r6, #16
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	602b      	str	r3, [r5, #0]
 8001752:	1d33      	adds	r3, r6, #4
 8001754:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001756:	6838      	ldr	r0, [r7, #0]
 8001758:	f001 ff80 	bl	800365c <USB_DevInit>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2202      	movs	r2, #2
 8001766:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e00d      	b.n	800178a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f003 ff1a 	bl	80055bc <USB_DevDisconnect>

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001792 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_PCD_Start+0x16>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e016      	b.n	80017d6 <HAL_PCD_Start+0x44>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f001 ff15 	bl	80035e4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80017ba:	2101      	movs	r1, #1
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f005 ff94 	bl	80076ea <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 feee 	bl	80055a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b088      	sub	sp, #32
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f003 fef0 	bl	80055d0 <USB_ReadInterrupts>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017fa:	d102      	bne.n	8001802 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fb61 	bl	8001ec4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f003 fee2 	bl	80055d0 <USB_ReadInterrupts>
 800180c:	4603      	mov	r3, r0
 800180e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001816:	d112      	bne.n	800183e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001820:	b29a      	uxth	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800182a:	b292      	uxth	r2, r2
 800182c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f005 fd62 	bl	80072fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001836:	2100      	movs	r1, #0
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f925 	bl	8001a88 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f003 fec4 	bl	80055d0 <USB_ReadInterrupts>
 8001848:	4603      	mov	r3, r0
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001852:	d10b      	bne.n	800186c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800185c:	b29a      	uxth	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001866:	b292      	uxth	r2, r2
 8001868:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f003 fead 	bl	80055d0 <USB_ReadInterrupts>
 8001876:	4603      	mov	r3, r0
 8001878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800187c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001880:	d10b      	bne.n	800189a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800188a:	b29a      	uxth	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001894:	b292      	uxth	r2, r2
 8001896:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 fe96 	bl	80055d0 <USB_ReadInterrupts>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018ae:	d126      	bne.n	80018fe <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0204 	bic.w	r2, r2, #4
 80018c2:	b292      	uxth	r2, r2
 80018c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0208 	bic.w	r2, r2, #8
 80018da:	b292      	uxth	r2, r2
 80018dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f005 fd43 	bl	800736c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018f8:	b292      	uxth	r2, r2
 80018fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f003 fe64 	bl	80055d0 <USB_ReadInterrupts>
 8001908:	4603      	mov	r3, r0
 800190a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800190e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001912:	f040 8084 	bne.w	8001a1e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001916:	2300      	movs	r3, #0
 8001918:	77fb      	strb	r3, [r7, #31]
 800191a:	e011      	b.n	8001940 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	7ffb      	ldrb	r3, [r7, #31]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	441a      	add	r2, r3
 8001928:	7ffb      	ldrb	r3, [r7, #31]
 800192a:	8812      	ldrh	r2, [r2, #0]
 800192c:	b292      	uxth	r2, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	f107 0120 	add.w	r1, r7, #32
 8001934:	440b      	add	r3, r1
 8001936:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800193a:	7ffb      	ldrb	r3, [r7, #31]
 800193c:	3301      	adds	r3, #1
 800193e:	77fb      	strb	r3, [r7, #31]
 8001940:	7ffb      	ldrb	r3, [r7, #31]
 8001942:	2b07      	cmp	r3, #7
 8001944:	d9ea      	bls.n	800191c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800194e:	b29a      	uxth	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 0201 	orr.w	r2, r2, #1
 8001958:	b292      	uxth	r2, r2
 800195a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001966:	b29a      	uxth	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0201 	bic.w	r2, r2, #1
 8001970:	b292      	uxth	r2, r2
 8001972:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001976:	bf00      	nop
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001980:	b29b      	uxth	r3, r3
 8001982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f6      	beq.n	8001978 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001992:	b29a      	uxth	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800199c:	b292      	uxth	r2, r2
 800199e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	77fb      	strb	r3, [r7, #31]
 80019a6:	e010      	b.n	80019ca <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80019a8:	7ffb      	ldrb	r3, [r7, #31]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	4611      	mov	r1, r2
 80019b0:	7ffa      	ldrb	r2, [r7, #31]
 80019b2:	0092      	lsls	r2, r2, #2
 80019b4:	440a      	add	r2, r1
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	f107 0120 	add.w	r1, r7, #32
 80019bc:	440b      	add	r3, r1
 80019be:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80019c2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80019c4:	7ffb      	ldrb	r3, [r7, #31]
 80019c6:	3301      	adds	r3, #1
 80019c8:	77fb      	strb	r3, [r7, #31]
 80019ca:	7ffb      	ldrb	r3, [r7, #31]
 80019cc:	2b07      	cmp	r3, #7
 80019ce:	d9eb      	bls.n	80019a8 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019d8:	b29a      	uxth	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0208 	orr.w	r2, r2, #8
 80019e2:	b292      	uxth	r2, r2
 80019e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019fa:	b292      	uxth	r2, r2
 80019fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0204 	orr.w	r2, r2, #4
 8001a12:	b292      	uxth	r2, r2
 8001a14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f005 fc8d 	bl	8007338 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f003 fdd4 	bl	80055d0 <USB_ReadInterrupts>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a32:	d10e      	bne.n	8001a52 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a46:	b292      	uxth	r2, r2
 8001a48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f005 fc46 	bl	80072de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 fdba 	bl	80055d0 <USB_ReadInterrupts>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a66:	d10b      	bne.n	8001a80 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a7a:	b292      	uxth	r2, r2
 8001a7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001a80:	bf00      	nop
 8001a82:	3720      	adds	r7, #32
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d101      	bne.n	8001aa2 <HAL_PCD_SetAddress+0x1a>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e013      	b.n	8001aca <HAL_PCD_SetAddress+0x42>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	78fa      	ldrb	r2, [r7, #3]
 8001aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	78fa      	ldrb	r2, [r7, #3]
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 fd61 	bl	8005582 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	4608      	mov	r0, r1
 8001adc:	4611      	mov	r1, r2
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	70fb      	strb	r3, [r7, #3]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	803b      	strh	r3, [r7, #0]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	da0e      	bge.n	8001b16 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2201      	movs	r2, #1
 8001b12:	705a      	strb	r2, [r3, #1]
 8001b14:	e00e      	b.n	8001b34 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	f003 0207 	and.w	r2, r3, #7
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b40:	883a      	ldrh	r2, [r7, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	78ba      	ldrb	r2, [r7, #2]
 8001b4a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	785b      	ldrb	r3, [r3, #1]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d004      	beq.n	8001b5e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b5e:	78bb      	ldrb	r3, [r7, #2]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d102      	bne.n	8001b6a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_PCD_EP_Open+0xa6>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e00e      	b.n	8001b96 <HAL_PCD_EP_Open+0xc4>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68f9      	ldr	r1, [r7, #12]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 fd88 	bl	800369c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001b94:	7afb      	ldrb	r3, [r7, #11]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b084      	sub	sp, #16
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001baa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	da0e      	bge.n	8001bd0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bb2:	78fb      	ldrb	r3, [r7, #3]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	705a      	strb	r2, [r3, #1]
 8001bce:	e00e      	b.n	8001bee <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	f003 0207 	and.w	r2, r3, #7
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_PCD_EP_Close+0x6a>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e00e      	b.n	8001c26 <HAL_PCD_EP_Close+0x88>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68f9      	ldr	r1, [r7, #12]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 f8aa 	bl	8003d70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c3e:	7afb      	ldrb	r3, [r7, #11]
 8001c40:	f003 0207 	and.w	r2, r3, #7
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2200      	movs	r2, #0
 8001c66:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c6e:	7afb      	ldrb	r3, [r7, #11]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c7a:	7afb      	ldrb	r3, [r7, #11]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d106      	bne.n	8001c92 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6979      	ldr	r1, [r7, #20]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f002 fa5c 	bl	8004148 <USB_EPStartXfer>
 8001c90:	e005      	b.n	8001c9e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6979      	ldr	r1, [r7, #20]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f002 fa55 	bl	8004148 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	f003 0207 	and.w	r2, r3, #7
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	440b      	add	r3, r1
 8001cc6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce6:	7afb      	ldrb	r3, [r7, #11]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d22:	7afb      	ldrb	r3, [r7, #11]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d2e:	7afb      	ldrb	r3, [r7, #11]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d106      	bne.n	8001d46 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6979      	ldr	r1, [r7, #20]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f002 fa02 	bl	8004148 <USB_EPStartXfer>
 8001d44:	e005      	b.n	8001d52 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6979      	ldr	r1, [r7, #20]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f002 f9fb 	bl	8004148 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	f003 0207 	and.w	r2, r3, #7
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d901      	bls.n	8001d7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e04c      	b.n	8001e14 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	da0e      	bge.n	8001da0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	705a      	strb	r2, [r3, #1]
 8001d9e:	e00c      	b.n	8001dba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001da0:	78fa      	ldrb	r2, [r7, #3]
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_PCD_EP_SetStall+0x7e>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e01c      	b.n	8001e14 <HAL_PCD_EP_SetStall+0xb8>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68f9      	ldr	r1, [r7, #12]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 facd 	bl	8005388 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d108      	bne.n	8001e0a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001e02:	4619      	mov	r1, r3
 8001e04:	4610      	mov	r0, r2
 8001e06:	f003 fbf2 	bl	80055ee <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f003 020f 	and.w	r2, r3, #15
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d901      	bls.n	8001e3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e040      	b.n	8001ebc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	da0e      	bge.n	8001e60 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	705a      	strb	r2, [r3, #1]
 8001e5e:	e00e      	b.n	8001e7e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	f003 0207 	and.w	r2, r3, #7
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_PCD_EP_ClrStall+0x82>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e00e      	b.n	8001ebc <HAL_PCD_EP_ClrStall+0xa0>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68f9      	ldr	r1, [r7, #12]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f003 fabb 	bl	8005428 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08e      	sub	sp, #56	; 0x38
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ecc:	e2df      	b.n	800248e <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ed8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001ee4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f040 8158 	bne.w	800219e <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001eee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d152      	bne.n	8001f9e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f08:	81fb      	strh	r3, [r7, #14]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	89fb      	ldrh	r3, [r7, #14]
 8001f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3328      	adds	r3, #40	; 0x28
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	3302      	adds	r3, #2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	441a      	add	r2, r3
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f005 f9a3 	bl	80072aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 828e 	beq.w	800248e <PCD_EP_ISR_Handler+0x5ca>
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f040 8289 	bne.w	800248e <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	b292      	uxth	r2, r2
 8001f90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f9c:	e277      	b.n	800248e <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001fae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d034      	beq.n	8002022 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4413      	add	r3, r2
 8001fcc:	3306      	adds	r3, #6
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	f003 fb48 	bl	800568c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	b29a      	uxth	r2, r3
 8002004:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002008:	4013      	ands	r3, r2
 800200a:	823b      	strh	r3, [r7, #16]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	8a3a      	ldrh	r2, [r7, #16]
 8002012:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002016:	b292      	uxth	r2, r2
 8002018:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f005 f918 	bl	8007250 <HAL_PCD_SetupStageCallback>
 8002020:	e235      	b.n	800248e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002022:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002026:	2b00      	cmp	r3, #0
 8002028:	f280 8231 	bge.w	800248e <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	b29a      	uxth	r2, r3
 8002034:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002038:	4013      	ands	r3, r2
 800203a:	83bb      	strh	r3, [r7, #28]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	8bba      	ldrh	r2, [r7, #28]
 8002042:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002046:	b292      	uxth	r2, r2
 8002048:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002052:	b29b      	uxth	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4413      	add	r3, r2
 800205e:	3306      	adds	r3, #6
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	4413      	add	r3, r2
 8002068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d019      	beq.n	80020b2 <PCD_EP_ISR_Handler+0x1ee>
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d015      	beq.n	80020b2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	6959      	ldr	r1, [r3, #20]
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002096:	b29b      	uxth	r3, r3
 8002098:	f003 faf8 	bl	800568c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	441a      	add	r2, r3
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80020aa:	2100      	movs	r1, #0
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f005 f8e1 	bl	8007274 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	61bb      	str	r3, [r7, #24]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	461a      	mov	r2, r3
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	4413      	add	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d112      	bne.n	8002100 <PCD_EP_ISR_Handler+0x23c>
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	801a      	strh	r2, [r3, #0]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	801a      	strh	r2, [r3, #0]
 80020fe:	e02f      	b.n	8002160 <PCD_EP_ISR_Handler+0x29c>
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b3e      	cmp	r3, #62	; 0x3e
 8002106:	d813      	bhi.n	8002130 <PCD_EP_ISR_Handler+0x26c>
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	085b      	lsrs	r3, r3, #1
 800210e:	633b      	str	r3, [r7, #48]	; 0x30
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <PCD_EP_ISR_Handler+0x25e>
 800211c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211e:	3301      	adds	r3, #1
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
 8002122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002124:	b29b      	uxth	r3, r3
 8002126:	029b      	lsls	r3, r3, #10
 8002128:	b29a      	uxth	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	801a      	strh	r2, [r3, #0]
 800212e:	e017      	b.n	8002160 <PCD_EP_ISR_Handler+0x29c>
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	633b      	str	r3, [r7, #48]	; 0x30
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	2b00      	cmp	r3, #0
 8002142:	d102      	bne.n	800214a <PCD_EP_ISR_Handler+0x286>
 8002144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002146:	3b01      	subs	r3, #1
 8002148:	633b      	str	r3, [r7, #48]	; 0x30
 800214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214c:	b29b      	uxth	r3, r3
 800214e:	029b      	lsls	r3, r3, #10
 8002150:	b29b      	uxth	r3, r3
 8002152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800215a:	b29a      	uxth	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800216c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002170:	827b      	strh	r3, [r7, #18]
 8002172:	8a7b      	ldrh	r3, [r7, #18]
 8002174:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002178:	827b      	strh	r3, [r7, #18]
 800217a:	8a7b      	ldrh	r3, [r7, #18]
 800217c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002180:	827b      	strh	r3, [r7, #18]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	8a7b      	ldrh	r3, [r7, #18]
 8002188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800218c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002198:	b29b      	uxth	r3, r3
 800219a:	8013      	strh	r3, [r2, #0]
 800219c:	e177      	b.n	800248e <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021b0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f280 80ea 	bge.w	800238e <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021d0:	4013      	ands	r3, r2
 80021d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021e8:	b292      	uxth	r2, r2
 80021ea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021ec:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	7b1b      	ldrb	r3, [r3, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d122      	bne.n	8002250 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002212:	b29b      	uxth	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	3306      	adds	r3, #6
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	4413      	add	r3, r2
 8002228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002232:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002234:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8087 	beq.w	800234a <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	6959      	ldr	r1, [r3, #20]
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	88da      	ldrh	r2, [r3, #6]
 8002248:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800224a:	f003 fa1f 	bl	800568c <USB_ReadPMA>
 800224e:	e07c      	b.n	800234a <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	78db      	ldrb	r3, [r3, #3]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d108      	bne.n	800226a <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002258:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800225a:	461a      	mov	r2, r3
 800225c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f923 	bl	80024aa <HAL_PCD_EP_DB_Receive>
 8002264:	4603      	mov	r3, r0
 8002266:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002268:	e06f      	b.n	800234a <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002284:	847b      	strh	r3, [r7, #34]	; 0x22
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	441a      	add	r2, r3
 8002294:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800229a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800229e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d021      	beq.n	8002308 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	3302      	adds	r3, #2
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ec:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80022ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d02a      	beq.n	800234a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	6959      	ldr	r1, [r3, #20]
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	891a      	ldrh	r2, [r3, #8]
 8002300:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002302:	f003 f9c3 	bl	800568c <USB_ReadPMA>
 8002306:	e020      	b.n	800234a <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002310:	b29b      	uxth	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	3306      	adds	r3, #6
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002330:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002332:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	6959      	ldr	r1, [r3, #20]
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	895a      	ldrh	r2, [r3, #10]
 8002344:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002346:	f003 f9a1 	bl	800568c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	69da      	ldr	r2, [r3, #28]
 800234e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002350:	441a      	add	r2, r3
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800235c:	441a      	add	r2, r3
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d004      	beq.n	8002374 <PCD_EP_ISR_Handler+0x4b0>
 800236a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	429a      	cmp	r2, r3
 8002372:	d206      	bcs.n	8002382 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	4619      	mov	r1, r3
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f004 ff7a 	bl	8007274 <HAL_PCD_DataOutStageCallback>
 8002380:	e005      	b.n	800238e <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002388:	4618      	mov	r0, r3
 800238a:	f001 fedd 	bl	8004148 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800238e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002394:	2b00      	cmp	r3, #0
 8002396:	d07a      	beq.n	800248e <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002398:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c6:	843b      	strh	r3, [r7, #32]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	441a      	add	r2, r3
 80023d6:	8c3b      	ldrh	r3, [r7, #32]
 80023d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	78db      	ldrb	r3, [r3, #3]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d108      	bne.n	80023fe <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d146      	bne.n	8002482 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80023f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d141      	bne.n	8002482 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002406:	b29b      	uxth	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	3302      	adds	r3, #2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	4413      	add	r3, r2
 800241c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002426:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	699a      	ldr	r2, [r3, #24]
 800242c:	8bfb      	ldrh	r3, [r7, #30]
 800242e:	429a      	cmp	r2, r3
 8002430:	d906      	bls.n	8002440 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	8bfb      	ldrh	r3, [r7, #30]
 8002438:	1ad2      	subs	r2, r2, r3
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	619a      	str	r2, [r3, #24]
 800243e:	e002      	b.n	8002446 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	2200      	movs	r2, #0
 8002444:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4619      	mov	r1, r3
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f004 ff28 	bl	80072aa <HAL_PCD_DataInStageCallback>
 800245a:	e018      	b.n	800248e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	8bfb      	ldrh	r3, [r7, #30]
 8002462:	441a      	add	r2, r3
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	8bfb      	ldrh	r3, [r7, #30]
 800246e:	441a      	add	r2, r3
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800247a:	4618      	mov	r0, r3
 800247c:	f001 fe64 	bl	8004148 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002480:	e005      	b.n	800248e <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002482:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002484:	461a      	mov	r2, r3
 8002486:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f91b 	bl	80026c4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002496:	b29b      	uxth	r3, r3
 8002498:	b21b      	sxth	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	f6ff ad17 	blt.w	8001ece <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3738      	adds	r7, #56	; 0x38
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b088      	sub	sp, #32
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	4613      	mov	r3, r2
 80024b6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d07e      	beq.n	80025c0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	3302      	adds	r3, #2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	699a      	ldr	r2, [r3, #24]
 80024f0:	8b7b      	ldrh	r3, [r7, #26]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d306      	bcc.n	8002504 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	8b7b      	ldrh	r3, [r7, #26]
 80024fc:	1ad2      	subs	r2, r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	619a      	str	r2, [r3, #24]
 8002502:	e002      	b.n	800250a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2200      	movs	r2, #0
 8002508:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d123      	bne.n	800255a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	b29b      	uxth	r3, r3
 8002524:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252c:	833b      	strh	r3, [r7, #24]
 800252e:	8b3b      	ldrh	r3, [r7, #24]
 8002530:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002534:	833b      	strh	r3, [r7, #24]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	441a      	add	r2, r3
 8002544:	8b3b      	ldrh	r3, [r7, #24]
 8002546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800254a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800254e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002556:	b29b      	uxth	r3, r3
 8002558:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01f      	beq.n	80025a4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800257a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257e:	82fb      	strh	r3, [r7, #22]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	441a      	add	r2, r3
 800258e:	8afb      	ldrh	r3, [r7, #22]
 8002590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800259c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025a4:	8b7b      	ldrh	r3, [r7, #26]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 8087 	beq.w	80026ba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	6959      	ldr	r1, [r3, #20]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	891a      	ldrh	r2, [r3, #8]
 80025b8:	8b7b      	ldrh	r3, [r7, #26]
 80025ba:	f003 f867 	bl	800568c <USB_ReadPMA>
 80025be:	e07c      	b.n	80026ba <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	461a      	mov	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	3306      	adds	r3, #6
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	8b7b      	ldrh	r3, [r7, #26]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d306      	bcc.n	8002602 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	8b7b      	ldrh	r3, [r7, #26]
 80025fa:	1ad2      	subs	r2, r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	619a      	str	r2, [r3, #24]
 8002600:	e002      	b.n	8002608 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2200      	movs	r2, #0
 8002606:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d123      	bne.n	8002658 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	b29b      	uxth	r3, r3
 8002622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800262a:	83fb      	strh	r3, [r7, #30]
 800262c:	8bfb      	ldrh	r3, [r7, #30]
 800262e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002632:	83fb      	strh	r3, [r7, #30]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	8bfb      	ldrh	r3, [r7, #30]
 8002644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800264c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002654:	b29b      	uxth	r3, r3
 8002656:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11f      	bne.n	80026a2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267c:	83bb      	strh	r3, [r7, #28]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	441a      	add	r2, r3
 800268c:	8bbb      	ldrh	r3, [r7, #28]
 800268e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800269a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800269e:	b29b      	uxth	r3, r3
 80026a0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026a2:	8b7b      	ldrh	r3, [r7, #26]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	6959      	ldr	r1, [r3, #20]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	895a      	ldrh	r2, [r3, #10]
 80026b4:	8b7b      	ldrh	r3, [r7, #26]
 80026b6:	f002 ffe9 	bl	800568c <USB_ReadPMA>
    }
  }

  return count;
 80026ba:	8b7b      	ldrh	r3, [r7, #26]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3720      	adds	r7, #32
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b092      	sub	sp, #72	; 0x48
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	4613      	mov	r3, r2
 80026d0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026d2:	88fb      	ldrh	r3, [r7, #6]
 80026d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 8132 	beq.w	8002942 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	3302      	adds	r3, #2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002706:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	699a      	ldr	r2, [r3, #24]
 800270c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800270e:	429a      	cmp	r2, r3
 8002710:	d906      	bls.n	8002720 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002718:	1ad2      	subs	r2, r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	619a      	str	r2, [r3, #24]
 800271e:	e002      	b.n	8002726 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2200      	movs	r2, #0
 8002724:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d12c      	bne.n	8002788 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	4619      	mov	r1, r3
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f004 fdb8 	bl	80072aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 822f 	beq.w	8002ba4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800275c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002760:	827b      	strh	r3, [r7, #18]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	441a      	add	r2, r3
 8002770:	8a7b      	ldrh	r3, [r7, #18]
 8002772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800277a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800277e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002782:	b29b      	uxth	r3, r3
 8002784:	8013      	strh	r3, [r2, #0]
 8002786:	e20d      	b.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d01f      	beq.n	80027d2 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ac:	84bb      	strh	r3, [r7, #36]	; 0x24
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	441a      	add	r2, r3
 80027bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027d8:	2b01      	cmp	r3, #1
 80027da:	f040 81e3 	bne.w	8002ba4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027e4:	441a      	add	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	69da      	ldr	r2, [r3, #28]
 80027ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027f0:	441a      	add	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	6a1a      	ldr	r2, [r3, #32]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d309      	bcc.n	8002816 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	6a1a      	ldr	r2, [r3, #32]
 800280c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280e:	1ad2      	subs	r2, r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	621a      	str	r2, [r3, #32]
 8002814:	e014      	b.n	8002840 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d106      	bne.n	800282c <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 800281e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002820:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800282a:	e009      	b.n	8002840 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2200      	movs	r2, #0
 800283e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	785b      	ldrb	r3, [r3, #1]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d155      	bne.n	80028f4 <HAL_PCD_EP_DB_Transmit+0x230>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002856:	b29b      	uxth	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4413      	add	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	011a      	lsls	r2, r3, #4
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4413      	add	r3, r2
 800286a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002872:	2b00      	cmp	r3, #0
 8002874:	d112      	bne.n	800289c <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002880:	b29a      	uxth	r2, r3
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	801a      	strh	r2, [r3, #0]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002894:	b29a      	uxth	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	801a      	strh	r2, [r3, #0]
 800289a:	e047      	b.n	800292c <HAL_PCD_EP_DB_Transmit+0x268>
 800289c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289e:	2b3e      	cmp	r3, #62	; 0x3e
 80028a0:	d811      	bhi.n	80028c6 <HAL_PCD_EP_DB_Transmit+0x202>
 80028a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a4:	085b      	lsrs	r3, r3, #1
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <HAL_PCD_EP_DB_Transmit+0x1f4>
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	3301      	adds	r3, #1
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	029b      	lsls	r3, r3, #10
 80028be:	b29a      	uxth	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	801a      	strh	r2, [r3, #0]
 80028c4:	e032      	b.n	800292c <HAL_PCD_EP_DB_Transmit+0x268>
 80028c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80028cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ce:	f003 031f 	and.w	r3, r3, #31
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <HAL_PCD_EP_DB_Transmit+0x218>
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	3b01      	subs	r3, #1
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
 80028dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028de:	b29b      	uxth	r3, r3
 80028e0:	029b      	lsls	r3, r3, #10
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	801a      	strh	r2, [r3, #0]
 80028f2:	e01b      	b.n	800292c <HAL_PCD_EP_DB_Transmit+0x268>
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	785b      	ldrb	r3, [r3, #1]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d117      	bne.n	800292c <HAL_PCD_EP_DB_Transmit+0x268>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	623b      	str	r3, [r7, #32]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290a:	b29b      	uxth	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	4413      	add	r3, r2
 8002912:	623b      	str	r3, [r7, #32]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	011a      	lsls	r2, r3, #4
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	4413      	add	r3, r2
 800291e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002922:	61fb      	str	r3, [r7, #28]
 8002924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002926:	b29a      	uxth	r2, r3
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	6959      	ldr	r1, [r3, #20]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	891a      	ldrh	r2, [r3, #8]
 8002938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293a:	b29b      	uxth	r3, r3
 800293c:	f002 fe62 	bl	8005604 <USB_WritePMA>
 8002940:	e130      	b.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294a:	b29b      	uxth	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	3306      	adds	r3, #6
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	4413      	add	r3, r2
 8002960:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800296a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	699a      	ldr	r2, [r3, #24]
 8002970:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002972:	429a      	cmp	r2, r3
 8002974:	d306      	bcc.n	8002984 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800297c:	1ad2      	subs	r2, r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	619a      	str	r2, [r3, #24]
 8002982:	e002      	b.n	800298a <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2200      	movs	r2, #0
 8002988:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d12c      	bne.n	80029ec <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	4619      	mov	r1, r3
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f004 fc86 	bl	80072aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f040 80fd 	bne.w	8002ba4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	441a      	add	r2, r3
 80029d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	8013      	strh	r3, [r2, #0]
 80029ea:	e0db      	b.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d11f      	bne.n	8002a36 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a10:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	441a      	add	r2, r3
 8002a20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	f040 80b1 	bne.w	8002ba4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a48:	441a      	add	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	69da      	ldr	r2, [r3, #28]
 8002a52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a54:	441a      	add	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	6a1a      	ldr	r2, [r3, #32]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d309      	bcc.n	8002a7a <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	6a1a      	ldr	r2, [r3, #32]
 8002a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a72:	1ad2      	subs	r2, r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	621a      	str	r2, [r3, #32]
 8002a78:	e014      	b.n	8002aa4 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002a82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a84:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a8e:	e009      	b.n	8002aa4 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	785b      	ldrb	r3, [r3, #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d155      	bne.n	8002b5e <HAL_PCD_EP_DB_Transmit+0x49a>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac6:	4413      	add	r3, r2
 8002ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	011a      	lsls	r2, r3, #4
 8002ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8002ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d112      	bne.n	8002b06 <HAL_PCD_EP_DB_Transmit+0x442>
 8002ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aee:	801a      	strh	r2, [r3, #0]
 8002af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b02:	801a      	strh	r2, [r3, #0]
 8002b04:	e044      	b.n	8002b90 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b08:	2b3e      	cmp	r3, #62	; 0x3e
 8002b0a:	d811      	bhi.n	8002b30 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0e:	085b      	lsrs	r3, r3, #1
 8002b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1e:	3301      	adds	r3, #1
 8002b20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	029b      	lsls	r3, r3, #10
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b2c:	801a      	strh	r2, [r3, #0]
 8002b2e:	e02f      	b.n	8002b90 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <HAL_PCD_EP_DB_Transmit+0x482>
 8002b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b42:	3b01      	subs	r3, #1
 8002b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	029b      	lsls	r3, r3, #10
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b5a:	801a      	strh	r2, [r3, #0]
 8002b5c:	e018      	b.n	8002b90 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	785b      	ldrb	r3, [r3, #1]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d114      	bne.n	8002b90 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b74:	4413      	add	r3, r2
 8002b76:	637b      	str	r3, [r7, #52]	; 0x34
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	011a      	lsls	r2, r3, #4
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b80:	4413      	add	r3, r2
 8002b82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30
 8002b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	6959      	ldr	r1, [r3, #20]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	895a      	ldrh	r2, [r3, #10]
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	f002 fd30 	bl	8005604 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bbe:	823b      	strh	r3, [r7, #16]
 8002bc0:	8a3b      	ldrh	r3, [r7, #16]
 8002bc2:	f083 0310 	eor.w	r3, r3, #16
 8002bc6:	823b      	strh	r3, [r7, #16]
 8002bc8:	8a3b      	ldrh	r3, [r7, #16]
 8002bca:	f083 0320 	eor.w	r3, r3, #32
 8002bce:	823b      	strh	r3, [r7, #16]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	441a      	add	r2, r3
 8002bde:	8a3b      	ldrh	r3, [r7, #16]
 8002be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3748      	adds	r7, #72	; 0x48
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b087      	sub	sp, #28
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	817b      	strh	r3, [r7, #10]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c10:	897b      	ldrh	r3, [r7, #10]
 8002c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00b      	beq.n	8002c34 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c1c:	897b      	ldrh	r3, [r7, #10]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	e009      	b.n	8002c48 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c34:	897a      	ldrh	r2, [r7, #10]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4413      	add	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c48:	893b      	ldrh	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d107      	bne.n	8002c5e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2200      	movs	r2, #0
 8002c52:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	80da      	strh	r2, [r3, #6]
 8002c5c:	e00b      	b.n	8002c76 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2201      	movs	r2, #1
 8002c62:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	0c1b      	lsrs	r3, r3, #16
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e26c      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8087 	beq.w	8002db2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca4:	4b92      	ldr	r3, [pc, #584]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d00c      	beq.n	8002cca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cb0:	4b8f      	ldr	r3, [pc, #572]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d112      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x5e>
 8002cbc:	4b8c      	ldr	r3, [pc, #560]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc8:	d10b      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cca:	4b89      	ldr	r3, [pc, #548]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d06c      	beq.n	8002db0 <HAL_RCC_OscConfig+0x12c>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d168      	bne.n	8002db0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e246      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cea:	d106      	bne.n	8002cfa <HAL_RCC_OscConfig+0x76>
 8002cec:	4b80      	ldr	r3, [pc, #512]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a7f      	ldr	r2, [pc, #508]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	e02e      	b.n	8002d58 <HAL_RCC_OscConfig+0xd4>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x98>
 8002d02:	4b7b      	ldr	r3, [pc, #492]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a7a      	ldr	r2, [pc, #488]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4b78      	ldr	r3, [pc, #480]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a77      	ldr	r2, [pc, #476]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e01d      	b.n	8002d58 <HAL_RCC_OscConfig+0xd4>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0xbc>
 8002d26:	4b72      	ldr	r3, [pc, #456]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a71      	ldr	r2, [pc, #452]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b6f      	ldr	r3, [pc, #444]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a6e      	ldr	r2, [pc, #440]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0xd4>
 8002d40:	4b6b      	ldr	r3, [pc, #428]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a6a      	ldr	r2, [pc, #424]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b68      	ldr	r3, [pc, #416]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a67      	ldr	r2, [pc, #412]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d013      	beq.n	8002d88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe f960 	bl	8001024 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d68:	f7fe f95c 	bl	8001024 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e1fa      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b5d      	ldr	r3, [pc, #372]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0xe4>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe f94c 	bl	8001024 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d90:	f7fe f948 	bl	8001024 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1e6      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	4b53      	ldr	r3, [pc, #332]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x10c>
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d063      	beq.n	8002e86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dbe:	4b4c      	ldr	r3, [pc, #304]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00b      	beq.n	8002de2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dca:	4b49      	ldr	r3, [pc, #292]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d11c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x18c>
 8002dd6:	4b46      	ldr	r3, [pc, #280]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d116      	bne.n	8002e10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de2:	4b43      	ldr	r3, [pc, #268]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_RCC_OscConfig+0x176>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d001      	beq.n	8002dfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e1ba      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfa:	4b3d      	ldr	r3, [pc, #244]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4939      	ldr	r1, [pc, #228]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	e03a      	b.n	8002e86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e18:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1e:	f7fe f901 	bl	8001024 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e26:	f7fe f8fd 	bl	8001024 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e19b      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	4b2d      	ldr	r3, [pc, #180]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4b2a      	ldr	r3, [pc, #168]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4927      	ldr	r1, [pc, #156]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]
 8002e58:	e015      	b.n	8002e86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5a:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fe f8e0 	bl	8001024 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e68:	f7fe f8dc 	bl	8001024 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e17a      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d03a      	beq.n	8002f08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d019      	beq.n	8002ece <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9a:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea0:	f7fe f8c0 	bl	8001024 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea8:	f7fe f8bc 	bl	8001024 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e15a      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	f000 faa8 	bl	800341c <RCC_Delay>
 8002ecc:	e01c      	b.n	8002f08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed4:	f7fe f8a6 	bl	8001024 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eda:	e00f      	b.n	8002efc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002edc:	f7fe f8a2 	bl	8001024 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d908      	bls.n	8002efc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e140      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	42420000 	.word	0x42420000
 8002ef8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	4b9e      	ldr	r3, [pc, #632]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e9      	bne.n	8002edc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80a6 	beq.w	8003062 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1a:	4b97      	ldr	r3, [pc, #604]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	4b94      	ldr	r3, [pc, #592]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4a93      	ldr	r2, [pc, #588]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f30:	61d3      	str	r3, [r2, #28]
 8002f32:	4b91      	ldr	r3, [pc, #580]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f42:	4b8e      	ldr	r3, [pc, #568]	; (800317c <HAL_RCC_OscConfig+0x4f8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4e:	4b8b      	ldr	r3, [pc, #556]	; (800317c <HAL_RCC_OscConfig+0x4f8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a8a      	ldr	r2, [pc, #552]	; (800317c <HAL_RCC_OscConfig+0x4f8>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5a:	f7fe f863 	bl	8001024 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f62:	f7fe f85f 	bl	8001024 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b64      	cmp	r3, #100	; 0x64
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e0fd      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	4b81      	ldr	r3, [pc, #516]	; (800317c <HAL_RCC_OscConfig+0x4f8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x312>
 8002f88:	4b7b      	ldr	r3, [pc, #492]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4a7a      	ldr	r2, [pc, #488]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6213      	str	r3, [r2, #32]
 8002f94:	e02d      	b.n	8002ff2 <HAL_RCC_OscConfig+0x36e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x334>
 8002f9e:	4b76      	ldr	r3, [pc, #472]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	4a75      	ldr	r2, [pc, #468]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	6213      	str	r3, [r2, #32]
 8002faa:	4b73      	ldr	r3, [pc, #460]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	4a72      	ldr	r2, [pc, #456]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fb0:	f023 0304 	bic.w	r3, r3, #4
 8002fb4:	6213      	str	r3, [r2, #32]
 8002fb6:	e01c      	b.n	8002ff2 <HAL_RCC_OscConfig+0x36e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b05      	cmp	r3, #5
 8002fbe:	d10c      	bne.n	8002fda <HAL_RCC_OscConfig+0x356>
 8002fc0:	4b6d      	ldr	r3, [pc, #436]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4a6c      	ldr	r2, [pc, #432]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fc6:	f043 0304 	orr.w	r3, r3, #4
 8002fca:	6213      	str	r3, [r2, #32]
 8002fcc:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4a69      	ldr	r2, [pc, #420]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6213      	str	r3, [r2, #32]
 8002fd8:	e00b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x36e>
 8002fda:	4b67      	ldr	r3, [pc, #412]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	4a66      	ldr	r2, [pc, #408]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	6213      	str	r3, [r2, #32]
 8002fe6:	4b64      	ldr	r3, [pc, #400]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	4a63      	ldr	r2, [pc, #396]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fec:	f023 0304 	bic.w	r3, r3, #4
 8002ff0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d015      	beq.n	8003026 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffa:	f7fe f813 	bl	8001024 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003000:	e00a      	b.n	8003018 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f7fe f80f 	bl	8001024 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e0ab      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003018:	4b57      	ldr	r3, [pc, #348]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0ee      	beq.n	8003002 <HAL_RCC_OscConfig+0x37e>
 8003024:	e014      	b.n	8003050 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003026:	f7fd fffd 	bl	8001024 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302c:	e00a      	b.n	8003044 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7fd fff9 	bl	8001024 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	; 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e095      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003044:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ee      	bne.n	800302e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d105      	bne.n	8003062 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003056:	4b48      	ldr	r3, [pc, #288]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	4a47      	ldr	r2, [pc, #284]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800305c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003060:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 8081 	beq.w	800316e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800306c:	4b42      	ldr	r3, [pc, #264]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b08      	cmp	r3, #8
 8003076:	d061      	beq.n	800313c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d146      	bne.n	800310e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003080:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <HAL_RCC_OscConfig+0x4fc>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003086:	f7fd ffcd 	bl	8001024 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308e:	f7fd ffc9 	bl	8001024 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e067      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a0:	4b35      	ldr	r3, [pc, #212]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b4:	d108      	bne.n	80030c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030b6:	4b30      	ldr	r3, [pc, #192]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	492d      	ldr	r1, [pc, #180]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a19      	ldr	r1, [r3, #32]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	430b      	orrs	r3, r1
 80030da:	4927      	ldr	r1, [pc, #156]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e0:	4b27      	ldr	r3, [pc, #156]	; (8003180 <HAL_RCC_OscConfig+0x4fc>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7fd ff9d 	bl	8001024 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fd ff99 	bl	8001024 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e037      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003100:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x46a>
 800310c:	e02f      	b.n	800316e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310e:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <HAL_RCC_OscConfig+0x4fc>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fd ff86 	bl	8001024 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311c:	f7fd ff82 	bl	8001024 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e020      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x498>
 800313a:	e018      	b.n	800316e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e013      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	429a      	cmp	r2, r3
 800315a:	d106      	bne.n	800316a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d001      	beq.n	800316e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000
 800317c:	40007000 	.word	0x40007000
 8003180:	42420060 	.word	0x42420060

08003184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0d0      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003198:	4b6a      	ldr	r3, [pc, #424]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d910      	bls.n	80031c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b67      	ldr	r3, [pc, #412]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 0207 	bic.w	r2, r3, #7
 80031ae:	4965      	ldr	r1, [pc, #404]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b63      	ldr	r3, [pc, #396]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0b8      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d020      	beq.n	8003216 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e0:	4b59      	ldr	r3, [pc, #356]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4a58      	ldr	r2, [pc, #352]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f8:	4b53      	ldr	r3, [pc, #332]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4a52      	ldr	r2, [pc, #328]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003202:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003204:	4b50      	ldr	r3, [pc, #320]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	494d      	ldr	r1, [pc, #308]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d040      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d107      	bne.n	800323a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b47      	ldr	r3, [pc, #284]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d115      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e07f      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d107      	bne.n	8003252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003242:	4b41      	ldr	r3, [pc, #260]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e073      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003252:	4b3d      	ldr	r3, [pc, #244]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e06b      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003262:	4b39      	ldr	r3, [pc, #228]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f023 0203 	bic.w	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4936      	ldr	r1, [pc, #216]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003274:	f7fd fed6 	bl	8001024 <HAL_GetTick>
 8003278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327a:	e00a      	b.n	8003292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327c:	f7fd fed2 	bl	8001024 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	; 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e053      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003292:	4b2d      	ldr	r3, [pc, #180]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 020c 	and.w	r2, r3, #12
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d1eb      	bne.n	800327c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032a4:	4b27      	ldr	r3, [pc, #156]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d210      	bcs.n	80032d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4b24      	ldr	r3, [pc, #144]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 0207 	bic.w	r2, r3, #7
 80032ba:	4922      	ldr	r1, [pc, #136]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b20      	ldr	r3, [pc, #128]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e032      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e0:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4916      	ldr	r1, [pc, #88]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032fe:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	490e      	ldr	r1, [pc, #56]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	4313      	orrs	r3, r2
 8003310:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003312:	f000 f821 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8003316:	4601      	mov	r1, r0
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	4a0a      	ldr	r2, [pc, #40]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 8003324:	5cd3      	ldrb	r3, [r2, r3]
 8003326:	fa21 f303 	lsr.w	r3, r1, r3
 800332a:	4a09      	ldr	r2, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x1cc>)
 800332c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCC_ClockConfig+0x1d0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd fe34 	bl	8000fa0 <HAL_InitTick>

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40022000 	.word	0x40022000
 8003348:	40021000 	.word	0x40021000
 800334c:	0800bc54 	.word	0x0800bc54
 8003350:	20000000 	.word	0x20000000
 8003354:	20000004 	.word	0x20000004

08003358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003358:	b490      	push	{r4, r7}
 800335a:	b08a      	sub	sp, #40	; 0x28
 800335c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800335e:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003360:	1d3c      	adds	r4, r7, #4
 8003362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003368:	4b28      	ldr	r3, [pc, #160]	; (800340c <HAL_RCC_GetSysClockFreq+0xb4>)
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	2300      	movs	r3, #0
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	2300      	movs	r3, #0
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003382:	4b23      	ldr	r3, [pc, #140]	; (8003410 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b04      	cmp	r3, #4
 8003390:	d002      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x40>
 8003392:	2b08      	cmp	r3, #8
 8003394:	d003      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0x46>
 8003396:	e02d      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003398:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <HAL_RCC_GetSysClockFreq+0xbc>)
 800339a:	623b      	str	r3, [r7, #32]
      break;
 800339c:	e02d      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	0c9b      	lsrs	r3, r3, #18
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033aa:	4413      	add	r3, r2
 80033ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d013      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033bc:	4b14      	ldr	r3, [pc, #80]	; (8003410 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	0c5b      	lsrs	r3, r3, #17
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033ca:	4413      	add	r3, r2
 80033cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	4a0f      	ldr	r2, [pc, #60]	; (8003414 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033d6:	fb02 f203 	mul.w	r2, r2, r3
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
 80033e2:	e004      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	4a0c      	ldr	r2, [pc, #48]	; (8003418 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033e8:	fb02 f303 	mul.w	r3, r2, r3
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	623b      	str	r3, [r7, #32]
      break;
 80033f2:	e002      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033f4:	4b07      	ldr	r3, [pc, #28]	; (8003414 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033f6:	623b      	str	r3, [r7, #32]
      break;
 80033f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033fa:	6a3b      	ldr	r3, [r7, #32]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3728      	adds	r7, #40	; 0x28
 8003400:	46bd      	mov	sp, r7
 8003402:	bc90      	pop	{r4, r7}
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	0800bbf8 	.word	0x0800bbf8
 800340c:	0800bc08 	.word	0x0800bc08
 8003410:	40021000 	.word	0x40021000
 8003414:	007a1200 	.word	0x007a1200
 8003418:	003d0900 	.word	0x003d0900

0800341c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003424:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <RCC_Delay+0x34>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a0a      	ldr	r2, [pc, #40]	; (8003454 <RCC_Delay+0x38>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	0a5b      	lsrs	r3, r3, #9
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003438:	bf00      	nop
  }
  while (Delay --);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1e5a      	subs	r2, r3, #1
 800343e:	60fa      	str	r2, [r7, #12]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1f9      	bne.n	8003438 <RCC_Delay+0x1c>
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	20000000 	.word	0x20000000
 8003454:	10624dd3 	.word	0x10624dd3

08003458 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d07d      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003474:	2300      	movs	r3, #0
 8003476:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003478:	4b4f      	ldr	r3, [pc, #316]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10d      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003484:	4b4c      	ldr	r3, [pc, #304]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	4a4b      	ldr	r2, [pc, #300]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348e:	61d3      	str	r3, [r2, #28]
 8003490:	4b49      	ldr	r3, [pc, #292]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349c:	2301      	movs	r3, #1
 800349e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a0:	4b46      	ldr	r3, [pc, #280]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d118      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ac:	4b43      	ldr	r3, [pc, #268]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a42      	ldr	r2, [pc, #264]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b8:	f7fd fdb4 	bl	8001024 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034be:	e008      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c0:	f7fd fdb0 	bl	8001024 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b64      	cmp	r3, #100	; 0x64
 80034cc:	d901      	bls.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e06d      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d2:	4b3a      	ldr	r3, [pc, #232]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034de:	4b36      	ldr	r3, [pc, #216]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d02e      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d027      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034fc:	4b2e      	ldr	r3, [pc, #184]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003504:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003506:	4b2e      	ldr	r3, [pc, #184]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003508:	2201      	movs	r2, #1
 800350a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800350c:	4b2c      	ldr	r3, [pc, #176]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003512:	4a29      	ldr	r2, [pc, #164]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d014      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003522:	f7fd fd7f 	bl	8001024 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003528:	e00a      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352a:	f7fd fd7b 	bl	8001024 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	f241 3288 	movw	r2, #5000	; 0x1388
 8003538:	4293      	cmp	r3, r2
 800353a:	d901      	bls.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e036      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003540:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ee      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800354c:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4917      	ldr	r1, [pc, #92]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355a:	4313      	orrs	r3, r2
 800355c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800355e:	7dfb      	ldrb	r3, [r7, #23]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d105      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003564:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	4a13      	ldr	r2, [pc, #76]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800356e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800357c:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	490b      	ldr	r1, [pc, #44]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0310 	and.w	r3, r3, #16
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800359a:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	4904      	ldr	r1, [pc, #16]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40007000 	.word	0x40007000
 80035c0:	42420440 	.word	0x42420440

080035c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80035c4:	b084      	sub	sp, #16
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	f107 0014 	add.w	r0, r7, #20
 80035d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	b004      	add	sp, #16
 80035e2:	4770      	bx	lr

080035e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80035f4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80035f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003618:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800361c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	b29b      	uxth	r3, r3
 800362a:	43db      	mvns	r3, r3
 800362c:	b29b      	uxth	r3, r3
 800362e:	4013      	ands	r3, r2
 8003630:	b29a      	uxth	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800365c:	b084      	sub	sp, #16
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	f107 0014 	add.w	r0, r7, #20
 800366a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	b004      	add	sp, #16
 800369a:	4770      	bx	lr

0800369c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800369c:	b480      	push	{r7}
 800369e:	b09b      	sub	sp, #108	; 0x6c
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80036be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	78db      	ldrb	r3, [r3, #3]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d81f      	bhi.n	800370e <USB_ActivateEndpoint+0x72>
 80036ce:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <USB_ActivateEndpoint+0x38>)
 80036d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d4:	080036e5 	.word	0x080036e5
 80036d8:	08003701 	.word	0x08003701
 80036dc:	08003717 	.word	0x08003717
 80036e0:	080036f3 	.word	0x080036f3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80036e4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80036e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ec:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80036f0:	e012      	b.n	8003718 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80036f2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80036f6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80036fa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80036fe:	e00b      	b.n	8003718 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003700:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003704:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003708:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800370c:	e004      	b.n	8003718 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003714:	e000      	b.n	8003718 <USB_ActivateEndpoint+0x7c>
      break;
 8003716:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	441a      	add	r2, r3
 8003722:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800372a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800372e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003736:	b29b      	uxth	r3, r3
 8003738:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	b29b      	uxth	r3, r3
 8003748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800374c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003750:	b29a      	uxth	r2, r3
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	b29b      	uxth	r3, r3
 8003758:	4313      	orrs	r3, r2
 800375a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	441a      	add	r2, r3
 8003768:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800376c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800377c:	b29b      	uxth	r3, r3
 800377e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	7b1b      	ldrb	r3, [r3, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	f040 8149 	bne.w	8003a1c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	785b      	ldrb	r3, [r3, #1]
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8084 	beq.w	800389c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800379e:	b29b      	uxth	r3, r3
 80037a0:	461a      	mov	r2, r3
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	4413      	add	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	011a      	lsls	r2, r3, #4
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	88db      	ldrh	r3, [r3, #6]
 80037bc:	085b      	lsrs	r3, r3, #1
 80037be:	b29b      	uxth	r3, r3
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	81fb      	strh	r3, [r7, #14]
 80037d6:	89fb      	ldrh	r3, [r7, #14]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01b      	beq.n	8003818 <USB_ActivateEndpoint+0x17c>
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f6:	81bb      	strh	r3, [r7, #12]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	441a      	add	r2, r3
 8003802:	89bb      	ldrh	r3, [r7, #12]
 8003804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800380c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003810:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003814:	b29b      	uxth	r3, r3
 8003816:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	78db      	ldrb	r3, [r3, #3]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d020      	beq.n	8003862 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b29b      	uxth	r3, r3
 800382e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003836:	813b      	strh	r3, [r7, #8]
 8003838:	893b      	ldrh	r3, [r7, #8]
 800383a:	f083 0320 	eor.w	r3, r3, #32
 800383e:	813b      	strh	r3, [r7, #8]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	441a      	add	r2, r3
 800384a:	893b      	ldrh	r3, [r7, #8]
 800384c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800385c:	b29b      	uxth	r3, r3
 800385e:	8013      	strh	r3, [r2, #0]
 8003860:	e27f      	b.n	8003d62 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003878:	817b      	strh	r3, [r7, #10]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	441a      	add	r2, r3
 8003884:	897b      	ldrh	r3, [r7, #10]
 8003886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800388a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800388e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003896:	b29b      	uxth	r3, r3
 8003898:	8013      	strh	r3, [r2, #0]
 800389a:	e262      	b.n	8003d62 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	461a      	mov	r2, r3
 80038aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ac:	4413      	add	r3, r2
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	011a      	lsls	r2, r3, #4
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	88db      	ldrh	r3, [r3, #6]
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038da:	b29b      	uxth	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	4413      	add	r3, r2
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	011a      	lsls	r2, r3, #4
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	4413      	add	r3, r2
 80038ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038f2:	623b      	str	r3, [r7, #32]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d112      	bne.n	8003922 <USB_ActivateEndpoint+0x286>
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	b29b      	uxth	r3, r3
 8003902:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003906:	b29a      	uxth	r2, r3
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	801a      	strh	r2, [r3, #0]
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	b29b      	uxth	r3, r3
 8003912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800391a:	b29a      	uxth	r2, r3
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	801a      	strh	r2, [r3, #0]
 8003920:	e02f      	b.n	8003982 <USB_ActivateEndpoint+0x2e6>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b3e      	cmp	r3, #62	; 0x3e
 8003928:	d813      	bhi.n	8003952 <USB_ActivateEndpoint+0x2b6>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	085b      	lsrs	r3, r3, #1
 8003930:	663b      	str	r3, [r7, #96]	; 0x60
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <USB_ActivateEndpoint+0x2a8>
 800393e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003940:	3301      	adds	r3, #1
 8003942:	663b      	str	r3, [r7, #96]	; 0x60
 8003944:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003946:	b29b      	uxth	r3, r3
 8003948:	029b      	lsls	r3, r3, #10
 800394a:	b29a      	uxth	r2, r3
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	801a      	strh	r2, [r3, #0]
 8003950:	e017      	b.n	8003982 <USB_ActivateEndpoint+0x2e6>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	663b      	str	r3, [r7, #96]	; 0x60
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	2b00      	cmp	r3, #0
 8003964:	d102      	bne.n	800396c <USB_ActivateEndpoint+0x2d0>
 8003966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003968:	3b01      	subs	r3, #1
 800396a:	663b      	str	r3, [r7, #96]	; 0x60
 800396c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800396e:	b29b      	uxth	r3, r3
 8003970:	029b      	lsls	r3, r3, #10
 8003972:	b29b      	uxth	r3, r3
 8003974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800397c:	b29a      	uxth	r2, r3
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	83fb      	strh	r3, [r7, #30]
 8003990:	8bfb      	ldrh	r3, [r7, #30]
 8003992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d01b      	beq.n	80039d2 <USB_ActivateEndpoint+0x336>
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b0:	83bb      	strh	r3, [r7, #28]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	441a      	add	r2, r3
 80039bc:	8bbb      	ldrh	r3, [r7, #28]
 80039be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e8:	837b      	strh	r3, [r7, #26]
 80039ea:	8b7b      	ldrh	r3, [r7, #26]
 80039ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80039f0:	837b      	strh	r3, [r7, #26]
 80039f2:	8b7b      	ldrh	r3, [r7, #26]
 80039f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039f8:	837b      	strh	r3, [r7, #26]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	441a      	add	r2, r3
 8003a04:	8b7b      	ldrh	r3, [r7, #26]
 8003a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	8013      	strh	r3, [r2, #0]
 8003a1a:	e1a2      	b.n	8003d62 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a32:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	441a      	add	r2, r3
 8003a40:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a4c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	461a      	mov	r2, r3
 8003a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a68:	4413      	add	r3, r2
 8003a6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	011a      	lsls	r2, r3, #4
 8003a72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a7a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	891b      	ldrh	r3, [r3, #8]
 8003a80:	085b      	lsrs	r3, r3, #1
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a8a:	801a      	strh	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	461a      	mov	r2, r3
 8003a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a9c:	4413      	add	r3, r2
 8003a9e:	653b      	str	r3, [r7, #80]	; 0x50
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	011a      	lsls	r2, r3, #4
 8003aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	895b      	ldrh	r3, [r3, #10]
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003abe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	785b      	ldrb	r3, [r3, #1]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f040 8091 	bne.w	8003bec <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003ad8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d01b      	beq.n	8003b1a <USB_ActivateEndpoint+0x47e>
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	441a      	add	r2, r3
 8003b04:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	873b      	strh	r3, [r7, #56]	; 0x38
 8003b28:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d01b      	beq.n	8003b6a <USB_ActivateEndpoint+0x4ce>
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b48:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	441a      	add	r2, r3
 8003b54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b80:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003b82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003b84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003b88:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003b8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003b8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b90:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	441a      	add	r2, r3
 8003b9c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc8:	867b      	strh	r3, [r7, #50]	; 0x32
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	441a      	add	r2, r3
 8003bd4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	8013      	strh	r3, [r2, #0]
 8003bea:	e0ba      	b.n	8003d62 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003bfc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d01d      	beq.n	8003c44 <USB_ActivateEndpoint+0x5a8>
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	441a      	add	r2, r3
 8003c2c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003c54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01d      	beq.n	8003c9c <USB_ActivateEndpoint+0x600>
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c76:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	441a      	add	r2, r3
 8003c84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	78db      	ldrb	r3, [r3, #3]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d024      	beq.n	8003cee <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003cbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003cc2:	f083 0320 	eor.w	r3, r3, #32
 8003cc6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	441a      	add	r2, r3
 8003cd4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	8013      	strh	r3, [r2, #0]
 8003cec:	e01d      	b.n	8003d2a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	441a      	add	r2, r3
 8003d12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d40:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	441a      	add	r2, r3
 8003d4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003d62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	376c      	adds	r7, #108	; 0x6c
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr

08003d70 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b08d      	sub	sp, #52	; 0x34
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	7b1b      	ldrb	r3, [r3, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f040 808e 	bne.w	8003ea0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	785b      	ldrb	r3, [r3, #1]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d044      	beq.n	8003e16 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	81bb      	strh	r3, [r7, #12]
 8003d9a:	89bb      	ldrh	r3, [r7, #12]
 8003d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d01b      	beq.n	8003ddc <USB_DeactivateEndpoint+0x6c>
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dba:	817b      	strh	r3, [r7, #10]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	441a      	add	r2, r3
 8003dc6:	897b      	ldrh	r3, [r7, #10]
 8003dc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003df2:	813b      	strh	r3, [r7, #8]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	441a      	add	r2, r3
 8003dfe:	893b      	ldrh	r3, [r7, #8]
 8003e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	8013      	strh	r3, [r2, #0]
 8003e14:	e192      	b.n	800413c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	827b      	strh	r3, [r7, #18]
 8003e24:	8a7b      	ldrh	r3, [r7, #18]
 8003e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d01b      	beq.n	8003e66 <USB_DeactivateEndpoint+0xf6>
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e44:	823b      	strh	r3, [r7, #16]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	441a      	add	r2, r3
 8003e50:	8a3b      	ldrh	r3, [r7, #16]
 8003e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7c:	81fb      	strh	r3, [r7, #14]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	441a      	add	r2, r3
 8003e88:	89fb      	ldrh	r3, [r7, #14]
 8003e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	8013      	strh	r3, [r2, #0]
 8003e9e:	e14d      	b.n	800413c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	785b      	ldrb	r3, [r3, #1]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f040 80a5 	bne.w	8003ff4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	843b      	strh	r3, [r7, #32]
 8003eb8:	8c3b      	ldrh	r3, [r7, #32]
 8003eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d01b      	beq.n	8003efa <USB_DeactivateEndpoint+0x18a>
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed8:	83fb      	strh	r3, [r7, #30]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	441a      	add	r2, r3
 8003ee4:	8bfb      	ldrh	r3, [r7, #30]
 8003ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	83bb      	strh	r3, [r7, #28]
 8003f08:	8bbb      	ldrh	r3, [r7, #28]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01b      	beq.n	8003f4a <USB_DeactivateEndpoint+0x1da>
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f28:	837b      	strh	r3, [r7, #26]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	441a      	add	r2, r3
 8003f34:	8b7b      	ldrh	r3, [r7, #26]
 8003f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f60:	833b      	strh	r3, [r7, #24]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	441a      	add	r2, r3
 8003f6c:	8b3b      	ldrh	r3, [r7, #24]
 8003f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f98:	82fb      	strh	r3, [r7, #22]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	441a      	add	r2, r3
 8003fa4:	8afb      	ldrh	r3, [r7, #22]
 8003fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd0:	82bb      	strh	r3, [r7, #20]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	441a      	add	r2, r3
 8003fdc:	8abb      	ldrh	r3, [r7, #20]
 8003fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	8013      	strh	r3, [r2, #0]
 8003ff2:	e0a3      	b.n	800413c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004002:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01b      	beq.n	8004044 <USB_DeactivateEndpoint+0x2d4>
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	b29b      	uxth	r3, r3
 800401a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800401e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004022:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	441a      	add	r2, r3
 800402e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004038:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800403c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004040:	b29b      	uxth	r3, r3
 8004042:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004052:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01b      	beq.n	8004094 <USB_DeactivateEndpoint+0x324>
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	b29b      	uxth	r3, r3
 800406a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800406e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004072:	853b      	strh	r3, [r7, #40]	; 0x28
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	441a      	add	r2, r3
 800407e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800408c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004090:	b29b      	uxth	r3, r3
 8004092:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	441a      	add	r2, r3
 80040b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	441a      	add	r2, r3
 80040ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004100:	b29b      	uxth	r3, r3
 8004102:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29b      	uxth	r3, r3
 8004112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	847b      	strh	r3, [r7, #34]	; 0x22
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	441a      	add	r2, r3
 8004126:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800412c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004138:	b29b      	uxth	r3, r3
 800413a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3734      	adds	r7, #52	; 0x34
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b0c4      	sub	sp, #272	; 0x110
 800414c:	af00      	add	r7, sp, #0
 800414e:	1d3b      	adds	r3, r7, #4
 8004150:	6018      	str	r0, [r3, #0]
 8004152:	463b      	mov	r3, r7
 8004154:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004156:	463b      	mov	r3, r7
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	785b      	ldrb	r3, [r3, #1]
 800415c:	2b01      	cmp	r3, #1
 800415e:	f040 8557 	bne.w	8004c10 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004162:	463b      	mov	r3, r7
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699a      	ldr	r2, [r3, #24]
 8004168:	463b      	mov	r3, r7
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	429a      	cmp	r2, r3
 8004170:	d905      	bls.n	800417e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004172:	463b      	mov	r3, r7
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800417c:	e004      	b.n	8004188 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800417e:	463b      	mov	r3, r7
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004188:	463b      	mov	r3, r7
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	7b1b      	ldrb	r3, [r3, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d12c      	bne.n	80041ec <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004192:	463b      	mov	r3, r7
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6959      	ldr	r1, [r3, #20]
 8004198:	463b      	mov	r3, r7
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	88da      	ldrh	r2, [r3, #6]
 800419e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	1d38      	adds	r0, r7, #4
 80041a6:	6800      	ldr	r0, [r0, #0]
 80041a8:	f001 fa2c 	bl	8005604 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80041ac:	1d3b      	adds	r3, r7, #4
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	1d3b      	adds	r3, r7, #4
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	4413      	add	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	463b      	mov	r3, r7
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	011a      	lsls	r2, r3, #4
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	4413      	add	r3, r2
 80041d0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80041d4:	f107 0310 	add.w	r3, r7, #16
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041de:	b29a      	uxth	r2, r3
 80041e0:	f107 0310 	add.w	r3, r7, #16
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	801a      	strh	r2, [r3, #0]
 80041e8:	f000 bcdd 	b.w	8004ba6 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80041ec:	463b      	mov	r3, r7
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	78db      	ldrb	r3, [r3, #3]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	f040 8347 	bne.w	8004886 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80041f8:	463b      	mov	r3, r7
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6a1a      	ldr	r2, [r3, #32]
 80041fe:	463b      	mov	r3, r7
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	429a      	cmp	r2, r3
 8004206:	f240 82eb 	bls.w	80047e0 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800420a:	1d3b      	adds	r3, r7, #4
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	463b      	mov	r3, r7
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	b29b      	uxth	r3, r3
 800421c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004224:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004228:	1d3b      	adds	r3, r7, #4
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	463b      	mov	r3, r7
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	441a      	add	r2, r3
 8004236:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800423a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800423e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004242:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424a:	b29b      	uxth	r3, r3
 800424c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800424e:	463b      	mov	r3, r7
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6a1a      	ldr	r2, [r3, #32]
 8004254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004258:	1ad2      	subs	r2, r2, r3
 800425a:	463b      	mov	r3, r7
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004260:	1d3b      	adds	r3, r7, #4
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	463b      	mov	r3, r7
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	b29b      	uxth	r3, r3
 8004272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 8159 	beq.w	800452e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800427c:	1d3b      	adds	r3, r7, #4
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	637b      	str	r3, [r7, #52]	; 0x34
 8004282:	463b      	mov	r3, r7
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	785b      	ldrb	r3, [r3, #1]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d164      	bne.n	8004356 <USB_EPStartXfer+0x20e>
 800428c:	1d3b      	adds	r3, r7, #4
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004292:	1d3b      	adds	r3, r7, #4
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800429a:	b29b      	uxth	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	4413      	add	r3, r2
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a4:	463b      	mov	r3, r7
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	011a      	lsls	r2, r3, #4
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ae:	4413      	add	r3, r2
 80042b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d112      	bne.n	80042e4 <USB_EPStartXfer+0x19c>
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042cc:	801a      	strh	r2, [r3, #0]
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042dc:	b29a      	uxth	r2, r3
 80042de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e0:	801a      	strh	r2, [r3, #0]
 80042e2:	e054      	b.n	800438e <USB_EPStartXfer+0x246>
 80042e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e8:	2b3e      	cmp	r3, #62	; 0x3e
 80042ea:	d817      	bhi.n	800431c <USB_EPStartXfer+0x1d4>
 80042ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042f0:	085b      	lsrs	r3, r3, #1
 80042f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80042f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d004      	beq.n	800430c <USB_EPStartXfer+0x1c4>
 8004302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004306:	3301      	adds	r3, #1
 8004308:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800430c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004310:	b29b      	uxth	r3, r3
 8004312:	029b      	lsls	r3, r3, #10
 8004314:	b29a      	uxth	r2, r3
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	801a      	strh	r2, [r3, #0]
 800431a:	e038      	b.n	800438e <USB_EPStartXfer+0x246>
 800431c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	2b00      	cmp	r3, #0
 8004330:	d104      	bne.n	800433c <USB_EPStartXfer+0x1f4>
 8004332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004336:	3b01      	subs	r3, #1
 8004338:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800433c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004340:	b29b      	uxth	r3, r3
 8004342:	029b      	lsls	r3, r3, #10
 8004344:	b29b      	uxth	r3, r3
 8004346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800434a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800434e:	b29a      	uxth	r2, r3
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	801a      	strh	r2, [r3, #0]
 8004354:	e01b      	b.n	800438e <USB_EPStartXfer+0x246>
 8004356:	463b      	mov	r3, r7
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	785b      	ldrb	r3, [r3, #1]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d116      	bne.n	800438e <USB_EPStartXfer+0x246>
 8004360:	1d3b      	adds	r3, r7, #4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004368:	b29b      	uxth	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436e:	4413      	add	r3, r2
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
 8004372:	463b      	mov	r3, r7
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	011a      	lsls	r2, r3, #4
 800437a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437c:	4413      	add	r3, r2
 800437e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004382:	633b      	str	r3, [r7, #48]	; 0x30
 8004384:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004388:	b29a      	uxth	r2, r3
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800438e:	463b      	mov	r3, r7
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	895b      	ldrh	r3, [r3, #10]
 8004394:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004398:	463b      	mov	r3, r7
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6959      	ldr	r1, [r3, #20]
 800439e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80043a8:	1d38      	adds	r0, r7, #4
 80043aa:	6800      	ldr	r0, [r0, #0]
 80043ac:	f001 f92a 	bl	8005604 <USB_WritePMA>
            ep->xfer_buff += len;
 80043b0:	463b      	mov	r3, r7
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ba:	441a      	add	r2, r3
 80043bc:	463b      	mov	r3, r7
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80043c2:	463b      	mov	r3, r7
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6a1a      	ldr	r2, [r3, #32]
 80043c8:	463b      	mov	r3, r7
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d909      	bls.n	80043e6 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80043d2:	463b      	mov	r3, r7
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6a1a      	ldr	r2, [r3, #32]
 80043d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043dc:	1ad2      	subs	r2, r2, r3
 80043de:	463b      	mov	r3, r7
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	621a      	str	r2, [r3, #32]
 80043e4:	e008      	b.n	80043f8 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80043e6:	463b      	mov	r3, r7
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80043f0:	463b      	mov	r3, r7
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2200      	movs	r2, #0
 80043f6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80043f8:	463b      	mov	r3, r7
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	785b      	ldrb	r3, [r3, #1]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d164      	bne.n	80044cc <USB_EPStartXfer+0x384>
 8004402:	1d3b      	adds	r3, r7, #4
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	61fb      	str	r3, [r7, #28]
 8004408:	1d3b      	adds	r3, r7, #4
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004410:	b29b      	uxth	r3, r3
 8004412:	461a      	mov	r2, r3
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	4413      	add	r3, r2
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	463b      	mov	r3, r7
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	011a      	lsls	r2, r3, #4
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	4413      	add	r3, r2
 8004426:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004430:	2b00      	cmp	r3, #0
 8004432:	d112      	bne.n	800445a <USB_EPStartXfer+0x312>
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b29b      	uxth	r3, r3
 800443a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800443e:	b29a      	uxth	r2, r3
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	801a      	strh	r2, [r3, #0]
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29b      	uxth	r3, r3
 800444a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800444e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004452:	b29a      	uxth	r2, r3
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	801a      	strh	r2, [r3, #0]
 8004458:	e057      	b.n	800450a <USB_EPStartXfer+0x3c2>
 800445a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800445e:	2b3e      	cmp	r3, #62	; 0x3e
 8004460:	d817      	bhi.n	8004492 <USB_EPStartXfer+0x34a>
 8004462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004466:	085b      	lsrs	r3, r3, #1
 8004468:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800446c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d004      	beq.n	8004482 <USB_EPStartXfer+0x33a>
 8004478:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800447c:	3301      	adds	r3, #1
 800447e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004482:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004486:	b29b      	uxth	r3, r3
 8004488:	029b      	lsls	r3, r3, #10
 800448a:	b29a      	uxth	r2, r3
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	e03b      	b.n	800450a <USB_EPStartXfer+0x3c2>
 8004492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800449c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a0:	f003 031f 	and.w	r3, r3, #31
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d104      	bne.n	80044b2 <USB_EPStartXfer+0x36a>
 80044a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80044ac:	3b01      	subs	r3, #1
 80044ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80044b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	029b      	lsls	r3, r3, #10
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	801a      	strh	r2, [r3, #0]
 80044ca:	e01e      	b.n	800450a <USB_EPStartXfer+0x3c2>
 80044cc:	463b      	mov	r3, r7
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	785b      	ldrb	r3, [r3, #1]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d119      	bne.n	800450a <USB_EPStartXfer+0x3c2>
 80044d6:	1d3b      	adds	r3, r7, #4
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	4413      	add	r3, r2
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
 80044ee:	463b      	mov	r3, r7
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	011a      	lsls	r2, r3, #4
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	4413      	add	r3, r2
 80044fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044fe:	623b      	str	r3, [r7, #32]
 8004500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004504:	b29a      	uxth	r2, r3
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800450a:	463b      	mov	r3, r7
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	891b      	ldrh	r3, [r3, #8]
 8004510:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004514:	463b      	mov	r3, r7
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6959      	ldr	r1, [r3, #20]
 800451a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800451e:	b29b      	uxth	r3, r3
 8004520:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004524:	1d38      	adds	r0, r7, #4
 8004526:	6800      	ldr	r0, [r0, #0]
 8004528:	f001 f86c 	bl	8005604 <USB_WritePMA>
 800452c:	e33b      	b.n	8004ba6 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800452e:	463b      	mov	r3, r7
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	785b      	ldrb	r3, [r3, #1]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d164      	bne.n	8004602 <USB_EPStartXfer+0x4ba>
 8004538:	1d3b      	adds	r3, r7, #4
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800453e:	1d3b      	adds	r3, r7, #4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004546:	b29b      	uxth	r3, r3
 8004548:	461a      	mov	r2, r3
 800454a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800454c:	4413      	add	r3, r2
 800454e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004550:	463b      	mov	r3, r7
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	011a      	lsls	r2, r3, #4
 8004558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455a:	4413      	add	r3, r2
 800455c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004560:	64bb      	str	r3, [r7, #72]	; 0x48
 8004562:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d112      	bne.n	8004590 <USB_EPStartXfer+0x448>
 800456a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	b29b      	uxth	r3, r3
 8004570:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004574:	b29a      	uxth	r2, r3
 8004576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004578:	801a      	strh	r2, [r3, #0]
 800457a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	b29b      	uxth	r3, r3
 8004580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004588:	b29a      	uxth	r2, r3
 800458a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800458c:	801a      	strh	r2, [r3, #0]
 800458e:	e057      	b.n	8004640 <USB_EPStartXfer+0x4f8>
 8004590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004594:	2b3e      	cmp	r3, #62	; 0x3e
 8004596:	d817      	bhi.n	80045c8 <USB_EPStartXfer+0x480>
 8004598:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800459c:	085b      	lsrs	r3, r3, #1
 800459e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80045a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <USB_EPStartXfer+0x470>
 80045ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045b2:	3301      	adds	r3, #1
 80045b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80045b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045bc:	b29b      	uxth	r3, r3
 80045be:	029b      	lsls	r3, r3, #10
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c4:	801a      	strh	r2, [r3, #0]
 80045c6:	e03b      	b.n	8004640 <USB_EPStartXfer+0x4f8>
 80045c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045cc:	095b      	lsrs	r3, r3, #5
 80045ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80045d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d6:	f003 031f 	and.w	r3, r3, #31
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d104      	bne.n	80045e8 <USB_EPStartXfer+0x4a0>
 80045de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e2:	3b01      	subs	r3, #1
 80045e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80045e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	029b      	lsls	r3, r3, #10
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045fe:	801a      	strh	r2, [r3, #0]
 8004600:	e01e      	b.n	8004640 <USB_EPStartXfer+0x4f8>
 8004602:	463b      	mov	r3, r7
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	785b      	ldrb	r3, [r3, #1]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d119      	bne.n	8004640 <USB_EPStartXfer+0x4f8>
 800460c:	1d3b      	adds	r3, r7, #4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	657b      	str	r3, [r7, #84]	; 0x54
 8004612:	1d3b      	adds	r3, r7, #4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800461a:	b29b      	uxth	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004620:	4413      	add	r3, r2
 8004622:	657b      	str	r3, [r7, #84]	; 0x54
 8004624:	463b      	mov	r3, r7
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	011a      	lsls	r2, r3, #4
 800462c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800462e:	4413      	add	r3, r2
 8004630:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004634:	653b      	str	r3, [r7, #80]	; 0x50
 8004636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800463a:	b29a      	uxth	r2, r3
 800463c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800463e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004640:	463b      	mov	r3, r7
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	891b      	ldrh	r3, [r3, #8]
 8004646:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800464a:	463b      	mov	r3, r7
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6959      	ldr	r1, [r3, #20]
 8004650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004654:	b29b      	uxth	r3, r3
 8004656:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800465a:	1d38      	adds	r0, r7, #4
 800465c:	6800      	ldr	r0, [r0, #0]
 800465e:	f000 ffd1 	bl	8005604 <USB_WritePMA>
            ep->xfer_buff += len;
 8004662:	463b      	mov	r3, r7
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800466c:	441a      	add	r2, r3
 800466e:	463b      	mov	r3, r7
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004674:	463b      	mov	r3, r7
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6a1a      	ldr	r2, [r3, #32]
 800467a:	463b      	mov	r3, r7
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	429a      	cmp	r2, r3
 8004682:	d909      	bls.n	8004698 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004684:	463b      	mov	r3, r7
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6a1a      	ldr	r2, [r3, #32]
 800468a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800468e:	1ad2      	subs	r2, r2, r3
 8004690:	463b      	mov	r3, r7
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	621a      	str	r2, [r3, #32]
 8004696:	e008      	b.n	80046aa <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8004698:	463b      	mov	r3, r7
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80046a2:	463b      	mov	r3, r7
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2200      	movs	r2, #0
 80046a8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80046aa:	1d3b      	adds	r3, r7, #4
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	647b      	str	r3, [r7, #68]	; 0x44
 80046b0:	463b      	mov	r3, r7
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	785b      	ldrb	r3, [r3, #1]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d164      	bne.n	8004784 <USB_EPStartXfer+0x63c>
 80046ba:	1d3b      	adds	r3, r7, #4
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c0:	1d3b      	adds	r3, r7, #4
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ce:	4413      	add	r3, r2
 80046d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046d2:	463b      	mov	r3, r7
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	011a      	lsls	r2, r3, #4
 80046da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046dc:	4413      	add	r3, r2
 80046de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80046e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d112      	bne.n	8004712 <USB_EPStartXfer+0x5ca>
 80046ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fa:	801a      	strh	r2, [r3, #0]
 80046fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	b29b      	uxth	r3, r3
 8004702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800470a:	b29a      	uxth	r2, r3
 800470c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470e:	801a      	strh	r2, [r3, #0]
 8004710:	e054      	b.n	80047bc <USB_EPStartXfer+0x674>
 8004712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004716:	2b3e      	cmp	r3, #62	; 0x3e
 8004718:	d817      	bhi.n	800474a <USB_EPStartXfer+0x602>
 800471a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800471e:	085b      	lsrs	r3, r3, #1
 8004720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d004      	beq.n	800473a <USB_EPStartXfer+0x5f2>
 8004730:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004734:	3301      	adds	r3, #1
 8004736:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800473a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800473e:	b29b      	uxth	r3, r3
 8004740:	029b      	lsls	r3, r3, #10
 8004742:	b29a      	uxth	r2, r3
 8004744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004746:	801a      	strh	r2, [r3, #0]
 8004748:	e038      	b.n	80047bc <USB_EPStartXfer+0x674>
 800474a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	2b00      	cmp	r3, #0
 800475e:	d104      	bne.n	800476a <USB_EPStartXfer+0x622>
 8004760:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004764:	3b01      	subs	r3, #1
 8004766:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800476a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800476e:	b29b      	uxth	r3, r3
 8004770:	029b      	lsls	r3, r3, #10
 8004772:	b29b      	uxth	r3, r3
 8004774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800477c:	b29a      	uxth	r2, r3
 800477e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004780:	801a      	strh	r2, [r3, #0]
 8004782:	e01b      	b.n	80047bc <USB_EPStartXfer+0x674>
 8004784:	463b      	mov	r3, r7
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	785b      	ldrb	r3, [r3, #1]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d116      	bne.n	80047bc <USB_EPStartXfer+0x674>
 800478e:	1d3b      	adds	r3, r7, #4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004796:	b29b      	uxth	r3, r3
 8004798:	461a      	mov	r2, r3
 800479a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800479c:	4413      	add	r3, r2
 800479e:	647b      	str	r3, [r7, #68]	; 0x44
 80047a0:	463b      	mov	r3, r7
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	011a      	lsls	r2, r3, #4
 80047a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047aa:	4413      	add	r3, r2
 80047ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047b0:	643b      	str	r3, [r7, #64]	; 0x40
 80047b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80047bc:	463b      	mov	r3, r7
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	895b      	ldrh	r3, [r3, #10]
 80047c2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047c6:	463b      	mov	r3, r7
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6959      	ldr	r1, [r3, #20]
 80047cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80047d6:	1d38      	adds	r0, r7, #4
 80047d8:	6800      	ldr	r0, [r0, #0]
 80047da:	f000 ff13 	bl	8005604 <USB_WritePMA>
 80047de:	e1e2      	b.n	8004ba6 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80047e0:	463b      	mov	r3, r7
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80047ea:	1d3b      	adds	r3, r7, #4
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	463b      	mov	r3, r7
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004804:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004808:	1d3b      	adds	r3, r7, #4
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	463b      	mov	r3, r7
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	441a      	add	r2, r3
 8004816:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800481a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800481e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800482a:	b29b      	uxth	r3, r3
 800482c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800482e:	1d3b      	adds	r3, r7, #4
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	663b      	str	r3, [r7, #96]	; 0x60
 8004834:	1d3b      	adds	r3, r7, #4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800483c:	b29b      	uxth	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004842:	4413      	add	r3, r2
 8004844:	663b      	str	r3, [r7, #96]	; 0x60
 8004846:	463b      	mov	r3, r7
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	011a      	lsls	r2, r3, #4
 800484e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004850:	4413      	add	r3, r2
 8004852:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004856:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800485c:	b29a      	uxth	r2, r3
 800485e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004860:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004862:	463b      	mov	r3, r7
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	891b      	ldrh	r3, [r3, #8]
 8004868:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800486c:	463b      	mov	r3, r7
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6959      	ldr	r1, [r3, #20]
 8004872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004876:	b29b      	uxth	r3, r3
 8004878:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800487c:	1d38      	adds	r0, r7, #4
 800487e:	6800      	ldr	r0, [r0, #0]
 8004880:	f000 fec0 	bl	8005604 <USB_WritePMA>
 8004884:	e18f      	b.n	8004ba6 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004886:	1d3b      	adds	r3, r7, #4
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	463b      	mov	r3, r7
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 808f 	beq.w	80049c0 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80048a2:	1d3b      	adds	r3, r7, #4
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80048a8:	463b      	mov	r3, r7
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	785b      	ldrb	r3, [r3, #1]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d164      	bne.n	800497c <USB_EPStartXfer+0x834>
 80048b2:	1d3b      	adds	r3, r7, #4
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	673b      	str	r3, [r7, #112]	; 0x70
 80048b8:	1d3b      	adds	r3, r7, #4
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048c6:	4413      	add	r3, r2
 80048c8:	673b      	str	r3, [r7, #112]	; 0x70
 80048ca:	463b      	mov	r3, r7
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	011a      	lsls	r2, r3, #4
 80048d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048d4:	4413      	add	r3, r2
 80048d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d112      	bne.n	800490a <USB_EPStartXfer+0x7c2>
 80048e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f2:	801a      	strh	r2, [r3, #0]
 80048f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004902:	b29a      	uxth	r2, r3
 8004904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004906:	801a      	strh	r2, [r3, #0]
 8004908:	e054      	b.n	80049b4 <USB_EPStartXfer+0x86c>
 800490a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490e:	2b3e      	cmp	r3, #62	; 0x3e
 8004910:	d817      	bhi.n	8004942 <USB_EPStartXfer+0x7fa>
 8004912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004916:	085b      	lsrs	r3, r3, #1
 8004918:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800491c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d004      	beq.n	8004932 <USB_EPStartXfer+0x7ea>
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	3301      	adds	r3, #1
 800492e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004936:	b29b      	uxth	r3, r3
 8004938:	029b      	lsls	r3, r3, #10
 800493a:	b29a      	uxth	r2, r3
 800493c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800493e:	801a      	strh	r2, [r3, #0]
 8004940:	e038      	b.n	80049b4 <USB_EPStartXfer+0x86c>
 8004942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800494c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	2b00      	cmp	r3, #0
 8004956:	d104      	bne.n	8004962 <USB_EPStartXfer+0x81a>
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495c:	3b01      	subs	r3, #1
 800495e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004966:	b29b      	uxth	r3, r3
 8004968:	029b      	lsls	r3, r3, #10
 800496a:	b29b      	uxth	r3, r3
 800496c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004974:	b29a      	uxth	r2, r3
 8004976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004978:	801a      	strh	r2, [r3, #0]
 800497a:	e01b      	b.n	80049b4 <USB_EPStartXfer+0x86c>
 800497c:	463b      	mov	r3, r7
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	785b      	ldrb	r3, [r3, #1]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d116      	bne.n	80049b4 <USB_EPStartXfer+0x86c>
 8004986:	1d3b      	adds	r3, r7, #4
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800498e:	b29b      	uxth	r3, r3
 8004990:	461a      	mov	r2, r3
 8004992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004994:	4413      	add	r3, r2
 8004996:	67bb      	str	r3, [r7, #120]	; 0x78
 8004998:	463b      	mov	r3, r7
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	011a      	lsls	r2, r3, #4
 80049a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a2:	4413      	add	r3, r2
 80049a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049a8:	677b      	str	r3, [r7, #116]	; 0x74
 80049aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80049b4:	463b      	mov	r3, r7
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	895b      	ldrh	r3, [r3, #10]
 80049ba:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80049be:	e097      	b.n	8004af0 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80049c0:	463b      	mov	r3, r7
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	785b      	ldrb	r3, [r3, #1]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d168      	bne.n	8004a9c <USB_EPStartXfer+0x954>
 80049ca:	1d3b      	adds	r3, r7, #4
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049d2:	1d3b      	adds	r3, r7, #4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049da:	b29b      	uxth	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049e2:	4413      	add	r3, r2
 80049e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049e8:	463b      	mov	r3, r7
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	011a      	lsls	r2, r3, #4
 80049f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049f4:	4413      	add	r3, r2
 80049f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80049fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d112      	bne.n	8004a2a <USB_EPStartXfer+0x8e2>
 8004a04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a12:	801a      	strh	r2, [r3, #0]
 8004a14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a26:	801a      	strh	r2, [r3, #0]
 8004a28:	e05d      	b.n	8004ae6 <USB_EPStartXfer+0x99e>
 8004a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a2e:	2b3e      	cmp	r3, #62	; 0x3e
 8004a30:	d817      	bhi.n	8004a62 <USB_EPStartXfer+0x91a>
 8004a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a36:	085b      	lsrs	r3, r3, #1
 8004a38:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d004      	beq.n	8004a52 <USB_EPStartXfer+0x90a>
 8004a48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	029b      	lsls	r3, r3, #10
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a5e:	801a      	strh	r2, [r3, #0]
 8004a60:	e041      	b.n	8004ae6 <USB_EPStartXfer+0x99e>
 8004a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <USB_EPStartXfer+0x93a>
 8004a78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	029b      	lsls	r3, r3, #10
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a98:	801a      	strh	r2, [r3, #0]
 8004a9a:	e024      	b.n	8004ae6 <USB_EPStartXfer+0x99e>
 8004a9c:	463b      	mov	r3, r7
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	785b      	ldrb	r3, [r3, #1]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d11f      	bne.n	8004ae6 <USB_EPStartXfer+0x99e>
 8004aa6:	1d3b      	adds	r3, r7, #4
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004aae:	1d3b      	adds	r3, r7, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004abe:	4413      	add	r3, r2
 8004ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ac4:	463b      	mov	r3, r7
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	011a      	lsls	r2, r3, #4
 8004acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ad6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ae4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004ae6:	463b      	mov	r3, r7
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	891b      	ldrh	r3, [r3, #8]
 8004aec:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004af0:	463b      	mov	r3, r7
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6959      	ldr	r1, [r3, #20]
 8004af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004b00:	1d38      	adds	r0, r7, #4
 8004b02:	6800      	ldr	r0, [r0, #0]
 8004b04:	f000 fd7e 	bl	8005604 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004b08:	463b      	mov	r3, r7
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	785b      	ldrb	r3, [r3, #1]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d122      	bne.n	8004b58 <USB_EPStartXfer+0xa10>
 8004b12:	1d3b      	adds	r3, r7, #4
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	463b      	mov	r3, r7
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004b30:	1d3b      	adds	r3, r7, #4
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	463b      	mov	r3, r7
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	441a      	add	r2, r3
 8004b3e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	8013      	strh	r3, [r2, #0]
 8004b56:	e026      	b.n	8004ba6 <USB_EPStartXfer+0xa5e>
 8004b58:	463b      	mov	r3, r7
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	785b      	ldrb	r3, [r3, #1]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d121      	bne.n	8004ba6 <USB_EPStartXfer+0xa5e>
 8004b62:	1d3b      	adds	r3, r7, #4
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	463b      	mov	r3, r7
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004b80:	1d3b      	adds	r3, r7, #4
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	463b      	mov	r3, r7
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	441a      	add	r2, r3
 8004b8e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004ba6:	1d3b      	adds	r3, r7, #4
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	463b      	mov	r3, r7
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	f107 020e 	add.w	r2, r7, #14
 8004bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc4:	8013      	strh	r3, [r2, #0]
 8004bc6:	f107 030e 	add.w	r3, r7, #14
 8004bca:	f107 020e 	add.w	r2, r7, #14
 8004bce:	8812      	ldrh	r2, [r2, #0]
 8004bd0:	f082 0210 	eor.w	r2, r2, #16
 8004bd4:	801a      	strh	r2, [r3, #0]
 8004bd6:	f107 030e 	add.w	r3, r7, #14
 8004bda:	f107 020e 	add.w	r2, r7, #14
 8004bde:	8812      	ldrh	r2, [r2, #0]
 8004be0:	f082 0220 	eor.w	r2, r2, #32
 8004be4:	801a      	strh	r2, [r3, #0]
 8004be6:	1d3b      	adds	r3, r7, #4
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	463b      	mov	r3, r7
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	441a      	add	r2, r3
 8004bf4:	f107 030e 	add.w	r3, r7, #14
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	8013      	strh	r3, [r2, #0]
 8004c0e:	e3b5      	b.n	800537c <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004c10:	463b      	mov	r3, r7
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	7b1b      	ldrb	r3, [r3, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f040 8090 	bne.w	8004d3c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004c1c:	463b      	mov	r3, r7
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699a      	ldr	r2, [r3, #24]
 8004c22:	463b      	mov	r3, r7
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d90e      	bls.n	8004c4a <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004c2c:	463b      	mov	r3, r7
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004c36:	463b      	mov	r3, r7
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699a      	ldr	r2, [r3, #24]
 8004c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c40:	1ad2      	subs	r2, r2, r3
 8004c42:	463b      	mov	r3, r7
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	619a      	str	r2, [r3, #24]
 8004c48:	e008      	b.n	8004c5c <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004c4a:	463b      	mov	r3, r7
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004c54:	463b      	mov	r3, r7
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004c5c:	1d3b      	adds	r3, r7, #4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c64:	1d3b      	adds	r3, r7, #4
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c74:	4413      	add	r3, r2
 8004c76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c7a:	463b      	mov	r3, r7
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	011a      	lsls	r2, r3, #4
 8004c82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c86:	4413      	add	r3, r2
 8004c88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d116      	bne.n	8004cc6 <USB_EPStartXfer+0xb7e>
 8004c98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	e32c      	b.n	8005320 <USB_EPStartXfer+0x11d8>
 8004cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cca:	2b3e      	cmp	r3, #62	; 0x3e
 8004ccc:	d818      	bhi.n	8004d00 <USB_EPStartXfer+0xbb8>
 8004cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd2:	085b      	lsrs	r3, r3, #1
 8004cd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d004      	beq.n	8004cee <USB_EPStartXfer+0xba6>
 8004ce4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004ce8:	3301      	adds	r3, #1
 8004cea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004cee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	029b      	lsls	r3, r3, #10
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cfc:	801a      	strh	r2, [r3, #0]
 8004cfe:	e30f      	b.n	8005320 <USB_EPStartXfer+0x11d8>
 8004d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d0e:	f003 031f 	and.w	r3, r3, #31
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d104      	bne.n	8004d20 <USB_EPStartXfer+0xbd8>
 8004d16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004d20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	029b      	lsls	r3, r3, #10
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d38:	801a      	strh	r2, [r3, #0]
 8004d3a:	e2f1      	b.n	8005320 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004d3c:	463b      	mov	r3, r7
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	78db      	ldrb	r3, [r3, #3]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	f040 818f 	bne.w	8005066 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004d48:	463b      	mov	r3, r7
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	785b      	ldrb	r3, [r3, #1]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d175      	bne.n	8004e3e <USB_EPStartXfer+0xcf6>
 8004d52:	1d3b      	adds	r3, r7, #4
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d5a:	1d3b      	adds	r3, r7, #4
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	461a      	mov	r2, r3
 8004d66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d70:	463b      	mov	r3, r7
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	011a      	lsls	r2, r3, #4
 8004d78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d86:	463b      	mov	r3, r7
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d116      	bne.n	8004dbe <USB_EPStartXfer+0xc76>
 8004d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004da2:	801a      	strh	r2, [r3, #0]
 8004da4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dba:	801a      	strh	r2, [r3, #0]
 8004dbc:	e065      	b.n	8004e8a <USB_EPStartXfer+0xd42>
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	2b3e      	cmp	r3, #62	; 0x3e
 8004dc6:	d81a      	bhi.n	8004dfe <USB_EPStartXfer+0xcb6>
 8004dc8:	463b      	mov	r3, r7
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	085b      	lsrs	r3, r3, #1
 8004dd0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004dd4:	463b      	mov	r3, r7
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d004      	beq.n	8004dec <USB_EPStartXfer+0xca4>
 8004de2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004de6:	3301      	adds	r3, #1
 8004de8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004dec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	029b      	lsls	r3, r3, #10
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dfa:	801a      	strh	r2, [r3, #0]
 8004dfc:	e045      	b.n	8004e8a <USB_EPStartXfer+0xd42>
 8004dfe:	463b      	mov	r3, r7
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e0a:	463b      	mov	r3, r7
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d104      	bne.n	8004e22 <USB_EPStartXfer+0xcda>
 8004e18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	029b      	lsls	r3, r3, #10
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e3a:	801a      	strh	r2, [r3, #0]
 8004e3c:	e025      	b.n	8004e8a <USB_EPStartXfer+0xd42>
 8004e3e:	463b      	mov	r3, r7
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	785b      	ldrb	r3, [r3, #1]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d120      	bne.n	8004e8a <USB_EPStartXfer+0xd42>
 8004e48:	1d3b      	adds	r3, r7, #4
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e50:	1d3b      	adds	r3, r7, #4
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e60:	4413      	add	r3, r2
 8004e62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e66:	463b      	mov	r3, r7
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	011a      	lsls	r2, r3, #4
 8004e6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e72:	4413      	add	r3, r2
 8004e74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e7c:	463b      	mov	r3, r7
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004e88:	801a      	strh	r2, [r3, #0]
 8004e8a:	1d3b      	adds	r3, r7, #4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e92:	463b      	mov	r3, r7
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	785b      	ldrb	r3, [r3, #1]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d175      	bne.n	8004f88 <USB_EPStartXfer+0xe40>
 8004e9c:	1d3b      	adds	r3, r7, #4
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ea4:	1d3b      	adds	r3, r7, #4
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004eba:	463b      	mov	r3, r7
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	011a      	lsls	r2, r3, #4
 8004ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ecc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ed0:	463b      	mov	r3, r7
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d116      	bne.n	8004f08 <USB_EPStartXfer+0xdc0>
 8004eda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004eec:	801a      	strh	r2, [r3, #0]
 8004eee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f04:	801a      	strh	r2, [r3, #0]
 8004f06:	e061      	b.n	8004fcc <USB_EPStartXfer+0xe84>
 8004f08:	463b      	mov	r3, r7
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b3e      	cmp	r3, #62	; 0x3e
 8004f10:	d81a      	bhi.n	8004f48 <USB_EPStartXfer+0xe00>
 8004f12:	463b      	mov	r3, r7
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	085b      	lsrs	r3, r3, #1
 8004f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f1e:	463b      	mov	r3, r7
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d004      	beq.n	8004f36 <USB_EPStartXfer+0xdee>
 8004f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f30:	3301      	adds	r3, #1
 8004f32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	029b      	lsls	r3, r3, #10
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f44:	801a      	strh	r2, [r3, #0]
 8004f46:	e041      	b.n	8004fcc <USB_EPStartXfer+0xe84>
 8004f48:	463b      	mov	r3, r7
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f54:	463b      	mov	r3, r7
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 031f 	and.w	r3, r3, #31
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d104      	bne.n	8004f6c <USB_EPStartXfer+0xe24>
 8004f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f66:	3b01      	subs	r3, #1
 8004f68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	029b      	lsls	r3, r3, #10
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f84:	801a      	strh	r2, [r3, #0]
 8004f86:	e021      	b.n	8004fcc <USB_EPStartXfer+0xe84>
 8004f88:	463b      	mov	r3, r7
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	785b      	ldrb	r3, [r3, #1]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d11c      	bne.n	8004fcc <USB_EPStartXfer+0xe84>
 8004f92:	1d3b      	adds	r3, r7, #4
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fa8:	463b      	mov	r3, r7
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	011a      	lsls	r2, r3, #4
 8004fb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004fbe:	463b      	mov	r3, r7
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004fca:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004fcc:	463b      	mov	r3, r7
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 81a4 	beq.w	8005320 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004fd8:	1d3b      	adds	r3, r7, #4
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	463b      	mov	r3, r7
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004fec:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <USB_EPStartXfer+0xebc>
 8004ff8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10d      	bne.n	8005020 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005004:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800500c:	2b00      	cmp	r3, #0
 800500e:	f040 8187 	bne.w	8005320 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005012:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	f040 8180 	bne.w	8005320 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005020:	1d3b      	adds	r3, r7, #4
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	463b      	mov	r3, r7
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800503e:	1d3b      	adds	r3, r7, #4
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	463b      	mov	r3, r7
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	441a      	add	r2, r3
 800504c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005060:	b29b      	uxth	r3, r3
 8005062:	8013      	strh	r3, [r2, #0]
 8005064:	e15c      	b.n	8005320 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005066:	463b      	mov	r3, r7
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	78db      	ldrb	r3, [r3, #3]
 800506c:	2b01      	cmp	r3, #1
 800506e:	f040 8155 	bne.w	800531c <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005072:	463b      	mov	r3, r7
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	699a      	ldr	r2, [r3, #24]
 8005078:	463b      	mov	r3, r7
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	429a      	cmp	r2, r3
 8005080:	d90e      	bls.n	80050a0 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005082:	463b      	mov	r3, r7
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800508c:	463b      	mov	r3, r7
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699a      	ldr	r2, [r3, #24]
 8005092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005096:	1ad2      	subs	r2, r2, r3
 8005098:	463b      	mov	r3, r7
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	619a      	str	r2, [r3, #24]
 800509e:	e008      	b.n	80050b2 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80050a0:	463b      	mov	r3, r7
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80050aa:	463b      	mov	r3, r7
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2200      	movs	r2, #0
 80050b0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80050b2:	463b      	mov	r3, r7
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	785b      	ldrb	r3, [r3, #1]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d16f      	bne.n	800519c <USB_EPStartXfer+0x1054>
 80050bc:	1d3b      	adds	r3, r7, #4
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050c4:	1d3b      	adds	r3, r7, #4
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	461a      	mov	r2, r3
 80050d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80050d4:	4413      	add	r3, r2
 80050d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050da:	463b      	mov	r3, r7
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	011a      	lsls	r2, r3, #4
 80050e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80050e6:	4413      	add	r3, r2
 80050e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d116      	bne.n	8005126 <USB_EPStartXfer+0xfde>
 80050f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005104:	b29a      	uxth	r2, r3
 8005106:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800510a:	801a      	strh	r2, [r3, #0]
 800510c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	b29b      	uxth	r3, r3
 8005114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800511c:	b29a      	uxth	r2, r3
 800511e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005122:	801a      	strh	r2, [r3, #0]
 8005124:	e05f      	b.n	80051e6 <USB_EPStartXfer+0x109e>
 8005126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800512a:	2b3e      	cmp	r3, #62	; 0x3e
 800512c:	d818      	bhi.n	8005160 <USB_EPStartXfer+0x1018>
 800512e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005132:	085b      	lsrs	r3, r3, #1
 8005134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d004      	beq.n	800514e <USB_EPStartXfer+0x1006>
 8005144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005148:	3301      	adds	r3, #1
 800514a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800514e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005152:	b29b      	uxth	r3, r3
 8005154:	029b      	lsls	r3, r3, #10
 8005156:	b29a      	uxth	r2, r3
 8005158:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800515c:	801a      	strh	r2, [r3, #0]
 800515e:	e042      	b.n	80051e6 <USB_EPStartXfer+0x109e>
 8005160:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005164:	095b      	lsrs	r3, r3, #5
 8005166:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800516a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800516e:	f003 031f 	and.w	r3, r3, #31
 8005172:	2b00      	cmp	r3, #0
 8005174:	d104      	bne.n	8005180 <USB_EPStartXfer+0x1038>
 8005176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800517a:	3b01      	subs	r3, #1
 800517c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005184:	b29b      	uxth	r3, r3
 8005186:	029b      	lsls	r3, r3, #10
 8005188:	b29b      	uxth	r3, r3
 800518a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800518e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005192:	b29a      	uxth	r2, r3
 8005194:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005198:	801a      	strh	r2, [r3, #0]
 800519a:	e024      	b.n	80051e6 <USB_EPStartXfer+0x109e>
 800519c:	463b      	mov	r3, r7
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	785b      	ldrb	r3, [r3, #1]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d11f      	bne.n	80051e6 <USB_EPStartXfer+0x109e>
 80051a6:	1d3b      	adds	r3, r7, #4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051ae:	1d3b      	adds	r3, r7, #4
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051be:	4413      	add	r3, r2
 80051c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051c4:	463b      	mov	r3, r7
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	011a      	lsls	r2, r3, #4
 80051cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051d0:	4413      	add	r3, r2
 80051d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80051da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051de:	b29a      	uxth	r2, r3
 80051e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051e4:	801a      	strh	r2, [r3, #0]
 80051e6:	1d3b      	adds	r3, r7, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051ee:	463b      	mov	r3, r7
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	785b      	ldrb	r3, [r3, #1]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d16f      	bne.n	80052d8 <USB_EPStartXfer+0x1190>
 80051f8:	1d3b      	adds	r3, r7, #4
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005200:	1d3b      	adds	r3, r7, #4
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005208:	b29b      	uxth	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005210:	4413      	add	r3, r2
 8005212:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005216:	463b      	mov	r3, r7
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	011a      	lsls	r2, r3, #4
 800521e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005222:	4413      	add	r3, r2
 8005224:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005228:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800522c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005230:	2b00      	cmp	r3, #0
 8005232:	d116      	bne.n	8005262 <USB_EPStartXfer+0x111a>
 8005234:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29b      	uxth	r3, r3
 800523c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005240:	b29a      	uxth	r2, r3
 8005242:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005246:	801a      	strh	r2, [r3, #0]
 8005248:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
 8005250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005258:	b29a      	uxth	r2, r3
 800525a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800525e:	801a      	strh	r2, [r3, #0]
 8005260:	e05e      	b.n	8005320 <USB_EPStartXfer+0x11d8>
 8005262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005266:	2b3e      	cmp	r3, #62	; 0x3e
 8005268:	d818      	bhi.n	800529c <USB_EPStartXfer+0x1154>
 800526a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800526e:	085b      	lsrs	r3, r3, #1
 8005270:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005274:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d004      	beq.n	800528a <USB_EPStartXfer+0x1142>
 8005280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005284:	3301      	adds	r3, #1
 8005286:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800528a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800528e:	b29b      	uxth	r3, r3
 8005290:	029b      	lsls	r3, r3, #10
 8005292:	b29a      	uxth	r2, r3
 8005294:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005298:	801a      	strh	r2, [r3, #0]
 800529a:	e041      	b.n	8005320 <USB_EPStartXfer+0x11d8>
 800529c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a0:	095b      	lsrs	r3, r3, #5
 80052a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052aa:	f003 031f 	and.w	r3, r3, #31
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d104      	bne.n	80052bc <USB_EPStartXfer+0x1174>
 80052b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052b6:	3b01      	subs	r3, #1
 80052b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	029b      	lsls	r3, r3, #10
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052d4:	801a      	strh	r2, [r3, #0]
 80052d6:	e023      	b.n	8005320 <USB_EPStartXfer+0x11d8>
 80052d8:	463b      	mov	r3, r7
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	785b      	ldrb	r3, [r3, #1]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d11e      	bne.n	8005320 <USB_EPStartXfer+0x11d8>
 80052e2:	1d3b      	adds	r3, r7, #4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	461a      	mov	r2, r3
 80052ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052f2:	4413      	add	r3, r2
 80052f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052f8:	463b      	mov	r3, r7
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	011a      	lsls	r2, r3, #4
 8005300:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005304:	4413      	add	r3, r2
 8005306:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800530a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800530e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005312:	b29a      	uxth	r2, r3
 8005314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005318:	801a      	strh	r2, [r3, #0]
 800531a:	e001      	b.n	8005320 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e02e      	b.n	800537e <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005320:	1d3b      	adds	r3, r7, #4
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	463b      	mov	r3, r7
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29b      	uxth	r3, r3
 8005332:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800533e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005342:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005346:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800534a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800534e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005352:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005356:	1d3b      	adds	r3, r7, #4
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	463b      	mov	r3, r7
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	441a      	add	r2, r3
 8005364:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800536c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005378:	b29b      	uxth	r3, r3
 800537a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	785b      	ldrb	r3, [r3, #1]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d020      	beq.n	80053dc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b0:	81bb      	strh	r3, [r7, #12]
 80053b2:	89bb      	ldrh	r3, [r7, #12]
 80053b4:	f083 0310 	eor.w	r3, r3, #16
 80053b8:	81bb      	strh	r3, [r7, #12]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	441a      	add	r2, r3
 80053c4:	89bb      	ldrh	r3, [r7, #12]
 80053c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	8013      	strh	r3, [r2, #0]
 80053da:	e01f      	b.n	800541c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f2:	81fb      	strh	r3, [r7, #14]
 80053f4:	89fb      	ldrh	r3, [r7, #14]
 80053f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053fa:	81fb      	strh	r3, [r7, #14]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	441a      	add	r2, r3
 8005406:	89fb      	ldrh	r3, [r7, #14]
 8005408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800540c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005418:	b29b      	uxth	r3, r3
 800541a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr

08005428 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	7b1b      	ldrb	r3, [r3, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	f040 809d 	bne.w	8005576 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	785b      	ldrb	r3, [r3, #1]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d04c      	beq.n	80054de <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	823b      	strh	r3, [r7, #16]
 8005452:	8a3b      	ldrh	r3, [r7, #16]
 8005454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01b      	beq.n	8005494 <USB_EPClearStall+0x6c>
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	b29b      	uxth	r3, r3
 800546a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005472:	81fb      	strh	r3, [r7, #14]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	89fb      	ldrh	r3, [r7, #14]
 8005480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800548c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005490:	b29b      	uxth	r3, r3
 8005492:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	78db      	ldrb	r3, [r3, #3]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d06c      	beq.n	8005576 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054b2:	81bb      	strh	r3, [r7, #12]
 80054b4:	89bb      	ldrh	r3, [r7, #12]
 80054b6:	f083 0320 	eor.w	r3, r3, #32
 80054ba:	81bb      	strh	r3, [r7, #12]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	441a      	add	r2, r3
 80054c6:	89bb      	ldrh	r3, [r7, #12]
 80054c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d8:	b29b      	uxth	r3, r3
 80054da:	8013      	strh	r3, [r2, #0]
 80054dc:	e04b      	b.n	8005576 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	82fb      	strh	r3, [r7, #22]
 80054ec:	8afb      	ldrh	r3, [r7, #22]
 80054ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d01b      	beq.n	800552e <USB_EPClearStall+0x106>
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	b29b      	uxth	r3, r3
 8005504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550c:	82bb      	strh	r3, [r7, #20]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	441a      	add	r2, r3
 8005518:	8abb      	ldrh	r3, [r7, #20]
 800551a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800551e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005522:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800552a:	b29b      	uxth	r3, r3
 800552c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29b      	uxth	r3, r3
 800553c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005544:	827b      	strh	r3, [r7, #18]
 8005546:	8a7b      	ldrh	r3, [r7, #18]
 8005548:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800554c:	827b      	strh	r3, [r7, #18]
 800554e:	8a7b      	ldrh	r3, [r7, #18]
 8005550:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005554:	827b      	strh	r3, [r7, #18]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	441a      	add	r2, r3
 8005560:	8a7b      	ldrh	r3, [r7, #18]
 8005562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005572:	b29b      	uxth	r3, r3
 8005574:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr

08005582 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	460b      	mov	r3, r1
 800558c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800558e:	78fb      	ldrb	r3, [r7, #3]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d103      	bne.n	800559c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2280      	movs	r2, #128	; 0x80
 8005598:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr

080055a8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bc80      	pop	{r7}
 80055ba:	4770      	bx	lr

080055bc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr

080055d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055de:	b29b      	uxth	r3, r3
 80055e0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80055e2:	68fb      	ldr	r3, [r7, #12]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bc80      	pop	{r7}
 80055ec:	4770      	bx	lr

080055ee <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005604:	b480      	push	{r7}
 8005606:	b08d      	sub	sp, #52	; 0x34
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	4611      	mov	r1, r2
 8005610:	461a      	mov	r2, r3
 8005612:	460b      	mov	r3, r1
 8005614:	80fb      	strh	r3, [r7, #6]
 8005616:	4613      	mov	r3, r2
 8005618:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800561a:	88bb      	ldrh	r3, [r7, #4]
 800561c:	3301      	adds	r3, #1
 800561e:	085b      	lsrs	r3, r3, #1
 8005620:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	005a      	lsls	r2, r3, #1
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800563c:	e01e      	b.n	800567c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	3301      	adds	r3, #1
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	b29b      	uxth	r3, r3
 8005650:	021b      	lsls	r3, r3, #8
 8005652:	b29b      	uxth	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	b29a      	uxth	r2, r3
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	3302      	adds	r3, #2
 8005668:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800566a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566c:	3302      	adds	r3, #2
 800566e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	3301      	adds	r3, #1
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005678:	3b01      	subs	r3, #1
 800567a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800567c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1dd      	bne.n	800563e <USB_WritePMA+0x3a>
  }
}
 8005682:	bf00      	nop
 8005684:	3734      	adds	r7, #52	; 0x34
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr

0800568c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800568c:	b480      	push	{r7}
 800568e:	b08b      	sub	sp, #44	; 0x2c
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	4611      	mov	r1, r2
 8005698:	461a      	mov	r2, r3
 800569a:	460b      	mov	r3, r1
 800569c:	80fb      	strh	r3, [r7, #6]
 800569e:	4613      	mov	r3, r2
 80056a0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80056a2:	88bb      	ldrh	r3, [r7, #4]
 80056a4:	085b      	lsrs	r3, r3, #1
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056b2:	88fb      	ldrh	r3, [r7, #6]
 80056b4:	005a      	lsls	r2, r3, #1
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056be:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
 80056c4:	e01b      	b.n	80056fe <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	3302      	adds	r3, #2
 80056d2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	3301      	adds	r3, #1
 80056e0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	0a1b      	lsrs	r3, r3, #8
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	3301      	adds	r3, #1
 80056f0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	3302      	adds	r3, #2
 80056f6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	3b01      	subs	r3, #1
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e0      	bne.n	80056c6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005704:	88bb      	ldrh	r3, [r7, #4]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	b29b      	uxth	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d007      	beq.n	8005720 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	b2da      	uxtb	r2, r3
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	701a      	strb	r2, [r3, #0]
  }
}
 8005720:	bf00      	nop
 8005722:	372c      	adds	r7, #44	; 0x2c
 8005724:	46bd      	mov	sp, r7
 8005726:	bc80      	pop	{r7}
 8005728:	4770      	bx	lr

0800572a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	460b      	mov	r3, r1
 8005734:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	7c1b      	ldrb	r3, [r3, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d115      	bne.n	800576e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005742:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005746:	2202      	movs	r2, #2
 8005748:	2181      	movs	r1, #129	; 0x81
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f001 fe91 	bl	8007472 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005756:	f44f 7300 	mov.w	r3, #512	; 0x200
 800575a:	2202      	movs	r2, #2
 800575c:	2101      	movs	r1, #1
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f001 fe87 	bl	8007472 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800576c:	e012      	b.n	8005794 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800576e:	2340      	movs	r3, #64	; 0x40
 8005770:	2202      	movs	r2, #2
 8005772:	2181      	movs	r1, #129	; 0x81
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f001 fe7c 	bl	8007472 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005780:	2340      	movs	r3, #64	; 0x40
 8005782:	2202      	movs	r2, #2
 8005784:	2101      	movs	r1, #1
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f001 fe73 	bl	8007472 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005794:	2308      	movs	r3, #8
 8005796:	2203      	movs	r2, #3
 8005798:	2182      	movs	r1, #130	; 0x82
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 fe69 	bl	8007472 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80057a6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80057aa:	f001 ff89 	bl	80076c0 <USBD_static_malloc>
 80057ae:	4602      	mov	r2, r0
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d102      	bne.n	80057c6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80057c0:	2301      	movs	r3, #1
 80057c2:	73fb      	strb	r3, [r7, #15]
 80057c4:	e026      	b.n	8005814 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057cc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2200      	movs	r2, #0
 80057dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	7c1b      	ldrb	r3, [r3, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d109      	bne.n	8005804 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057fa:	2101      	movs	r1, #1
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f001 ff29 	bl	8007654 <USBD_LL_PrepareReceive>
 8005802:	e007      	b.n	8005814 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800580a:	2340      	movs	r3, #64	; 0x40
 800580c:	2101      	movs	r1, #1
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f001 ff20 	bl	8007654 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005814:	7bfb      	ldrb	r3, [r7, #15]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	460b      	mov	r3, r1
 8005828:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800582e:	2181      	movs	r1, #129	; 0x81
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f001 fe44 	bl	80074be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800583c:	2101      	movs	r1, #1
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f001 fe3d 	bl	80074be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800584c:	2182      	movs	r1, #130	; 0x82
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f001 fe35 	bl	80074be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00e      	beq.n	8005882 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005874:	4618      	mov	r0, r3
 8005876:	f001 ff2f 	bl	80076d8 <USBD_static_free>
    pdev->pClassData = NULL;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005882:	7bfb      	ldrb	r3, [r7, #15]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800589c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d039      	beq.n	800592a <USBD_CDC_Setup+0x9e>
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	d17c      	bne.n	80059b4 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	88db      	ldrh	r3, [r3, #6]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d029      	beq.n	8005916 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	b25b      	sxtb	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	da11      	bge.n	80058f0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80058d8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	88d2      	ldrh	r2, [r2, #6]
 80058de:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80058e0:	6939      	ldr	r1, [r7, #16]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	88db      	ldrh	r3, [r3, #6]
 80058e6:	461a      	mov	r2, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f001 f9f9 	bl	8006ce0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80058ee:	e068      	b.n	80059c2 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	785a      	ldrb	r2, [r3, #1]
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	88db      	ldrh	r3, [r3, #6]
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005906:	6939      	ldr	r1, [r7, #16]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	88db      	ldrh	r3, [r3, #6]
 800590c:	461a      	mov	r2, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f001 fa14 	bl	8006d3c <USBD_CtlPrepareRx>
      break;
 8005914:	e055      	b.n	80059c2 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	7850      	ldrb	r0, [r2, #1]
 8005922:	2200      	movs	r2, #0
 8005924:	6839      	ldr	r1, [r7, #0]
 8005926:	4798      	blx	r3
      break;
 8005928:	e04b      	b.n	80059c2 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	785b      	ldrb	r3, [r3, #1]
 800592e:	2b0a      	cmp	r3, #10
 8005930:	d017      	beq.n	8005962 <USBD_CDC_Setup+0xd6>
 8005932:	2b0b      	cmp	r3, #11
 8005934:	d029      	beq.n	800598a <USBD_CDC_Setup+0xfe>
 8005936:	2b00      	cmp	r3, #0
 8005938:	d133      	bne.n	80059a2 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005940:	2b03      	cmp	r3, #3
 8005942:	d107      	bne.n	8005954 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005944:	f107 030c 	add.w	r3, r7, #12
 8005948:	2202      	movs	r2, #2
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f001 f9c7 	bl	8006ce0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005952:	e02e      	b.n	80059b2 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f001 f958 	bl	8006c0c <USBD_CtlError>
            ret = USBD_FAIL;
 800595c:	2302      	movs	r3, #2
 800595e:	75fb      	strb	r3, [r7, #23]
          break;
 8005960:	e027      	b.n	80059b2 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005968:	2b03      	cmp	r3, #3
 800596a:	d107      	bne.n	800597c <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800596c:	f107 030f 	add.w	r3, r7, #15
 8005970:	2201      	movs	r2, #1
 8005972:	4619      	mov	r1, r3
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f001 f9b3 	bl	8006ce0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800597a:	e01a      	b.n	80059b2 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 f944 	bl	8006c0c <USBD_CtlError>
            ret = USBD_FAIL;
 8005984:	2302      	movs	r3, #2
 8005986:	75fb      	strb	r3, [r7, #23]
          break;
 8005988:	e013      	b.n	80059b2 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005990:	2b03      	cmp	r3, #3
 8005992:	d00d      	beq.n	80059b0 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005994:	6839      	ldr	r1, [r7, #0]
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f001 f938 	bl	8006c0c <USBD_CtlError>
            ret = USBD_FAIL;
 800599c:	2302      	movs	r3, #2
 800599e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80059a0:	e006      	b.n	80059b0 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f001 f931 	bl	8006c0c <USBD_CtlError>
          ret = USBD_FAIL;
 80059aa:	2302      	movs	r3, #2
 80059ac:	75fb      	strb	r3, [r7, #23]
          break;
 80059ae:	e000      	b.n	80059b2 <USBD_CDC_Setup+0x126>
          break;
 80059b0:	bf00      	nop
      }
      break;
 80059b2:	e006      	b.n	80059c2 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f001 f928 	bl	8006c0c <USBD_CtlError>
      ret = USBD_FAIL;
 80059bc:	2302      	movs	r3, #2
 80059be:	75fb      	strb	r3, [r7, #23]
      break;
 80059c0:	bf00      	nop
  }

  return ret;
 80059c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3718      	adds	r7, #24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059de:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059e6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d03a      	beq.n	8005a68 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80059f2:	78fa      	ldrb	r2, [r7, #3]
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	440b      	add	r3, r1
 8005a00:	331c      	adds	r3, #28
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d029      	beq.n	8005a5c <USBD_CDC_DataIn+0x90>
 8005a08:	78fa      	ldrb	r2, [r7, #3]
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	331c      	adds	r3, #28
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	78f9      	ldrb	r1, [r7, #3]
 8005a1c:	68b8      	ldr	r0, [r7, #8]
 8005a1e:	460b      	mov	r3, r1
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	440b      	add	r3, r1
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	4403      	add	r3, r0
 8005a28:	3338      	adds	r3, #56	; 0x38
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a30:	fb03 f301 	mul.w	r3, r3, r1
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d110      	bne.n	8005a5c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005a3a:	78fa      	ldrb	r2, [r7, #3]
 8005a3c:	6879      	ldr	r1, [r7, #4]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	440b      	add	r3, r1
 8005a48:	331c      	adds	r3, #28
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a4e:	78f9      	ldrb	r1, [r7, #3]
 8005a50:	2300      	movs	r3, #0
 8005a52:	2200      	movs	r2, #0
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f001 fdda 	bl	800760e <USBD_LL_Transmit>
 8005a5a:	e003      	b.n	8005a64 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	e000      	b.n	8005a6a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005a68:	2302      	movs	r3, #2
  }
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a84:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a86:	78fb      	ldrb	r3, [r7, #3]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f001 fe05 	bl	800769a <USBD_LL_GetRxDataSize>
 8005a90:	4602      	mov	r2, r0
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00d      	beq.n	8005abe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	4798      	blx	r3

    return USBD_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	e000      	b.n	8005ac0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005abe:	2302      	movs	r3, #2
  }
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d015      	beq.n	8005b0e <USBD_CDC_EP0_RxReady+0x46>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ae8:	2bff      	cmp	r3, #255	; 0xff
 8005aea:	d010      	beq.n	8005b0e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005afa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b02:	b292      	uxth	r2, r2
 8005b04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	22ff      	movs	r2, #255	; 0xff
 8005b0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2243      	movs	r2, #67	; 0x43
 8005b24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005b26:	4b03      	ldr	r3, [pc, #12]	; (8005b34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bc80      	pop	{r7}
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	20000094 	.word	0x20000094

08005b38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2243      	movs	r2, #67	; 0x43
 8005b44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005b46:	4b03      	ldr	r3, [pc, #12]	; (8005b54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20000050 	.word	0x20000050

08005b58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2243      	movs	r2, #67	; 0x43
 8005b64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005b66:	4b03      	ldr	r3, [pc, #12]	; (8005b74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	200000d8 	.word	0x200000d8

08005b78 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	220a      	movs	r2, #10
 8005b84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005b86:	4b03      	ldr	r3, [pc, #12]	; (8005b94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bc80      	pop	{r7}
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	2000000c 	.word	0x2000000c

08005b98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d005      	beq.n	8005bb8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr

08005bc4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bd8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005be2:	88fa      	ldrh	r2, [r7, #6]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	371c      	adds	r7, #28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc80      	pop	{r7}
 8005bf4:	4770      	bx	lr

08005bf6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b085      	sub	sp, #20
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c06:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr

08005c1c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d01c      	beq.n	8005c70 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d115      	bne.n	8005c6c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	2181      	movs	r1, #129	; 0x81
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f001 fcd3 	bl	800760e <USBD_LL_Transmit>

      return USBD_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e002      	b.n	8005c72 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e000      	b.n	8005c72 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005c70:	2302      	movs	r3, #2
  }
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c88:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d017      	beq.n	8005cc4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	7c1b      	ldrb	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d109      	bne.n	8005cb0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f001 fcd3 	bl	8007654 <USBD_LL_PrepareReceive>
 8005cae:	e007      	b.n	8005cc0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cb6:	2340      	movs	r3, #64	; 0x40
 8005cb8:	2101      	movs	r1, #1
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f001 fcca 	bl	8007654 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e000      	b.n	8005cc6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005cc4:	2302      	movs	r3, #2
  }
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	e01a      	b.n	8005d1c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	79fa      	ldrb	r2, [r7, #7]
 8005d12:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f001 fb37 	bl	8007388 <USBD_LL_Init>

  return USBD_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d006      	beq.n	8005d46 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	73fb      	strb	r3, [r7, #15]
 8005d44:	e001      	b.n	8005d4a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005d46:	2302      	movs	r3, #2
 8005d48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr

08005d56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f001 fb6c 	bl	800743c <USBD_LL_Start>

  return USBD_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr

08005d82 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d8e:	2302      	movs	r3, #2
 8005d90:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00c      	beq.n	8005db6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	78fa      	ldrb	r2, [r7, #3]
 8005da6:	4611      	mov	r1, r2
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	4798      	blx	r3
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	78fa      	ldrb	r2, [r7, #3]
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	4798      	blx	r3

  return USBD_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005df6:	6839      	ldr	r1, [r7, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 fecb 	bl	8006b94 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d00c      	beq.n	8005e3c <USBD_LL_SetupStage+0x56>
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d302      	bcc.n	8005e2c <USBD_LL_SetupStage+0x46>
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d010      	beq.n	8005e4c <USBD_LL_SetupStage+0x66>
 8005e2a:	e017      	b.n	8005e5c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e32:	4619      	mov	r1, r3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f9cb 	bl	80061d0 <USBD_StdDevReq>
      break;
 8005e3a:	e01a      	b.n	8005e72 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e42:	4619      	mov	r1, r3
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fa2d 	bl	80062a4 <USBD_StdItfReq>
      break;
 8005e4a:	e012      	b.n	8005e72 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e52:	4619      	mov	r1, r3
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fa6b 	bl	8006330 <USBD_StdEPReq>
      break;
 8005e5a:	e00a      	b.n	8005e72 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	4619      	mov	r1, r3
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f001 fb46 	bl	80074fc <USBD_LL_StallEP>
      break;
 8005e70:	bf00      	nop
  }

  return USBD_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	460b      	mov	r3, r1
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005e8a:	7afb      	ldrb	r3, [r7, #11]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d14b      	bne.n	8005f28 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e96:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	d134      	bne.n	8005f0c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d919      	bls.n	8005ee2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	1ad2      	subs	r2, r2, r3
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d203      	bcs.n	8005ed0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	e002      	b.n	8005ed6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 ff4c 	bl	8006d78 <USBD_CtlContinueRx>
 8005ee0:	e038      	b.n	8005f54 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d105      	bne.n	8005f04 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 ff49 	bl	8006d9c <USBD_CtlSendStatus>
 8005f0a:	e023      	b.n	8005f54 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f12:	2b05      	cmp	r3, #5
 8005f14:	d11e      	bne.n	8005f54 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005f1e:	2100      	movs	r1, #0
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f001 faeb 	bl	80074fc <USBD_LL_StallEP>
 8005f26:	e015      	b.n	8005f54 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00d      	beq.n	8005f50 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d108      	bne.n	8005f50 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	7afa      	ldrb	r2, [r7, #11]
 8005f48:	4611      	mov	r1, r2
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	4798      	blx	r3
 8005f4e:	e001      	b.n	8005f54 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f50:	2302      	movs	r3, #2
 8005f52:	e000      	b.n	8005f56 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b086      	sub	sp, #24
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	460b      	mov	r3, r1
 8005f68:	607a      	str	r2, [r7, #4]
 8005f6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f6c:	7afb      	ldrb	r3, [r7, #11]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d17f      	bne.n	8006072 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3314      	adds	r3, #20
 8005f76:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d15c      	bne.n	800603c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d915      	bls.n	8005fba <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	1ad2      	subs	r2, r2, r3
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 feb6 	bl	8006d18 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fac:	2300      	movs	r3, #0
 8005fae:	2200      	movs	r2, #0
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f001 fb4e 	bl	8007654 <USBD_LL_PrepareReceive>
 8005fb8:	e04e      	b.n	8006058 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	6912      	ldr	r2, [r2, #16]
 8005fc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fc6:	fb02 f201 	mul.w	r2, r2, r1
 8005fca:	1a9b      	subs	r3, r3, r2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d11c      	bne.n	800600a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d316      	bcc.n	800600a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d20f      	bcs.n	800600a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005fea:	2200      	movs	r2, #0
 8005fec:	2100      	movs	r1, #0
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 fe92 	bl	8006d18 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	2200      	movs	r2, #0
 8006000:	2100      	movs	r1, #0
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f001 fb26 	bl	8007654 <USBD_LL_PrepareReceive>
 8006008:	e026      	b.n	8006058 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800601c:	2b03      	cmp	r3, #3
 800601e:	d105      	bne.n	800602c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800602c:	2180      	movs	r1, #128	; 0x80
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f001 fa64 	bl	80074fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 fec4 	bl	8006dc2 <USBD_CtlReceiveStatus>
 800603a:	e00d      	b.n	8006058 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006042:	2b04      	cmp	r3, #4
 8006044:	d004      	beq.n	8006050 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800604c:	2b00      	cmp	r3, #0
 800604e:	d103      	bne.n	8006058 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006050:	2180      	movs	r1, #128	; 0x80
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f001 fa52 	bl	80074fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800605e:	2b01      	cmp	r3, #1
 8006060:	d11d      	bne.n	800609e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f7ff fe83 	bl	8005d6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006070:	e015      	b.n	800609e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00d      	beq.n	800609a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006084:	2b03      	cmp	r3, #3
 8006086:	d108      	bne.n	800609a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	7afa      	ldrb	r2, [r7, #11]
 8006092:	4611      	mov	r1, r2
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	4798      	blx	r3
 8006098:	e001      	b.n	800609e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800609a:	2302      	movs	r3, #2
 800609c:	e000      	b.n	80060a0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060b0:	2340      	movs	r3, #64	; 0x40
 80060b2:	2200      	movs	r2, #0
 80060b4:	2100      	movs	r1, #0
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f001 f9db 	bl	8007472 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2240      	movs	r2, #64	; 0x40
 80060c8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060cc:	2340      	movs	r3, #64	; 0x40
 80060ce:	2200      	movs	r2, #0
 80060d0:	2180      	movs	r1, #128	; 0x80
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f001 f9cd 	bl	8007472 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2240      	movs	r2, #64	; 0x40
 80060e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006108:	2b00      	cmp	r3, #0
 800610a:	d009      	beq.n	8006120 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6852      	ldr	r2, [r2, #4]
 8006118:	b2d2      	uxtb	r2, r2
 800611a:	4611      	mov	r1, r2
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	4798      	blx	r3
  }

  return USBD_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	460b      	mov	r3, r1
 8006134:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	78fa      	ldrb	r2, [r7, #3]
 800613a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr

08006148 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2204      	movs	r2, #4
 8006160:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	bc80      	pop	{r7}
 800616e:	4770      	bx	lr

08006170 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800617e:	2b04      	cmp	r3, #4
 8006180:	d105      	bne.n	800618e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	bc80      	pop	{r7}
 8006198:	4770      	bx	lr

0800619a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	d10b      	bne.n	80061c4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d005      	beq.n	80061c4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	d004      	beq.n	80061f4 <USBD_StdDevReq+0x24>
 80061ea:	2b40      	cmp	r3, #64	; 0x40
 80061ec:	d002      	beq.n	80061f4 <USBD_StdDevReq+0x24>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d008      	beq.n	8006204 <USBD_StdDevReq+0x34>
 80061f2:	e04c      	b.n	800628e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	4798      	blx	r3
      break;
 8006202:	e049      	b.n	8006298 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	785b      	ldrb	r3, [r3, #1]
 8006208:	2b09      	cmp	r3, #9
 800620a:	d83a      	bhi.n	8006282 <USBD_StdDevReq+0xb2>
 800620c:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <USBD_StdDevReq+0x44>)
 800620e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006212:	bf00      	nop
 8006214:	08006265 	.word	0x08006265
 8006218:	08006279 	.word	0x08006279
 800621c:	08006283 	.word	0x08006283
 8006220:	0800626f 	.word	0x0800626f
 8006224:	08006283 	.word	0x08006283
 8006228:	08006247 	.word	0x08006247
 800622c:	0800623d 	.word	0x0800623d
 8006230:	08006283 	.word	0x08006283
 8006234:	0800625b 	.word	0x0800625b
 8006238:	08006251 	.word	0x08006251
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f9d4 	bl	80065ec <USBD_GetDescriptor>
          break;
 8006244:	e022      	b.n	800628c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fb37 	bl	80068bc <USBD_SetAddress>
          break;
 800624e:	e01d      	b.n	800628c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fb74 	bl	8006940 <USBD_SetConfig>
          break;
 8006258:	e018      	b.n	800628c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fbfd 	bl	8006a5c <USBD_GetConfig>
          break;
 8006262:	e013      	b.n	800628c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006264:	6839      	ldr	r1, [r7, #0]
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fc2c 	bl	8006ac4 <USBD_GetStatus>
          break;
 800626c:	e00e      	b.n	800628c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800626e:	6839      	ldr	r1, [r7, #0]
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fc5a 	bl	8006b2a <USBD_SetFeature>
          break;
 8006276:	e009      	b.n	800628c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fc69 	bl	8006b52 <USBD_ClrFeature>
          break;
 8006280:	e004      	b.n	800628c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fcc1 	bl	8006c0c <USBD_CtlError>
          break;
 800628a:	bf00      	nop
      }
      break;
 800628c:	e004      	b.n	8006298 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800628e:	6839      	ldr	r1, [r7, #0]
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fcbb 	bl	8006c0c <USBD_CtlError>
      break;
 8006296:	bf00      	nop
  }

  return ret;
 8006298:	7bfb      	ldrb	r3, [r7, #15]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop

080062a4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062ba:	2b20      	cmp	r3, #32
 80062bc:	d003      	beq.n	80062c6 <USBD_StdItfReq+0x22>
 80062be:	2b40      	cmp	r3, #64	; 0x40
 80062c0:	d001      	beq.n	80062c6 <USBD_StdItfReq+0x22>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d12a      	bne.n	800631c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062cc:	3b01      	subs	r3, #1
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d81d      	bhi.n	800630e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	889b      	ldrh	r3, [r3, #4]
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d813      	bhi.n	8006304 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	6839      	ldr	r1, [r7, #0]
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	4798      	blx	r3
 80062ea:	4603      	mov	r3, r0
 80062ec:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	88db      	ldrh	r3, [r3, #6]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d110      	bne.n	8006318 <USBD_StdItfReq+0x74>
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10d      	bne.n	8006318 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fd4d 	bl	8006d9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006302:	e009      	b.n	8006318 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fc80 	bl	8006c0c <USBD_CtlError>
          break;
 800630c:	e004      	b.n	8006318 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fc7b 	bl	8006c0c <USBD_CtlError>
          break;
 8006316:	e000      	b.n	800631a <USBD_StdItfReq+0x76>
          break;
 8006318:	bf00      	nop
      }
      break;
 800631a:	e004      	b.n	8006326 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fc74 	bl	8006c0c <USBD_CtlError>
      break;
 8006324:	bf00      	nop
  }

  return USBD_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	889b      	ldrh	r3, [r3, #4]
 8006342:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800634c:	2b20      	cmp	r3, #32
 800634e:	d004      	beq.n	800635a <USBD_StdEPReq+0x2a>
 8006350:	2b40      	cmp	r3, #64	; 0x40
 8006352:	d002      	beq.n	800635a <USBD_StdEPReq+0x2a>
 8006354:	2b00      	cmp	r3, #0
 8006356:	d008      	beq.n	800636a <USBD_StdEPReq+0x3a>
 8006358:	e13d      	b.n	80065d6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	6839      	ldr	r1, [r7, #0]
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	4798      	blx	r3
      break;
 8006368:	e13a      	b.n	80065e0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006372:	2b20      	cmp	r3, #32
 8006374:	d10a      	bne.n	800638c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	4798      	blx	r3
 8006384:	4603      	mov	r3, r0
 8006386:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	e12a      	b.n	80065e2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	785b      	ldrb	r3, [r3, #1]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d03e      	beq.n	8006412 <USBD_StdEPReq+0xe2>
 8006394:	2b03      	cmp	r3, #3
 8006396:	d002      	beq.n	800639e <USBD_StdEPReq+0x6e>
 8006398:	2b00      	cmp	r3, #0
 800639a:	d070      	beq.n	800647e <USBD_StdEPReq+0x14e>
 800639c:	e115      	b.n	80065ca <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d002      	beq.n	80063ae <USBD_StdEPReq+0x7e>
 80063a8:	2b03      	cmp	r3, #3
 80063aa:	d015      	beq.n	80063d8 <USBD_StdEPReq+0xa8>
 80063ac:	e02b      	b.n	8006406 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063ae:	7bbb      	ldrb	r3, [r7, #14]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00c      	beq.n	80063ce <USBD_StdEPReq+0x9e>
 80063b4:	7bbb      	ldrb	r3, [r7, #14]
 80063b6:	2b80      	cmp	r3, #128	; 0x80
 80063b8:	d009      	beq.n	80063ce <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80063ba:	7bbb      	ldrb	r3, [r7, #14]
 80063bc:	4619      	mov	r1, r3
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f001 f89c 	bl	80074fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80063c4:	2180      	movs	r1, #128	; 0x80
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f001 f898 	bl	80074fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063cc:	e020      	b.n	8006410 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80063ce:	6839      	ldr	r1, [r7, #0]
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fc1b 	bl	8006c0c <USBD_CtlError>
              break;
 80063d6:	e01b      	b.n	8006410 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	885b      	ldrh	r3, [r3, #2]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10e      	bne.n	80063fe <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80063e0:	7bbb      	ldrb	r3, [r7, #14]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00b      	beq.n	80063fe <USBD_StdEPReq+0xce>
 80063e6:	7bbb      	ldrb	r3, [r7, #14]
 80063e8:	2b80      	cmp	r3, #128	; 0x80
 80063ea:	d008      	beq.n	80063fe <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	88db      	ldrh	r3, [r3, #6]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d104      	bne.n	80063fe <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80063f4:	7bbb      	ldrb	r3, [r7, #14]
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f001 f87f 	bl	80074fc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fccc 	bl	8006d9c <USBD_CtlSendStatus>

              break;
 8006404:	e004      	b.n	8006410 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fbff 	bl	8006c0c <USBD_CtlError>
              break;
 800640e:	bf00      	nop
          }
          break;
 8006410:	e0e0      	b.n	80065d4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006418:	2b02      	cmp	r3, #2
 800641a:	d002      	beq.n	8006422 <USBD_StdEPReq+0xf2>
 800641c:	2b03      	cmp	r3, #3
 800641e:	d015      	beq.n	800644c <USBD_StdEPReq+0x11c>
 8006420:	e026      	b.n	8006470 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00c      	beq.n	8006442 <USBD_StdEPReq+0x112>
 8006428:	7bbb      	ldrb	r3, [r7, #14]
 800642a:	2b80      	cmp	r3, #128	; 0x80
 800642c:	d009      	beq.n	8006442 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800642e:	7bbb      	ldrb	r3, [r7, #14]
 8006430:	4619      	mov	r1, r3
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f001 f862 	bl	80074fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006438:	2180      	movs	r1, #128	; 0x80
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f001 f85e 	bl	80074fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006440:	e01c      	b.n	800647c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fbe1 	bl	8006c0c <USBD_CtlError>
              break;
 800644a:	e017      	b.n	800647c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	885b      	ldrh	r3, [r3, #2]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d112      	bne.n	800647a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800645a:	2b00      	cmp	r3, #0
 800645c:	d004      	beq.n	8006468 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800645e:	7bbb      	ldrb	r3, [r7, #14]
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f001 f869 	bl	800753a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fc97 	bl	8006d9c <USBD_CtlSendStatus>
              }
              break;
 800646e:	e004      	b.n	800647a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fbca 	bl	8006c0c <USBD_CtlError>
              break;
 8006478:	e000      	b.n	800647c <USBD_StdEPReq+0x14c>
              break;
 800647a:	bf00      	nop
          }
          break;
 800647c:	e0aa      	b.n	80065d4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006484:	2b02      	cmp	r3, #2
 8006486:	d002      	beq.n	800648e <USBD_StdEPReq+0x15e>
 8006488:	2b03      	cmp	r3, #3
 800648a:	d032      	beq.n	80064f2 <USBD_StdEPReq+0x1c2>
 800648c:	e097      	b.n	80065be <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800648e:	7bbb      	ldrb	r3, [r7, #14]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d007      	beq.n	80064a4 <USBD_StdEPReq+0x174>
 8006494:	7bbb      	ldrb	r3, [r7, #14]
 8006496:	2b80      	cmp	r3, #128	; 0x80
 8006498:	d004      	beq.n	80064a4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fbb5 	bl	8006c0c <USBD_CtlError>
                break;
 80064a2:	e091      	b.n	80065c8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	da0b      	bge.n	80064c4 <USBD_StdEPReq+0x194>
 80064ac:	7bbb      	ldrb	r3, [r7, #14]
 80064ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064b2:	4613      	mov	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4413      	add	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	3310      	adds	r3, #16
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	4413      	add	r3, r2
 80064c0:	3304      	adds	r3, #4
 80064c2:	e00b      	b.n	80064dc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ca:	4613      	mov	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	4413      	add	r3, r2
 80064da:	3304      	adds	r3, #4
 80064dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2200      	movs	r2, #0
 80064e2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2202      	movs	r2, #2
 80064e8:	4619      	mov	r1, r3
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fbf8 	bl	8006ce0 <USBD_CtlSendData>
              break;
 80064f0:	e06a      	b.n	80065c8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80064f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	da11      	bge.n	800651e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064fa:	7bbb      	ldrb	r3, [r7, #14]
 80064fc:	f003 020f 	and.w	r2, r3, #15
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	440b      	add	r3, r1
 800650c:	3318      	adds	r3, #24
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d117      	bne.n	8006544 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fb78 	bl	8006c0c <USBD_CtlError>
                  break;
 800651c:	e054      	b.n	80065c8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800651e:	7bbb      	ldrb	r3, [r7, #14]
 8006520:	f003 020f 	and.w	r2, r3, #15
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	440b      	add	r3, r1
 8006530:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d104      	bne.n	8006544 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800653a:	6839      	ldr	r1, [r7, #0]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fb65 	bl	8006c0c <USBD_CtlError>
                  break;
 8006542:	e041      	b.n	80065c8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006544:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006548:	2b00      	cmp	r3, #0
 800654a:	da0b      	bge.n	8006564 <USBD_StdEPReq+0x234>
 800654c:	7bbb      	ldrb	r3, [r7, #14]
 800654e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	3310      	adds	r3, #16
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	4413      	add	r3, r2
 8006560:	3304      	adds	r3, #4
 8006562:	e00b      	b.n	800657c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006564:	7bbb      	ldrb	r3, [r7, #14]
 8006566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	4413      	add	r3, r2
 800657a:	3304      	adds	r3, #4
 800657c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800657e:	7bbb      	ldrb	r3, [r7, #14]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <USBD_StdEPReq+0x25a>
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	2b80      	cmp	r3, #128	; 0x80
 8006588:	d103      	bne.n	8006592 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	e00e      	b.n	80065b0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006592:	7bbb      	ldrb	r3, [r7, #14]
 8006594:	4619      	mov	r1, r3
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 ffee 	bl	8007578 <USBD_LL_IsStallEP>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2201      	movs	r2, #1
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	e002      	b.n	80065b0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2202      	movs	r2, #2
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fb92 	bl	8006ce0 <USBD_CtlSendData>
              break;
 80065bc:	e004      	b.n	80065c8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fb23 	bl	8006c0c <USBD_CtlError>
              break;
 80065c6:	bf00      	nop
          }
          break;
 80065c8:	e004      	b.n	80065d4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fb1d 	bl	8006c0c <USBD_CtlError>
          break;
 80065d2:	bf00      	nop
      }
      break;
 80065d4:	e004      	b.n	80065e0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fb17 	bl	8006c0c <USBD_CtlError>
      break;
 80065de:	bf00      	nop
  }

  return ret;
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	885b      	ldrh	r3, [r3, #2]
 8006606:	0a1b      	lsrs	r3, r3, #8
 8006608:	b29b      	uxth	r3, r3
 800660a:	3b01      	subs	r3, #1
 800660c:	2b06      	cmp	r3, #6
 800660e:	f200 8128 	bhi.w	8006862 <USBD_GetDescriptor+0x276>
 8006612:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <USBD_GetDescriptor+0x2c>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	08006635 	.word	0x08006635
 800661c:	0800664d 	.word	0x0800664d
 8006620:	0800668d 	.word	0x0800668d
 8006624:	08006863 	.word	0x08006863
 8006628:	08006863 	.word	0x08006863
 800662c:	08006803 	.word	0x08006803
 8006630:	0800682f 	.word	0x0800682f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	7c12      	ldrb	r2, [r2, #16]
 8006640:	f107 0108 	add.w	r1, r7, #8
 8006644:	4610      	mov	r0, r2
 8006646:	4798      	blx	r3
 8006648:	60f8      	str	r0, [r7, #12]
      break;
 800664a:	e112      	b.n	8006872 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	7c1b      	ldrb	r3, [r3, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10d      	bne.n	8006670 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665c:	f107 0208 	add.w	r2, r7, #8
 8006660:	4610      	mov	r0, r2
 8006662:	4798      	blx	r3
 8006664:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3301      	adds	r3, #1
 800666a:	2202      	movs	r2, #2
 800666c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800666e:	e100      	b.n	8006872 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006678:	f107 0208 	add.w	r2, r7, #8
 800667c:	4610      	mov	r0, r2
 800667e:	4798      	blx	r3
 8006680:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3301      	adds	r3, #1
 8006686:	2202      	movs	r2, #2
 8006688:	701a      	strb	r2, [r3, #0]
      break;
 800668a:	e0f2      	b.n	8006872 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	885b      	ldrh	r3, [r3, #2]
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b05      	cmp	r3, #5
 8006694:	f200 80ac 	bhi.w	80067f0 <USBD_GetDescriptor+0x204>
 8006698:	a201      	add	r2, pc, #4	; (adr r2, 80066a0 <USBD_GetDescriptor+0xb4>)
 800669a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669e:	bf00      	nop
 80066a0:	080066b9 	.word	0x080066b9
 80066a4:	080066ed 	.word	0x080066ed
 80066a8:	08006721 	.word	0x08006721
 80066ac:	08006755 	.word	0x08006755
 80066b0:	08006789 	.word	0x08006789
 80066b4:	080067bd 	.word	0x080067bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00b      	beq.n	80066dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	7c12      	ldrb	r2, [r2, #16]
 80066d0:	f107 0108 	add.w	r1, r7, #8
 80066d4:	4610      	mov	r0, r2
 80066d6:	4798      	blx	r3
 80066d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066da:	e091      	b.n	8006800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fa94 	bl	8006c0c <USBD_CtlError>
            err++;
 80066e4:	7afb      	ldrb	r3, [r7, #11]
 80066e6:	3301      	adds	r3, #1
 80066e8:	72fb      	strb	r3, [r7, #11]
          break;
 80066ea:	e089      	b.n	8006800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00b      	beq.n	8006710 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	7c12      	ldrb	r2, [r2, #16]
 8006704:	f107 0108 	add.w	r1, r7, #8
 8006708:	4610      	mov	r0, r2
 800670a:	4798      	blx	r3
 800670c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800670e:	e077      	b.n	8006800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fa7a 	bl	8006c0c <USBD_CtlError>
            err++;
 8006718:	7afb      	ldrb	r3, [r7, #11]
 800671a:	3301      	adds	r3, #1
 800671c:	72fb      	strb	r3, [r7, #11]
          break;
 800671e:	e06f      	b.n	8006800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00b      	beq.n	8006744 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	7c12      	ldrb	r2, [r2, #16]
 8006738:	f107 0108 	add.w	r1, r7, #8
 800673c:	4610      	mov	r0, r2
 800673e:	4798      	blx	r3
 8006740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006742:	e05d      	b.n	8006800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fa60 	bl	8006c0c <USBD_CtlError>
            err++;
 800674c:	7afb      	ldrb	r3, [r7, #11]
 800674e:	3301      	adds	r3, #1
 8006750:	72fb      	strb	r3, [r7, #11]
          break;
 8006752:	e055      	b.n	8006800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	7c12      	ldrb	r2, [r2, #16]
 800676c:	f107 0108 	add.w	r1, r7, #8
 8006770:	4610      	mov	r0, r2
 8006772:	4798      	blx	r3
 8006774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006776:	e043      	b.n	8006800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fa46 	bl	8006c0c <USBD_CtlError>
            err++;
 8006780:	7afb      	ldrb	r3, [r7, #11]
 8006782:	3301      	adds	r3, #1
 8006784:	72fb      	strb	r3, [r7, #11]
          break;
 8006786:	e03b      	b.n	8006800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	7c12      	ldrb	r2, [r2, #16]
 80067a0:	f107 0108 	add.w	r1, r7, #8
 80067a4:	4610      	mov	r0, r2
 80067a6:	4798      	blx	r3
 80067a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067aa:	e029      	b.n	8006800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fa2c 	bl	8006c0c <USBD_CtlError>
            err++;
 80067b4:	7afb      	ldrb	r3, [r7, #11]
 80067b6:	3301      	adds	r3, #1
 80067b8:	72fb      	strb	r3, [r7, #11]
          break;
 80067ba:	e021      	b.n	8006800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00b      	beq.n	80067e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	7c12      	ldrb	r2, [r2, #16]
 80067d4:	f107 0108 	add.w	r1, r7, #8
 80067d8:	4610      	mov	r0, r2
 80067da:	4798      	blx	r3
 80067dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067de:	e00f      	b.n	8006800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067e0:	6839      	ldr	r1, [r7, #0]
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fa12 	bl	8006c0c <USBD_CtlError>
            err++;
 80067e8:	7afb      	ldrb	r3, [r7, #11]
 80067ea:	3301      	adds	r3, #1
 80067ec:	72fb      	strb	r3, [r7, #11]
          break;
 80067ee:	e007      	b.n	8006800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fa0a 	bl	8006c0c <USBD_CtlError>
          err++;
 80067f8:	7afb      	ldrb	r3, [r7, #11]
 80067fa:	3301      	adds	r3, #1
 80067fc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80067fe:	e038      	b.n	8006872 <USBD_GetDescriptor+0x286>
 8006800:	e037      	b.n	8006872 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	7c1b      	ldrb	r3, [r3, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d109      	bne.n	800681e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006812:	f107 0208 	add.w	r2, r7, #8
 8006816:	4610      	mov	r0, r2
 8006818:	4798      	blx	r3
 800681a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800681c:	e029      	b.n	8006872 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f9f3 	bl	8006c0c <USBD_CtlError>
        err++;
 8006826:	7afb      	ldrb	r3, [r7, #11]
 8006828:	3301      	adds	r3, #1
 800682a:	72fb      	strb	r3, [r7, #11]
      break;
 800682c:	e021      	b.n	8006872 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	7c1b      	ldrb	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10d      	bne.n	8006852 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800683c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683e:	f107 0208 	add.w	r2, r7, #8
 8006842:	4610      	mov	r0, r2
 8006844:	4798      	blx	r3
 8006846:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3301      	adds	r3, #1
 800684c:	2207      	movs	r2, #7
 800684e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006850:	e00f      	b.n	8006872 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f9d9 	bl	8006c0c <USBD_CtlError>
        err++;
 800685a:	7afb      	ldrb	r3, [r7, #11]
 800685c:	3301      	adds	r3, #1
 800685e:	72fb      	strb	r3, [r7, #11]
      break;
 8006860:	e007      	b.n	8006872 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f9d1 	bl	8006c0c <USBD_CtlError>
      err++;
 800686a:	7afb      	ldrb	r3, [r7, #11]
 800686c:	3301      	adds	r3, #1
 800686e:	72fb      	strb	r3, [r7, #11]
      break;
 8006870:	bf00      	nop
  }

  if (err != 0U)
 8006872:	7afb      	ldrb	r3, [r7, #11]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d11c      	bne.n	80068b2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006878:	893b      	ldrh	r3, [r7, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d011      	beq.n	80068a2 <USBD_GetDescriptor+0x2b6>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	88db      	ldrh	r3, [r3, #6]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00d      	beq.n	80068a2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	88da      	ldrh	r2, [r3, #6]
 800688a:	893b      	ldrh	r3, [r7, #8]
 800688c:	4293      	cmp	r3, r2
 800688e:	bf28      	it	cs
 8006890:	4613      	movcs	r3, r2
 8006892:	b29b      	uxth	r3, r3
 8006894:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006896:	893b      	ldrh	r3, [r7, #8]
 8006898:	461a      	mov	r2, r3
 800689a:	68f9      	ldr	r1, [r7, #12]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fa1f 	bl	8006ce0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	88db      	ldrh	r3, [r3, #6]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d104      	bne.n	80068b4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fa76 	bl	8006d9c <USBD_CtlSendStatus>
 80068b0:	e000      	b.n	80068b4 <USBD_GetDescriptor+0x2c8>
    return;
 80068b2:	bf00      	nop
    }
  }
}
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop

080068bc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	889b      	ldrh	r3, [r3, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d130      	bne.n	8006930 <USBD_SetAddress+0x74>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	88db      	ldrh	r3, [r3, #6]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d12c      	bne.n	8006930 <USBD_SetAddress+0x74>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	885b      	ldrh	r3, [r3, #2]
 80068da:	2b7f      	cmp	r3, #127	; 0x7f
 80068dc:	d828      	bhi.n	8006930 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	885b      	ldrh	r3, [r3, #2]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f0:	2b03      	cmp	r3, #3
 80068f2:	d104      	bne.n	80068fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f988 	bl	8006c0c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068fc:	e01c      	b.n	8006938 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	7bfa      	ldrb	r2, [r7, #15]
 8006902:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006906:	7bfb      	ldrb	r3, [r7, #15]
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fe60 	bl	80075d0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fa43 	bl	8006d9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d004      	beq.n	8006926 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006924:	e008      	b.n	8006938 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800692e:	e003      	b.n	8006938 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006930:	6839      	ldr	r1, [r7, #0]
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f96a 	bl	8006c0c <USBD_CtlError>
  }
}
 8006938:	bf00      	nop
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	885b      	ldrh	r3, [r3, #2]
 800694e:	b2da      	uxtb	r2, r3
 8006950:	4b41      	ldr	r3, [pc, #260]	; (8006a58 <USBD_SetConfig+0x118>)
 8006952:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006954:	4b40      	ldr	r3, [pc, #256]	; (8006a58 <USBD_SetConfig+0x118>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d904      	bls.n	8006966 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f954 	bl	8006c0c <USBD_CtlError>
 8006964:	e075      	b.n	8006a52 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800696c:	2b02      	cmp	r3, #2
 800696e:	d002      	beq.n	8006976 <USBD_SetConfig+0x36>
 8006970:	2b03      	cmp	r3, #3
 8006972:	d023      	beq.n	80069bc <USBD_SetConfig+0x7c>
 8006974:	e062      	b.n	8006a3c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006976:	4b38      	ldr	r3, [pc, #224]	; (8006a58 <USBD_SetConfig+0x118>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d01a      	beq.n	80069b4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800697e:	4b36      	ldr	r3, [pc, #216]	; (8006a58 <USBD_SetConfig+0x118>)
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2203      	movs	r2, #3
 800698c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006990:	4b31      	ldr	r3, [pc, #196]	; (8006a58 <USBD_SetConfig+0x118>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7ff f9f3 	bl	8005d82 <USBD_SetClassConfig>
 800699c:	4603      	mov	r3, r0
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d104      	bne.n	80069ac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f931 	bl	8006c0c <USBD_CtlError>
            return;
 80069aa:	e052      	b.n	8006a52 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f9f5 	bl	8006d9c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80069b2:	e04e      	b.n	8006a52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f9f1 	bl	8006d9c <USBD_CtlSendStatus>
        break;
 80069ba:	e04a      	b.n	8006a52 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80069bc:	4b26      	ldr	r3, [pc, #152]	; (8006a58 <USBD_SetConfig+0x118>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d112      	bne.n	80069ea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80069cc:	4b22      	ldr	r3, [pc, #136]	; (8006a58 <USBD_SetConfig+0x118>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80069d6:	4b20      	ldr	r3, [pc, #128]	; (8006a58 <USBD_SetConfig+0x118>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7ff f9ef 	bl	8005dc0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f9da 	bl	8006d9c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80069e8:	e033      	b.n	8006a52 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80069ea:	4b1b      	ldr	r3, [pc, #108]	; (8006a58 <USBD_SetConfig+0x118>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d01d      	beq.n	8006a34 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff f9dd 	bl	8005dc0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006a06:	4b14      	ldr	r3, [pc, #80]	; (8006a58 <USBD_SetConfig+0x118>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a10:	4b11      	ldr	r3, [pc, #68]	; (8006a58 <USBD_SetConfig+0x118>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7ff f9b3 	bl	8005d82 <USBD_SetClassConfig>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d104      	bne.n	8006a2c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f8f1 	bl	8006c0c <USBD_CtlError>
            return;
 8006a2a:	e012      	b.n	8006a52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f9b5 	bl	8006d9c <USBD_CtlSendStatus>
        break;
 8006a32:	e00e      	b.n	8006a52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f9b1 	bl	8006d9c <USBD_CtlSendStatus>
        break;
 8006a3a:	e00a      	b.n	8006a52 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f8e4 	bl	8006c0c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006a44:	4b04      	ldr	r3, [pc, #16]	; (8006a58 <USBD_SetConfig+0x118>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff f9b8 	bl	8005dc0 <USBD_ClrClassConfig>
        break;
 8006a50:	bf00      	nop
    }
  }
}
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20000370 	.word	0x20000370

08006a5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	88db      	ldrh	r3, [r3, #6]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d004      	beq.n	8006a78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f8cb 	bl	8006c0c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a76:	e021      	b.n	8006abc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	db17      	blt.n	8006ab2 <USBD_GetConfig+0x56>
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	dd02      	ble.n	8006a8c <USBD_GetConfig+0x30>
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d00b      	beq.n	8006aa2 <USBD_GetConfig+0x46>
 8006a8a:	e012      	b.n	8006ab2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3308      	adds	r3, #8
 8006a96:	2201      	movs	r2, #1
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f920 	bl	8006ce0 <USBD_CtlSendData>
        break;
 8006aa0:	e00c      	b.n	8006abc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f918 	bl	8006ce0 <USBD_CtlSendData>
        break;
 8006ab0:	e004      	b.n	8006abc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f8a9 	bl	8006c0c <USBD_CtlError>
        break;
 8006aba:	bf00      	nop
}
 8006abc:	bf00      	nop
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d81e      	bhi.n	8006b18 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	88db      	ldrh	r3, [r3, #6]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d004      	beq.n	8006aec <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f891 	bl	8006c0c <USBD_CtlError>
        break;
 8006aea:	e01a      	b.n	8006b22 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d005      	beq.n	8006b08 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f043 0202 	orr.w	r2, r3, #2
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	330c      	adds	r3, #12
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f8e5 	bl	8006ce0 <USBD_CtlSendData>
      break;
 8006b16:	e004      	b.n	8006b22 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f876 	bl	8006c0c <USBD_CtlError>
      break;
 8006b20:	bf00      	nop
  }
}
 8006b22:	bf00      	nop
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b082      	sub	sp, #8
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	885b      	ldrh	r3, [r3, #2]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d106      	bne.n	8006b4a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f929 	bl	8006d9c <USBD_CtlSendStatus>
  }
}
 8006b4a:	bf00      	nop
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b082      	sub	sp, #8
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b62:	3b01      	subs	r3, #1
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d80b      	bhi.n	8006b80 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	885b      	ldrh	r3, [r3, #2]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d10c      	bne.n	8006b8a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f90f 	bl	8006d9c <USBD_CtlSendStatus>
      }
      break;
 8006b7e:	e004      	b.n	8006b8a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f842 	bl	8006c0c <USBD_CtlError>
      break;
 8006b88:	e000      	b.n	8006b8c <USBD_ClrFeature+0x3a>
      break;
 8006b8a:	bf00      	nop
  }
}
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781a      	ldrb	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	785a      	ldrb	r2, [r3, #1]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	3302      	adds	r3, #2
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	3303      	adds	r3, #3
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	021b      	lsls	r3, r3, #8
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	4413      	add	r3, r2
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	3304      	adds	r3, #4
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	3305      	adds	r3, #5
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	021b      	lsls	r3, r3, #8
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	4413      	add	r3, r2
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	3306      	adds	r3, #6
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	3307      	adds	r3, #7
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	021b      	lsls	r3, r3, #8
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	4413      	add	r3, r2
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	80da      	strh	r2, [r3, #6]

}
 8006c02:	bf00      	nop
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr

08006c0c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006c16:	2180      	movs	r1, #128	; 0x80
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fc6f 	bl	80074fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006c1e:	2100      	movs	r1, #0
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fc6b 	bl	80074fc <USBD_LL_StallEP>
}
 8006c26:	bf00      	nop
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b086      	sub	sp, #24
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d032      	beq.n	8006caa <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 f834 	bl	8006cb2 <USBD_GetLen>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	75fa      	strb	r2, [r7, #23]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	4413      	add	r3, r2
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	7812      	ldrb	r2, [r2, #0]
 8006c68:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006c6a:	7dfb      	ldrb	r3, [r7, #23]
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	75fa      	strb	r2, [r7, #23]
 8006c70:	461a      	mov	r2, r3
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	4413      	add	r3, r2
 8006c76:	2203      	movs	r2, #3
 8006c78:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006c7a:	e012      	b.n	8006ca2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	60fa      	str	r2, [r7, #12]
 8006c82:	7dfa      	ldrb	r2, [r7, #23]
 8006c84:	1c51      	adds	r1, r2, #1
 8006c86:	75f9      	strb	r1, [r7, #23]
 8006c88:	4611      	mov	r1, r2
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	440a      	add	r2, r1
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	75fa      	strb	r2, [r7, #23]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e8      	bne.n	8006c7c <USBD_GetString+0x4e>
    }
  }
}
 8006caa:	bf00      	nop
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b085      	sub	sp, #20
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006cbe:	e005      	b.n	8006ccc <USBD_GetLen+0x1a>
  {
    len++;
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1f5      	bne.n	8006cc0 <USBD_GetLen+0xe>
  }

  return len;
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bc80      	pop	{r7}
 8006cde:	4770      	bx	lr

08006ce0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	4613      	mov	r3, r2
 8006cec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006cf6:	88fa      	ldrh	r2, [r7, #6]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006cfc:	88fa      	ldrh	r2, [r7, #6]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d02:	88fb      	ldrh	r3, [r7, #6]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	2100      	movs	r1, #0
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 fc80 	bl	800760e <USBD_LL_Transmit>

  return USBD_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	4613      	mov	r3, r2
 8006d24:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d26:	88fb      	ldrh	r3, [r7, #6]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 fc6e 	bl	800760e <USBD_LL_Transmit>

  return USBD_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	4613      	mov	r3, r2
 8006d48:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2203      	movs	r2, #3
 8006d4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d52:	88fa      	ldrh	r2, [r7, #6]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006d5a:	88fa      	ldrh	r2, [r7, #6]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d62:	88fb      	ldrh	r3, [r7, #6]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	2100      	movs	r1, #0
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 fc73 	bl	8007654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	4613      	mov	r3, r2
 8006d84:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 fc61 	bl	8007654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2204      	movs	r2, #4
 8006da8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dac:	2300      	movs	r3, #0
 8006dae:	2200      	movs	r2, #0
 8006db0:	2100      	movs	r1, #0
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fc2b 	bl	800760e <USBD_LL_Transmit>

  return USBD_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b082      	sub	sp, #8
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2205      	movs	r2, #5
 8006dce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fc3b 	bl	8007654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006dec:	2200      	movs	r2, #0
 8006dee:	4912      	ldr	r1, [pc, #72]	; (8006e38 <MX_USB_DEVICE_Init+0x50>)
 8006df0:	4812      	ldr	r0, [pc, #72]	; (8006e3c <MX_USB_DEVICE_Init+0x54>)
 8006df2:	f7fe ff6c 	bl	8005cce <USBD_Init>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006dfc:	f7f9 ff9a 	bl	8000d34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e00:	490f      	ldr	r1, [pc, #60]	; (8006e40 <MX_USB_DEVICE_Init+0x58>)
 8006e02:	480e      	ldr	r0, [pc, #56]	; (8006e3c <MX_USB_DEVICE_Init+0x54>)
 8006e04:	f7fe ff8e 	bl	8005d24 <USBD_RegisterClass>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e0e:	f7f9 ff91 	bl	8000d34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e12:	490c      	ldr	r1, [pc, #48]	; (8006e44 <MX_USB_DEVICE_Init+0x5c>)
 8006e14:	4809      	ldr	r0, [pc, #36]	; (8006e3c <MX_USB_DEVICE_Init+0x54>)
 8006e16:	f7fe febf 	bl	8005b98 <USBD_CDC_RegisterInterface>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e20:	f7f9 ff88 	bl	8000d34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e24:	4805      	ldr	r0, [pc, #20]	; (8006e3c <MX_USB_DEVICE_Init+0x54>)
 8006e26:	f7fe ff96 	bl	8005d56 <USBD_Start>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e30:	f7f9 ff80 	bl	8000d34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e34:	bf00      	nop
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	2000012c 	.word	0x2000012c
 8006e3c:	20000668 	.word	0x20000668
 8006e40:	20000018 	.word	0x20000018
 8006e44:	2000011c 	.word	0x2000011c

08006e48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	4905      	ldr	r1, [pc, #20]	; (8006e64 <CDC_Init_FS+0x1c>)
 8006e50:	4805      	ldr	r0, [pc, #20]	; (8006e68 <CDC_Init_FS+0x20>)
 8006e52:	f7fe feb7 	bl	8005bc4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e56:	4905      	ldr	r1, [pc, #20]	; (8006e6c <CDC_Init_FS+0x24>)
 8006e58:	4803      	ldr	r0, [pc, #12]	; (8006e68 <CDC_Init_FS+0x20>)
 8006e5a:	f7fe fecc 	bl	8005bf6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	20000990 	.word	0x20000990
 8006e68:	20000668 	.word	0x20000668
 8006e6c:	2000092c 	.word	0x2000092c

08006e70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bc80      	pop	{r7}
 8006e7c:	4770      	bx	lr
	...

08006e80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	6039      	str	r1, [r7, #0]
 8006e8a:	71fb      	strb	r3, [r7, #7]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e90:	79fb      	ldrb	r3, [r7, #7]
 8006e92:	2b23      	cmp	r3, #35	; 0x23
 8006e94:	d84a      	bhi.n	8006f2c <CDC_Control_FS+0xac>
 8006e96:	a201      	add	r2, pc, #4	; (adr r2, 8006e9c <CDC_Control_FS+0x1c>)
 8006e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9c:	08006f2d 	.word	0x08006f2d
 8006ea0:	08006f2d 	.word	0x08006f2d
 8006ea4:	08006f2d 	.word	0x08006f2d
 8006ea8:	08006f2d 	.word	0x08006f2d
 8006eac:	08006f2d 	.word	0x08006f2d
 8006eb0:	08006f2d 	.word	0x08006f2d
 8006eb4:	08006f2d 	.word	0x08006f2d
 8006eb8:	08006f2d 	.word	0x08006f2d
 8006ebc:	08006f2d 	.word	0x08006f2d
 8006ec0:	08006f2d 	.word	0x08006f2d
 8006ec4:	08006f2d 	.word	0x08006f2d
 8006ec8:	08006f2d 	.word	0x08006f2d
 8006ecc:	08006f2d 	.word	0x08006f2d
 8006ed0:	08006f2d 	.word	0x08006f2d
 8006ed4:	08006f2d 	.word	0x08006f2d
 8006ed8:	08006f2d 	.word	0x08006f2d
 8006edc:	08006f2d 	.word	0x08006f2d
 8006ee0:	08006f2d 	.word	0x08006f2d
 8006ee4:	08006f2d 	.word	0x08006f2d
 8006ee8:	08006f2d 	.word	0x08006f2d
 8006eec:	08006f2d 	.word	0x08006f2d
 8006ef0:	08006f2d 	.word	0x08006f2d
 8006ef4:	08006f2d 	.word	0x08006f2d
 8006ef8:	08006f2d 	.word	0x08006f2d
 8006efc:	08006f2d 	.word	0x08006f2d
 8006f00:	08006f2d 	.word	0x08006f2d
 8006f04:	08006f2d 	.word	0x08006f2d
 8006f08:	08006f2d 	.word	0x08006f2d
 8006f0c:	08006f2d 	.word	0x08006f2d
 8006f10:	08006f2d 	.word	0x08006f2d
 8006f14:	08006f2d 	.word	0x08006f2d
 8006f18:	08006f2d 	.word	0x08006f2d
 8006f1c:	08006f2d 	.word	0x08006f2d
 8006f20:	08006f2d 	.word	0x08006f2d
 8006f24:	08006f2d 	.word	0x08006f2d
 8006f28:	08006f2d 	.word	0x08006f2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f2c:	bf00      	nop
  }

  return (USBD_OK);
 8006f2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bc80      	pop	{r7}
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop

08006f3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	4811      	ldr	r0, [pc, #68]	; (8006f90 <CDC_Receive_FS+0x54>)
 8006f4a:	f7fe fe54 	bl	8005bf6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f4e:	4810      	ldr	r0, [pc, #64]	; (8006f90 <CDC_Receive_FS+0x54>)
 8006f50:	f7fe fe93 	bl	8005c7a <USBD_CDC_ReceivePacket>
  extern uint8_t ReceivedData[100]; // Tablica przechowujaca odebrane dane
  extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych

  // Wyczyszczenie tablicy odebranych danych
  uint8_t iter;
  for(iter = 0; iter<100; ++iter){
 8006f54:	2300      	movs	r3, #0
 8006f56:	73fb      	strb	r3, [r7, #15]
 8006f58:	e006      	b.n	8006f68 <CDC_Receive_FS+0x2c>
	  ReceivedData[iter] = 0;
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
 8006f5c:	4a0d      	ldr	r2, [pc, #52]	; (8006f94 <CDC_Receive_FS+0x58>)
 8006f5e:	2100      	movs	r1, #0
 8006f60:	54d1      	strb	r1, [r2, r3]
  for(iter = 0; iter<100; ++iter){
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
 8006f64:	3301      	adds	r3, #1
 8006f66:	73fb      	strb	r3, [r7, #15]
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	2b63      	cmp	r3, #99	; 0x63
 8006f6c:	d9f5      	bls.n	8006f5a <CDC_Receive_FS+0x1e>
  }

  strlcpy(ReceivedData, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3301      	adds	r3, #1
 8006f74:	461a      	mov	r2, r3
 8006f76:	6879      	ldr	r1, [r7, #4]
 8006f78:	4806      	ldr	r0, [pc, #24]	; (8006f94 <CDC_Receive_FS+0x58>)
 8006f7a:	f001 fa8f 	bl	800849c <strlcpy>
  ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 8006f7e:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <CDC_Receive_FS+0x5c>)
 8006f80:	2201      	movs	r2, #1
 8006f82:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 8006f84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20000668 	.word	0x20000668
 8006f94:	20000600 	.word	0x20000600
 8006f98:	20000369 	.word	0x20000369

08006f9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006fac:	4b0d      	ldr	r3, [pc, #52]	; (8006fe4 <CDC_Transmit_FS+0x48>)
 8006fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e00b      	b.n	8006fda <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006fc2:	887b      	ldrh	r3, [r7, #2]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6879      	ldr	r1, [r7, #4]
 8006fc8:	4806      	ldr	r0, [pc, #24]	; (8006fe4 <CDC_Transmit_FS+0x48>)
 8006fca:	f7fe fdfb 	bl	8005bc4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006fce:	4805      	ldr	r0, [pc, #20]	; (8006fe4 <CDC_Transmit_FS+0x48>)
 8006fd0:	f7fe fe24 	bl	8005c1c <USBD_CDC_TransmitPacket>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20000668 	.word	0x20000668

08006fe8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	6039      	str	r1, [r7, #0]
 8006ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	2212      	movs	r2, #18
 8006ff8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ffa:	4b03      	ldr	r3, [pc, #12]	; (8007008 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	bc80      	pop	{r7}
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	20000148 	.word	0x20000148

0800700c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	6039      	str	r1, [r7, #0]
 8007016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2204      	movs	r2, #4
 800701c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800701e:	4b03      	ldr	r3, [pc, #12]	; (800702c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	bc80      	pop	{r7}
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	2000015c 	.word	0x2000015c

08007030 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	6039      	str	r1, [r7, #0]
 800703a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d105      	bne.n	800704e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	4907      	ldr	r1, [pc, #28]	; (8007064 <USBD_FS_ProductStrDescriptor+0x34>)
 8007046:	4808      	ldr	r0, [pc, #32]	; (8007068 <USBD_FS_ProductStrDescriptor+0x38>)
 8007048:	f7ff fdf1 	bl	8006c2e <USBD_GetString>
 800704c:	e004      	b.n	8007058 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	4904      	ldr	r1, [pc, #16]	; (8007064 <USBD_FS_ProductStrDescriptor+0x34>)
 8007052:	4805      	ldr	r0, [pc, #20]	; (8007068 <USBD_FS_ProductStrDescriptor+0x38>)
 8007054:	f7ff fdeb 	bl	8006c2e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007058:	4b02      	ldr	r3, [pc, #8]	; (8007064 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	200009f4 	.word	0x200009f4
 8007068:	0800bc0c 	.word	0x0800bc0c

0800706c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	4603      	mov	r3, r0
 8007074:	6039      	str	r1, [r7, #0]
 8007076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	4904      	ldr	r1, [pc, #16]	; (800708c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800707c:	4804      	ldr	r0, [pc, #16]	; (8007090 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800707e:	f7ff fdd6 	bl	8006c2e <USBD_GetString>
  return USBD_StrDesc;
 8007082:	4b02      	ldr	r3, [pc, #8]	; (800708c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	200009f4 	.word	0x200009f4
 8007090:	0800bc24 	.word	0x0800bc24

08007094 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	4603      	mov	r3, r0
 800709c:	6039      	str	r1, [r7, #0]
 800709e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	221a      	movs	r2, #26
 80070a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80070a6:	f000 f843 	bl	8007130 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80070aa:	4b02      	ldr	r3, [pc, #8]	; (80070b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	20000160 	.word	0x20000160

080070b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	6039      	str	r1, [r7, #0]
 80070c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070c4:	79fb      	ldrb	r3, [r7, #7]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d105      	bne.n	80070d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	4907      	ldr	r1, [pc, #28]	; (80070ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80070ce:	4808      	ldr	r0, [pc, #32]	; (80070f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070d0:	f7ff fdad 	bl	8006c2e <USBD_GetString>
 80070d4:	e004      	b.n	80070e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	4904      	ldr	r1, [pc, #16]	; (80070ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80070da:	4805      	ldr	r0, [pc, #20]	; (80070f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070dc:	f7ff fda7 	bl	8006c2e <USBD_GetString>
  }
  return USBD_StrDesc;
 80070e0:	4b02      	ldr	r3, [pc, #8]	; (80070ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	200009f4 	.word	0x200009f4
 80070f0:	0800bc38 	.word	0x0800bc38

080070f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	6039      	str	r1, [r7, #0]
 80070fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d105      	bne.n	8007112 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	4907      	ldr	r1, [pc, #28]	; (8007128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800710a:	4808      	ldr	r0, [pc, #32]	; (800712c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800710c:	f7ff fd8f 	bl	8006c2e <USBD_GetString>
 8007110:	e004      	b.n	800711c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	4904      	ldr	r1, [pc, #16]	; (8007128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007116:	4805      	ldr	r0, [pc, #20]	; (800712c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007118:	f7ff fd89 	bl	8006c2e <USBD_GetString>
  }
  return USBD_StrDesc;
 800711c:	4b02      	ldr	r3, [pc, #8]	; (8007128 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	200009f4 	.word	0x200009f4
 800712c:	0800bc44 	.word	0x0800bc44

08007130 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007136:	4b0f      	ldr	r3, [pc, #60]	; (8007174 <Get_SerialNum+0x44>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800713c:	4b0e      	ldr	r3, [pc, #56]	; (8007178 <Get_SerialNum+0x48>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007142:	4b0e      	ldr	r3, [pc, #56]	; (800717c <Get_SerialNum+0x4c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4413      	add	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d009      	beq.n	800716a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007156:	2208      	movs	r2, #8
 8007158:	4909      	ldr	r1, [pc, #36]	; (8007180 <Get_SerialNum+0x50>)
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 f814 	bl	8007188 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007160:	2204      	movs	r2, #4
 8007162:	4908      	ldr	r1, [pc, #32]	; (8007184 <Get_SerialNum+0x54>)
 8007164:	68b8      	ldr	r0, [r7, #8]
 8007166:	f000 f80f 	bl	8007188 <IntToUnicode>
  }
}
 800716a:	bf00      	nop
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	1ffff7e8 	.word	0x1ffff7e8
 8007178:	1ffff7ec 	.word	0x1ffff7ec
 800717c:	1ffff7f0 	.word	0x1ffff7f0
 8007180:	20000162 	.word	0x20000162
 8007184:	20000172 	.word	0x20000172

08007188 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	4613      	mov	r3, r2
 8007194:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007196:	2300      	movs	r3, #0
 8007198:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]
 800719e:	e027      	b.n	80071f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	0f1b      	lsrs	r3, r3, #28
 80071a4:	2b09      	cmp	r3, #9
 80071a6:	d80b      	bhi.n	80071c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	0f1b      	lsrs	r3, r3, #28
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
 80071b0:	005b      	lsls	r3, r3, #1
 80071b2:	4619      	mov	r1, r3
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	440b      	add	r3, r1
 80071b8:	3230      	adds	r2, #48	; 0x30
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	e00a      	b.n	80071d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	0f1b      	lsrs	r3, r3, #28
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	4619      	mov	r1, r3
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	440b      	add	r3, r1
 80071d0:	3237      	adds	r2, #55	; 0x37
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	3301      	adds	r3, #1
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	4413      	add	r3, r2
 80071e6:	2200      	movs	r2, #0
 80071e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	3301      	adds	r3, #1
 80071ee:	75fb      	strb	r3, [r7, #23]
 80071f0:	7dfa      	ldrb	r2, [r7, #23]
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d3d3      	bcc.n	80071a0 <IntToUnicode+0x18>
  }
}
 80071f8:	bf00      	nop
 80071fa:	371c      	adds	r7, #28
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bc80      	pop	{r7}
 8007200:	4770      	bx	lr
	...

08007204 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a0d      	ldr	r2, [pc, #52]	; (8007248 <HAL_PCD_MspInit+0x44>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d113      	bne.n	800723e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007216:	4b0d      	ldr	r3, [pc, #52]	; (800724c <HAL_PCD_MspInit+0x48>)
 8007218:	69db      	ldr	r3, [r3, #28]
 800721a:	4a0c      	ldr	r2, [pc, #48]	; (800724c <HAL_PCD_MspInit+0x48>)
 800721c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007220:	61d3      	str	r3, [r2, #28]
 8007222:	4b0a      	ldr	r3, [pc, #40]	; (800724c <HAL_PCD_MspInit+0x48>)
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800722e:	2200      	movs	r2, #0
 8007230:	2100      	movs	r1, #0
 8007232:	2014      	movs	r0, #20
 8007234:	f7f9 fff9 	bl	800122a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007238:	2014      	movs	r0, #20
 800723a:	f7fa f812 	bl	8001262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800723e:	bf00      	nop
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	40005c00 	.word	0x40005c00
 800724c:	40021000 	.word	0x40021000

08007250 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007264:	4619      	mov	r1, r3
 8007266:	4610      	mov	r0, r2
 8007268:	f7fe fdbd 	bl	8005de6 <USBD_LL_SetupStage>
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007286:	78fa      	ldrb	r2, [r7, #3]
 8007288:	6879      	ldr	r1, [r7, #4]
 800728a:	4613      	mov	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	00db      	lsls	r3, r3, #3
 8007292:	440b      	add	r3, r1
 8007294:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	78fb      	ldrb	r3, [r7, #3]
 800729c:	4619      	mov	r1, r3
 800729e:	f7fe fded 	bl	8005e7c <USBD_LL_DataOutStage>
}
 80072a2:	bf00      	nop
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b082      	sub	sp, #8
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
 80072b2:	460b      	mov	r3, r1
 80072b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80072bc:	78fa      	ldrb	r2, [r7, #3]
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	4613      	mov	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	440b      	add	r3, r1
 80072ca:	333c      	adds	r3, #60	; 0x3c
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	78fb      	ldrb	r3, [r7, #3]
 80072d0:	4619      	mov	r1, r3
 80072d2:	f7fe fe44 	bl	8005f5e <USBD_LL_DataInStage>
}
 80072d6:	bf00      	nop
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b082      	sub	sp, #8
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe ff54 	bl	800619a <USBD_LL_SOF>
}
 80072f2:	bf00      	nop
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007302:	2301      	movs	r3, #1
 8007304:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	2b02      	cmp	r3, #2
 800730c:	d001      	beq.n	8007312 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800730e:	f7f9 fd11 	bl	8000d34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007318:	7bfa      	ldrb	r2, [r7, #15]
 800731a:	4611      	mov	r1, r2
 800731c:	4618      	mov	r0, r3
 800731e:	f7fe ff04 	bl	800612a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007328:	4618      	mov	r0, r3
 800732a:	f7fe febd 	bl	80060a8 <USBD_LL_Reset>
}
 800732e:	bf00      	nop
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
	...

08007338 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007346:	4618      	mov	r0, r3
 8007348:	f7fe fefe 	bl	8006148 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d005      	beq.n	8007360 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007354:	4b04      	ldr	r3, [pc, #16]	; (8007368 <HAL_PCD_SuspendCallback+0x30>)
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	4a03      	ldr	r2, [pc, #12]	; (8007368 <HAL_PCD_SuspendCallback+0x30>)
 800735a:	f043 0306 	orr.w	r3, r3, #6
 800735e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	e000ed00 	.word	0xe000ed00

0800736c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800737a:	4618      	mov	r0, r3
 800737c:	f7fe fef8 	bl	8006170 <USBD_LL_Resume>
}
 8007380:	bf00      	nop
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007390:	4a28      	ldr	r2, [pc, #160]	; (8007434 <USBD_LL_Init+0xac>)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a26      	ldr	r2, [pc, #152]	; (8007434 <USBD_LL_Init+0xac>)
 800739c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80073a0:	4b24      	ldr	r3, [pc, #144]	; (8007434 <USBD_LL_Init+0xac>)
 80073a2:	4a25      	ldr	r2, [pc, #148]	; (8007438 <USBD_LL_Init+0xb0>)
 80073a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80073a6:	4b23      	ldr	r3, [pc, #140]	; (8007434 <USBD_LL_Init+0xac>)
 80073a8:	2208      	movs	r2, #8
 80073aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80073ac:	4b21      	ldr	r3, [pc, #132]	; (8007434 <USBD_LL_Init+0xac>)
 80073ae:	2202      	movs	r2, #2
 80073b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80073b2:	4b20      	ldr	r3, [pc, #128]	; (8007434 <USBD_LL_Init+0xac>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80073b8:	4b1e      	ldr	r3, [pc, #120]	; (8007434 <USBD_LL_Init+0xac>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80073be:	4b1d      	ldr	r3, [pc, #116]	; (8007434 <USBD_LL_Init+0xac>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80073c4:	481b      	ldr	r0, [pc, #108]	; (8007434 <USBD_LL_Init+0xac>)
 80073c6:	f7fa f8d9 	bl	800157c <HAL_PCD_Init>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80073d0:	f7f9 fcb0 	bl	8000d34 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80073da:	2318      	movs	r3, #24
 80073dc:	2200      	movs	r2, #0
 80073de:	2100      	movs	r1, #0
 80073e0:	f7fb fc0d 	bl	8002bfe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80073ea:	2358      	movs	r3, #88	; 0x58
 80073ec:	2200      	movs	r2, #0
 80073ee:	2180      	movs	r1, #128	; 0x80
 80073f0:	f7fb fc05 	bl	8002bfe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80073fa:	23c0      	movs	r3, #192	; 0xc0
 80073fc:	2200      	movs	r2, #0
 80073fe:	2181      	movs	r1, #129	; 0x81
 8007400:	f7fb fbfd 	bl	8002bfe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800740a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800740e:	2200      	movs	r2, #0
 8007410:	2101      	movs	r1, #1
 8007412:	f7fb fbf4 	bl	8002bfe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800741c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007420:	2200      	movs	r2, #0
 8007422:	2182      	movs	r1, #130	; 0x82
 8007424:	f7fb fbeb 	bl	8002bfe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20000bf4 	.word	0x20000bf4
 8007438:	40005c00 	.word	0x40005c00

0800743c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007452:	4618      	mov	r0, r3
 8007454:	f7fa f99d 	bl	8001792 <HAL_PCD_Start>
 8007458:	4603      	mov	r3, r0
 800745a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	4618      	mov	r0, r3
 8007460:	f000 f94e 	bl	8007700 <USBD_Get_USB_Status>
 8007464:	4603      	mov	r3, r0
 8007466:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007468:	7bbb      	ldrb	r3, [r7, #14]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	4608      	mov	r0, r1
 800747c:	4611      	mov	r1, r2
 800747e:	461a      	mov	r2, r3
 8007480:	4603      	mov	r3, r0
 8007482:	70fb      	strb	r3, [r7, #3]
 8007484:	460b      	mov	r3, r1
 8007486:	70bb      	strb	r3, [r7, #2]
 8007488:	4613      	mov	r3, r2
 800748a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800749a:	78bb      	ldrb	r3, [r7, #2]
 800749c:	883a      	ldrh	r2, [r7, #0]
 800749e:	78f9      	ldrb	r1, [r7, #3]
 80074a0:	f7fa fb17 	bl	8001ad2 <HAL_PCD_EP_Open>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 f928 	bl	8007700 <USBD_Get_USB_Status>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	460b      	mov	r3, r1
 80074c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074d8:	78fa      	ldrb	r2, [r7, #3]
 80074da:	4611      	mov	r1, r2
 80074dc:	4618      	mov	r0, r3
 80074de:	f7fa fb5e 	bl	8001b9e <HAL_PCD_EP_Close>
 80074e2:	4603      	mov	r3, r0
 80074e4:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 f909 	bl	8007700 <USBD_Get_USB_Status>
 80074ee:	4603      	mov	r3, r0
 80074f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80074f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007516:	78fa      	ldrb	r2, [r7, #3]
 8007518:	4611      	mov	r1, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f7fa fc1e 	bl	8001d5c <HAL_PCD_EP_SetStall>
 8007520:	4603      	mov	r3, r0
 8007522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 f8ea 	bl	8007700 <USBD_Get_USB_Status>
 800752c:	4603      	mov	r3, r0
 800752e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007530:	7bbb      	ldrb	r3, [r7, #14]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	460b      	mov	r3, r1
 8007544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007554:	78fa      	ldrb	r2, [r7, #3]
 8007556:	4611      	mov	r1, r2
 8007558:	4618      	mov	r0, r3
 800755a:	f7fa fc5f 	bl	8001e1c <HAL_PCD_EP_ClrStall>
 800755e:	4603      	mov	r3, r0
 8007560:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	4618      	mov	r0, r3
 8007566:	f000 f8cb 	bl	8007700 <USBD_Get_USB_Status>
 800756a:	4603      	mov	r3, r0
 800756c:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800756e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	460b      	mov	r3, r1
 8007582:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800758a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800758c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007590:	2b00      	cmp	r3, #0
 8007592:	da0c      	bge.n	80075ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800759a:	68f9      	ldr	r1, [r7, #12]
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	4613      	mov	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	00db      	lsls	r3, r3, #3
 80075a6:	440b      	add	r3, r1
 80075a8:	3302      	adds	r3, #2
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	e00b      	b.n	80075c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80075ae:	78fb      	ldrb	r3, [r7, #3]
 80075b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075b4:	68f9      	ldr	r1, [r7, #12]
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	00db      	lsls	r3, r3, #3
 80075be:	440b      	add	r3, r1
 80075c0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80075c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bc80      	pop	{r7}
 80075ce:	4770      	bx	lr

080075d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075ea:	78fa      	ldrb	r2, [r7, #3]
 80075ec:	4611      	mov	r1, r2
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fa fa4a 	bl	8001a88 <HAL_PCD_SetAddress>
 80075f4:	4603      	mov	r3, r0
 80075f6:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 f880 	bl	8007700 <USBD_Get_USB_Status>
 8007600:	4603      	mov	r3, r0
 8007602:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007604:	7bbb      	ldrb	r3, [r7, #14]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b086      	sub	sp, #24
 8007612:	af00      	add	r7, sp, #0
 8007614:	60f8      	str	r0, [r7, #12]
 8007616:	607a      	str	r2, [r7, #4]
 8007618:	461a      	mov	r2, r3
 800761a:	460b      	mov	r3, r1
 800761c:	72fb      	strb	r3, [r7, #11]
 800761e:	4613      	mov	r3, r2
 8007620:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007630:	893b      	ldrh	r3, [r7, #8]
 8007632:	7af9      	ldrb	r1, [r7, #11]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	f7fa fb4e 	bl	8001cd6 <HAL_PCD_EP_Transmit>
 800763a:	4603      	mov	r3, r0
 800763c:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800763e:	7dfb      	ldrb	r3, [r7, #23]
 8007640:	4618      	mov	r0, r3
 8007642:	f000 f85d 	bl	8007700 <USBD_Get_USB_Status>
 8007646:	4603      	mov	r3, r0
 8007648:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800764a:	7dbb      	ldrb	r3, [r7, #22]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3718      	adds	r7, #24
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	607a      	str	r2, [r7, #4]
 800765e:	461a      	mov	r2, r3
 8007660:	460b      	mov	r3, r1
 8007662:	72fb      	strb	r3, [r7, #11]
 8007664:	4613      	mov	r3, r2
 8007666:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007676:	893b      	ldrh	r3, [r7, #8]
 8007678:	7af9      	ldrb	r1, [r7, #11]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	f7fa fad7 	bl	8001c2e <HAL_PCD_EP_Receive>
 8007680:	4603      	mov	r3, r0
 8007682:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	4618      	mov	r0, r3
 8007688:	f000 f83a 	bl	8007700 <USBD_Get_USB_Status>
 800768c:	4603      	mov	r3, r0
 800768e:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8007690:	7dbb      	ldrb	r3, [r7, #22]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3718      	adds	r7, #24
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b082      	sub	sp, #8
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	460b      	mov	r3, r1
 80076a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076ac:	78fa      	ldrb	r2, [r7, #3]
 80076ae:	4611      	mov	r1, r2
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fa faf9 	bl	8001ca8 <HAL_PCD_EP_GetRxCount>
 80076b6:	4603      	mov	r3, r0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80076c8:	4b02      	ldr	r3, [pc, #8]	; (80076d4 <USBD_static_malloc+0x14>)
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bc80      	pop	{r7}
 80076d2:	4770      	bx	lr
 80076d4:	20000374 	.word	0x20000374

080076d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]

}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bc80      	pop	{r7}
 80076e8:	4770      	bx	lr

080076ea <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076ea:	b480      	push	{r7}
 80076ec:	b083      	sub	sp, #12
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	460b      	mov	r3, r1
 80076f4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bc80      	pop	{r7}
 80076fe:	4770      	bx	lr

08007700 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	4603      	mov	r3, r0
 8007708:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800770e:	79fb      	ldrb	r3, [r7, #7]
 8007710:	2b03      	cmp	r3, #3
 8007712:	d817      	bhi.n	8007744 <USBD_Get_USB_Status+0x44>
 8007714:	a201      	add	r2, pc, #4	; (adr r2, 800771c <USBD_Get_USB_Status+0x1c>)
 8007716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771a:	bf00      	nop
 800771c:	0800772d 	.word	0x0800772d
 8007720:	08007733 	.word	0x08007733
 8007724:	08007739 	.word	0x08007739
 8007728:	0800773f 	.word	0x0800773f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	73fb      	strb	r3, [r7, #15]
    break;
 8007730:	e00b      	b.n	800774a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007732:	2302      	movs	r3, #2
 8007734:	73fb      	strb	r3, [r7, #15]
    break;
 8007736:	e008      	b.n	800774a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007738:	2301      	movs	r3, #1
 800773a:	73fb      	strb	r3, [r7, #15]
    break;
 800773c:	e005      	b.n	800774a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800773e:	2302      	movs	r3, #2
 8007740:	73fb      	strb	r3, [r7, #15]
    break;
 8007742:	e002      	b.n	800774a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007744:	2302      	movs	r3, #2
 8007746:	73fb      	strb	r3, [r7, #15]
    break;
 8007748:	bf00      	nop
  }
  return usb_status;
 800774a:	7bfb      	ldrb	r3, [r7, #15]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	bc80      	pop	{r7}
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop

08007758 <atoi>:
 8007758:	220a      	movs	r2, #10
 800775a:	2100      	movs	r1, #0
 800775c:	f001 bd72 	b.w	8009244 <strtol>

08007760 <__errno>:
 8007760:	4b01      	ldr	r3, [pc, #4]	; (8007768 <__errno+0x8>)
 8007762:	6818      	ldr	r0, [r3, #0]
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	2000017c 	.word	0x2000017c

0800776c <__libc_init_array>:
 800776c:	b570      	push	{r4, r5, r6, lr}
 800776e:	2500      	movs	r5, #0
 8007770:	4e0c      	ldr	r6, [pc, #48]	; (80077a4 <__libc_init_array+0x38>)
 8007772:	4c0d      	ldr	r4, [pc, #52]	; (80077a8 <__libc_init_array+0x3c>)
 8007774:	1ba4      	subs	r4, r4, r6
 8007776:	10a4      	asrs	r4, r4, #2
 8007778:	42a5      	cmp	r5, r4
 800777a:	d109      	bne.n	8007790 <__libc_init_array+0x24>
 800777c:	f004 fa2c 	bl	800bbd8 <_init>
 8007780:	2500      	movs	r5, #0
 8007782:	4e0a      	ldr	r6, [pc, #40]	; (80077ac <__libc_init_array+0x40>)
 8007784:	4c0a      	ldr	r4, [pc, #40]	; (80077b0 <__libc_init_array+0x44>)
 8007786:	1ba4      	subs	r4, r4, r6
 8007788:	10a4      	asrs	r4, r4, #2
 800778a:	42a5      	cmp	r5, r4
 800778c:	d105      	bne.n	800779a <__libc_init_array+0x2e>
 800778e:	bd70      	pop	{r4, r5, r6, pc}
 8007790:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007794:	4798      	blx	r3
 8007796:	3501      	adds	r5, #1
 8007798:	e7ee      	b.n	8007778 <__libc_init_array+0xc>
 800779a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800779e:	4798      	blx	r3
 80077a0:	3501      	adds	r5, #1
 80077a2:	e7f2      	b.n	800778a <__libc_init_array+0x1e>
 80077a4:	0800bf88 	.word	0x0800bf88
 80077a8:	0800bf88 	.word	0x0800bf88
 80077ac:	0800bf88 	.word	0x0800bf88
 80077b0:	0800bf8c 	.word	0x0800bf8c

080077b4 <memset>:
 80077b4:	4603      	mov	r3, r0
 80077b6:	4402      	add	r2, r0
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d100      	bne.n	80077be <memset+0xa>
 80077bc:	4770      	bx	lr
 80077be:	f803 1b01 	strb.w	r1, [r3], #1
 80077c2:	e7f9      	b.n	80077b8 <memset+0x4>

080077c4 <__cvt>:
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077ca:	461e      	mov	r6, r3
 80077cc:	bfbb      	ittet	lt
 80077ce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80077d2:	461e      	movlt	r6, r3
 80077d4:	2300      	movge	r3, #0
 80077d6:	232d      	movlt	r3, #45	; 0x2d
 80077d8:	b088      	sub	sp, #32
 80077da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80077dc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80077e0:	f027 0720 	bic.w	r7, r7, #32
 80077e4:	2f46      	cmp	r7, #70	; 0x46
 80077e6:	4614      	mov	r4, r2
 80077e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80077ea:	700b      	strb	r3, [r1, #0]
 80077ec:	d004      	beq.n	80077f8 <__cvt+0x34>
 80077ee:	2f45      	cmp	r7, #69	; 0x45
 80077f0:	d100      	bne.n	80077f4 <__cvt+0x30>
 80077f2:	3501      	adds	r5, #1
 80077f4:	2302      	movs	r3, #2
 80077f6:	e000      	b.n	80077fa <__cvt+0x36>
 80077f8:	2303      	movs	r3, #3
 80077fa:	aa07      	add	r2, sp, #28
 80077fc:	9204      	str	r2, [sp, #16]
 80077fe:	aa06      	add	r2, sp, #24
 8007800:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007804:	e9cd 3500 	strd	r3, r5, [sp]
 8007808:	4622      	mov	r2, r4
 800780a:	4633      	mov	r3, r6
 800780c:	f001 fdc0 	bl	8009390 <_dtoa_r>
 8007810:	2f47      	cmp	r7, #71	; 0x47
 8007812:	4680      	mov	r8, r0
 8007814:	d102      	bne.n	800781c <__cvt+0x58>
 8007816:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007818:	07db      	lsls	r3, r3, #31
 800781a:	d526      	bpl.n	800786a <__cvt+0xa6>
 800781c:	2f46      	cmp	r7, #70	; 0x46
 800781e:	eb08 0905 	add.w	r9, r8, r5
 8007822:	d111      	bne.n	8007848 <__cvt+0x84>
 8007824:	f898 3000 	ldrb.w	r3, [r8]
 8007828:	2b30      	cmp	r3, #48	; 0x30
 800782a:	d10a      	bne.n	8007842 <__cvt+0x7e>
 800782c:	2200      	movs	r2, #0
 800782e:	2300      	movs	r3, #0
 8007830:	4620      	mov	r0, r4
 8007832:	4631      	mov	r1, r6
 8007834:	f7f9 f8b8 	bl	80009a8 <__aeabi_dcmpeq>
 8007838:	b918      	cbnz	r0, 8007842 <__cvt+0x7e>
 800783a:	f1c5 0501 	rsb	r5, r5, #1
 800783e:	f8ca 5000 	str.w	r5, [sl]
 8007842:	f8da 3000 	ldr.w	r3, [sl]
 8007846:	4499      	add	r9, r3
 8007848:	2200      	movs	r2, #0
 800784a:	2300      	movs	r3, #0
 800784c:	4620      	mov	r0, r4
 800784e:	4631      	mov	r1, r6
 8007850:	f7f9 f8aa 	bl	80009a8 <__aeabi_dcmpeq>
 8007854:	b938      	cbnz	r0, 8007866 <__cvt+0xa2>
 8007856:	2230      	movs	r2, #48	; 0x30
 8007858:	9b07      	ldr	r3, [sp, #28]
 800785a:	454b      	cmp	r3, r9
 800785c:	d205      	bcs.n	800786a <__cvt+0xa6>
 800785e:	1c59      	adds	r1, r3, #1
 8007860:	9107      	str	r1, [sp, #28]
 8007862:	701a      	strb	r2, [r3, #0]
 8007864:	e7f8      	b.n	8007858 <__cvt+0x94>
 8007866:	f8cd 901c 	str.w	r9, [sp, #28]
 800786a:	4640      	mov	r0, r8
 800786c:	9b07      	ldr	r3, [sp, #28]
 800786e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007870:	eba3 0308 	sub.w	r3, r3, r8
 8007874:	6013      	str	r3, [r2, #0]
 8007876:	b008      	add	sp, #32
 8007878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800787c <__exponent>:
 800787c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800787e:	2900      	cmp	r1, #0
 8007880:	bfb4      	ite	lt
 8007882:	232d      	movlt	r3, #45	; 0x2d
 8007884:	232b      	movge	r3, #43	; 0x2b
 8007886:	4604      	mov	r4, r0
 8007888:	bfb8      	it	lt
 800788a:	4249      	neglt	r1, r1
 800788c:	2909      	cmp	r1, #9
 800788e:	f804 2b02 	strb.w	r2, [r4], #2
 8007892:	7043      	strb	r3, [r0, #1]
 8007894:	dd21      	ble.n	80078da <__exponent+0x5e>
 8007896:	f10d 0307 	add.w	r3, sp, #7
 800789a:	461f      	mov	r7, r3
 800789c:	260a      	movs	r6, #10
 800789e:	fb91 f5f6 	sdiv	r5, r1, r6
 80078a2:	fb06 1115 	mls	r1, r6, r5, r1
 80078a6:	2d09      	cmp	r5, #9
 80078a8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80078ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078b0:	f103 32ff 	add.w	r2, r3, #4294967295
 80078b4:	4629      	mov	r1, r5
 80078b6:	dc09      	bgt.n	80078cc <__exponent+0x50>
 80078b8:	3130      	adds	r1, #48	; 0x30
 80078ba:	3b02      	subs	r3, #2
 80078bc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80078c0:	42bb      	cmp	r3, r7
 80078c2:	4622      	mov	r2, r4
 80078c4:	d304      	bcc.n	80078d0 <__exponent+0x54>
 80078c6:	1a10      	subs	r0, r2, r0
 80078c8:	b003      	add	sp, #12
 80078ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078cc:	4613      	mov	r3, r2
 80078ce:	e7e6      	b.n	800789e <__exponent+0x22>
 80078d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078d4:	f804 2b01 	strb.w	r2, [r4], #1
 80078d8:	e7f2      	b.n	80078c0 <__exponent+0x44>
 80078da:	2330      	movs	r3, #48	; 0x30
 80078dc:	4419      	add	r1, r3
 80078de:	7083      	strb	r3, [r0, #2]
 80078e0:	1d02      	adds	r2, r0, #4
 80078e2:	70c1      	strb	r1, [r0, #3]
 80078e4:	e7ef      	b.n	80078c6 <__exponent+0x4a>
	...

080078e8 <_printf_float>:
 80078e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ec:	b091      	sub	sp, #68	; 0x44
 80078ee:	460c      	mov	r4, r1
 80078f0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80078f2:	4693      	mov	fp, r2
 80078f4:	461e      	mov	r6, r3
 80078f6:	4605      	mov	r5, r0
 80078f8:	f002 fef6 	bl	800a6e8 <_localeconv_r>
 80078fc:	6803      	ldr	r3, [r0, #0]
 80078fe:	4618      	mov	r0, r3
 8007900:	9309      	str	r3, [sp, #36]	; 0x24
 8007902:	f7f8 fc25 	bl	8000150 <strlen>
 8007906:	2300      	movs	r3, #0
 8007908:	930e      	str	r3, [sp, #56]	; 0x38
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	900a      	str	r0, [sp, #40]	; 0x28
 800790e:	3307      	adds	r3, #7
 8007910:	f023 0307 	bic.w	r3, r3, #7
 8007914:	f103 0208 	add.w	r2, r3, #8
 8007918:	f894 8018 	ldrb.w	r8, [r4, #24]
 800791c:	f8d4 a000 	ldr.w	sl, [r4]
 8007920:	603a      	str	r2, [r7, #0]
 8007922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007926:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800792a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800792e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007932:	930b      	str	r3, [sp, #44]	; 0x2c
 8007934:	f04f 32ff 	mov.w	r2, #4294967295
 8007938:	4ba6      	ldr	r3, [pc, #664]	; (8007bd4 <_printf_float+0x2ec>)
 800793a:	4638      	mov	r0, r7
 800793c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800793e:	f7f9 f865 	bl	8000a0c <__aeabi_dcmpun>
 8007942:	bb68      	cbnz	r0, 80079a0 <_printf_float+0xb8>
 8007944:	f04f 32ff 	mov.w	r2, #4294967295
 8007948:	4ba2      	ldr	r3, [pc, #648]	; (8007bd4 <_printf_float+0x2ec>)
 800794a:	4638      	mov	r0, r7
 800794c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800794e:	f7f9 f83f 	bl	80009d0 <__aeabi_dcmple>
 8007952:	bb28      	cbnz	r0, 80079a0 <_printf_float+0xb8>
 8007954:	2200      	movs	r2, #0
 8007956:	2300      	movs	r3, #0
 8007958:	4638      	mov	r0, r7
 800795a:	4649      	mov	r1, r9
 800795c:	f7f9 f82e 	bl	80009bc <__aeabi_dcmplt>
 8007960:	b110      	cbz	r0, 8007968 <_printf_float+0x80>
 8007962:	232d      	movs	r3, #45	; 0x2d
 8007964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007968:	4f9b      	ldr	r7, [pc, #620]	; (8007bd8 <_printf_float+0x2f0>)
 800796a:	4b9c      	ldr	r3, [pc, #624]	; (8007bdc <_printf_float+0x2f4>)
 800796c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007970:	bf98      	it	ls
 8007972:	461f      	movls	r7, r3
 8007974:	2303      	movs	r3, #3
 8007976:	f04f 0900 	mov.w	r9, #0
 800797a:	6123      	str	r3, [r4, #16]
 800797c:	f02a 0304 	bic.w	r3, sl, #4
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	9600      	str	r6, [sp, #0]
 8007984:	465b      	mov	r3, fp
 8007986:	aa0f      	add	r2, sp, #60	; 0x3c
 8007988:	4621      	mov	r1, r4
 800798a:	4628      	mov	r0, r5
 800798c:	f000 f9e2 	bl	8007d54 <_printf_common>
 8007990:	3001      	adds	r0, #1
 8007992:	f040 8090 	bne.w	8007ab6 <_printf_float+0x1ce>
 8007996:	f04f 30ff 	mov.w	r0, #4294967295
 800799a:	b011      	add	sp, #68	; 0x44
 800799c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a0:	463a      	mov	r2, r7
 80079a2:	464b      	mov	r3, r9
 80079a4:	4638      	mov	r0, r7
 80079a6:	4649      	mov	r1, r9
 80079a8:	f7f9 f830 	bl	8000a0c <__aeabi_dcmpun>
 80079ac:	b110      	cbz	r0, 80079b4 <_printf_float+0xcc>
 80079ae:	4f8c      	ldr	r7, [pc, #560]	; (8007be0 <_printf_float+0x2f8>)
 80079b0:	4b8c      	ldr	r3, [pc, #560]	; (8007be4 <_printf_float+0x2fc>)
 80079b2:	e7db      	b.n	800796c <_printf_float+0x84>
 80079b4:	6863      	ldr	r3, [r4, #4]
 80079b6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80079ba:	1c59      	adds	r1, r3, #1
 80079bc:	a80d      	add	r0, sp, #52	; 0x34
 80079be:	a90e      	add	r1, sp, #56	; 0x38
 80079c0:	d140      	bne.n	8007a44 <_printf_float+0x15c>
 80079c2:	2306      	movs	r3, #6
 80079c4:	6063      	str	r3, [r4, #4]
 80079c6:	f04f 0c00 	mov.w	ip, #0
 80079ca:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80079ce:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80079d2:	6863      	ldr	r3, [r4, #4]
 80079d4:	6022      	str	r2, [r4, #0]
 80079d6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	463a      	mov	r2, r7
 80079de:	464b      	mov	r3, r9
 80079e0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80079e4:	4628      	mov	r0, r5
 80079e6:	f7ff feed 	bl	80077c4 <__cvt>
 80079ea:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80079ee:	2b47      	cmp	r3, #71	; 0x47
 80079f0:	4607      	mov	r7, r0
 80079f2:	d109      	bne.n	8007a08 <_printf_float+0x120>
 80079f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079f6:	1cd8      	adds	r0, r3, #3
 80079f8:	db02      	blt.n	8007a00 <_printf_float+0x118>
 80079fa:	6862      	ldr	r2, [r4, #4]
 80079fc:	4293      	cmp	r3, r2
 80079fe:	dd47      	ble.n	8007a90 <_printf_float+0x1a8>
 8007a00:	f1a8 0802 	sub.w	r8, r8, #2
 8007a04:	fa5f f888 	uxtb.w	r8, r8
 8007a08:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007a0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a0e:	d824      	bhi.n	8007a5a <_printf_float+0x172>
 8007a10:	3901      	subs	r1, #1
 8007a12:	4642      	mov	r2, r8
 8007a14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a18:	910d      	str	r1, [sp, #52]	; 0x34
 8007a1a:	f7ff ff2f 	bl	800787c <__exponent>
 8007a1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a20:	4681      	mov	r9, r0
 8007a22:	1813      	adds	r3, r2, r0
 8007a24:	2a01      	cmp	r2, #1
 8007a26:	6123      	str	r3, [r4, #16]
 8007a28:	dc02      	bgt.n	8007a30 <_printf_float+0x148>
 8007a2a:	6822      	ldr	r2, [r4, #0]
 8007a2c:	07d1      	lsls	r1, r2, #31
 8007a2e:	d501      	bpl.n	8007a34 <_printf_float+0x14c>
 8007a30:	3301      	adds	r3, #1
 8007a32:	6123      	str	r3, [r4, #16]
 8007a34:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d0a2      	beq.n	8007982 <_printf_float+0x9a>
 8007a3c:	232d      	movs	r3, #45	; 0x2d
 8007a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a42:	e79e      	b.n	8007982 <_printf_float+0x9a>
 8007a44:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8007a48:	f000 816e 	beq.w	8007d28 <_printf_float+0x440>
 8007a4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a50:	d1b9      	bne.n	80079c6 <_printf_float+0xde>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1b7      	bne.n	80079c6 <_printf_float+0xde>
 8007a56:	2301      	movs	r3, #1
 8007a58:	e7b4      	b.n	80079c4 <_printf_float+0xdc>
 8007a5a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8007a5e:	d119      	bne.n	8007a94 <_printf_float+0x1ac>
 8007a60:	2900      	cmp	r1, #0
 8007a62:	6863      	ldr	r3, [r4, #4]
 8007a64:	dd0c      	ble.n	8007a80 <_printf_float+0x198>
 8007a66:	6121      	str	r1, [r4, #16]
 8007a68:	b913      	cbnz	r3, 8007a70 <_printf_float+0x188>
 8007a6a:	6822      	ldr	r2, [r4, #0]
 8007a6c:	07d2      	lsls	r2, r2, #31
 8007a6e:	d502      	bpl.n	8007a76 <_printf_float+0x18e>
 8007a70:	3301      	adds	r3, #1
 8007a72:	440b      	add	r3, r1
 8007a74:	6123      	str	r3, [r4, #16]
 8007a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a78:	f04f 0900 	mov.w	r9, #0
 8007a7c:	65a3      	str	r3, [r4, #88]	; 0x58
 8007a7e:	e7d9      	b.n	8007a34 <_printf_float+0x14c>
 8007a80:	b913      	cbnz	r3, 8007a88 <_printf_float+0x1a0>
 8007a82:	6822      	ldr	r2, [r4, #0]
 8007a84:	07d0      	lsls	r0, r2, #31
 8007a86:	d501      	bpl.n	8007a8c <_printf_float+0x1a4>
 8007a88:	3302      	adds	r3, #2
 8007a8a:	e7f3      	b.n	8007a74 <_printf_float+0x18c>
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e7f1      	b.n	8007a74 <_printf_float+0x18c>
 8007a90:	f04f 0867 	mov.w	r8, #103	; 0x67
 8007a94:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	db05      	blt.n	8007aa8 <_printf_float+0x1c0>
 8007a9c:	6822      	ldr	r2, [r4, #0]
 8007a9e:	6123      	str	r3, [r4, #16]
 8007aa0:	07d1      	lsls	r1, r2, #31
 8007aa2:	d5e8      	bpl.n	8007a76 <_printf_float+0x18e>
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	e7e5      	b.n	8007a74 <_printf_float+0x18c>
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	bfcc      	ite	gt
 8007aac:	2301      	movgt	r3, #1
 8007aae:	f1c3 0302 	rsble	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	e7de      	b.n	8007a74 <_printf_float+0x18c>
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	055a      	lsls	r2, r3, #21
 8007aba:	d407      	bmi.n	8007acc <_printf_float+0x1e4>
 8007abc:	6923      	ldr	r3, [r4, #16]
 8007abe:	463a      	mov	r2, r7
 8007ac0:	4659      	mov	r1, fp
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	47b0      	blx	r6
 8007ac6:	3001      	adds	r0, #1
 8007ac8:	d129      	bne.n	8007b1e <_printf_float+0x236>
 8007aca:	e764      	b.n	8007996 <_printf_float+0xae>
 8007acc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007ad0:	f240 80d7 	bls.w	8007c82 <_printf_float+0x39a>
 8007ad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ad8:	2200      	movs	r2, #0
 8007ada:	2300      	movs	r3, #0
 8007adc:	f7f8 ff64 	bl	80009a8 <__aeabi_dcmpeq>
 8007ae0:	b388      	cbz	r0, 8007b46 <_printf_float+0x25e>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	4a40      	ldr	r2, [pc, #256]	; (8007be8 <_printf_float+0x300>)
 8007ae6:	4659      	mov	r1, fp
 8007ae8:	4628      	mov	r0, r5
 8007aea:	47b0      	blx	r6
 8007aec:	3001      	adds	r0, #1
 8007aee:	f43f af52 	beq.w	8007996 <_printf_float+0xae>
 8007af2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007af6:	429a      	cmp	r2, r3
 8007af8:	db02      	blt.n	8007b00 <_printf_float+0x218>
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	07d8      	lsls	r0, r3, #31
 8007afe:	d50e      	bpl.n	8007b1e <_printf_float+0x236>
 8007b00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b04:	4659      	mov	r1, fp
 8007b06:	4628      	mov	r0, r5
 8007b08:	47b0      	blx	r6
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	f43f af43 	beq.w	8007996 <_printf_float+0xae>
 8007b10:	2700      	movs	r7, #0
 8007b12:	f104 081a 	add.w	r8, r4, #26
 8007b16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	42bb      	cmp	r3, r7
 8007b1c:	dc09      	bgt.n	8007b32 <_printf_float+0x24a>
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	079f      	lsls	r7, r3, #30
 8007b22:	f100 80fd 	bmi.w	8007d20 <_printf_float+0x438>
 8007b26:	68e0      	ldr	r0, [r4, #12]
 8007b28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b2a:	4298      	cmp	r0, r3
 8007b2c:	bfb8      	it	lt
 8007b2e:	4618      	movlt	r0, r3
 8007b30:	e733      	b.n	800799a <_printf_float+0xb2>
 8007b32:	2301      	movs	r3, #1
 8007b34:	4642      	mov	r2, r8
 8007b36:	4659      	mov	r1, fp
 8007b38:	4628      	mov	r0, r5
 8007b3a:	47b0      	blx	r6
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	f43f af2a 	beq.w	8007996 <_printf_float+0xae>
 8007b42:	3701      	adds	r7, #1
 8007b44:	e7e7      	b.n	8007b16 <_printf_float+0x22e>
 8007b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	dc2b      	bgt.n	8007ba4 <_printf_float+0x2bc>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	4a26      	ldr	r2, [pc, #152]	; (8007be8 <_printf_float+0x300>)
 8007b50:	4659      	mov	r1, fp
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b0      	blx	r6
 8007b56:	3001      	adds	r0, #1
 8007b58:	f43f af1d 	beq.w	8007996 <_printf_float+0xae>
 8007b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b5e:	b923      	cbnz	r3, 8007b6a <_printf_float+0x282>
 8007b60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b62:	b913      	cbnz	r3, 8007b6a <_printf_float+0x282>
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	07d9      	lsls	r1, r3, #31
 8007b68:	d5d9      	bpl.n	8007b1e <_printf_float+0x236>
 8007b6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b6e:	4659      	mov	r1, fp
 8007b70:	4628      	mov	r0, r5
 8007b72:	47b0      	blx	r6
 8007b74:	3001      	adds	r0, #1
 8007b76:	f43f af0e 	beq.w	8007996 <_printf_float+0xae>
 8007b7a:	f04f 0800 	mov.w	r8, #0
 8007b7e:	f104 091a 	add.w	r9, r4, #26
 8007b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b84:	425b      	negs	r3, r3
 8007b86:	4543      	cmp	r3, r8
 8007b88:	dc01      	bgt.n	8007b8e <_printf_float+0x2a6>
 8007b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b8c:	e797      	b.n	8007abe <_printf_float+0x1d6>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	464a      	mov	r2, r9
 8007b92:	4659      	mov	r1, fp
 8007b94:	4628      	mov	r0, r5
 8007b96:	47b0      	blx	r6
 8007b98:	3001      	adds	r0, #1
 8007b9a:	f43f aefc 	beq.w	8007996 <_printf_float+0xae>
 8007b9e:	f108 0801 	add.w	r8, r8, #1
 8007ba2:	e7ee      	b.n	8007b82 <_printf_float+0x29a>
 8007ba4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ba6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	bfa8      	it	ge
 8007bac:	461a      	movge	r2, r3
 8007bae:	2a00      	cmp	r2, #0
 8007bb0:	4690      	mov	r8, r2
 8007bb2:	dd07      	ble.n	8007bc4 <_printf_float+0x2dc>
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	4659      	mov	r1, fp
 8007bb8:	463a      	mov	r2, r7
 8007bba:	4628      	mov	r0, r5
 8007bbc:	47b0      	blx	r6
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	f43f aee9 	beq.w	8007996 <_printf_float+0xae>
 8007bc4:	f104 031a 	add.w	r3, r4, #26
 8007bc8:	f04f 0a00 	mov.w	sl, #0
 8007bcc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8007bd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bd2:	e015      	b.n	8007c00 <_printf_float+0x318>
 8007bd4:	7fefffff 	.word	0x7fefffff
 8007bd8:	0800bc6c 	.word	0x0800bc6c
 8007bdc:	0800bc68 	.word	0x0800bc68
 8007be0:	0800bc74 	.word	0x0800bc74
 8007be4:	0800bc70 	.word	0x0800bc70
 8007be8:	0800bc78 	.word	0x0800bc78
 8007bec:	2301      	movs	r3, #1
 8007bee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bf0:	4659      	mov	r1, fp
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	47b0      	blx	r6
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	f43f aecd 	beq.w	8007996 <_printf_float+0xae>
 8007bfc:	f10a 0a01 	add.w	sl, sl, #1
 8007c00:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8007c04:	eba9 0308 	sub.w	r3, r9, r8
 8007c08:	4553      	cmp	r3, sl
 8007c0a:	dcef      	bgt.n	8007bec <_printf_float+0x304>
 8007c0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007c10:	429a      	cmp	r2, r3
 8007c12:	444f      	add	r7, r9
 8007c14:	db14      	blt.n	8007c40 <_printf_float+0x358>
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	07da      	lsls	r2, r3, #31
 8007c1a:	d411      	bmi.n	8007c40 <_printf_float+0x358>
 8007c1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c1e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007c20:	eba3 0209 	sub.w	r2, r3, r9
 8007c24:	eba3 0901 	sub.w	r9, r3, r1
 8007c28:	4591      	cmp	r9, r2
 8007c2a:	bfa8      	it	ge
 8007c2c:	4691      	movge	r9, r2
 8007c2e:	f1b9 0f00 	cmp.w	r9, #0
 8007c32:	dc0d      	bgt.n	8007c50 <_printf_float+0x368>
 8007c34:	2700      	movs	r7, #0
 8007c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c3a:	f104 081a 	add.w	r8, r4, #26
 8007c3e:	e018      	b.n	8007c72 <_printf_float+0x38a>
 8007c40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c44:	4659      	mov	r1, fp
 8007c46:	4628      	mov	r0, r5
 8007c48:	47b0      	blx	r6
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	d1e6      	bne.n	8007c1c <_printf_float+0x334>
 8007c4e:	e6a2      	b.n	8007996 <_printf_float+0xae>
 8007c50:	464b      	mov	r3, r9
 8007c52:	463a      	mov	r2, r7
 8007c54:	4659      	mov	r1, fp
 8007c56:	4628      	mov	r0, r5
 8007c58:	47b0      	blx	r6
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	d1ea      	bne.n	8007c34 <_printf_float+0x34c>
 8007c5e:	e69a      	b.n	8007996 <_printf_float+0xae>
 8007c60:	2301      	movs	r3, #1
 8007c62:	4642      	mov	r2, r8
 8007c64:	4659      	mov	r1, fp
 8007c66:	4628      	mov	r0, r5
 8007c68:	47b0      	blx	r6
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	f43f ae93 	beq.w	8007996 <_printf_float+0xae>
 8007c70:	3701      	adds	r7, #1
 8007c72:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007c76:	1a9b      	subs	r3, r3, r2
 8007c78:	eba3 0309 	sub.w	r3, r3, r9
 8007c7c:	42bb      	cmp	r3, r7
 8007c7e:	dcef      	bgt.n	8007c60 <_printf_float+0x378>
 8007c80:	e74d      	b.n	8007b1e <_printf_float+0x236>
 8007c82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c84:	2a01      	cmp	r2, #1
 8007c86:	dc01      	bgt.n	8007c8c <_printf_float+0x3a4>
 8007c88:	07db      	lsls	r3, r3, #31
 8007c8a:	d538      	bpl.n	8007cfe <_printf_float+0x416>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	463a      	mov	r2, r7
 8007c90:	4659      	mov	r1, fp
 8007c92:	4628      	mov	r0, r5
 8007c94:	47b0      	blx	r6
 8007c96:	3001      	adds	r0, #1
 8007c98:	f43f ae7d 	beq.w	8007996 <_printf_float+0xae>
 8007c9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ca0:	4659      	mov	r1, fp
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	47b0      	blx	r6
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	f107 0701 	add.w	r7, r7, #1
 8007cac:	f43f ae73 	beq.w	8007996 <_printf_float+0xae>
 8007cb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f103 38ff 	add.w	r8, r3, #4294967295
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f7f8 fe73 	bl	80009a8 <__aeabi_dcmpeq>
 8007cc2:	b9c0      	cbnz	r0, 8007cf6 <_printf_float+0x40e>
 8007cc4:	4643      	mov	r3, r8
 8007cc6:	463a      	mov	r2, r7
 8007cc8:	4659      	mov	r1, fp
 8007cca:	4628      	mov	r0, r5
 8007ccc:	47b0      	blx	r6
 8007cce:	3001      	adds	r0, #1
 8007cd0:	d10d      	bne.n	8007cee <_printf_float+0x406>
 8007cd2:	e660      	b.n	8007996 <_printf_float+0xae>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	4642      	mov	r2, r8
 8007cd8:	4659      	mov	r1, fp
 8007cda:	4628      	mov	r0, r5
 8007cdc:	47b0      	blx	r6
 8007cde:	3001      	adds	r0, #1
 8007ce0:	f43f ae59 	beq.w	8007996 <_printf_float+0xae>
 8007ce4:	3701      	adds	r7, #1
 8007ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	42bb      	cmp	r3, r7
 8007cec:	dcf2      	bgt.n	8007cd4 <_printf_float+0x3ec>
 8007cee:	464b      	mov	r3, r9
 8007cf0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007cf4:	e6e4      	b.n	8007ac0 <_printf_float+0x1d8>
 8007cf6:	2700      	movs	r7, #0
 8007cf8:	f104 081a 	add.w	r8, r4, #26
 8007cfc:	e7f3      	b.n	8007ce6 <_printf_float+0x3fe>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e7e1      	b.n	8007cc6 <_printf_float+0x3de>
 8007d02:	2301      	movs	r3, #1
 8007d04:	4642      	mov	r2, r8
 8007d06:	4659      	mov	r1, fp
 8007d08:	4628      	mov	r0, r5
 8007d0a:	47b0      	blx	r6
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	f43f ae42 	beq.w	8007996 <_printf_float+0xae>
 8007d12:	3701      	adds	r7, #1
 8007d14:	68e3      	ldr	r3, [r4, #12]
 8007d16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d18:	1a9b      	subs	r3, r3, r2
 8007d1a:	42bb      	cmp	r3, r7
 8007d1c:	dcf1      	bgt.n	8007d02 <_printf_float+0x41a>
 8007d1e:	e702      	b.n	8007b26 <_printf_float+0x23e>
 8007d20:	2700      	movs	r7, #0
 8007d22:	f104 0819 	add.w	r8, r4, #25
 8007d26:	e7f5      	b.n	8007d14 <_printf_float+0x42c>
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f43f ae94 	beq.w	8007a56 <_printf_float+0x16e>
 8007d2e:	f04f 0c00 	mov.w	ip, #0
 8007d32:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007d36:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8007d3a:	6022      	str	r2, [r4, #0]
 8007d3c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007d40:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	463a      	mov	r2, r7
 8007d48:	464b      	mov	r3, r9
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f7ff fd3a 	bl	80077c4 <__cvt>
 8007d50:	4607      	mov	r7, r0
 8007d52:	e64f      	b.n	80079f4 <_printf_float+0x10c>

08007d54 <_printf_common>:
 8007d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d58:	4691      	mov	r9, r2
 8007d5a:	461f      	mov	r7, r3
 8007d5c:	688a      	ldr	r2, [r1, #8]
 8007d5e:	690b      	ldr	r3, [r1, #16]
 8007d60:	4606      	mov	r6, r0
 8007d62:	4293      	cmp	r3, r2
 8007d64:	bfb8      	it	lt
 8007d66:	4613      	movlt	r3, r2
 8007d68:	f8c9 3000 	str.w	r3, [r9]
 8007d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d70:	460c      	mov	r4, r1
 8007d72:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d76:	b112      	cbz	r2, 8007d7e <_printf_common+0x2a>
 8007d78:	3301      	adds	r3, #1
 8007d7a:	f8c9 3000 	str.w	r3, [r9]
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	0699      	lsls	r1, r3, #26
 8007d82:	bf42      	ittt	mi
 8007d84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007d88:	3302      	addmi	r3, #2
 8007d8a:	f8c9 3000 	strmi.w	r3, [r9]
 8007d8e:	6825      	ldr	r5, [r4, #0]
 8007d90:	f015 0506 	ands.w	r5, r5, #6
 8007d94:	d107      	bne.n	8007da6 <_printf_common+0x52>
 8007d96:	f104 0a19 	add.w	sl, r4, #25
 8007d9a:	68e3      	ldr	r3, [r4, #12]
 8007d9c:	f8d9 2000 	ldr.w	r2, [r9]
 8007da0:	1a9b      	subs	r3, r3, r2
 8007da2:	42ab      	cmp	r3, r5
 8007da4:	dc29      	bgt.n	8007dfa <_printf_common+0xa6>
 8007da6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007daa:	6822      	ldr	r2, [r4, #0]
 8007dac:	3300      	adds	r3, #0
 8007dae:	bf18      	it	ne
 8007db0:	2301      	movne	r3, #1
 8007db2:	0692      	lsls	r2, r2, #26
 8007db4:	d42e      	bmi.n	8007e14 <_printf_common+0xc0>
 8007db6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dba:	4639      	mov	r1, r7
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	47c0      	blx	r8
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	d021      	beq.n	8007e08 <_printf_common+0xb4>
 8007dc4:	6823      	ldr	r3, [r4, #0]
 8007dc6:	68e5      	ldr	r5, [r4, #12]
 8007dc8:	f003 0306 	and.w	r3, r3, #6
 8007dcc:	2b04      	cmp	r3, #4
 8007dce:	bf18      	it	ne
 8007dd0:	2500      	movne	r5, #0
 8007dd2:	f8d9 2000 	ldr.w	r2, [r9]
 8007dd6:	f04f 0900 	mov.w	r9, #0
 8007dda:	bf08      	it	eq
 8007ddc:	1aad      	subeq	r5, r5, r2
 8007dde:	68a3      	ldr	r3, [r4, #8]
 8007de0:	6922      	ldr	r2, [r4, #16]
 8007de2:	bf08      	it	eq
 8007de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007de8:	4293      	cmp	r3, r2
 8007dea:	bfc4      	itt	gt
 8007dec:	1a9b      	subgt	r3, r3, r2
 8007dee:	18ed      	addgt	r5, r5, r3
 8007df0:	341a      	adds	r4, #26
 8007df2:	454d      	cmp	r5, r9
 8007df4:	d11a      	bne.n	8007e2c <_printf_common+0xd8>
 8007df6:	2000      	movs	r0, #0
 8007df8:	e008      	b.n	8007e0c <_printf_common+0xb8>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	4652      	mov	r2, sl
 8007dfe:	4639      	mov	r1, r7
 8007e00:	4630      	mov	r0, r6
 8007e02:	47c0      	blx	r8
 8007e04:	3001      	adds	r0, #1
 8007e06:	d103      	bne.n	8007e10 <_printf_common+0xbc>
 8007e08:	f04f 30ff 	mov.w	r0, #4294967295
 8007e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e10:	3501      	adds	r5, #1
 8007e12:	e7c2      	b.n	8007d9a <_printf_common+0x46>
 8007e14:	2030      	movs	r0, #48	; 0x30
 8007e16:	18e1      	adds	r1, r4, r3
 8007e18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e22:	4422      	add	r2, r4
 8007e24:	3302      	adds	r3, #2
 8007e26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e2a:	e7c4      	b.n	8007db6 <_printf_common+0x62>
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	4622      	mov	r2, r4
 8007e30:	4639      	mov	r1, r7
 8007e32:	4630      	mov	r0, r6
 8007e34:	47c0      	blx	r8
 8007e36:	3001      	adds	r0, #1
 8007e38:	d0e6      	beq.n	8007e08 <_printf_common+0xb4>
 8007e3a:	f109 0901 	add.w	r9, r9, #1
 8007e3e:	e7d8      	b.n	8007df2 <_printf_common+0x9e>

08007e40 <_printf_i>:
 8007e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007e48:	460c      	mov	r4, r1
 8007e4a:	7e09      	ldrb	r1, [r1, #24]
 8007e4c:	b085      	sub	sp, #20
 8007e4e:	296e      	cmp	r1, #110	; 0x6e
 8007e50:	4617      	mov	r7, r2
 8007e52:	4606      	mov	r6, r0
 8007e54:	4698      	mov	r8, r3
 8007e56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e58:	f000 80b3 	beq.w	8007fc2 <_printf_i+0x182>
 8007e5c:	d822      	bhi.n	8007ea4 <_printf_i+0x64>
 8007e5e:	2963      	cmp	r1, #99	; 0x63
 8007e60:	d036      	beq.n	8007ed0 <_printf_i+0x90>
 8007e62:	d80a      	bhi.n	8007e7a <_printf_i+0x3a>
 8007e64:	2900      	cmp	r1, #0
 8007e66:	f000 80b9 	beq.w	8007fdc <_printf_i+0x19c>
 8007e6a:	2958      	cmp	r1, #88	; 0x58
 8007e6c:	f000 8083 	beq.w	8007f76 <_printf_i+0x136>
 8007e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007e78:	e032      	b.n	8007ee0 <_printf_i+0xa0>
 8007e7a:	2964      	cmp	r1, #100	; 0x64
 8007e7c:	d001      	beq.n	8007e82 <_printf_i+0x42>
 8007e7e:	2969      	cmp	r1, #105	; 0x69
 8007e80:	d1f6      	bne.n	8007e70 <_printf_i+0x30>
 8007e82:	6820      	ldr	r0, [r4, #0]
 8007e84:	6813      	ldr	r3, [r2, #0]
 8007e86:	0605      	lsls	r5, r0, #24
 8007e88:	f103 0104 	add.w	r1, r3, #4
 8007e8c:	d52a      	bpl.n	8007ee4 <_printf_i+0xa4>
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6011      	str	r1, [r2, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	da03      	bge.n	8007e9e <_printf_i+0x5e>
 8007e96:	222d      	movs	r2, #45	; 0x2d
 8007e98:	425b      	negs	r3, r3
 8007e9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007e9e:	486f      	ldr	r0, [pc, #444]	; (800805c <_printf_i+0x21c>)
 8007ea0:	220a      	movs	r2, #10
 8007ea2:	e039      	b.n	8007f18 <_printf_i+0xd8>
 8007ea4:	2973      	cmp	r1, #115	; 0x73
 8007ea6:	f000 809d 	beq.w	8007fe4 <_printf_i+0x1a4>
 8007eaa:	d808      	bhi.n	8007ebe <_printf_i+0x7e>
 8007eac:	296f      	cmp	r1, #111	; 0x6f
 8007eae:	d020      	beq.n	8007ef2 <_printf_i+0xb2>
 8007eb0:	2970      	cmp	r1, #112	; 0x70
 8007eb2:	d1dd      	bne.n	8007e70 <_printf_i+0x30>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	f043 0320 	orr.w	r3, r3, #32
 8007eba:	6023      	str	r3, [r4, #0]
 8007ebc:	e003      	b.n	8007ec6 <_printf_i+0x86>
 8007ebe:	2975      	cmp	r1, #117	; 0x75
 8007ec0:	d017      	beq.n	8007ef2 <_printf_i+0xb2>
 8007ec2:	2978      	cmp	r1, #120	; 0x78
 8007ec4:	d1d4      	bne.n	8007e70 <_printf_i+0x30>
 8007ec6:	2378      	movs	r3, #120	; 0x78
 8007ec8:	4865      	ldr	r0, [pc, #404]	; (8008060 <_printf_i+0x220>)
 8007eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ece:	e055      	b.n	8007f7c <_printf_i+0x13c>
 8007ed0:	6813      	ldr	r3, [r2, #0]
 8007ed2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ed6:	1d19      	adds	r1, r3, #4
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	6011      	str	r1, [r2, #0]
 8007edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e08c      	b.n	8007ffe <_printf_i+0x1be>
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007eea:	6011      	str	r1, [r2, #0]
 8007eec:	bf18      	it	ne
 8007eee:	b21b      	sxthne	r3, r3
 8007ef0:	e7cf      	b.n	8007e92 <_printf_i+0x52>
 8007ef2:	6813      	ldr	r3, [r2, #0]
 8007ef4:	6825      	ldr	r5, [r4, #0]
 8007ef6:	1d18      	adds	r0, r3, #4
 8007ef8:	6010      	str	r0, [r2, #0]
 8007efa:	0628      	lsls	r0, r5, #24
 8007efc:	d501      	bpl.n	8007f02 <_printf_i+0xc2>
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	e002      	b.n	8007f08 <_printf_i+0xc8>
 8007f02:	0668      	lsls	r0, r5, #25
 8007f04:	d5fb      	bpl.n	8007efe <_printf_i+0xbe>
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	296f      	cmp	r1, #111	; 0x6f
 8007f0a:	bf14      	ite	ne
 8007f0c:	220a      	movne	r2, #10
 8007f0e:	2208      	moveq	r2, #8
 8007f10:	4852      	ldr	r0, [pc, #328]	; (800805c <_printf_i+0x21c>)
 8007f12:	2100      	movs	r1, #0
 8007f14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f18:	6865      	ldr	r5, [r4, #4]
 8007f1a:	2d00      	cmp	r5, #0
 8007f1c:	60a5      	str	r5, [r4, #8]
 8007f1e:	f2c0 8095 	blt.w	800804c <_printf_i+0x20c>
 8007f22:	6821      	ldr	r1, [r4, #0]
 8007f24:	f021 0104 	bic.w	r1, r1, #4
 8007f28:	6021      	str	r1, [r4, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d13d      	bne.n	8007faa <_printf_i+0x16a>
 8007f2e:	2d00      	cmp	r5, #0
 8007f30:	f040 808e 	bne.w	8008050 <_printf_i+0x210>
 8007f34:	4665      	mov	r5, ip
 8007f36:	2a08      	cmp	r2, #8
 8007f38:	d10b      	bne.n	8007f52 <_printf_i+0x112>
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	07db      	lsls	r3, r3, #31
 8007f3e:	d508      	bpl.n	8007f52 <_printf_i+0x112>
 8007f40:	6923      	ldr	r3, [r4, #16]
 8007f42:	6862      	ldr	r2, [r4, #4]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	bfde      	ittt	le
 8007f48:	2330      	movle	r3, #48	; 0x30
 8007f4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f52:	ebac 0305 	sub.w	r3, ip, r5
 8007f56:	6123      	str	r3, [r4, #16]
 8007f58:	f8cd 8000 	str.w	r8, [sp]
 8007f5c:	463b      	mov	r3, r7
 8007f5e:	aa03      	add	r2, sp, #12
 8007f60:	4621      	mov	r1, r4
 8007f62:	4630      	mov	r0, r6
 8007f64:	f7ff fef6 	bl	8007d54 <_printf_common>
 8007f68:	3001      	adds	r0, #1
 8007f6a:	d14d      	bne.n	8008008 <_printf_i+0x1c8>
 8007f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f70:	b005      	add	sp, #20
 8007f72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f76:	4839      	ldr	r0, [pc, #228]	; (800805c <_printf_i+0x21c>)
 8007f78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007f7c:	6813      	ldr	r3, [r2, #0]
 8007f7e:	6821      	ldr	r1, [r4, #0]
 8007f80:	1d1d      	adds	r5, r3, #4
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6015      	str	r5, [r2, #0]
 8007f86:	060a      	lsls	r2, r1, #24
 8007f88:	d50b      	bpl.n	8007fa2 <_printf_i+0x162>
 8007f8a:	07ca      	lsls	r2, r1, #31
 8007f8c:	bf44      	itt	mi
 8007f8e:	f041 0120 	orrmi.w	r1, r1, #32
 8007f92:	6021      	strmi	r1, [r4, #0]
 8007f94:	b91b      	cbnz	r3, 8007f9e <_printf_i+0x15e>
 8007f96:	6822      	ldr	r2, [r4, #0]
 8007f98:	f022 0220 	bic.w	r2, r2, #32
 8007f9c:	6022      	str	r2, [r4, #0]
 8007f9e:	2210      	movs	r2, #16
 8007fa0:	e7b7      	b.n	8007f12 <_printf_i+0xd2>
 8007fa2:	064d      	lsls	r5, r1, #25
 8007fa4:	bf48      	it	mi
 8007fa6:	b29b      	uxthmi	r3, r3
 8007fa8:	e7ef      	b.n	8007f8a <_printf_i+0x14a>
 8007faa:	4665      	mov	r5, ip
 8007fac:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fb0:	fb02 3311 	mls	r3, r2, r1, r3
 8007fb4:	5cc3      	ldrb	r3, [r0, r3]
 8007fb6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007fba:	460b      	mov	r3, r1
 8007fbc:	2900      	cmp	r1, #0
 8007fbe:	d1f5      	bne.n	8007fac <_printf_i+0x16c>
 8007fc0:	e7b9      	b.n	8007f36 <_printf_i+0xf6>
 8007fc2:	6813      	ldr	r3, [r2, #0]
 8007fc4:	6825      	ldr	r5, [r4, #0]
 8007fc6:	1d18      	adds	r0, r3, #4
 8007fc8:	6961      	ldr	r1, [r4, #20]
 8007fca:	6010      	str	r0, [r2, #0]
 8007fcc:	0628      	lsls	r0, r5, #24
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	d501      	bpl.n	8007fd6 <_printf_i+0x196>
 8007fd2:	6019      	str	r1, [r3, #0]
 8007fd4:	e002      	b.n	8007fdc <_printf_i+0x19c>
 8007fd6:	066a      	lsls	r2, r5, #25
 8007fd8:	d5fb      	bpl.n	8007fd2 <_printf_i+0x192>
 8007fda:	8019      	strh	r1, [r3, #0]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4665      	mov	r5, ip
 8007fe0:	6123      	str	r3, [r4, #16]
 8007fe2:	e7b9      	b.n	8007f58 <_printf_i+0x118>
 8007fe4:	6813      	ldr	r3, [r2, #0]
 8007fe6:	1d19      	adds	r1, r3, #4
 8007fe8:	6011      	str	r1, [r2, #0]
 8007fea:	681d      	ldr	r5, [r3, #0]
 8007fec:	6862      	ldr	r2, [r4, #4]
 8007fee:	2100      	movs	r1, #0
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	f002 fba1 	bl	800a738 <memchr>
 8007ff6:	b108      	cbz	r0, 8007ffc <_printf_i+0x1bc>
 8007ff8:	1b40      	subs	r0, r0, r5
 8007ffa:	6060      	str	r0, [r4, #4]
 8007ffc:	6863      	ldr	r3, [r4, #4]
 8007ffe:	6123      	str	r3, [r4, #16]
 8008000:	2300      	movs	r3, #0
 8008002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008006:	e7a7      	b.n	8007f58 <_printf_i+0x118>
 8008008:	6923      	ldr	r3, [r4, #16]
 800800a:	462a      	mov	r2, r5
 800800c:	4639      	mov	r1, r7
 800800e:	4630      	mov	r0, r6
 8008010:	47c0      	blx	r8
 8008012:	3001      	adds	r0, #1
 8008014:	d0aa      	beq.n	8007f6c <_printf_i+0x12c>
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	079b      	lsls	r3, r3, #30
 800801a:	d413      	bmi.n	8008044 <_printf_i+0x204>
 800801c:	68e0      	ldr	r0, [r4, #12]
 800801e:	9b03      	ldr	r3, [sp, #12]
 8008020:	4298      	cmp	r0, r3
 8008022:	bfb8      	it	lt
 8008024:	4618      	movlt	r0, r3
 8008026:	e7a3      	b.n	8007f70 <_printf_i+0x130>
 8008028:	2301      	movs	r3, #1
 800802a:	464a      	mov	r2, r9
 800802c:	4639      	mov	r1, r7
 800802e:	4630      	mov	r0, r6
 8008030:	47c0      	blx	r8
 8008032:	3001      	adds	r0, #1
 8008034:	d09a      	beq.n	8007f6c <_printf_i+0x12c>
 8008036:	3501      	adds	r5, #1
 8008038:	68e3      	ldr	r3, [r4, #12]
 800803a:	9a03      	ldr	r2, [sp, #12]
 800803c:	1a9b      	subs	r3, r3, r2
 800803e:	42ab      	cmp	r3, r5
 8008040:	dcf2      	bgt.n	8008028 <_printf_i+0x1e8>
 8008042:	e7eb      	b.n	800801c <_printf_i+0x1dc>
 8008044:	2500      	movs	r5, #0
 8008046:	f104 0919 	add.w	r9, r4, #25
 800804a:	e7f5      	b.n	8008038 <_printf_i+0x1f8>
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1ac      	bne.n	8007faa <_printf_i+0x16a>
 8008050:	7803      	ldrb	r3, [r0, #0]
 8008052:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008056:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800805a:	e76c      	b.n	8007f36 <_printf_i+0xf6>
 800805c:	0800bc7a 	.word	0x0800bc7a
 8008060:	0800bc8b 	.word	0x0800bc8b

08008064 <_scanf_float>:
 8008064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008068:	469a      	mov	sl, r3
 800806a:	688b      	ldr	r3, [r1, #8]
 800806c:	4616      	mov	r6, r2
 800806e:	1e5a      	subs	r2, r3, #1
 8008070:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008074:	bf88      	it	hi
 8008076:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800807a:	b087      	sub	sp, #28
 800807c:	bf85      	ittet	hi
 800807e:	189b      	addhi	r3, r3, r2
 8008080:	9301      	strhi	r3, [sp, #4]
 8008082:	2300      	movls	r3, #0
 8008084:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008088:	4688      	mov	r8, r1
 800808a:	f04f 0b00 	mov.w	fp, #0
 800808e:	bf8c      	ite	hi
 8008090:	608b      	strhi	r3, [r1, #8]
 8008092:	9301      	strls	r3, [sp, #4]
 8008094:	680b      	ldr	r3, [r1, #0]
 8008096:	4607      	mov	r7, r0
 8008098:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800809c:	f848 3b1c 	str.w	r3, [r8], #28
 80080a0:	460c      	mov	r4, r1
 80080a2:	4645      	mov	r5, r8
 80080a4:	465a      	mov	r2, fp
 80080a6:	46d9      	mov	r9, fp
 80080a8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80080ac:	f8cd b008 	str.w	fp, [sp, #8]
 80080b0:	68a1      	ldr	r1, [r4, #8]
 80080b2:	b181      	cbz	r1, 80080d6 <_scanf_float+0x72>
 80080b4:	6833      	ldr	r3, [r6, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b49      	cmp	r3, #73	; 0x49
 80080ba:	d071      	beq.n	80081a0 <_scanf_float+0x13c>
 80080bc:	d84d      	bhi.n	800815a <_scanf_float+0xf6>
 80080be:	2b39      	cmp	r3, #57	; 0x39
 80080c0:	d840      	bhi.n	8008144 <_scanf_float+0xe0>
 80080c2:	2b31      	cmp	r3, #49	; 0x31
 80080c4:	f080 8088 	bcs.w	80081d8 <_scanf_float+0x174>
 80080c8:	2b2d      	cmp	r3, #45	; 0x2d
 80080ca:	f000 8090 	beq.w	80081ee <_scanf_float+0x18a>
 80080ce:	d815      	bhi.n	80080fc <_scanf_float+0x98>
 80080d0:	2b2b      	cmp	r3, #43	; 0x2b
 80080d2:	f000 808c 	beq.w	80081ee <_scanf_float+0x18a>
 80080d6:	f1b9 0f00 	cmp.w	r9, #0
 80080da:	d003      	beq.n	80080e4 <_scanf_float+0x80>
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080e2:	6023      	str	r3, [r4, #0]
 80080e4:	3a01      	subs	r2, #1
 80080e6:	2a01      	cmp	r2, #1
 80080e8:	f200 80ea 	bhi.w	80082c0 <_scanf_float+0x25c>
 80080ec:	4545      	cmp	r5, r8
 80080ee:	f200 80dc 	bhi.w	80082aa <_scanf_float+0x246>
 80080f2:	2601      	movs	r6, #1
 80080f4:	4630      	mov	r0, r6
 80080f6:	b007      	add	sp, #28
 80080f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fc:	2b2e      	cmp	r3, #46	; 0x2e
 80080fe:	f000 809f 	beq.w	8008240 <_scanf_float+0x1dc>
 8008102:	2b30      	cmp	r3, #48	; 0x30
 8008104:	d1e7      	bne.n	80080d6 <_scanf_float+0x72>
 8008106:	6820      	ldr	r0, [r4, #0]
 8008108:	f410 7f80 	tst.w	r0, #256	; 0x100
 800810c:	d064      	beq.n	80081d8 <_scanf_float+0x174>
 800810e:	9b01      	ldr	r3, [sp, #4]
 8008110:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8008114:	6020      	str	r0, [r4, #0]
 8008116:	f109 0901 	add.w	r9, r9, #1
 800811a:	b11b      	cbz	r3, 8008124 <_scanf_float+0xc0>
 800811c:	3b01      	subs	r3, #1
 800811e:	3101      	adds	r1, #1
 8008120:	9301      	str	r3, [sp, #4]
 8008122:	60a1      	str	r1, [r4, #8]
 8008124:	68a3      	ldr	r3, [r4, #8]
 8008126:	3b01      	subs	r3, #1
 8008128:	60a3      	str	r3, [r4, #8]
 800812a:	6923      	ldr	r3, [r4, #16]
 800812c:	3301      	adds	r3, #1
 800812e:	6123      	str	r3, [r4, #16]
 8008130:	6873      	ldr	r3, [r6, #4]
 8008132:	3b01      	subs	r3, #1
 8008134:	2b00      	cmp	r3, #0
 8008136:	6073      	str	r3, [r6, #4]
 8008138:	f340 80ac 	ble.w	8008294 <_scanf_float+0x230>
 800813c:	6833      	ldr	r3, [r6, #0]
 800813e:	3301      	adds	r3, #1
 8008140:	6033      	str	r3, [r6, #0]
 8008142:	e7b5      	b.n	80080b0 <_scanf_float+0x4c>
 8008144:	2b45      	cmp	r3, #69	; 0x45
 8008146:	f000 8085 	beq.w	8008254 <_scanf_float+0x1f0>
 800814a:	2b46      	cmp	r3, #70	; 0x46
 800814c:	d06a      	beq.n	8008224 <_scanf_float+0x1c0>
 800814e:	2b41      	cmp	r3, #65	; 0x41
 8008150:	d1c1      	bne.n	80080d6 <_scanf_float+0x72>
 8008152:	2a01      	cmp	r2, #1
 8008154:	d1bf      	bne.n	80080d6 <_scanf_float+0x72>
 8008156:	2202      	movs	r2, #2
 8008158:	e046      	b.n	80081e8 <_scanf_float+0x184>
 800815a:	2b65      	cmp	r3, #101	; 0x65
 800815c:	d07a      	beq.n	8008254 <_scanf_float+0x1f0>
 800815e:	d818      	bhi.n	8008192 <_scanf_float+0x12e>
 8008160:	2b54      	cmp	r3, #84	; 0x54
 8008162:	d066      	beq.n	8008232 <_scanf_float+0x1ce>
 8008164:	d811      	bhi.n	800818a <_scanf_float+0x126>
 8008166:	2b4e      	cmp	r3, #78	; 0x4e
 8008168:	d1b5      	bne.n	80080d6 <_scanf_float+0x72>
 800816a:	2a00      	cmp	r2, #0
 800816c:	d146      	bne.n	80081fc <_scanf_float+0x198>
 800816e:	f1b9 0f00 	cmp.w	r9, #0
 8008172:	d145      	bne.n	8008200 <_scanf_float+0x19c>
 8008174:	6821      	ldr	r1, [r4, #0]
 8008176:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800817a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800817e:	d13f      	bne.n	8008200 <_scanf_float+0x19c>
 8008180:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008184:	6021      	str	r1, [r4, #0]
 8008186:	2201      	movs	r2, #1
 8008188:	e02e      	b.n	80081e8 <_scanf_float+0x184>
 800818a:	2b59      	cmp	r3, #89	; 0x59
 800818c:	d01e      	beq.n	80081cc <_scanf_float+0x168>
 800818e:	2b61      	cmp	r3, #97	; 0x61
 8008190:	e7de      	b.n	8008150 <_scanf_float+0xec>
 8008192:	2b6e      	cmp	r3, #110	; 0x6e
 8008194:	d0e9      	beq.n	800816a <_scanf_float+0x106>
 8008196:	d815      	bhi.n	80081c4 <_scanf_float+0x160>
 8008198:	2b66      	cmp	r3, #102	; 0x66
 800819a:	d043      	beq.n	8008224 <_scanf_float+0x1c0>
 800819c:	2b69      	cmp	r3, #105	; 0x69
 800819e:	d19a      	bne.n	80080d6 <_scanf_float+0x72>
 80081a0:	f1bb 0f00 	cmp.w	fp, #0
 80081a4:	d138      	bne.n	8008218 <_scanf_float+0x1b4>
 80081a6:	f1b9 0f00 	cmp.w	r9, #0
 80081aa:	d197      	bne.n	80080dc <_scanf_float+0x78>
 80081ac:	6821      	ldr	r1, [r4, #0]
 80081ae:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80081b2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80081b6:	d195      	bne.n	80080e4 <_scanf_float+0x80>
 80081b8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80081bc:	6021      	str	r1, [r4, #0]
 80081be:	f04f 0b01 	mov.w	fp, #1
 80081c2:	e011      	b.n	80081e8 <_scanf_float+0x184>
 80081c4:	2b74      	cmp	r3, #116	; 0x74
 80081c6:	d034      	beq.n	8008232 <_scanf_float+0x1ce>
 80081c8:	2b79      	cmp	r3, #121	; 0x79
 80081ca:	d184      	bne.n	80080d6 <_scanf_float+0x72>
 80081cc:	f1bb 0f07 	cmp.w	fp, #7
 80081d0:	d181      	bne.n	80080d6 <_scanf_float+0x72>
 80081d2:	f04f 0b08 	mov.w	fp, #8
 80081d6:	e007      	b.n	80081e8 <_scanf_float+0x184>
 80081d8:	eb12 0f0b 	cmn.w	r2, fp
 80081dc:	f47f af7b 	bne.w	80080d6 <_scanf_float+0x72>
 80081e0:	6821      	ldr	r1, [r4, #0]
 80081e2:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80081e6:	6021      	str	r1, [r4, #0]
 80081e8:	702b      	strb	r3, [r5, #0]
 80081ea:	3501      	adds	r5, #1
 80081ec:	e79a      	b.n	8008124 <_scanf_float+0xc0>
 80081ee:	6821      	ldr	r1, [r4, #0]
 80081f0:	0608      	lsls	r0, r1, #24
 80081f2:	f57f af70 	bpl.w	80080d6 <_scanf_float+0x72>
 80081f6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80081fa:	e7f4      	b.n	80081e6 <_scanf_float+0x182>
 80081fc:	2a02      	cmp	r2, #2
 80081fe:	d047      	beq.n	8008290 <_scanf_float+0x22c>
 8008200:	f1bb 0f01 	cmp.w	fp, #1
 8008204:	d003      	beq.n	800820e <_scanf_float+0x1aa>
 8008206:	f1bb 0f04 	cmp.w	fp, #4
 800820a:	f47f af64 	bne.w	80080d6 <_scanf_float+0x72>
 800820e:	f10b 0b01 	add.w	fp, fp, #1
 8008212:	fa5f fb8b 	uxtb.w	fp, fp
 8008216:	e7e7      	b.n	80081e8 <_scanf_float+0x184>
 8008218:	f1bb 0f03 	cmp.w	fp, #3
 800821c:	d0f7      	beq.n	800820e <_scanf_float+0x1aa>
 800821e:	f1bb 0f05 	cmp.w	fp, #5
 8008222:	e7f2      	b.n	800820a <_scanf_float+0x1a6>
 8008224:	f1bb 0f02 	cmp.w	fp, #2
 8008228:	f47f af55 	bne.w	80080d6 <_scanf_float+0x72>
 800822c:	f04f 0b03 	mov.w	fp, #3
 8008230:	e7da      	b.n	80081e8 <_scanf_float+0x184>
 8008232:	f1bb 0f06 	cmp.w	fp, #6
 8008236:	f47f af4e 	bne.w	80080d6 <_scanf_float+0x72>
 800823a:	f04f 0b07 	mov.w	fp, #7
 800823e:	e7d3      	b.n	80081e8 <_scanf_float+0x184>
 8008240:	6821      	ldr	r1, [r4, #0]
 8008242:	0588      	lsls	r0, r1, #22
 8008244:	f57f af47 	bpl.w	80080d6 <_scanf_float+0x72>
 8008248:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800824c:	6021      	str	r1, [r4, #0]
 800824e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008252:	e7c9      	b.n	80081e8 <_scanf_float+0x184>
 8008254:	6821      	ldr	r1, [r4, #0]
 8008256:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800825a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800825e:	d006      	beq.n	800826e <_scanf_float+0x20a>
 8008260:	0548      	lsls	r0, r1, #21
 8008262:	f57f af38 	bpl.w	80080d6 <_scanf_float+0x72>
 8008266:	f1b9 0f00 	cmp.w	r9, #0
 800826a:	f43f af3b 	beq.w	80080e4 <_scanf_float+0x80>
 800826e:	0588      	lsls	r0, r1, #22
 8008270:	bf58      	it	pl
 8008272:	9802      	ldrpl	r0, [sp, #8]
 8008274:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008278:	bf58      	it	pl
 800827a:	eba9 0000 	subpl.w	r0, r9, r0
 800827e:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8008282:	bf58      	it	pl
 8008284:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8008288:	6021      	str	r1, [r4, #0]
 800828a:	f04f 0900 	mov.w	r9, #0
 800828e:	e7ab      	b.n	80081e8 <_scanf_float+0x184>
 8008290:	2203      	movs	r2, #3
 8008292:	e7a9      	b.n	80081e8 <_scanf_float+0x184>
 8008294:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008298:	4631      	mov	r1, r6
 800829a:	4638      	mov	r0, r7
 800829c:	9205      	str	r2, [sp, #20]
 800829e:	4798      	blx	r3
 80082a0:	9a05      	ldr	r2, [sp, #20]
 80082a2:	2800      	cmp	r0, #0
 80082a4:	f43f af04 	beq.w	80080b0 <_scanf_float+0x4c>
 80082a8:	e715      	b.n	80080d6 <_scanf_float+0x72>
 80082aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082ae:	4632      	mov	r2, r6
 80082b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80082b4:	4638      	mov	r0, r7
 80082b6:	4798      	blx	r3
 80082b8:	6923      	ldr	r3, [r4, #16]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	6123      	str	r3, [r4, #16]
 80082be:	e715      	b.n	80080ec <_scanf_float+0x88>
 80082c0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80082c4:	2b06      	cmp	r3, #6
 80082c6:	d80a      	bhi.n	80082de <_scanf_float+0x27a>
 80082c8:	f1bb 0f02 	cmp.w	fp, #2
 80082cc:	d967      	bls.n	800839e <_scanf_float+0x33a>
 80082ce:	f1ab 0b03 	sub.w	fp, fp, #3
 80082d2:	fa5f fb8b 	uxtb.w	fp, fp
 80082d6:	eba5 0b0b 	sub.w	fp, r5, fp
 80082da:	455d      	cmp	r5, fp
 80082dc:	d14a      	bne.n	8008374 <_scanf_float+0x310>
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	05da      	lsls	r2, r3, #23
 80082e2:	d51f      	bpl.n	8008324 <_scanf_float+0x2c0>
 80082e4:	055b      	lsls	r3, r3, #21
 80082e6:	d467      	bmi.n	80083b8 <_scanf_float+0x354>
 80082e8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80082ec:	6923      	ldr	r3, [r4, #16]
 80082ee:	2965      	cmp	r1, #101	; 0x65
 80082f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80082f4:	f105 3bff 	add.w	fp, r5, #4294967295
 80082f8:	6123      	str	r3, [r4, #16]
 80082fa:	d00d      	beq.n	8008318 <_scanf_float+0x2b4>
 80082fc:	2945      	cmp	r1, #69	; 0x45
 80082fe:	d00b      	beq.n	8008318 <_scanf_float+0x2b4>
 8008300:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008304:	4632      	mov	r2, r6
 8008306:	4638      	mov	r0, r7
 8008308:	4798      	blx	r3
 800830a:	6923      	ldr	r3, [r4, #16]
 800830c:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8008310:	3b01      	subs	r3, #1
 8008312:	f1a5 0b02 	sub.w	fp, r5, #2
 8008316:	6123      	str	r3, [r4, #16]
 8008318:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800831c:	4632      	mov	r2, r6
 800831e:	4638      	mov	r0, r7
 8008320:	4798      	blx	r3
 8008322:	465d      	mov	r5, fp
 8008324:	6826      	ldr	r6, [r4, #0]
 8008326:	f016 0610 	ands.w	r6, r6, #16
 800832a:	d176      	bne.n	800841a <_scanf_float+0x3b6>
 800832c:	702e      	strb	r6, [r5, #0]
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008338:	d141      	bne.n	80083be <_scanf_float+0x35a>
 800833a:	9b02      	ldr	r3, [sp, #8]
 800833c:	eba9 0303 	sub.w	r3, r9, r3
 8008340:	425a      	negs	r2, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d148      	bne.n	80083d8 <_scanf_float+0x374>
 8008346:	4641      	mov	r1, r8
 8008348:	2200      	movs	r2, #0
 800834a:	4638      	mov	r0, r7
 800834c:	f000 fedc 	bl	8009108 <_strtod_r>
 8008350:	6825      	ldr	r5, [r4, #0]
 8008352:	4680      	mov	r8, r0
 8008354:	f015 0f02 	tst.w	r5, #2
 8008358:	4689      	mov	r9, r1
 800835a:	f8da 3000 	ldr.w	r3, [sl]
 800835e:	d046      	beq.n	80083ee <_scanf_float+0x38a>
 8008360:	1d1a      	adds	r2, r3, #4
 8008362:	f8ca 2000 	str.w	r2, [sl]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	e9c3 8900 	strd	r8, r9, [r3]
 800836c:	68e3      	ldr	r3, [r4, #12]
 800836e:	3301      	adds	r3, #1
 8008370:	60e3      	str	r3, [r4, #12]
 8008372:	e6bf      	b.n	80080f4 <_scanf_float+0x90>
 8008374:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008378:	4632      	mov	r2, r6
 800837a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800837e:	4638      	mov	r0, r7
 8008380:	4798      	blx	r3
 8008382:	6923      	ldr	r3, [r4, #16]
 8008384:	3b01      	subs	r3, #1
 8008386:	6123      	str	r3, [r4, #16]
 8008388:	e7a7      	b.n	80082da <_scanf_float+0x276>
 800838a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800838e:	4632      	mov	r2, r6
 8008390:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008394:	4638      	mov	r0, r7
 8008396:	4798      	blx	r3
 8008398:	6923      	ldr	r3, [r4, #16]
 800839a:	3b01      	subs	r3, #1
 800839c:	6123      	str	r3, [r4, #16]
 800839e:	4545      	cmp	r5, r8
 80083a0:	d8f3      	bhi.n	800838a <_scanf_float+0x326>
 80083a2:	e6a6      	b.n	80080f2 <_scanf_float+0x8e>
 80083a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083a8:	4632      	mov	r2, r6
 80083aa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80083ae:	4638      	mov	r0, r7
 80083b0:	4798      	blx	r3
 80083b2:	6923      	ldr	r3, [r4, #16]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	6123      	str	r3, [r4, #16]
 80083b8:	4545      	cmp	r5, r8
 80083ba:	d8f3      	bhi.n	80083a4 <_scanf_float+0x340>
 80083bc:	e699      	b.n	80080f2 <_scanf_float+0x8e>
 80083be:	9b03      	ldr	r3, [sp, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0c0      	beq.n	8008346 <_scanf_float+0x2e2>
 80083c4:	9904      	ldr	r1, [sp, #16]
 80083c6:	230a      	movs	r3, #10
 80083c8:	4632      	mov	r2, r6
 80083ca:	3101      	adds	r1, #1
 80083cc:	4638      	mov	r0, r7
 80083ce:	f000 ff27 	bl	8009220 <_strtol_r>
 80083d2:	9b03      	ldr	r3, [sp, #12]
 80083d4:	9d04      	ldr	r5, [sp, #16]
 80083d6:	1ac2      	subs	r2, r0, r3
 80083d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80083dc:	429d      	cmp	r5, r3
 80083de:	bf28      	it	cs
 80083e0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80083e4:	490e      	ldr	r1, [pc, #56]	; (8008420 <_scanf_float+0x3bc>)
 80083e6:	4628      	mov	r0, r5
 80083e8:	f000 f838 	bl	800845c <siprintf>
 80083ec:	e7ab      	b.n	8008346 <_scanf_float+0x2e2>
 80083ee:	1d1f      	adds	r7, r3, #4
 80083f0:	f015 0504 	ands.w	r5, r5, #4
 80083f4:	f8ca 7000 	str.w	r7, [sl]
 80083f8:	d1b5      	bne.n	8008366 <_scanf_float+0x302>
 80083fa:	681f      	ldr	r7, [r3, #0]
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	f7f8 fb04 	bl	8000a0c <__aeabi_dcmpun>
 8008404:	b120      	cbz	r0, 8008410 <_scanf_float+0x3ac>
 8008406:	4628      	mov	r0, r5
 8008408:	f000 f824 	bl	8008454 <nanf>
 800840c:	6038      	str	r0, [r7, #0]
 800840e:	e7ad      	b.n	800836c <_scanf_float+0x308>
 8008410:	4640      	mov	r0, r8
 8008412:	4649      	mov	r1, r9
 8008414:	f7f8 fb58 	bl	8000ac8 <__aeabi_d2f>
 8008418:	e7f8      	b.n	800840c <_scanf_float+0x3a8>
 800841a:	2600      	movs	r6, #0
 800841c:	e66a      	b.n	80080f4 <_scanf_float+0x90>
 800841e:	bf00      	nop
 8008420:	0800bc9c 	.word	0x0800bc9c

08008424 <iprintf>:
 8008424:	b40f      	push	{r0, r1, r2, r3}
 8008426:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <iprintf+0x2c>)
 8008428:	b513      	push	{r0, r1, r4, lr}
 800842a:	681c      	ldr	r4, [r3, #0]
 800842c:	b124      	cbz	r4, 8008438 <iprintf+0x14>
 800842e:	69a3      	ldr	r3, [r4, #24]
 8008430:	b913      	cbnz	r3, 8008438 <iprintf+0x14>
 8008432:	4620      	mov	r0, r4
 8008434:	f001 fda0 	bl	8009f78 <__sinit>
 8008438:	ab05      	add	r3, sp, #20
 800843a:	9a04      	ldr	r2, [sp, #16]
 800843c:	68a1      	ldr	r1, [r4, #8]
 800843e:	4620      	mov	r0, r4
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	f002 ffb9 	bl	800b3b8 <_vfiprintf_r>
 8008446:	b002      	add	sp, #8
 8008448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800844c:	b004      	add	sp, #16
 800844e:	4770      	bx	lr
 8008450:	2000017c 	.word	0x2000017c

08008454 <nanf>:
 8008454:	4800      	ldr	r0, [pc, #0]	; (8008458 <nanf+0x4>)
 8008456:	4770      	bx	lr
 8008458:	7fc00000 	.word	0x7fc00000

0800845c <siprintf>:
 800845c:	b40e      	push	{r1, r2, r3}
 800845e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008462:	b500      	push	{lr}
 8008464:	b09c      	sub	sp, #112	; 0x70
 8008466:	ab1d      	add	r3, sp, #116	; 0x74
 8008468:	9002      	str	r0, [sp, #8]
 800846a:	9006      	str	r0, [sp, #24]
 800846c:	9107      	str	r1, [sp, #28]
 800846e:	9104      	str	r1, [sp, #16]
 8008470:	4808      	ldr	r0, [pc, #32]	; (8008494 <siprintf+0x38>)
 8008472:	4909      	ldr	r1, [pc, #36]	; (8008498 <siprintf+0x3c>)
 8008474:	f853 2b04 	ldr.w	r2, [r3], #4
 8008478:	9105      	str	r1, [sp, #20]
 800847a:	6800      	ldr	r0, [r0, #0]
 800847c:	a902      	add	r1, sp, #8
 800847e:	9301      	str	r3, [sp, #4]
 8008480:	f002 fe7a 	bl	800b178 <_svfiprintf_r>
 8008484:	2200      	movs	r2, #0
 8008486:	9b02      	ldr	r3, [sp, #8]
 8008488:	701a      	strb	r2, [r3, #0]
 800848a:	b01c      	add	sp, #112	; 0x70
 800848c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008490:	b003      	add	sp, #12
 8008492:	4770      	bx	lr
 8008494:	2000017c 	.word	0x2000017c
 8008498:	ffff0208 	.word	0xffff0208

0800849c <strlcpy>:
 800849c:	b510      	push	{r4, lr}
 800849e:	460b      	mov	r3, r1
 80084a0:	b162      	cbz	r2, 80084bc <strlcpy+0x20>
 80084a2:	3a01      	subs	r2, #1
 80084a4:	d008      	beq.n	80084b8 <strlcpy+0x1c>
 80084a6:	f813 4b01 	ldrb.w	r4, [r3], #1
 80084aa:	f800 4b01 	strb.w	r4, [r0], #1
 80084ae:	2c00      	cmp	r4, #0
 80084b0:	d1f7      	bne.n	80084a2 <strlcpy+0x6>
 80084b2:	1a58      	subs	r0, r3, r1
 80084b4:	3801      	subs	r0, #1
 80084b6:	bd10      	pop	{r4, pc}
 80084b8:	2200      	movs	r2, #0
 80084ba:	7002      	strb	r2, [r0, #0]
 80084bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084c0:	2a00      	cmp	r2, #0
 80084c2:	d1fb      	bne.n	80084bc <strlcpy+0x20>
 80084c4:	e7f5      	b.n	80084b2 <strlcpy+0x16>

080084c6 <sulp>:
 80084c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ca:	460f      	mov	r7, r1
 80084cc:	4690      	mov	r8, r2
 80084ce:	f002 fc17 	bl	800ad00 <__ulp>
 80084d2:	4604      	mov	r4, r0
 80084d4:	460d      	mov	r5, r1
 80084d6:	f1b8 0f00 	cmp.w	r8, #0
 80084da:	d011      	beq.n	8008500 <sulp+0x3a>
 80084dc:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80084e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	dd0b      	ble.n	8008500 <sulp+0x3a>
 80084e8:	2400      	movs	r4, #0
 80084ea:	051b      	lsls	r3, r3, #20
 80084ec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80084f0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80084f4:	4622      	mov	r2, r4
 80084f6:	462b      	mov	r3, r5
 80084f8:	f7f7 ffee 	bl	80004d8 <__aeabi_dmul>
 80084fc:	4604      	mov	r4, r0
 80084fe:	460d      	mov	r5, r1
 8008500:	4620      	mov	r0, r4
 8008502:	4629      	mov	r1, r5
 8008504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008508 <_strtod_l>:
 8008508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850c:	461f      	mov	r7, r3
 800850e:	2300      	movs	r3, #0
 8008510:	b0a1      	sub	sp, #132	; 0x84
 8008512:	4683      	mov	fp, r0
 8008514:	4638      	mov	r0, r7
 8008516:	460e      	mov	r6, r1
 8008518:	9217      	str	r2, [sp, #92]	; 0x5c
 800851a:	931c      	str	r3, [sp, #112]	; 0x70
 800851c:	f002 f8e1 	bl	800a6e2 <__localeconv_l>
 8008520:	4680      	mov	r8, r0
 8008522:	6800      	ldr	r0, [r0, #0]
 8008524:	f7f7 fe14 	bl	8000150 <strlen>
 8008528:	f04f 0900 	mov.w	r9, #0
 800852c:	4604      	mov	r4, r0
 800852e:	f04f 0a00 	mov.w	sl, #0
 8008532:	961b      	str	r6, [sp, #108]	; 0x6c
 8008534:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008536:	781a      	ldrb	r2, [r3, #0]
 8008538:	2a0d      	cmp	r2, #13
 800853a:	d832      	bhi.n	80085a2 <_strtod_l+0x9a>
 800853c:	2a09      	cmp	r2, #9
 800853e:	d236      	bcs.n	80085ae <_strtod_l+0xa6>
 8008540:	2a00      	cmp	r2, #0
 8008542:	d03e      	beq.n	80085c2 <_strtod_l+0xba>
 8008544:	2300      	movs	r3, #0
 8008546:	930d      	str	r3, [sp, #52]	; 0x34
 8008548:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800854a:	782b      	ldrb	r3, [r5, #0]
 800854c:	2b30      	cmp	r3, #48	; 0x30
 800854e:	f040 80ac 	bne.w	80086aa <_strtod_l+0x1a2>
 8008552:	786b      	ldrb	r3, [r5, #1]
 8008554:	2b58      	cmp	r3, #88	; 0x58
 8008556:	d001      	beq.n	800855c <_strtod_l+0x54>
 8008558:	2b78      	cmp	r3, #120	; 0x78
 800855a:	d167      	bne.n	800862c <_strtod_l+0x124>
 800855c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800855e:	9702      	str	r7, [sp, #8]
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	ab1c      	add	r3, sp, #112	; 0x70
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	4a89      	ldr	r2, [pc, #548]	; (800878c <_strtod_l+0x284>)
 8008568:	ab1d      	add	r3, sp, #116	; 0x74
 800856a:	a91b      	add	r1, sp, #108	; 0x6c
 800856c:	4658      	mov	r0, fp
 800856e:	f001 fddd 	bl	800a12c <__gethex>
 8008572:	f010 0407 	ands.w	r4, r0, #7
 8008576:	4606      	mov	r6, r0
 8008578:	d005      	beq.n	8008586 <_strtod_l+0x7e>
 800857a:	2c06      	cmp	r4, #6
 800857c:	d12b      	bne.n	80085d6 <_strtod_l+0xce>
 800857e:	2300      	movs	r3, #0
 8008580:	3501      	adds	r5, #1
 8008582:	951b      	str	r5, [sp, #108]	; 0x6c
 8008584:	930d      	str	r3, [sp, #52]	; 0x34
 8008586:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008588:	2b00      	cmp	r3, #0
 800858a:	f040 85a6 	bne.w	80090da <_strtod_l+0xbd2>
 800858e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008590:	b1e3      	cbz	r3, 80085cc <_strtod_l+0xc4>
 8008592:	464a      	mov	r2, r9
 8008594:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8008598:	4610      	mov	r0, r2
 800859a:	4619      	mov	r1, r3
 800859c:	b021      	add	sp, #132	; 0x84
 800859e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a2:	2a2b      	cmp	r2, #43	; 0x2b
 80085a4:	d015      	beq.n	80085d2 <_strtod_l+0xca>
 80085a6:	2a2d      	cmp	r2, #45	; 0x2d
 80085a8:	d004      	beq.n	80085b4 <_strtod_l+0xac>
 80085aa:	2a20      	cmp	r2, #32
 80085ac:	d1ca      	bne.n	8008544 <_strtod_l+0x3c>
 80085ae:	3301      	adds	r3, #1
 80085b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80085b2:	e7bf      	b.n	8008534 <_strtod_l+0x2c>
 80085b4:	2201      	movs	r2, #1
 80085b6:	920d      	str	r2, [sp, #52]	; 0x34
 80085b8:	1c5a      	adds	r2, r3, #1
 80085ba:	921b      	str	r2, [sp, #108]	; 0x6c
 80085bc:	785b      	ldrb	r3, [r3, #1]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1c2      	bne.n	8008548 <_strtod_l+0x40>
 80085c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085c4:	961b      	str	r6, [sp, #108]	; 0x6c
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f040 8585 	bne.w	80090d6 <_strtod_l+0xbce>
 80085cc:	464a      	mov	r2, r9
 80085ce:	4653      	mov	r3, sl
 80085d0:	e7e2      	b.n	8008598 <_strtod_l+0x90>
 80085d2:	2200      	movs	r2, #0
 80085d4:	e7ef      	b.n	80085b6 <_strtod_l+0xae>
 80085d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80085d8:	b13a      	cbz	r2, 80085ea <_strtod_l+0xe2>
 80085da:	2135      	movs	r1, #53	; 0x35
 80085dc:	a81e      	add	r0, sp, #120	; 0x78
 80085de:	f002 fc82 	bl	800aee6 <__copybits>
 80085e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80085e4:	4658      	mov	r0, fp
 80085e6:	f002 f8f4 	bl	800a7d2 <_Bfree>
 80085ea:	3c01      	subs	r4, #1
 80085ec:	2c04      	cmp	r4, #4
 80085ee:	d806      	bhi.n	80085fe <_strtod_l+0xf6>
 80085f0:	e8df f004 	tbb	[pc, r4]
 80085f4:	1714030a 	.word	0x1714030a
 80085f8:	0a          	.byte	0x0a
 80085f9:	00          	.byte	0x00
 80085fa:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80085fe:	0731      	lsls	r1, r6, #28
 8008600:	d5c1      	bpl.n	8008586 <_strtod_l+0x7e>
 8008602:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8008606:	e7be      	b.n	8008586 <_strtod_l+0x7e>
 8008608:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800860a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800860e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008612:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008616:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800861a:	e7f0      	b.n	80085fe <_strtod_l+0xf6>
 800861c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8008790 <_strtod_l+0x288>
 8008620:	e7ed      	b.n	80085fe <_strtod_l+0xf6>
 8008622:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8008626:	f04f 39ff 	mov.w	r9, #4294967295
 800862a:	e7e8      	b.n	80085fe <_strtod_l+0xf6>
 800862c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800862e:	1c5a      	adds	r2, r3, #1
 8008630:	921b      	str	r2, [sp, #108]	; 0x6c
 8008632:	785b      	ldrb	r3, [r3, #1]
 8008634:	2b30      	cmp	r3, #48	; 0x30
 8008636:	d0f9      	beq.n	800862c <_strtod_l+0x124>
 8008638:	2b00      	cmp	r3, #0
 800863a:	d0a4      	beq.n	8008586 <_strtod_l+0x7e>
 800863c:	2301      	movs	r3, #1
 800863e:	2500      	movs	r5, #0
 8008640:	220a      	movs	r2, #10
 8008642:	9307      	str	r3, [sp, #28]
 8008644:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008646:	9506      	str	r5, [sp, #24]
 8008648:	9308      	str	r3, [sp, #32]
 800864a:	9504      	str	r5, [sp, #16]
 800864c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800864e:	7807      	ldrb	r7, [r0, #0]
 8008650:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008654:	b2d9      	uxtb	r1, r3
 8008656:	2909      	cmp	r1, #9
 8008658:	d929      	bls.n	80086ae <_strtod_l+0x1a6>
 800865a:	4622      	mov	r2, r4
 800865c:	f8d8 1000 	ldr.w	r1, [r8]
 8008660:	f003 f813 	bl	800b68a <strncmp>
 8008664:	2800      	cmp	r0, #0
 8008666:	d031      	beq.n	80086cc <_strtod_l+0x1c4>
 8008668:	2000      	movs	r0, #0
 800866a:	463b      	mov	r3, r7
 800866c:	4602      	mov	r2, r0
 800866e:	9c04      	ldr	r4, [sp, #16]
 8008670:	9005      	str	r0, [sp, #20]
 8008672:	2b65      	cmp	r3, #101	; 0x65
 8008674:	d001      	beq.n	800867a <_strtod_l+0x172>
 8008676:	2b45      	cmp	r3, #69	; 0x45
 8008678:	d114      	bne.n	80086a4 <_strtod_l+0x19c>
 800867a:	b924      	cbnz	r4, 8008686 <_strtod_l+0x17e>
 800867c:	b910      	cbnz	r0, 8008684 <_strtod_l+0x17c>
 800867e:	9b07      	ldr	r3, [sp, #28]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d09e      	beq.n	80085c2 <_strtod_l+0xba>
 8008684:	2400      	movs	r4, #0
 8008686:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008688:	1c73      	adds	r3, r6, #1
 800868a:	931b      	str	r3, [sp, #108]	; 0x6c
 800868c:	7873      	ldrb	r3, [r6, #1]
 800868e:	2b2b      	cmp	r3, #43	; 0x2b
 8008690:	d078      	beq.n	8008784 <_strtod_l+0x27c>
 8008692:	2b2d      	cmp	r3, #45	; 0x2d
 8008694:	d070      	beq.n	8008778 <_strtod_l+0x270>
 8008696:	f04f 0c00 	mov.w	ip, #0
 800869a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800869e:	2f09      	cmp	r7, #9
 80086a0:	d97c      	bls.n	800879c <_strtod_l+0x294>
 80086a2:	961b      	str	r6, [sp, #108]	; 0x6c
 80086a4:	f04f 0e00 	mov.w	lr, #0
 80086a8:	e09a      	b.n	80087e0 <_strtod_l+0x2d8>
 80086aa:	2300      	movs	r3, #0
 80086ac:	e7c7      	b.n	800863e <_strtod_l+0x136>
 80086ae:	9904      	ldr	r1, [sp, #16]
 80086b0:	3001      	adds	r0, #1
 80086b2:	2908      	cmp	r1, #8
 80086b4:	bfd7      	itett	le
 80086b6:	9906      	ldrle	r1, [sp, #24]
 80086b8:	fb02 3505 	mlagt	r5, r2, r5, r3
 80086bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80086c0:	9306      	strle	r3, [sp, #24]
 80086c2:	9b04      	ldr	r3, [sp, #16]
 80086c4:	901b      	str	r0, [sp, #108]	; 0x6c
 80086c6:	3301      	adds	r3, #1
 80086c8:	9304      	str	r3, [sp, #16]
 80086ca:	e7bf      	b.n	800864c <_strtod_l+0x144>
 80086cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086ce:	191a      	adds	r2, r3, r4
 80086d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80086d2:	9a04      	ldr	r2, [sp, #16]
 80086d4:	5d1b      	ldrb	r3, [r3, r4]
 80086d6:	2a00      	cmp	r2, #0
 80086d8:	d037      	beq.n	800874a <_strtod_l+0x242>
 80086da:	4602      	mov	r2, r0
 80086dc:	9c04      	ldr	r4, [sp, #16]
 80086de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80086e2:	2909      	cmp	r1, #9
 80086e4:	d913      	bls.n	800870e <_strtod_l+0x206>
 80086e6:	2101      	movs	r1, #1
 80086e8:	9105      	str	r1, [sp, #20]
 80086ea:	e7c2      	b.n	8008672 <_strtod_l+0x16a>
 80086ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086ee:	3001      	adds	r0, #1
 80086f0:	1c5a      	adds	r2, r3, #1
 80086f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80086f4:	785b      	ldrb	r3, [r3, #1]
 80086f6:	2b30      	cmp	r3, #48	; 0x30
 80086f8:	d0f8      	beq.n	80086ec <_strtod_l+0x1e4>
 80086fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80086fe:	2a08      	cmp	r2, #8
 8008700:	f200 84f0 	bhi.w	80090e4 <_strtod_l+0xbdc>
 8008704:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008706:	9208      	str	r2, [sp, #32]
 8008708:	4602      	mov	r2, r0
 800870a:	2000      	movs	r0, #0
 800870c:	4604      	mov	r4, r0
 800870e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008712:	f100 0101 	add.w	r1, r0, #1
 8008716:	d012      	beq.n	800873e <_strtod_l+0x236>
 8008718:	440a      	add	r2, r1
 800871a:	270a      	movs	r7, #10
 800871c:	4621      	mov	r1, r4
 800871e:	eb00 0c04 	add.w	ip, r0, r4
 8008722:	458c      	cmp	ip, r1
 8008724:	d113      	bne.n	800874e <_strtod_l+0x246>
 8008726:	1821      	adds	r1, r4, r0
 8008728:	2908      	cmp	r1, #8
 800872a:	f104 0401 	add.w	r4, r4, #1
 800872e:	4404      	add	r4, r0
 8008730:	dc19      	bgt.n	8008766 <_strtod_l+0x25e>
 8008732:	210a      	movs	r1, #10
 8008734:	9b06      	ldr	r3, [sp, #24]
 8008736:	fb01 e303 	mla	r3, r1, r3, lr
 800873a:	9306      	str	r3, [sp, #24]
 800873c:	2100      	movs	r1, #0
 800873e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008740:	1c58      	adds	r0, r3, #1
 8008742:	901b      	str	r0, [sp, #108]	; 0x6c
 8008744:	785b      	ldrb	r3, [r3, #1]
 8008746:	4608      	mov	r0, r1
 8008748:	e7c9      	b.n	80086de <_strtod_l+0x1d6>
 800874a:	9804      	ldr	r0, [sp, #16]
 800874c:	e7d3      	b.n	80086f6 <_strtod_l+0x1ee>
 800874e:	2908      	cmp	r1, #8
 8008750:	f101 0101 	add.w	r1, r1, #1
 8008754:	dc03      	bgt.n	800875e <_strtod_l+0x256>
 8008756:	9b06      	ldr	r3, [sp, #24]
 8008758:	437b      	muls	r3, r7
 800875a:	9306      	str	r3, [sp, #24]
 800875c:	e7e1      	b.n	8008722 <_strtod_l+0x21a>
 800875e:	2910      	cmp	r1, #16
 8008760:	bfd8      	it	le
 8008762:	437d      	mulle	r5, r7
 8008764:	e7dd      	b.n	8008722 <_strtod_l+0x21a>
 8008766:	2c10      	cmp	r4, #16
 8008768:	bfdc      	itt	le
 800876a:	210a      	movle	r1, #10
 800876c:	fb01 e505 	mlale	r5, r1, r5, lr
 8008770:	e7e4      	b.n	800873c <_strtod_l+0x234>
 8008772:	2301      	movs	r3, #1
 8008774:	9305      	str	r3, [sp, #20]
 8008776:	e781      	b.n	800867c <_strtod_l+0x174>
 8008778:	f04f 0c01 	mov.w	ip, #1
 800877c:	1cb3      	adds	r3, r6, #2
 800877e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008780:	78b3      	ldrb	r3, [r6, #2]
 8008782:	e78a      	b.n	800869a <_strtod_l+0x192>
 8008784:	f04f 0c00 	mov.w	ip, #0
 8008788:	e7f8      	b.n	800877c <_strtod_l+0x274>
 800878a:	bf00      	nop
 800878c:	0800bca4 	.word	0x0800bca4
 8008790:	7ff00000 	.word	0x7ff00000
 8008794:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008796:	1c5f      	adds	r7, r3, #1
 8008798:	971b      	str	r7, [sp, #108]	; 0x6c
 800879a:	785b      	ldrb	r3, [r3, #1]
 800879c:	2b30      	cmp	r3, #48	; 0x30
 800879e:	d0f9      	beq.n	8008794 <_strtod_l+0x28c>
 80087a0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80087a4:	2f08      	cmp	r7, #8
 80087a6:	f63f af7d 	bhi.w	80086a4 <_strtod_l+0x19c>
 80087aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80087ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087b0:	9309      	str	r3, [sp, #36]	; 0x24
 80087b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087b4:	1c5f      	adds	r7, r3, #1
 80087b6:	971b      	str	r7, [sp, #108]	; 0x6c
 80087b8:	785b      	ldrb	r3, [r3, #1]
 80087ba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80087be:	f1b8 0f09 	cmp.w	r8, #9
 80087c2:	d937      	bls.n	8008834 <_strtod_l+0x32c>
 80087c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087c6:	1a7f      	subs	r7, r7, r1
 80087c8:	2f08      	cmp	r7, #8
 80087ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80087ce:	dc37      	bgt.n	8008840 <_strtod_l+0x338>
 80087d0:	45be      	cmp	lr, r7
 80087d2:	bfa8      	it	ge
 80087d4:	46be      	movge	lr, r7
 80087d6:	f1bc 0f00 	cmp.w	ip, #0
 80087da:	d001      	beq.n	80087e0 <_strtod_l+0x2d8>
 80087dc:	f1ce 0e00 	rsb	lr, lr, #0
 80087e0:	2c00      	cmp	r4, #0
 80087e2:	d151      	bne.n	8008888 <_strtod_l+0x380>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	f47f aece 	bne.w	8008586 <_strtod_l+0x7e>
 80087ea:	9a07      	ldr	r2, [sp, #28]
 80087ec:	2a00      	cmp	r2, #0
 80087ee:	f47f aeca 	bne.w	8008586 <_strtod_l+0x7e>
 80087f2:	9a05      	ldr	r2, [sp, #20]
 80087f4:	2a00      	cmp	r2, #0
 80087f6:	f47f aee4 	bne.w	80085c2 <_strtod_l+0xba>
 80087fa:	2b4e      	cmp	r3, #78	; 0x4e
 80087fc:	d027      	beq.n	800884e <_strtod_l+0x346>
 80087fe:	dc21      	bgt.n	8008844 <_strtod_l+0x33c>
 8008800:	2b49      	cmp	r3, #73	; 0x49
 8008802:	f47f aede 	bne.w	80085c2 <_strtod_l+0xba>
 8008806:	49a4      	ldr	r1, [pc, #656]	; (8008a98 <_strtod_l+0x590>)
 8008808:	a81b      	add	r0, sp, #108	; 0x6c
 800880a:	f001 fec3 	bl	800a594 <__match>
 800880e:	2800      	cmp	r0, #0
 8008810:	f43f aed7 	beq.w	80085c2 <_strtod_l+0xba>
 8008814:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008816:	49a1      	ldr	r1, [pc, #644]	; (8008a9c <_strtod_l+0x594>)
 8008818:	3b01      	subs	r3, #1
 800881a:	a81b      	add	r0, sp, #108	; 0x6c
 800881c:	931b      	str	r3, [sp, #108]	; 0x6c
 800881e:	f001 feb9 	bl	800a594 <__match>
 8008822:	b910      	cbnz	r0, 800882a <_strtod_l+0x322>
 8008824:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008826:	3301      	adds	r3, #1
 8008828:	931b      	str	r3, [sp, #108]	; 0x6c
 800882a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8008ab0 <_strtod_l+0x5a8>
 800882e:	f04f 0900 	mov.w	r9, #0
 8008832:	e6a8      	b.n	8008586 <_strtod_l+0x7e>
 8008834:	210a      	movs	r1, #10
 8008836:	fb01 3e0e 	mla	lr, r1, lr, r3
 800883a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800883e:	e7b8      	b.n	80087b2 <_strtod_l+0x2aa>
 8008840:	46be      	mov	lr, r7
 8008842:	e7c8      	b.n	80087d6 <_strtod_l+0x2ce>
 8008844:	2b69      	cmp	r3, #105	; 0x69
 8008846:	d0de      	beq.n	8008806 <_strtod_l+0x2fe>
 8008848:	2b6e      	cmp	r3, #110	; 0x6e
 800884a:	f47f aeba 	bne.w	80085c2 <_strtod_l+0xba>
 800884e:	4994      	ldr	r1, [pc, #592]	; (8008aa0 <_strtod_l+0x598>)
 8008850:	a81b      	add	r0, sp, #108	; 0x6c
 8008852:	f001 fe9f 	bl	800a594 <__match>
 8008856:	2800      	cmp	r0, #0
 8008858:	f43f aeb3 	beq.w	80085c2 <_strtod_l+0xba>
 800885c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	2b28      	cmp	r3, #40	; 0x28
 8008862:	d10e      	bne.n	8008882 <_strtod_l+0x37a>
 8008864:	aa1e      	add	r2, sp, #120	; 0x78
 8008866:	498f      	ldr	r1, [pc, #572]	; (8008aa4 <_strtod_l+0x59c>)
 8008868:	a81b      	add	r0, sp, #108	; 0x6c
 800886a:	f001 fea7 	bl	800a5bc <__hexnan>
 800886e:	2805      	cmp	r0, #5
 8008870:	d107      	bne.n	8008882 <_strtod_l+0x37a>
 8008872:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008874:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8008878:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800887c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8008880:	e681      	b.n	8008586 <_strtod_l+0x7e>
 8008882:	f8df a234 	ldr.w	sl, [pc, #564]	; 8008ab8 <_strtod_l+0x5b0>
 8008886:	e7d2      	b.n	800882e <_strtod_l+0x326>
 8008888:	ebae 0302 	sub.w	r3, lr, r2
 800888c:	9307      	str	r3, [sp, #28]
 800888e:	9b04      	ldr	r3, [sp, #16]
 8008890:	9806      	ldr	r0, [sp, #24]
 8008892:	2b00      	cmp	r3, #0
 8008894:	bf08      	it	eq
 8008896:	4623      	moveq	r3, r4
 8008898:	2c10      	cmp	r4, #16
 800889a:	9304      	str	r3, [sp, #16]
 800889c:	46a0      	mov	r8, r4
 800889e:	bfa8      	it	ge
 80088a0:	f04f 0810 	movge.w	r8, #16
 80088a4:	f7f7 fd9e 	bl	80003e4 <__aeabi_ui2d>
 80088a8:	2c09      	cmp	r4, #9
 80088aa:	4681      	mov	r9, r0
 80088ac:	468a      	mov	sl, r1
 80088ae:	dc13      	bgt.n	80088d8 <_strtod_l+0x3d0>
 80088b0:	9b07      	ldr	r3, [sp, #28]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f43f ae67 	beq.w	8008586 <_strtod_l+0x7e>
 80088b8:	9b07      	ldr	r3, [sp, #28]
 80088ba:	dd7e      	ble.n	80089ba <_strtod_l+0x4b2>
 80088bc:	2b16      	cmp	r3, #22
 80088be:	dc65      	bgt.n	800898c <_strtod_l+0x484>
 80088c0:	4a79      	ldr	r2, [pc, #484]	; (8008aa8 <_strtod_l+0x5a0>)
 80088c2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80088c6:	464a      	mov	r2, r9
 80088c8:	e9de 0100 	ldrd	r0, r1, [lr]
 80088cc:	4653      	mov	r3, sl
 80088ce:	f7f7 fe03 	bl	80004d8 <__aeabi_dmul>
 80088d2:	4681      	mov	r9, r0
 80088d4:	468a      	mov	sl, r1
 80088d6:	e656      	b.n	8008586 <_strtod_l+0x7e>
 80088d8:	4b73      	ldr	r3, [pc, #460]	; (8008aa8 <_strtod_l+0x5a0>)
 80088da:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80088de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80088e2:	f7f7 fdf9 	bl	80004d8 <__aeabi_dmul>
 80088e6:	4606      	mov	r6, r0
 80088e8:	4628      	mov	r0, r5
 80088ea:	460f      	mov	r7, r1
 80088ec:	f7f7 fd7a 	bl	80003e4 <__aeabi_ui2d>
 80088f0:	4602      	mov	r2, r0
 80088f2:	460b      	mov	r3, r1
 80088f4:	4630      	mov	r0, r6
 80088f6:	4639      	mov	r1, r7
 80088f8:	f7f7 fc38 	bl	800016c <__adddf3>
 80088fc:	2c0f      	cmp	r4, #15
 80088fe:	4681      	mov	r9, r0
 8008900:	468a      	mov	sl, r1
 8008902:	ddd5      	ble.n	80088b0 <_strtod_l+0x3a8>
 8008904:	9b07      	ldr	r3, [sp, #28]
 8008906:	eba4 0808 	sub.w	r8, r4, r8
 800890a:	4498      	add	r8, r3
 800890c:	f1b8 0f00 	cmp.w	r8, #0
 8008910:	f340 809a 	ble.w	8008a48 <_strtod_l+0x540>
 8008914:	f018 030f 	ands.w	r3, r8, #15
 8008918:	d00a      	beq.n	8008930 <_strtod_l+0x428>
 800891a:	4963      	ldr	r1, [pc, #396]	; (8008aa8 <_strtod_l+0x5a0>)
 800891c:	464a      	mov	r2, r9
 800891e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008922:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008926:	4653      	mov	r3, sl
 8008928:	f7f7 fdd6 	bl	80004d8 <__aeabi_dmul>
 800892c:	4681      	mov	r9, r0
 800892e:	468a      	mov	sl, r1
 8008930:	f038 080f 	bics.w	r8, r8, #15
 8008934:	d077      	beq.n	8008a26 <_strtod_l+0x51e>
 8008936:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800893a:	dd4b      	ble.n	80089d4 <_strtod_l+0x4cc>
 800893c:	f04f 0800 	mov.w	r8, #0
 8008940:	f8cd 8010 	str.w	r8, [sp, #16]
 8008944:	f8cd 8020 	str.w	r8, [sp, #32]
 8008948:	f8cd 8018 	str.w	r8, [sp, #24]
 800894c:	2322      	movs	r3, #34	; 0x22
 800894e:	f04f 0900 	mov.w	r9, #0
 8008952:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8008ab0 <_strtod_l+0x5a8>
 8008956:	f8cb 3000 	str.w	r3, [fp]
 800895a:	9b08      	ldr	r3, [sp, #32]
 800895c:	2b00      	cmp	r3, #0
 800895e:	f43f ae12 	beq.w	8008586 <_strtod_l+0x7e>
 8008962:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008964:	4658      	mov	r0, fp
 8008966:	f001 ff34 	bl	800a7d2 <_Bfree>
 800896a:	9906      	ldr	r1, [sp, #24]
 800896c:	4658      	mov	r0, fp
 800896e:	f001 ff30 	bl	800a7d2 <_Bfree>
 8008972:	9904      	ldr	r1, [sp, #16]
 8008974:	4658      	mov	r0, fp
 8008976:	f001 ff2c 	bl	800a7d2 <_Bfree>
 800897a:	9908      	ldr	r1, [sp, #32]
 800897c:	4658      	mov	r0, fp
 800897e:	f001 ff28 	bl	800a7d2 <_Bfree>
 8008982:	4641      	mov	r1, r8
 8008984:	4658      	mov	r0, fp
 8008986:	f001 ff24 	bl	800a7d2 <_Bfree>
 800898a:	e5fc      	b.n	8008586 <_strtod_l+0x7e>
 800898c:	9a07      	ldr	r2, [sp, #28]
 800898e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008992:	4293      	cmp	r3, r2
 8008994:	dbb6      	blt.n	8008904 <_strtod_l+0x3fc>
 8008996:	4d44      	ldr	r5, [pc, #272]	; (8008aa8 <_strtod_l+0x5a0>)
 8008998:	f1c4 040f 	rsb	r4, r4, #15
 800899c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80089a0:	464a      	mov	r2, r9
 80089a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089a6:	4653      	mov	r3, sl
 80089a8:	f7f7 fd96 	bl	80004d8 <__aeabi_dmul>
 80089ac:	9b07      	ldr	r3, [sp, #28]
 80089ae:	1b1c      	subs	r4, r3, r4
 80089b0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80089b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089b8:	e789      	b.n	80088ce <_strtod_l+0x3c6>
 80089ba:	f113 0f16 	cmn.w	r3, #22
 80089be:	dba1      	blt.n	8008904 <_strtod_l+0x3fc>
 80089c0:	4a39      	ldr	r2, [pc, #228]	; (8008aa8 <_strtod_l+0x5a0>)
 80089c2:	4648      	mov	r0, r9
 80089c4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80089c8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80089cc:	4651      	mov	r1, sl
 80089ce:	f7f7 fead 	bl	800072c <__aeabi_ddiv>
 80089d2:	e77e      	b.n	80088d2 <_strtod_l+0x3ca>
 80089d4:	2300      	movs	r3, #0
 80089d6:	4648      	mov	r0, r9
 80089d8:	4651      	mov	r1, sl
 80089da:	461d      	mov	r5, r3
 80089dc:	4e33      	ldr	r6, [pc, #204]	; (8008aac <_strtod_l+0x5a4>)
 80089de:	ea4f 1828 	mov.w	r8, r8, asr #4
 80089e2:	f1b8 0f01 	cmp.w	r8, #1
 80089e6:	dc21      	bgt.n	8008a2c <_strtod_l+0x524>
 80089e8:	b10b      	cbz	r3, 80089ee <_strtod_l+0x4e6>
 80089ea:	4681      	mov	r9, r0
 80089ec:	468a      	mov	sl, r1
 80089ee:	4b2f      	ldr	r3, [pc, #188]	; (8008aac <_strtod_l+0x5a4>)
 80089f0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80089f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80089f8:	464a      	mov	r2, r9
 80089fa:	e9d5 0100 	ldrd	r0, r1, [r5]
 80089fe:	4653      	mov	r3, sl
 8008a00:	f7f7 fd6a 	bl	80004d8 <__aeabi_dmul>
 8008a04:	4b2a      	ldr	r3, [pc, #168]	; (8008ab0 <_strtod_l+0x5a8>)
 8008a06:	460a      	mov	r2, r1
 8008a08:	400b      	ands	r3, r1
 8008a0a:	492a      	ldr	r1, [pc, #168]	; (8008ab4 <_strtod_l+0x5ac>)
 8008a0c:	4681      	mov	r9, r0
 8008a0e:	428b      	cmp	r3, r1
 8008a10:	d894      	bhi.n	800893c <_strtod_l+0x434>
 8008a12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008a16:	428b      	cmp	r3, r1
 8008a18:	bf86      	itte	hi
 8008a1a:	f04f 39ff 	movhi.w	r9, #4294967295
 8008a1e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8008abc <_strtod_l+0x5b4>
 8008a22:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8008a26:	2300      	movs	r3, #0
 8008a28:	9305      	str	r3, [sp, #20]
 8008a2a:	e07b      	b.n	8008b24 <_strtod_l+0x61c>
 8008a2c:	f018 0f01 	tst.w	r8, #1
 8008a30:	d006      	beq.n	8008a40 <_strtod_l+0x538>
 8008a32:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3a:	f7f7 fd4d 	bl	80004d8 <__aeabi_dmul>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	3501      	adds	r5, #1
 8008a42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008a46:	e7cc      	b.n	80089e2 <_strtod_l+0x4da>
 8008a48:	d0ed      	beq.n	8008a26 <_strtod_l+0x51e>
 8008a4a:	f1c8 0800 	rsb	r8, r8, #0
 8008a4e:	f018 020f 	ands.w	r2, r8, #15
 8008a52:	d00a      	beq.n	8008a6a <_strtod_l+0x562>
 8008a54:	4b14      	ldr	r3, [pc, #80]	; (8008aa8 <_strtod_l+0x5a0>)
 8008a56:	4648      	mov	r0, r9
 8008a58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a5c:	4651      	mov	r1, sl
 8008a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a62:	f7f7 fe63 	bl	800072c <__aeabi_ddiv>
 8008a66:	4681      	mov	r9, r0
 8008a68:	468a      	mov	sl, r1
 8008a6a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008a6e:	d0da      	beq.n	8008a26 <_strtod_l+0x51e>
 8008a70:	f1b8 0f1f 	cmp.w	r8, #31
 8008a74:	dd24      	ble.n	8008ac0 <_strtod_l+0x5b8>
 8008a76:	f04f 0800 	mov.w	r8, #0
 8008a7a:	f8cd 8010 	str.w	r8, [sp, #16]
 8008a7e:	f8cd 8020 	str.w	r8, [sp, #32]
 8008a82:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a86:	2322      	movs	r3, #34	; 0x22
 8008a88:	f04f 0900 	mov.w	r9, #0
 8008a8c:	f04f 0a00 	mov.w	sl, #0
 8008a90:	f8cb 3000 	str.w	r3, [fp]
 8008a94:	e761      	b.n	800895a <_strtod_l+0x452>
 8008a96:	bf00      	nop
 8008a98:	0800bc6d 	.word	0x0800bc6d
 8008a9c:	0800bcfb 	.word	0x0800bcfb
 8008aa0:	0800bc75 	.word	0x0800bc75
 8008aa4:	0800bcb8 	.word	0x0800bcb8
 8008aa8:	0800bda0 	.word	0x0800bda0
 8008aac:	0800bd78 	.word	0x0800bd78
 8008ab0:	7ff00000 	.word	0x7ff00000
 8008ab4:	7ca00000 	.word	0x7ca00000
 8008ab8:	fff80000 	.word	0xfff80000
 8008abc:	7fefffff 	.word	0x7fefffff
 8008ac0:	f018 0310 	ands.w	r3, r8, #16
 8008ac4:	bf18      	it	ne
 8008ac6:	236a      	movne	r3, #106	; 0x6a
 8008ac8:	4648      	mov	r0, r9
 8008aca:	9305      	str	r3, [sp, #20]
 8008acc:	4651      	mov	r1, sl
 8008ace:	2300      	movs	r3, #0
 8008ad0:	4da1      	ldr	r5, [pc, #644]	; (8008d58 <_strtod_l+0x850>)
 8008ad2:	f1b8 0f00 	cmp.w	r8, #0
 8008ad6:	f300 8113 	bgt.w	8008d00 <_strtod_l+0x7f8>
 8008ada:	b10b      	cbz	r3, 8008ae0 <_strtod_l+0x5d8>
 8008adc:	4681      	mov	r9, r0
 8008ade:	468a      	mov	sl, r1
 8008ae0:	9b05      	ldr	r3, [sp, #20]
 8008ae2:	b1bb      	cbz	r3, 8008b14 <_strtod_l+0x60c>
 8008ae4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8008ae8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	4651      	mov	r1, sl
 8008af0:	dd10      	ble.n	8008b14 <_strtod_l+0x60c>
 8008af2:	2b1f      	cmp	r3, #31
 8008af4:	f340 8110 	ble.w	8008d18 <_strtod_l+0x810>
 8008af8:	2b34      	cmp	r3, #52	; 0x34
 8008afa:	bfd8      	it	le
 8008afc:	f04f 32ff 	movle.w	r2, #4294967295
 8008b00:	f04f 0900 	mov.w	r9, #0
 8008b04:	bfcf      	iteee	gt
 8008b06:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8008b0a:	3b20      	suble	r3, #32
 8008b0c:	fa02 f303 	lslle.w	r3, r2, r3
 8008b10:	ea03 0a01 	andle.w	sl, r3, r1
 8008b14:	2200      	movs	r2, #0
 8008b16:	2300      	movs	r3, #0
 8008b18:	4648      	mov	r0, r9
 8008b1a:	4651      	mov	r1, sl
 8008b1c:	f7f7 ff44 	bl	80009a8 <__aeabi_dcmpeq>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	d1a8      	bne.n	8008a76 <_strtod_l+0x56e>
 8008b24:	9b06      	ldr	r3, [sp, #24]
 8008b26:	9a04      	ldr	r2, [sp, #16]
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	9908      	ldr	r1, [sp, #32]
 8008b2c:	4623      	mov	r3, r4
 8008b2e:	4658      	mov	r0, fp
 8008b30:	f001 fea1 	bl	800a876 <__s2b>
 8008b34:	9008      	str	r0, [sp, #32]
 8008b36:	2800      	cmp	r0, #0
 8008b38:	f43f af00 	beq.w	800893c <_strtod_l+0x434>
 8008b3c:	9a07      	ldr	r2, [sp, #28]
 8008b3e:	9b07      	ldr	r3, [sp, #28]
 8008b40:	2a00      	cmp	r2, #0
 8008b42:	f1c3 0300 	rsb	r3, r3, #0
 8008b46:	bfa8      	it	ge
 8008b48:	2300      	movge	r3, #0
 8008b4a:	f04f 0800 	mov.w	r8, #0
 8008b4e:	930e      	str	r3, [sp, #56]	; 0x38
 8008b50:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008b54:	9316      	str	r3, [sp, #88]	; 0x58
 8008b56:	f8cd 8010 	str.w	r8, [sp, #16]
 8008b5a:	9b08      	ldr	r3, [sp, #32]
 8008b5c:	4658      	mov	r0, fp
 8008b5e:	6859      	ldr	r1, [r3, #4]
 8008b60:	f001 fe03 	bl	800a76a <_Balloc>
 8008b64:	9006      	str	r0, [sp, #24]
 8008b66:	2800      	cmp	r0, #0
 8008b68:	f43f aef0 	beq.w	800894c <_strtod_l+0x444>
 8008b6c:	9b08      	ldr	r3, [sp, #32]
 8008b6e:	300c      	adds	r0, #12
 8008b70:	691a      	ldr	r2, [r3, #16]
 8008b72:	f103 010c 	add.w	r1, r3, #12
 8008b76:	3202      	adds	r2, #2
 8008b78:	0092      	lsls	r2, r2, #2
 8008b7a:	f001 fdeb 	bl	800a754 <memcpy>
 8008b7e:	ab1e      	add	r3, sp, #120	; 0x78
 8008b80:	9301      	str	r3, [sp, #4]
 8008b82:	ab1d      	add	r3, sp, #116	; 0x74
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	464a      	mov	r2, r9
 8008b88:	4653      	mov	r3, sl
 8008b8a:	4658      	mov	r0, fp
 8008b8c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8008b90:	f002 f92c 	bl	800adec <__d2b>
 8008b94:	901c      	str	r0, [sp, #112]	; 0x70
 8008b96:	2800      	cmp	r0, #0
 8008b98:	f43f aed8 	beq.w	800894c <_strtod_l+0x444>
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	4658      	mov	r0, fp
 8008ba0:	f001 fef5 	bl	800a98e <__i2b>
 8008ba4:	9004      	str	r0, [sp, #16]
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	f43f aecf 	beq.w	800894c <_strtod_l+0x444>
 8008bae:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008bb0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008bb2:	2d00      	cmp	r5, #0
 8008bb4:	bfab      	itete	ge
 8008bb6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008bb8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008bba:	18ee      	addge	r6, r5, r3
 8008bbc:	1b5c      	sublt	r4, r3, r5
 8008bbe:	9b05      	ldr	r3, [sp, #20]
 8008bc0:	bfa8      	it	ge
 8008bc2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8008bc4:	eba5 0503 	sub.w	r5, r5, r3
 8008bc8:	4415      	add	r5, r2
 8008bca:	4b64      	ldr	r3, [pc, #400]	; (8008d5c <_strtod_l+0x854>)
 8008bcc:	f105 35ff 	add.w	r5, r5, #4294967295
 8008bd0:	bfb8      	it	lt
 8008bd2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008bd4:	429d      	cmp	r5, r3
 8008bd6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008bda:	f280 80af 	bge.w	8008d3c <_strtod_l+0x834>
 8008bde:	1b5b      	subs	r3, r3, r5
 8008be0:	2b1f      	cmp	r3, #31
 8008be2:	eba2 0203 	sub.w	r2, r2, r3
 8008be6:	f04f 0701 	mov.w	r7, #1
 8008bea:	f300 809c 	bgt.w	8008d26 <_strtod_l+0x81e>
 8008bee:	2500      	movs	r5, #0
 8008bf0:	fa07 f303 	lsl.w	r3, r7, r3
 8008bf4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bf6:	18b7      	adds	r7, r6, r2
 8008bf8:	9b05      	ldr	r3, [sp, #20]
 8008bfa:	42be      	cmp	r6, r7
 8008bfc:	4414      	add	r4, r2
 8008bfe:	441c      	add	r4, r3
 8008c00:	4633      	mov	r3, r6
 8008c02:	bfa8      	it	ge
 8008c04:	463b      	movge	r3, r7
 8008c06:	42a3      	cmp	r3, r4
 8008c08:	bfa8      	it	ge
 8008c0a:	4623      	movge	r3, r4
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	bfc2      	ittt	gt
 8008c10:	1aff      	subgt	r7, r7, r3
 8008c12:	1ae4      	subgt	r4, r4, r3
 8008c14:	1af6      	subgt	r6, r6, r3
 8008c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c18:	b1bb      	cbz	r3, 8008c4a <_strtod_l+0x742>
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	9904      	ldr	r1, [sp, #16]
 8008c1e:	4658      	mov	r0, fp
 8008c20:	f001 ff54 	bl	800aacc <__pow5mult>
 8008c24:	9004      	str	r0, [sp, #16]
 8008c26:	2800      	cmp	r0, #0
 8008c28:	f43f ae90 	beq.w	800894c <_strtod_l+0x444>
 8008c2c:	4601      	mov	r1, r0
 8008c2e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008c30:	4658      	mov	r0, fp
 8008c32:	f001 feb5 	bl	800a9a0 <__multiply>
 8008c36:	9009      	str	r0, [sp, #36]	; 0x24
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	f43f ae87 	beq.w	800894c <_strtod_l+0x444>
 8008c3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008c40:	4658      	mov	r0, fp
 8008c42:	f001 fdc6 	bl	800a7d2 <_Bfree>
 8008c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c48:	931c      	str	r3, [sp, #112]	; 0x70
 8008c4a:	2f00      	cmp	r7, #0
 8008c4c:	dc7a      	bgt.n	8008d44 <_strtod_l+0x83c>
 8008c4e:	9b07      	ldr	r3, [sp, #28]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	dd08      	ble.n	8008c66 <_strtod_l+0x75e>
 8008c54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008c56:	9906      	ldr	r1, [sp, #24]
 8008c58:	4658      	mov	r0, fp
 8008c5a:	f001 ff37 	bl	800aacc <__pow5mult>
 8008c5e:	9006      	str	r0, [sp, #24]
 8008c60:	2800      	cmp	r0, #0
 8008c62:	f43f ae73 	beq.w	800894c <_strtod_l+0x444>
 8008c66:	2c00      	cmp	r4, #0
 8008c68:	dd08      	ble.n	8008c7c <_strtod_l+0x774>
 8008c6a:	4622      	mov	r2, r4
 8008c6c:	9906      	ldr	r1, [sp, #24]
 8008c6e:	4658      	mov	r0, fp
 8008c70:	f001 ff7a 	bl	800ab68 <__lshift>
 8008c74:	9006      	str	r0, [sp, #24]
 8008c76:	2800      	cmp	r0, #0
 8008c78:	f43f ae68 	beq.w	800894c <_strtod_l+0x444>
 8008c7c:	2e00      	cmp	r6, #0
 8008c7e:	dd08      	ble.n	8008c92 <_strtod_l+0x78a>
 8008c80:	4632      	mov	r2, r6
 8008c82:	9904      	ldr	r1, [sp, #16]
 8008c84:	4658      	mov	r0, fp
 8008c86:	f001 ff6f 	bl	800ab68 <__lshift>
 8008c8a:	9004      	str	r0, [sp, #16]
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	f43f ae5d 	beq.w	800894c <_strtod_l+0x444>
 8008c92:	9a06      	ldr	r2, [sp, #24]
 8008c94:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008c96:	4658      	mov	r0, fp
 8008c98:	f001 ffd4 	bl	800ac44 <__mdiff>
 8008c9c:	4680      	mov	r8, r0
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	f43f ae54 	beq.w	800894c <_strtod_l+0x444>
 8008ca4:	2400      	movs	r4, #0
 8008ca6:	68c3      	ldr	r3, [r0, #12]
 8008ca8:	9904      	ldr	r1, [sp, #16]
 8008caa:	60c4      	str	r4, [r0, #12]
 8008cac:	930c      	str	r3, [sp, #48]	; 0x30
 8008cae:	f001 ffaf 	bl	800ac10 <__mcmp>
 8008cb2:	42a0      	cmp	r0, r4
 8008cb4:	da54      	bge.n	8008d60 <_strtod_l+0x858>
 8008cb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cb8:	b9f3      	cbnz	r3, 8008cf8 <_strtod_l+0x7f0>
 8008cba:	f1b9 0f00 	cmp.w	r9, #0
 8008cbe:	d11b      	bne.n	8008cf8 <_strtod_l+0x7f0>
 8008cc0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008cc4:	b9c3      	cbnz	r3, 8008cf8 <_strtod_l+0x7f0>
 8008cc6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008cca:	0d1b      	lsrs	r3, r3, #20
 8008ccc:	051b      	lsls	r3, r3, #20
 8008cce:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008cd2:	d911      	bls.n	8008cf8 <_strtod_l+0x7f0>
 8008cd4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008cd8:	b91b      	cbnz	r3, 8008ce2 <_strtod_l+0x7da>
 8008cda:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	dd0a      	ble.n	8008cf8 <_strtod_l+0x7f0>
 8008ce2:	4641      	mov	r1, r8
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	4658      	mov	r0, fp
 8008ce8:	f001 ff3e 	bl	800ab68 <__lshift>
 8008cec:	9904      	ldr	r1, [sp, #16]
 8008cee:	4680      	mov	r8, r0
 8008cf0:	f001 ff8e 	bl	800ac10 <__mcmp>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	dc68      	bgt.n	8008dca <_strtod_l+0x8c2>
 8008cf8:	9b05      	ldr	r3, [sp, #20]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d172      	bne.n	8008de4 <_strtod_l+0x8dc>
 8008cfe:	e630      	b.n	8008962 <_strtod_l+0x45a>
 8008d00:	f018 0f01 	tst.w	r8, #1
 8008d04:	d004      	beq.n	8008d10 <_strtod_l+0x808>
 8008d06:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d0a:	f7f7 fbe5 	bl	80004d8 <__aeabi_dmul>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008d14:	3508      	adds	r5, #8
 8008d16:	e6dc      	b.n	8008ad2 <_strtod_l+0x5ca>
 8008d18:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d20:	ea03 0909 	and.w	r9, r3, r9
 8008d24:	e6f6      	b.n	8008b14 <_strtod_l+0x60c>
 8008d26:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008d2a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008d2e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008d32:	35e2      	adds	r5, #226	; 0xe2
 8008d34:	fa07 f505 	lsl.w	r5, r7, r5
 8008d38:	970f      	str	r7, [sp, #60]	; 0x3c
 8008d3a:	e75c      	b.n	8008bf6 <_strtod_l+0x6ee>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	2500      	movs	r5, #0
 8008d40:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d42:	e758      	b.n	8008bf6 <_strtod_l+0x6ee>
 8008d44:	463a      	mov	r2, r7
 8008d46:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008d48:	4658      	mov	r0, fp
 8008d4a:	f001 ff0d 	bl	800ab68 <__lshift>
 8008d4e:	901c      	str	r0, [sp, #112]	; 0x70
 8008d50:	2800      	cmp	r0, #0
 8008d52:	f47f af7c 	bne.w	8008c4e <_strtod_l+0x746>
 8008d56:	e5f9      	b.n	800894c <_strtod_l+0x444>
 8008d58:	0800bcd0 	.word	0x0800bcd0
 8008d5c:	fffffc02 	.word	0xfffffc02
 8008d60:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008d64:	f040 8089 	bne.w	8008e7a <_strtod_l+0x972>
 8008d68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d6a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008d6e:	b342      	cbz	r2, 8008dc2 <_strtod_l+0x8ba>
 8008d70:	4aaf      	ldr	r2, [pc, #700]	; (8009030 <_strtod_l+0xb28>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d156      	bne.n	8008e24 <_strtod_l+0x91c>
 8008d76:	9b05      	ldr	r3, [sp, #20]
 8008d78:	4648      	mov	r0, r9
 8008d7a:	b1eb      	cbz	r3, 8008db8 <_strtod_l+0x8b0>
 8008d7c:	4653      	mov	r3, sl
 8008d7e:	4aad      	ldr	r2, [pc, #692]	; (8009034 <_strtod_l+0xb2c>)
 8008d80:	f04f 31ff 	mov.w	r1, #4294967295
 8008d84:	401a      	ands	r2, r3
 8008d86:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008d8a:	d818      	bhi.n	8008dbe <_strtod_l+0x8b6>
 8008d8c:	0d12      	lsrs	r2, r2, #20
 8008d8e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008d92:	fa01 f303 	lsl.w	r3, r1, r3
 8008d96:	4298      	cmp	r0, r3
 8008d98:	d144      	bne.n	8008e24 <_strtod_l+0x91c>
 8008d9a:	4ba7      	ldr	r3, [pc, #668]	; (8009038 <_strtod_l+0xb30>)
 8008d9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d102      	bne.n	8008da8 <_strtod_l+0x8a0>
 8008da2:	3001      	adds	r0, #1
 8008da4:	f43f add2 	beq.w	800894c <_strtod_l+0x444>
 8008da8:	4ba2      	ldr	r3, [pc, #648]	; (8009034 <_strtod_l+0xb2c>)
 8008daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dac:	f04f 0900 	mov.w	r9, #0
 8008db0:	401a      	ands	r2, r3
 8008db2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8008db6:	e79f      	b.n	8008cf8 <_strtod_l+0x7f0>
 8008db8:	f04f 33ff 	mov.w	r3, #4294967295
 8008dbc:	e7eb      	b.n	8008d96 <_strtod_l+0x88e>
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	e7e9      	b.n	8008d96 <_strtod_l+0x88e>
 8008dc2:	bb7b      	cbnz	r3, 8008e24 <_strtod_l+0x91c>
 8008dc4:	f1b9 0f00 	cmp.w	r9, #0
 8008dc8:	d12c      	bne.n	8008e24 <_strtod_l+0x91c>
 8008dca:	9905      	ldr	r1, [sp, #20]
 8008dcc:	4653      	mov	r3, sl
 8008dce:	4a99      	ldr	r2, [pc, #612]	; (8009034 <_strtod_l+0xb2c>)
 8008dd0:	b1f1      	cbz	r1, 8008e10 <_strtod_l+0x908>
 8008dd2:	ea02 010a 	and.w	r1, r2, sl
 8008dd6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008dda:	dc19      	bgt.n	8008e10 <_strtod_l+0x908>
 8008ddc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008de0:	f77f ae51 	ble.w	8008a86 <_strtod_l+0x57e>
 8008de4:	2300      	movs	r3, #0
 8008de6:	4a95      	ldr	r2, [pc, #596]	; (800903c <_strtod_l+0xb34>)
 8008de8:	4648      	mov	r0, r9
 8008dea:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008dee:	4651      	mov	r1, sl
 8008df0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008df4:	f7f7 fb70 	bl	80004d8 <__aeabi_dmul>
 8008df8:	4681      	mov	r9, r0
 8008dfa:	468a      	mov	sl, r1
 8008dfc:	2900      	cmp	r1, #0
 8008dfe:	f47f adb0 	bne.w	8008962 <_strtod_l+0x45a>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	f47f adad 	bne.w	8008962 <_strtod_l+0x45a>
 8008e08:	2322      	movs	r3, #34	; 0x22
 8008e0a:	f8cb 3000 	str.w	r3, [fp]
 8008e0e:	e5a8      	b.n	8008962 <_strtod_l+0x45a>
 8008e10:	4013      	ands	r3, r2
 8008e12:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008e16:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8008e1a:	f04f 39ff 	mov.w	r9, #4294967295
 8008e1e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8008e22:	e769      	b.n	8008cf8 <_strtod_l+0x7f0>
 8008e24:	b19d      	cbz	r5, 8008e4e <_strtod_l+0x946>
 8008e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e28:	421d      	tst	r5, r3
 8008e2a:	f43f af65 	beq.w	8008cf8 <_strtod_l+0x7f0>
 8008e2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e30:	9a05      	ldr	r2, [sp, #20]
 8008e32:	4648      	mov	r0, r9
 8008e34:	4651      	mov	r1, sl
 8008e36:	b173      	cbz	r3, 8008e56 <_strtod_l+0x94e>
 8008e38:	f7ff fb45 	bl	80084c6 <sulp>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e44:	f7f7 f992 	bl	800016c <__adddf3>
 8008e48:	4681      	mov	r9, r0
 8008e4a:	468a      	mov	sl, r1
 8008e4c:	e754      	b.n	8008cf8 <_strtod_l+0x7f0>
 8008e4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e50:	ea13 0f09 	tst.w	r3, r9
 8008e54:	e7e9      	b.n	8008e2a <_strtod_l+0x922>
 8008e56:	f7ff fb36 	bl	80084c6 <sulp>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e62:	f7f7 f981 	bl	8000168 <__aeabi_dsub>
 8008e66:	2200      	movs	r2, #0
 8008e68:	2300      	movs	r3, #0
 8008e6a:	4681      	mov	r9, r0
 8008e6c:	468a      	mov	sl, r1
 8008e6e:	f7f7 fd9b 	bl	80009a8 <__aeabi_dcmpeq>
 8008e72:	2800      	cmp	r0, #0
 8008e74:	f47f ae07 	bne.w	8008a86 <_strtod_l+0x57e>
 8008e78:	e73e      	b.n	8008cf8 <_strtod_l+0x7f0>
 8008e7a:	9904      	ldr	r1, [sp, #16]
 8008e7c:	4640      	mov	r0, r8
 8008e7e:	f002 f804 	bl	800ae8a <__ratio>
 8008e82:	2200      	movs	r2, #0
 8008e84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e88:	4606      	mov	r6, r0
 8008e8a:	460f      	mov	r7, r1
 8008e8c:	f7f7 fda0 	bl	80009d0 <__aeabi_dcmple>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d075      	beq.n	8008f80 <_strtod_l+0xa78>
 8008e94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d047      	beq.n	8008f2a <_strtod_l+0xa22>
 8008e9a:	2600      	movs	r6, #0
 8008e9c:	4f68      	ldr	r7, [pc, #416]	; (8009040 <_strtod_l+0xb38>)
 8008e9e:	4d68      	ldr	r5, [pc, #416]	; (8009040 <_strtod_l+0xb38>)
 8008ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ea6:	0d1b      	lsrs	r3, r3, #20
 8008ea8:	051b      	lsls	r3, r3, #20
 8008eaa:	930f      	str	r3, [sp, #60]	; 0x3c
 8008eac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008eae:	4b65      	ldr	r3, [pc, #404]	; (8009044 <_strtod_l+0xb3c>)
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	f040 80cf 	bne.w	8009054 <_strtod_l+0xb4c>
 8008eb6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008eba:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec0:	4648      	mov	r0, r9
 8008ec2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8008ec6:	4651      	mov	r1, sl
 8008ec8:	f001 ff1a 	bl	800ad00 <__ulp>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	4639      	mov	r1, r7
 8008ed4:	f7f7 fb00 	bl	80004d8 <__aeabi_dmul>
 8008ed8:	464a      	mov	r2, r9
 8008eda:	4653      	mov	r3, sl
 8008edc:	f7f7 f946 	bl	800016c <__adddf3>
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4954      	ldr	r1, [pc, #336]	; (8009034 <_strtod_l+0xb2c>)
 8008ee4:	4a58      	ldr	r2, [pc, #352]	; (8009048 <_strtod_l+0xb40>)
 8008ee6:	4019      	ands	r1, r3
 8008ee8:	4291      	cmp	r1, r2
 8008eea:	4681      	mov	r9, r0
 8008eec:	d95e      	bls.n	8008fac <_strtod_l+0xaa4>
 8008eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ef0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d103      	bne.n	8008f00 <_strtod_l+0x9f8>
 8008ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008efa:	3301      	adds	r3, #1
 8008efc:	f43f ad26 	beq.w	800894c <_strtod_l+0x444>
 8008f00:	f04f 39ff 	mov.w	r9, #4294967295
 8008f04:	f8df a130 	ldr.w	sl, [pc, #304]	; 8009038 <_strtod_l+0xb30>
 8008f08:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008f0a:	4658      	mov	r0, fp
 8008f0c:	f001 fc61 	bl	800a7d2 <_Bfree>
 8008f10:	9906      	ldr	r1, [sp, #24]
 8008f12:	4658      	mov	r0, fp
 8008f14:	f001 fc5d 	bl	800a7d2 <_Bfree>
 8008f18:	9904      	ldr	r1, [sp, #16]
 8008f1a:	4658      	mov	r0, fp
 8008f1c:	f001 fc59 	bl	800a7d2 <_Bfree>
 8008f20:	4641      	mov	r1, r8
 8008f22:	4658      	mov	r0, fp
 8008f24:	f001 fc55 	bl	800a7d2 <_Bfree>
 8008f28:	e617      	b.n	8008b5a <_strtod_l+0x652>
 8008f2a:	f1b9 0f00 	cmp.w	r9, #0
 8008f2e:	d119      	bne.n	8008f64 <_strtod_l+0xa5c>
 8008f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f36:	b9e3      	cbnz	r3, 8008f72 <_strtod_l+0xa6a>
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4b41      	ldr	r3, [pc, #260]	; (8009040 <_strtod_l+0xb38>)
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	4639      	mov	r1, r7
 8008f40:	f7f7 fd3c 	bl	80009bc <__aeabi_dcmplt>
 8008f44:	b9c8      	cbnz	r0, 8008f7a <_strtod_l+0xa72>
 8008f46:	2200      	movs	r2, #0
 8008f48:	4b40      	ldr	r3, [pc, #256]	; (800904c <_strtod_l+0xb44>)
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	4639      	mov	r1, r7
 8008f4e:	f7f7 fac3 	bl	80004d8 <__aeabi_dmul>
 8008f52:	4604      	mov	r4, r0
 8008f54:	460d      	mov	r5, r1
 8008f56:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008f5a:	9418      	str	r4, [sp, #96]	; 0x60
 8008f5c:	9319      	str	r3, [sp, #100]	; 0x64
 8008f5e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8008f62:	e79d      	b.n	8008ea0 <_strtod_l+0x998>
 8008f64:	f1b9 0f01 	cmp.w	r9, #1
 8008f68:	d103      	bne.n	8008f72 <_strtod_l+0xa6a>
 8008f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f43f ad8a 	beq.w	8008a86 <_strtod_l+0x57e>
 8008f72:	2600      	movs	r6, #0
 8008f74:	4f36      	ldr	r7, [pc, #216]	; (8009050 <_strtod_l+0xb48>)
 8008f76:	2400      	movs	r4, #0
 8008f78:	e791      	b.n	8008e9e <_strtod_l+0x996>
 8008f7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008f7c:	4d33      	ldr	r5, [pc, #204]	; (800904c <_strtod_l+0xb44>)
 8008f7e:	e7ea      	b.n	8008f56 <_strtod_l+0xa4e>
 8008f80:	4b32      	ldr	r3, [pc, #200]	; (800904c <_strtod_l+0xb44>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	4630      	mov	r0, r6
 8008f86:	4639      	mov	r1, r7
 8008f88:	f7f7 faa6 	bl	80004d8 <__aeabi_dmul>
 8008f8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f8e:	4604      	mov	r4, r0
 8008f90:	460d      	mov	r5, r1
 8008f92:	b933      	cbnz	r3, 8008fa2 <_strtod_l+0xa9a>
 8008f94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f98:	9010      	str	r0, [sp, #64]	; 0x40
 8008f9a:	9311      	str	r3, [sp, #68]	; 0x44
 8008f9c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008fa0:	e77e      	b.n	8008ea0 <_strtod_l+0x998>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008faa:	e7f7      	b.n	8008f9c <_strtod_l+0xa94>
 8008fac:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8008fb0:	9b05      	ldr	r3, [sp, #20]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1a8      	bne.n	8008f08 <_strtod_l+0xa00>
 8008fb6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008fba:	0d1b      	lsrs	r3, r3, #20
 8008fbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008fbe:	051b      	lsls	r3, r3, #20
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	4656      	mov	r6, sl
 8008fc4:	d1a0      	bne.n	8008f08 <_strtod_l+0xa00>
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f7f7 fd35 	bl	8000a38 <__aeabi_d2iz>
 8008fce:	f7f7 fa19 	bl	8000404 <__aeabi_i2d>
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f7f7 f8c5 	bl	8000168 <__aeabi_dsub>
 8008fde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	460d      	mov	r5, r1
 8008fe4:	b933      	cbnz	r3, 8008ff4 <_strtod_l+0xaec>
 8008fe6:	f1b9 0f00 	cmp.w	r9, #0
 8008fea:	d103      	bne.n	8008ff4 <_strtod_l+0xaec>
 8008fec:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8008ff0:	2e00      	cmp	r6, #0
 8008ff2:	d06a      	beq.n	80090ca <_strtod_l+0xbc2>
 8008ff4:	a30a      	add	r3, pc, #40	; (adr r3, 8009020 <_strtod_l+0xb18>)
 8008ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	f7f7 fcdd 	bl	80009bc <__aeabi_dcmplt>
 8009002:	2800      	cmp	r0, #0
 8009004:	f47f acad 	bne.w	8008962 <_strtod_l+0x45a>
 8009008:	a307      	add	r3, pc, #28	; (adr r3, 8009028 <_strtod_l+0xb20>)
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	4620      	mov	r0, r4
 8009010:	4629      	mov	r1, r5
 8009012:	f7f7 fcf1 	bl	80009f8 <__aeabi_dcmpgt>
 8009016:	2800      	cmp	r0, #0
 8009018:	f43f af76 	beq.w	8008f08 <_strtod_l+0xa00>
 800901c:	e4a1      	b.n	8008962 <_strtod_l+0x45a>
 800901e:	bf00      	nop
 8009020:	94a03595 	.word	0x94a03595
 8009024:	3fdfffff 	.word	0x3fdfffff
 8009028:	35afe535 	.word	0x35afe535
 800902c:	3fe00000 	.word	0x3fe00000
 8009030:	000fffff 	.word	0x000fffff
 8009034:	7ff00000 	.word	0x7ff00000
 8009038:	7fefffff 	.word	0x7fefffff
 800903c:	39500000 	.word	0x39500000
 8009040:	3ff00000 	.word	0x3ff00000
 8009044:	7fe00000 	.word	0x7fe00000
 8009048:	7c9fffff 	.word	0x7c9fffff
 800904c:	3fe00000 	.word	0x3fe00000
 8009050:	bff00000 	.word	0xbff00000
 8009054:	9b05      	ldr	r3, [sp, #20]
 8009056:	b313      	cbz	r3, 800909e <_strtod_l+0xb96>
 8009058:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800905a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800905e:	d81e      	bhi.n	800909e <_strtod_l+0xb96>
 8009060:	a325      	add	r3, pc, #148	; (adr r3, 80090f8 <_strtod_l+0xbf0>)
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	4620      	mov	r0, r4
 8009068:	4629      	mov	r1, r5
 800906a:	f7f7 fcb1 	bl	80009d0 <__aeabi_dcmple>
 800906e:	b190      	cbz	r0, 8009096 <_strtod_l+0xb8e>
 8009070:	4629      	mov	r1, r5
 8009072:	4620      	mov	r0, r4
 8009074:	f7f7 fd08 	bl	8000a88 <__aeabi_d2uiz>
 8009078:	2800      	cmp	r0, #0
 800907a:	bf08      	it	eq
 800907c:	2001      	moveq	r0, #1
 800907e:	f7f7 f9b1 	bl	80003e4 <__aeabi_ui2d>
 8009082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009084:	4604      	mov	r4, r0
 8009086:	460d      	mov	r5, r1
 8009088:	b9d3      	cbnz	r3, 80090c0 <_strtod_l+0xbb8>
 800908a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800908e:	9012      	str	r0, [sp, #72]	; 0x48
 8009090:	9313      	str	r3, [sp, #76]	; 0x4c
 8009092:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009096:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009098:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800909c:	1a9f      	subs	r7, r3, r2
 800909e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80090a2:	f001 fe2d 	bl	800ad00 <__ulp>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	4630      	mov	r0, r6
 80090ac:	4639      	mov	r1, r7
 80090ae:	f7f7 fa13 	bl	80004d8 <__aeabi_dmul>
 80090b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80090b6:	f7f7 f859 	bl	800016c <__adddf3>
 80090ba:	4681      	mov	r9, r0
 80090bc:	468a      	mov	sl, r1
 80090be:	e777      	b.n	8008fb0 <_strtod_l+0xaa8>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80090c8:	e7e3      	b.n	8009092 <_strtod_l+0xb8a>
 80090ca:	a30d      	add	r3, pc, #52	; (adr r3, 8009100 <_strtod_l+0xbf8>)
 80090cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d0:	f7f7 fc74 	bl	80009bc <__aeabi_dcmplt>
 80090d4:	e79f      	b.n	8009016 <_strtod_l+0xb0e>
 80090d6:	2300      	movs	r3, #0
 80090d8:	930d      	str	r3, [sp, #52]	; 0x34
 80090da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80090de:	6013      	str	r3, [r2, #0]
 80090e0:	f7ff ba55 	b.w	800858e <_strtod_l+0x86>
 80090e4:	2b65      	cmp	r3, #101	; 0x65
 80090e6:	f04f 0200 	mov.w	r2, #0
 80090ea:	f43f ab42 	beq.w	8008772 <_strtod_l+0x26a>
 80090ee:	2101      	movs	r1, #1
 80090f0:	4614      	mov	r4, r2
 80090f2:	9105      	str	r1, [sp, #20]
 80090f4:	f7ff babf 	b.w	8008676 <_strtod_l+0x16e>
 80090f8:	ffc00000 	.word	0xffc00000
 80090fc:	41dfffff 	.word	0x41dfffff
 8009100:	94a03595 	.word	0x94a03595
 8009104:	3fcfffff 	.word	0x3fcfffff

08009108 <_strtod_r>:
 8009108:	4b05      	ldr	r3, [pc, #20]	; (8009120 <_strtod_r+0x18>)
 800910a:	b410      	push	{r4}
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4c05      	ldr	r4, [pc, #20]	; (8009124 <_strtod_r+0x1c>)
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	2b00      	cmp	r3, #0
 8009114:	bf08      	it	eq
 8009116:	4623      	moveq	r3, r4
 8009118:	bc10      	pop	{r4}
 800911a:	f7ff b9f5 	b.w	8008508 <_strtod_l>
 800911e:	bf00      	nop
 8009120:	2000017c 	.word	0x2000017c
 8009124:	200001e0 	.word	0x200001e0

08009128 <_strtol_l.isra.0>:
 8009128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800912c:	4680      	mov	r8, r0
 800912e:	4689      	mov	r9, r1
 8009130:	4692      	mov	sl, r2
 8009132:	461e      	mov	r6, r3
 8009134:	460f      	mov	r7, r1
 8009136:	463d      	mov	r5, r7
 8009138:	9808      	ldr	r0, [sp, #32]
 800913a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800913e:	f001 facd 	bl	800a6dc <__locale_ctype_ptr_l>
 8009142:	4420      	add	r0, r4
 8009144:	7843      	ldrb	r3, [r0, #1]
 8009146:	f013 0308 	ands.w	r3, r3, #8
 800914a:	d132      	bne.n	80091b2 <_strtol_l.isra.0+0x8a>
 800914c:	2c2d      	cmp	r4, #45	; 0x2d
 800914e:	d132      	bne.n	80091b6 <_strtol_l.isra.0+0x8e>
 8009150:	2201      	movs	r2, #1
 8009152:	787c      	ldrb	r4, [r7, #1]
 8009154:	1cbd      	adds	r5, r7, #2
 8009156:	2e00      	cmp	r6, #0
 8009158:	d05d      	beq.n	8009216 <_strtol_l.isra.0+0xee>
 800915a:	2e10      	cmp	r6, #16
 800915c:	d109      	bne.n	8009172 <_strtol_l.isra.0+0x4a>
 800915e:	2c30      	cmp	r4, #48	; 0x30
 8009160:	d107      	bne.n	8009172 <_strtol_l.isra.0+0x4a>
 8009162:	782b      	ldrb	r3, [r5, #0]
 8009164:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009168:	2b58      	cmp	r3, #88	; 0x58
 800916a:	d14f      	bne.n	800920c <_strtol_l.isra.0+0xe4>
 800916c:	2610      	movs	r6, #16
 800916e:	786c      	ldrb	r4, [r5, #1]
 8009170:	3502      	adds	r5, #2
 8009172:	2a00      	cmp	r2, #0
 8009174:	bf14      	ite	ne
 8009176:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800917a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800917e:	2700      	movs	r7, #0
 8009180:	fbb1 fcf6 	udiv	ip, r1, r6
 8009184:	4638      	mov	r0, r7
 8009186:	fb06 1e1c 	mls	lr, r6, ip, r1
 800918a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800918e:	2b09      	cmp	r3, #9
 8009190:	d817      	bhi.n	80091c2 <_strtol_l.isra.0+0x9a>
 8009192:	461c      	mov	r4, r3
 8009194:	42a6      	cmp	r6, r4
 8009196:	dd23      	ble.n	80091e0 <_strtol_l.isra.0+0xb8>
 8009198:	1c7b      	adds	r3, r7, #1
 800919a:	d007      	beq.n	80091ac <_strtol_l.isra.0+0x84>
 800919c:	4584      	cmp	ip, r0
 800919e:	d31c      	bcc.n	80091da <_strtol_l.isra.0+0xb2>
 80091a0:	d101      	bne.n	80091a6 <_strtol_l.isra.0+0x7e>
 80091a2:	45a6      	cmp	lr, r4
 80091a4:	db19      	blt.n	80091da <_strtol_l.isra.0+0xb2>
 80091a6:	2701      	movs	r7, #1
 80091a8:	fb00 4006 	mla	r0, r0, r6, r4
 80091ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091b0:	e7eb      	b.n	800918a <_strtol_l.isra.0+0x62>
 80091b2:	462f      	mov	r7, r5
 80091b4:	e7bf      	b.n	8009136 <_strtol_l.isra.0+0xe>
 80091b6:	2c2b      	cmp	r4, #43	; 0x2b
 80091b8:	bf04      	itt	eq
 80091ba:	1cbd      	addeq	r5, r7, #2
 80091bc:	787c      	ldrbeq	r4, [r7, #1]
 80091be:	461a      	mov	r2, r3
 80091c0:	e7c9      	b.n	8009156 <_strtol_l.isra.0+0x2e>
 80091c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80091c6:	2b19      	cmp	r3, #25
 80091c8:	d801      	bhi.n	80091ce <_strtol_l.isra.0+0xa6>
 80091ca:	3c37      	subs	r4, #55	; 0x37
 80091cc:	e7e2      	b.n	8009194 <_strtol_l.isra.0+0x6c>
 80091ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80091d2:	2b19      	cmp	r3, #25
 80091d4:	d804      	bhi.n	80091e0 <_strtol_l.isra.0+0xb8>
 80091d6:	3c57      	subs	r4, #87	; 0x57
 80091d8:	e7dc      	b.n	8009194 <_strtol_l.isra.0+0x6c>
 80091da:	f04f 37ff 	mov.w	r7, #4294967295
 80091de:	e7e5      	b.n	80091ac <_strtol_l.isra.0+0x84>
 80091e0:	1c7b      	adds	r3, r7, #1
 80091e2:	d108      	bne.n	80091f6 <_strtol_l.isra.0+0xce>
 80091e4:	2322      	movs	r3, #34	; 0x22
 80091e6:	4608      	mov	r0, r1
 80091e8:	f8c8 3000 	str.w	r3, [r8]
 80091ec:	f1ba 0f00 	cmp.w	sl, #0
 80091f0:	d107      	bne.n	8009202 <_strtol_l.isra.0+0xda>
 80091f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f6:	b102      	cbz	r2, 80091fa <_strtol_l.isra.0+0xd2>
 80091f8:	4240      	negs	r0, r0
 80091fa:	f1ba 0f00 	cmp.w	sl, #0
 80091fe:	d0f8      	beq.n	80091f2 <_strtol_l.isra.0+0xca>
 8009200:	b10f      	cbz	r7, 8009206 <_strtol_l.isra.0+0xde>
 8009202:	f105 39ff 	add.w	r9, r5, #4294967295
 8009206:	f8ca 9000 	str.w	r9, [sl]
 800920a:	e7f2      	b.n	80091f2 <_strtol_l.isra.0+0xca>
 800920c:	2430      	movs	r4, #48	; 0x30
 800920e:	2e00      	cmp	r6, #0
 8009210:	d1af      	bne.n	8009172 <_strtol_l.isra.0+0x4a>
 8009212:	2608      	movs	r6, #8
 8009214:	e7ad      	b.n	8009172 <_strtol_l.isra.0+0x4a>
 8009216:	2c30      	cmp	r4, #48	; 0x30
 8009218:	d0a3      	beq.n	8009162 <_strtol_l.isra.0+0x3a>
 800921a:	260a      	movs	r6, #10
 800921c:	e7a9      	b.n	8009172 <_strtol_l.isra.0+0x4a>
	...

08009220 <_strtol_r>:
 8009220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009222:	4c06      	ldr	r4, [pc, #24]	; (800923c <_strtol_r+0x1c>)
 8009224:	4d06      	ldr	r5, [pc, #24]	; (8009240 <_strtol_r+0x20>)
 8009226:	6824      	ldr	r4, [r4, #0]
 8009228:	6a24      	ldr	r4, [r4, #32]
 800922a:	2c00      	cmp	r4, #0
 800922c:	bf08      	it	eq
 800922e:	462c      	moveq	r4, r5
 8009230:	9400      	str	r4, [sp, #0]
 8009232:	f7ff ff79 	bl	8009128 <_strtol_l.isra.0>
 8009236:	b003      	add	sp, #12
 8009238:	bd30      	pop	{r4, r5, pc}
 800923a:	bf00      	nop
 800923c:	2000017c 	.word	0x2000017c
 8009240:	200001e0 	.word	0x200001e0

08009244 <strtol>:
 8009244:	4b08      	ldr	r3, [pc, #32]	; (8009268 <strtol+0x24>)
 8009246:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009248:	681c      	ldr	r4, [r3, #0]
 800924a:	4d08      	ldr	r5, [pc, #32]	; (800926c <strtol+0x28>)
 800924c:	6a23      	ldr	r3, [r4, #32]
 800924e:	2b00      	cmp	r3, #0
 8009250:	bf08      	it	eq
 8009252:	462b      	moveq	r3, r5
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	4613      	mov	r3, r2
 8009258:	460a      	mov	r2, r1
 800925a:	4601      	mov	r1, r0
 800925c:	4620      	mov	r0, r4
 800925e:	f7ff ff63 	bl	8009128 <_strtol_l.isra.0>
 8009262:	b003      	add	sp, #12
 8009264:	bd30      	pop	{r4, r5, pc}
 8009266:	bf00      	nop
 8009268:	2000017c 	.word	0x2000017c
 800926c:	200001e0 	.word	0x200001e0

08009270 <quorem>:
 8009270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009274:	6903      	ldr	r3, [r0, #16]
 8009276:	690c      	ldr	r4, [r1, #16]
 8009278:	4680      	mov	r8, r0
 800927a:	42a3      	cmp	r3, r4
 800927c:	f2c0 8084 	blt.w	8009388 <quorem+0x118>
 8009280:	3c01      	subs	r4, #1
 8009282:	f101 0714 	add.w	r7, r1, #20
 8009286:	f100 0614 	add.w	r6, r0, #20
 800928a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800928e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009292:	3501      	adds	r5, #1
 8009294:	fbb0 f5f5 	udiv	r5, r0, r5
 8009298:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800929c:	eb06 030c 	add.w	r3, r6, ip
 80092a0:	eb07 090c 	add.w	r9, r7, ip
 80092a4:	9301      	str	r3, [sp, #4]
 80092a6:	b39d      	cbz	r5, 8009310 <quorem+0xa0>
 80092a8:	f04f 0a00 	mov.w	sl, #0
 80092ac:	4638      	mov	r0, r7
 80092ae:	46b6      	mov	lr, r6
 80092b0:	46d3      	mov	fp, sl
 80092b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80092b6:	b293      	uxth	r3, r2
 80092b8:	fb05 a303 	mla	r3, r5, r3, sl
 80092bc:	0c12      	lsrs	r2, r2, #16
 80092be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092c2:	fb05 a202 	mla	r2, r5, r2, sl
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	ebab 0303 	sub.w	r3, fp, r3
 80092cc:	f8de b000 	ldr.w	fp, [lr]
 80092d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80092d4:	fa1f fb8b 	uxth.w	fp, fp
 80092d8:	445b      	add	r3, fp
 80092da:	fa1f fb82 	uxth.w	fp, r2
 80092de:	f8de 2000 	ldr.w	r2, [lr]
 80092e2:	4581      	cmp	r9, r0
 80092e4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80092e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092f2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80092f6:	f84e 3b04 	str.w	r3, [lr], #4
 80092fa:	d2da      	bcs.n	80092b2 <quorem+0x42>
 80092fc:	f856 300c 	ldr.w	r3, [r6, ip]
 8009300:	b933      	cbnz	r3, 8009310 <quorem+0xa0>
 8009302:	9b01      	ldr	r3, [sp, #4]
 8009304:	3b04      	subs	r3, #4
 8009306:	429e      	cmp	r6, r3
 8009308:	461a      	mov	r2, r3
 800930a:	d331      	bcc.n	8009370 <quorem+0x100>
 800930c:	f8c8 4010 	str.w	r4, [r8, #16]
 8009310:	4640      	mov	r0, r8
 8009312:	f001 fc7d 	bl	800ac10 <__mcmp>
 8009316:	2800      	cmp	r0, #0
 8009318:	db26      	blt.n	8009368 <quorem+0xf8>
 800931a:	4630      	mov	r0, r6
 800931c:	f04f 0c00 	mov.w	ip, #0
 8009320:	3501      	adds	r5, #1
 8009322:	f857 1b04 	ldr.w	r1, [r7], #4
 8009326:	f8d0 e000 	ldr.w	lr, [r0]
 800932a:	b28b      	uxth	r3, r1
 800932c:	ebac 0303 	sub.w	r3, ip, r3
 8009330:	fa1f f28e 	uxth.w	r2, lr
 8009334:	4413      	add	r3, r2
 8009336:	0c0a      	lsrs	r2, r1, #16
 8009338:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800933c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009340:	b29b      	uxth	r3, r3
 8009342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009346:	45b9      	cmp	r9, r7
 8009348:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800934c:	f840 3b04 	str.w	r3, [r0], #4
 8009350:	d2e7      	bcs.n	8009322 <quorem+0xb2>
 8009352:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009356:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800935a:	b92a      	cbnz	r2, 8009368 <quorem+0xf8>
 800935c:	3b04      	subs	r3, #4
 800935e:	429e      	cmp	r6, r3
 8009360:	461a      	mov	r2, r3
 8009362:	d30b      	bcc.n	800937c <quorem+0x10c>
 8009364:	f8c8 4010 	str.w	r4, [r8, #16]
 8009368:	4628      	mov	r0, r5
 800936a:	b003      	add	sp, #12
 800936c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009370:	6812      	ldr	r2, [r2, #0]
 8009372:	3b04      	subs	r3, #4
 8009374:	2a00      	cmp	r2, #0
 8009376:	d1c9      	bne.n	800930c <quorem+0x9c>
 8009378:	3c01      	subs	r4, #1
 800937a:	e7c4      	b.n	8009306 <quorem+0x96>
 800937c:	6812      	ldr	r2, [r2, #0]
 800937e:	3b04      	subs	r3, #4
 8009380:	2a00      	cmp	r2, #0
 8009382:	d1ef      	bne.n	8009364 <quorem+0xf4>
 8009384:	3c01      	subs	r4, #1
 8009386:	e7ea      	b.n	800935e <quorem+0xee>
 8009388:	2000      	movs	r0, #0
 800938a:	e7ee      	b.n	800936a <quorem+0xfa>
 800938c:	0000      	movs	r0, r0
	...

08009390 <_dtoa_r>:
 8009390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009394:	4616      	mov	r6, r2
 8009396:	461f      	mov	r7, r3
 8009398:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800939a:	b095      	sub	sp, #84	; 0x54
 800939c:	4604      	mov	r4, r0
 800939e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80093a2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80093a6:	b93d      	cbnz	r5, 80093b8 <_dtoa_r+0x28>
 80093a8:	2010      	movs	r0, #16
 80093aa:	f001 f9ab 	bl	800a704 <malloc>
 80093ae:	6260      	str	r0, [r4, #36]	; 0x24
 80093b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80093b4:	6005      	str	r5, [r0, #0]
 80093b6:	60c5      	str	r5, [r0, #12]
 80093b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093ba:	6819      	ldr	r1, [r3, #0]
 80093bc:	b151      	cbz	r1, 80093d4 <_dtoa_r+0x44>
 80093be:	685a      	ldr	r2, [r3, #4]
 80093c0:	2301      	movs	r3, #1
 80093c2:	4093      	lsls	r3, r2
 80093c4:	604a      	str	r2, [r1, #4]
 80093c6:	608b      	str	r3, [r1, #8]
 80093c8:	4620      	mov	r0, r4
 80093ca:	f001 fa02 	bl	800a7d2 <_Bfree>
 80093ce:	2200      	movs	r2, #0
 80093d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	1e3b      	subs	r3, r7, #0
 80093d6:	bfaf      	iteee	ge
 80093d8:	2300      	movge	r3, #0
 80093da:	2201      	movlt	r2, #1
 80093dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80093e0:	9303      	strlt	r3, [sp, #12]
 80093e2:	bfac      	ite	ge
 80093e4:	f8c8 3000 	strge.w	r3, [r8]
 80093e8:	f8c8 2000 	strlt.w	r2, [r8]
 80093ec:	4bae      	ldr	r3, [pc, #696]	; (80096a8 <_dtoa_r+0x318>)
 80093ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80093f2:	ea33 0308 	bics.w	r3, r3, r8
 80093f6:	d11b      	bne.n	8009430 <_dtoa_r+0xa0>
 80093f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80093fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	9b02      	ldr	r3, [sp, #8]
 8009402:	b923      	cbnz	r3, 800940e <_dtoa_r+0x7e>
 8009404:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009408:	2800      	cmp	r0, #0
 800940a:	f000 8545 	beq.w	8009e98 <_dtoa_r+0xb08>
 800940e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009410:	b953      	cbnz	r3, 8009428 <_dtoa_r+0x98>
 8009412:	4ba6      	ldr	r3, [pc, #664]	; (80096ac <_dtoa_r+0x31c>)
 8009414:	e021      	b.n	800945a <_dtoa_r+0xca>
 8009416:	4ba6      	ldr	r3, [pc, #664]	; (80096b0 <_dtoa_r+0x320>)
 8009418:	9306      	str	r3, [sp, #24]
 800941a:	3308      	adds	r3, #8
 800941c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	9806      	ldr	r0, [sp, #24]
 8009422:	b015      	add	sp, #84	; 0x54
 8009424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009428:	4ba0      	ldr	r3, [pc, #640]	; (80096ac <_dtoa_r+0x31c>)
 800942a:	9306      	str	r3, [sp, #24]
 800942c:	3303      	adds	r3, #3
 800942e:	e7f5      	b.n	800941c <_dtoa_r+0x8c>
 8009430:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009434:	2200      	movs	r2, #0
 8009436:	2300      	movs	r3, #0
 8009438:	4630      	mov	r0, r6
 800943a:	4639      	mov	r1, r7
 800943c:	f7f7 fab4 	bl	80009a8 <__aeabi_dcmpeq>
 8009440:	4682      	mov	sl, r0
 8009442:	b160      	cbz	r0, 800945e <_dtoa_r+0xce>
 8009444:	2301      	movs	r3, #1
 8009446:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009448:	6013      	str	r3, [r2, #0]
 800944a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800944c:	2b00      	cmp	r3, #0
 800944e:	f000 8520 	beq.w	8009e92 <_dtoa_r+0xb02>
 8009452:	4b98      	ldr	r3, [pc, #608]	; (80096b4 <_dtoa_r+0x324>)
 8009454:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009456:	6013      	str	r3, [r2, #0]
 8009458:	3b01      	subs	r3, #1
 800945a:	9306      	str	r3, [sp, #24]
 800945c:	e7e0      	b.n	8009420 <_dtoa_r+0x90>
 800945e:	ab12      	add	r3, sp, #72	; 0x48
 8009460:	9301      	str	r3, [sp, #4]
 8009462:	ab13      	add	r3, sp, #76	; 0x4c
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	4632      	mov	r2, r6
 8009468:	463b      	mov	r3, r7
 800946a:	4620      	mov	r0, r4
 800946c:	f001 fcbe 	bl	800adec <__d2b>
 8009470:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009474:	4683      	mov	fp, r0
 8009476:	2d00      	cmp	r5, #0
 8009478:	d07d      	beq.n	8009576 <_dtoa_r+0x1e6>
 800947a:	46b0      	mov	r8, r6
 800947c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009480:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8009484:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8009488:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800948c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8009490:	2200      	movs	r2, #0
 8009492:	4b89      	ldr	r3, [pc, #548]	; (80096b8 <_dtoa_r+0x328>)
 8009494:	4640      	mov	r0, r8
 8009496:	4649      	mov	r1, r9
 8009498:	f7f6 fe66 	bl	8000168 <__aeabi_dsub>
 800949c:	a37c      	add	r3, pc, #496	; (adr r3, 8009690 <_dtoa_r+0x300>)
 800949e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a2:	f7f7 f819 	bl	80004d8 <__aeabi_dmul>
 80094a6:	a37c      	add	r3, pc, #496	; (adr r3, 8009698 <_dtoa_r+0x308>)
 80094a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ac:	f7f6 fe5e 	bl	800016c <__adddf3>
 80094b0:	4606      	mov	r6, r0
 80094b2:	4628      	mov	r0, r5
 80094b4:	460f      	mov	r7, r1
 80094b6:	f7f6 ffa5 	bl	8000404 <__aeabi_i2d>
 80094ba:	a379      	add	r3, pc, #484	; (adr r3, 80096a0 <_dtoa_r+0x310>)
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	f7f7 f80a 	bl	80004d8 <__aeabi_dmul>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	4630      	mov	r0, r6
 80094ca:	4639      	mov	r1, r7
 80094cc:	f7f6 fe4e 	bl	800016c <__adddf3>
 80094d0:	4606      	mov	r6, r0
 80094d2:	460f      	mov	r7, r1
 80094d4:	f7f7 fab0 	bl	8000a38 <__aeabi_d2iz>
 80094d8:	2200      	movs	r2, #0
 80094da:	4682      	mov	sl, r0
 80094dc:	2300      	movs	r3, #0
 80094de:	4630      	mov	r0, r6
 80094e0:	4639      	mov	r1, r7
 80094e2:	f7f7 fa6b 	bl	80009bc <__aeabi_dcmplt>
 80094e6:	b148      	cbz	r0, 80094fc <_dtoa_r+0x16c>
 80094e8:	4650      	mov	r0, sl
 80094ea:	f7f6 ff8b 	bl	8000404 <__aeabi_i2d>
 80094ee:	4632      	mov	r2, r6
 80094f0:	463b      	mov	r3, r7
 80094f2:	f7f7 fa59 	bl	80009a8 <__aeabi_dcmpeq>
 80094f6:	b908      	cbnz	r0, 80094fc <_dtoa_r+0x16c>
 80094f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094fc:	f1ba 0f16 	cmp.w	sl, #22
 8009500:	d85a      	bhi.n	80095b8 <_dtoa_r+0x228>
 8009502:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009506:	496d      	ldr	r1, [pc, #436]	; (80096bc <_dtoa_r+0x32c>)
 8009508:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800950c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009510:	f7f7 fa72 	bl	80009f8 <__aeabi_dcmpgt>
 8009514:	2800      	cmp	r0, #0
 8009516:	d051      	beq.n	80095bc <_dtoa_r+0x22c>
 8009518:	2300      	movs	r3, #0
 800951a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800951e:	930d      	str	r3, [sp, #52]	; 0x34
 8009520:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009522:	1b5d      	subs	r5, r3, r5
 8009524:	1e6b      	subs	r3, r5, #1
 8009526:	9307      	str	r3, [sp, #28]
 8009528:	bf43      	ittte	mi
 800952a:	2300      	movmi	r3, #0
 800952c:	f1c5 0901 	rsbmi	r9, r5, #1
 8009530:	9307      	strmi	r3, [sp, #28]
 8009532:	f04f 0900 	movpl.w	r9, #0
 8009536:	f1ba 0f00 	cmp.w	sl, #0
 800953a:	db41      	blt.n	80095c0 <_dtoa_r+0x230>
 800953c:	9b07      	ldr	r3, [sp, #28]
 800953e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8009542:	4453      	add	r3, sl
 8009544:	9307      	str	r3, [sp, #28]
 8009546:	2300      	movs	r3, #0
 8009548:	9308      	str	r3, [sp, #32]
 800954a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800954c:	2b09      	cmp	r3, #9
 800954e:	f200 808f 	bhi.w	8009670 <_dtoa_r+0x2e0>
 8009552:	2b05      	cmp	r3, #5
 8009554:	bfc4      	itt	gt
 8009556:	3b04      	subgt	r3, #4
 8009558:	931e      	strgt	r3, [sp, #120]	; 0x78
 800955a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800955c:	bfc8      	it	gt
 800955e:	2500      	movgt	r5, #0
 8009560:	f1a3 0302 	sub.w	r3, r3, #2
 8009564:	bfd8      	it	le
 8009566:	2501      	movle	r5, #1
 8009568:	2b03      	cmp	r3, #3
 800956a:	f200 808d 	bhi.w	8009688 <_dtoa_r+0x2f8>
 800956e:	e8df f003 	tbb	[pc, r3]
 8009572:	7d7b      	.short	0x7d7b
 8009574:	6f2f      	.short	0x6f2f
 8009576:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800957a:	441d      	add	r5, r3
 800957c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009580:	2820      	cmp	r0, #32
 8009582:	dd13      	ble.n	80095ac <_dtoa_r+0x21c>
 8009584:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009588:	9b02      	ldr	r3, [sp, #8]
 800958a:	fa08 f800 	lsl.w	r8, r8, r0
 800958e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009592:	fa23 f000 	lsr.w	r0, r3, r0
 8009596:	ea48 0000 	orr.w	r0, r8, r0
 800959a:	f7f6 ff23 	bl	80003e4 <__aeabi_ui2d>
 800959e:	2301      	movs	r3, #1
 80095a0:	4680      	mov	r8, r0
 80095a2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80095a6:	3d01      	subs	r5, #1
 80095a8:	9310      	str	r3, [sp, #64]	; 0x40
 80095aa:	e771      	b.n	8009490 <_dtoa_r+0x100>
 80095ac:	9b02      	ldr	r3, [sp, #8]
 80095ae:	f1c0 0020 	rsb	r0, r0, #32
 80095b2:	fa03 f000 	lsl.w	r0, r3, r0
 80095b6:	e7f0      	b.n	800959a <_dtoa_r+0x20a>
 80095b8:	2301      	movs	r3, #1
 80095ba:	e7b0      	b.n	800951e <_dtoa_r+0x18e>
 80095bc:	900d      	str	r0, [sp, #52]	; 0x34
 80095be:	e7af      	b.n	8009520 <_dtoa_r+0x190>
 80095c0:	f1ca 0300 	rsb	r3, sl, #0
 80095c4:	9308      	str	r3, [sp, #32]
 80095c6:	2300      	movs	r3, #0
 80095c8:	eba9 090a 	sub.w	r9, r9, sl
 80095cc:	930c      	str	r3, [sp, #48]	; 0x30
 80095ce:	e7bc      	b.n	800954a <_dtoa_r+0x1ba>
 80095d0:	2301      	movs	r3, #1
 80095d2:	9309      	str	r3, [sp, #36]	; 0x24
 80095d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	dd74      	ble.n	80096c4 <_dtoa_r+0x334>
 80095da:	4698      	mov	r8, r3
 80095dc:	9304      	str	r3, [sp, #16]
 80095de:	2200      	movs	r2, #0
 80095e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80095e2:	6072      	str	r2, [r6, #4]
 80095e4:	2204      	movs	r2, #4
 80095e6:	f102 0014 	add.w	r0, r2, #20
 80095ea:	4298      	cmp	r0, r3
 80095ec:	6871      	ldr	r1, [r6, #4]
 80095ee:	d96e      	bls.n	80096ce <_dtoa_r+0x33e>
 80095f0:	4620      	mov	r0, r4
 80095f2:	f001 f8ba 	bl	800a76a <_Balloc>
 80095f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095f8:	6030      	str	r0, [r6, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f1b8 0f0e 	cmp.w	r8, #14
 8009600:	9306      	str	r3, [sp, #24]
 8009602:	f200 80ed 	bhi.w	80097e0 <_dtoa_r+0x450>
 8009606:	2d00      	cmp	r5, #0
 8009608:	f000 80ea 	beq.w	80097e0 <_dtoa_r+0x450>
 800960c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009610:	f1ba 0f00 	cmp.w	sl, #0
 8009614:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009618:	dd77      	ble.n	800970a <_dtoa_r+0x37a>
 800961a:	4a28      	ldr	r2, [pc, #160]	; (80096bc <_dtoa_r+0x32c>)
 800961c:	f00a 030f 	and.w	r3, sl, #15
 8009620:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009624:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009628:	06f0      	lsls	r0, r6, #27
 800962a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009632:	d568      	bpl.n	8009706 <_dtoa_r+0x376>
 8009634:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009638:	4b21      	ldr	r3, [pc, #132]	; (80096c0 <_dtoa_r+0x330>)
 800963a:	2503      	movs	r5, #3
 800963c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009640:	f7f7 f874 	bl	800072c <__aeabi_ddiv>
 8009644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009648:	f006 060f 	and.w	r6, r6, #15
 800964c:	4f1c      	ldr	r7, [pc, #112]	; (80096c0 <_dtoa_r+0x330>)
 800964e:	e04f      	b.n	80096f0 <_dtoa_r+0x360>
 8009650:	2301      	movs	r3, #1
 8009652:	9309      	str	r3, [sp, #36]	; 0x24
 8009654:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009656:	4453      	add	r3, sl
 8009658:	f103 0801 	add.w	r8, r3, #1
 800965c:	9304      	str	r3, [sp, #16]
 800965e:	4643      	mov	r3, r8
 8009660:	2b01      	cmp	r3, #1
 8009662:	bfb8      	it	lt
 8009664:	2301      	movlt	r3, #1
 8009666:	e7ba      	b.n	80095de <_dtoa_r+0x24e>
 8009668:	2300      	movs	r3, #0
 800966a:	e7b2      	b.n	80095d2 <_dtoa_r+0x242>
 800966c:	2300      	movs	r3, #0
 800966e:	e7f0      	b.n	8009652 <_dtoa_r+0x2c2>
 8009670:	2501      	movs	r5, #1
 8009672:	2300      	movs	r3, #0
 8009674:	9509      	str	r5, [sp, #36]	; 0x24
 8009676:	931e      	str	r3, [sp, #120]	; 0x78
 8009678:	f04f 33ff 	mov.w	r3, #4294967295
 800967c:	2200      	movs	r2, #0
 800967e:	9304      	str	r3, [sp, #16]
 8009680:	4698      	mov	r8, r3
 8009682:	2312      	movs	r3, #18
 8009684:	921f      	str	r2, [sp, #124]	; 0x7c
 8009686:	e7aa      	b.n	80095de <_dtoa_r+0x24e>
 8009688:	2301      	movs	r3, #1
 800968a:	9309      	str	r3, [sp, #36]	; 0x24
 800968c:	e7f4      	b.n	8009678 <_dtoa_r+0x2e8>
 800968e:	bf00      	nop
 8009690:	636f4361 	.word	0x636f4361
 8009694:	3fd287a7 	.word	0x3fd287a7
 8009698:	8b60c8b3 	.word	0x8b60c8b3
 800969c:	3fc68a28 	.word	0x3fc68a28
 80096a0:	509f79fb 	.word	0x509f79fb
 80096a4:	3fd34413 	.word	0x3fd34413
 80096a8:	7ff00000 	.word	0x7ff00000
 80096ac:	0800bd01 	.word	0x0800bd01
 80096b0:	0800bcf8 	.word	0x0800bcf8
 80096b4:	0800bc79 	.word	0x0800bc79
 80096b8:	3ff80000 	.word	0x3ff80000
 80096bc:	0800bda0 	.word	0x0800bda0
 80096c0:	0800bd78 	.word	0x0800bd78
 80096c4:	2301      	movs	r3, #1
 80096c6:	9304      	str	r3, [sp, #16]
 80096c8:	4698      	mov	r8, r3
 80096ca:	461a      	mov	r2, r3
 80096cc:	e7da      	b.n	8009684 <_dtoa_r+0x2f4>
 80096ce:	3101      	adds	r1, #1
 80096d0:	6071      	str	r1, [r6, #4]
 80096d2:	0052      	lsls	r2, r2, #1
 80096d4:	e787      	b.n	80095e6 <_dtoa_r+0x256>
 80096d6:	07f1      	lsls	r1, r6, #31
 80096d8:	d508      	bpl.n	80096ec <_dtoa_r+0x35c>
 80096da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80096de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096e2:	f7f6 fef9 	bl	80004d8 <__aeabi_dmul>
 80096e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80096ea:	3501      	adds	r5, #1
 80096ec:	1076      	asrs	r6, r6, #1
 80096ee:	3708      	adds	r7, #8
 80096f0:	2e00      	cmp	r6, #0
 80096f2:	d1f0      	bne.n	80096d6 <_dtoa_r+0x346>
 80096f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80096f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096fc:	f7f7 f816 	bl	800072c <__aeabi_ddiv>
 8009700:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009704:	e01b      	b.n	800973e <_dtoa_r+0x3ae>
 8009706:	2502      	movs	r5, #2
 8009708:	e7a0      	b.n	800964c <_dtoa_r+0x2bc>
 800970a:	f000 80a4 	beq.w	8009856 <_dtoa_r+0x4c6>
 800970e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009712:	f1ca 0600 	rsb	r6, sl, #0
 8009716:	4ba0      	ldr	r3, [pc, #640]	; (8009998 <_dtoa_r+0x608>)
 8009718:	f006 020f 	and.w	r2, r6, #15
 800971c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	f7f6 fed8 	bl	80004d8 <__aeabi_dmul>
 8009728:	2502      	movs	r5, #2
 800972a:	2300      	movs	r3, #0
 800972c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009730:	4f9a      	ldr	r7, [pc, #616]	; (800999c <_dtoa_r+0x60c>)
 8009732:	1136      	asrs	r6, r6, #4
 8009734:	2e00      	cmp	r6, #0
 8009736:	f040 8083 	bne.w	8009840 <_dtoa_r+0x4b0>
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1e0      	bne.n	8009700 <_dtoa_r+0x370>
 800973e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 808a 	beq.w	800985a <_dtoa_r+0x4ca>
 8009746:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800974a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800974e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009752:	2200      	movs	r2, #0
 8009754:	4b92      	ldr	r3, [pc, #584]	; (80099a0 <_dtoa_r+0x610>)
 8009756:	f7f7 f931 	bl	80009bc <__aeabi_dcmplt>
 800975a:	2800      	cmp	r0, #0
 800975c:	d07d      	beq.n	800985a <_dtoa_r+0x4ca>
 800975e:	f1b8 0f00 	cmp.w	r8, #0
 8009762:	d07a      	beq.n	800985a <_dtoa_r+0x4ca>
 8009764:	9b04      	ldr	r3, [sp, #16]
 8009766:	2b00      	cmp	r3, #0
 8009768:	dd36      	ble.n	80097d8 <_dtoa_r+0x448>
 800976a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800976e:	2200      	movs	r2, #0
 8009770:	4b8c      	ldr	r3, [pc, #560]	; (80099a4 <_dtoa_r+0x614>)
 8009772:	f7f6 feb1 	bl	80004d8 <__aeabi_dmul>
 8009776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800977a:	9e04      	ldr	r6, [sp, #16]
 800977c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8009780:	3501      	adds	r5, #1
 8009782:	4628      	mov	r0, r5
 8009784:	f7f6 fe3e 	bl	8000404 <__aeabi_i2d>
 8009788:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800978c:	f7f6 fea4 	bl	80004d8 <__aeabi_dmul>
 8009790:	2200      	movs	r2, #0
 8009792:	4b85      	ldr	r3, [pc, #532]	; (80099a8 <_dtoa_r+0x618>)
 8009794:	f7f6 fcea 	bl	800016c <__adddf3>
 8009798:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800979c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80097a0:	950b      	str	r5, [sp, #44]	; 0x2c
 80097a2:	2e00      	cmp	r6, #0
 80097a4:	d15c      	bne.n	8009860 <_dtoa_r+0x4d0>
 80097a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097aa:	2200      	movs	r2, #0
 80097ac:	4b7f      	ldr	r3, [pc, #508]	; (80099ac <_dtoa_r+0x61c>)
 80097ae:	f7f6 fcdb 	bl	8000168 <__aeabi_dsub>
 80097b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097b4:	462b      	mov	r3, r5
 80097b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097ba:	f7f7 f91d 	bl	80009f8 <__aeabi_dcmpgt>
 80097be:	2800      	cmp	r0, #0
 80097c0:	f040 8281 	bne.w	8009cc6 <_dtoa_r+0x936>
 80097c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097ca:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80097ce:	f7f7 f8f5 	bl	80009bc <__aeabi_dcmplt>
 80097d2:	2800      	cmp	r0, #0
 80097d4:	f040 8275 	bne.w	8009cc2 <_dtoa_r+0x932>
 80097d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80097dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f2c0 814b 	blt.w	8009a7e <_dtoa_r+0x6ee>
 80097e8:	f1ba 0f0e 	cmp.w	sl, #14
 80097ec:	f300 8147 	bgt.w	8009a7e <_dtoa_r+0x6ee>
 80097f0:	4b69      	ldr	r3, [pc, #420]	; (8009998 <_dtoa_r+0x608>)
 80097f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80097f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009800:	2b00      	cmp	r3, #0
 8009802:	f280 80d7 	bge.w	80099b4 <_dtoa_r+0x624>
 8009806:	f1b8 0f00 	cmp.w	r8, #0
 800980a:	f300 80d3 	bgt.w	80099b4 <_dtoa_r+0x624>
 800980e:	f040 8257 	bne.w	8009cc0 <_dtoa_r+0x930>
 8009812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009816:	2200      	movs	r2, #0
 8009818:	4b64      	ldr	r3, [pc, #400]	; (80099ac <_dtoa_r+0x61c>)
 800981a:	f7f6 fe5d 	bl	80004d8 <__aeabi_dmul>
 800981e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009822:	f7f7 f8df 	bl	80009e4 <__aeabi_dcmpge>
 8009826:	4646      	mov	r6, r8
 8009828:	4647      	mov	r7, r8
 800982a:	2800      	cmp	r0, #0
 800982c:	f040 822d 	bne.w	8009c8a <_dtoa_r+0x8fa>
 8009830:	9b06      	ldr	r3, [sp, #24]
 8009832:	9a06      	ldr	r2, [sp, #24]
 8009834:	1c5d      	adds	r5, r3, #1
 8009836:	2331      	movs	r3, #49	; 0x31
 8009838:	f10a 0a01 	add.w	sl, sl, #1
 800983c:	7013      	strb	r3, [r2, #0]
 800983e:	e228      	b.n	8009c92 <_dtoa_r+0x902>
 8009840:	07f2      	lsls	r2, r6, #31
 8009842:	d505      	bpl.n	8009850 <_dtoa_r+0x4c0>
 8009844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009848:	f7f6 fe46 	bl	80004d8 <__aeabi_dmul>
 800984c:	2301      	movs	r3, #1
 800984e:	3501      	adds	r5, #1
 8009850:	1076      	asrs	r6, r6, #1
 8009852:	3708      	adds	r7, #8
 8009854:	e76e      	b.n	8009734 <_dtoa_r+0x3a4>
 8009856:	2502      	movs	r5, #2
 8009858:	e771      	b.n	800973e <_dtoa_r+0x3ae>
 800985a:	4657      	mov	r7, sl
 800985c:	4646      	mov	r6, r8
 800985e:	e790      	b.n	8009782 <_dtoa_r+0x3f2>
 8009860:	4b4d      	ldr	r3, [pc, #308]	; (8009998 <_dtoa_r+0x608>)
 8009862:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009866:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800986a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986c:	2b00      	cmp	r3, #0
 800986e:	d048      	beq.n	8009902 <_dtoa_r+0x572>
 8009870:	4602      	mov	r2, r0
 8009872:	460b      	mov	r3, r1
 8009874:	2000      	movs	r0, #0
 8009876:	494e      	ldr	r1, [pc, #312]	; (80099b0 <_dtoa_r+0x620>)
 8009878:	f7f6 ff58 	bl	800072c <__aeabi_ddiv>
 800987c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009880:	f7f6 fc72 	bl	8000168 <__aeabi_dsub>
 8009884:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009888:	9d06      	ldr	r5, [sp, #24]
 800988a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800988e:	f7f7 f8d3 	bl	8000a38 <__aeabi_d2iz>
 8009892:	9011      	str	r0, [sp, #68]	; 0x44
 8009894:	f7f6 fdb6 	bl	8000404 <__aeabi_i2d>
 8009898:	4602      	mov	r2, r0
 800989a:	460b      	mov	r3, r1
 800989c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098a0:	f7f6 fc62 	bl	8000168 <__aeabi_dsub>
 80098a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098aa:	3330      	adds	r3, #48	; 0x30
 80098ac:	f805 3b01 	strb.w	r3, [r5], #1
 80098b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80098b4:	f7f7 f882 	bl	80009bc <__aeabi_dcmplt>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	d163      	bne.n	8009984 <_dtoa_r+0x5f4>
 80098bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098c0:	2000      	movs	r0, #0
 80098c2:	4937      	ldr	r1, [pc, #220]	; (80099a0 <_dtoa_r+0x610>)
 80098c4:	f7f6 fc50 	bl	8000168 <__aeabi_dsub>
 80098c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80098cc:	f7f7 f876 	bl	80009bc <__aeabi_dcmplt>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	f040 80b5 	bne.w	8009a40 <_dtoa_r+0x6b0>
 80098d6:	9b06      	ldr	r3, [sp, #24]
 80098d8:	1aeb      	subs	r3, r5, r3
 80098da:	429e      	cmp	r6, r3
 80098dc:	f77f af7c 	ble.w	80097d8 <_dtoa_r+0x448>
 80098e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80098e4:	2200      	movs	r2, #0
 80098e6:	4b2f      	ldr	r3, [pc, #188]	; (80099a4 <_dtoa_r+0x614>)
 80098e8:	f7f6 fdf6 	bl	80004d8 <__aeabi_dmul>
 80098ec:	2200      	movs	r2, #0
 80098ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80098f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098f6:	4b2b      	ldr	r3, [pc, #172]	; (80099a4 <_dtoa_r+0x614>)
 80098f8:	f7f6 fdee 	bl	80004d8 <__aeabi_dmul>
 80098fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009900:	e7c3      	b.n	800988a <_dtoa_r+0x4fa>
 8009902:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009906:	f7f6 fde7 	bl	80004d8 <__aeabi_dmul>
 800990a:	9b06      	ldr	r3, [sp, #24]
 800990c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009910:	199d      	adds	r5, r3, r6
 8009912:	461e      	mov	r6, r3
 8009914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009918:	f7f7 f88e 	bl	8000a38 <__aeabi_d2iz>
 800991c:	9011      	str	r0, [sp, #68]	; 0x44
 800991e:	f7f6 fd71 	bl	8000404 <__aeabi_i2d>
 8009922:	4602      	mov	r2, r0
 8009924:	460b      	mov	r3, r1
 8009926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800992a:	f7f6 fc1d 	bl	8000168 <__aeabi_dsub>
 800992e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009934:	3330      	adds	r3, #48	; 0x30
 8009936:	f806 3b01 	strb.w	r3, [r6], #1
 800993a:	42ae      	cmp	r6, r5
 800993c:	f04f 0200 	mov.w	r2, #0
 8009940:	d124      	bne.n	800998c <_dtoa_r+0x5fc>
 8009942:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009946:	4b1a      	ldr	r3, [pc, #104]	; (80099b0 <_dtoa_r+0x620>)
 8009948:	f7f6 fc10 	bl	800016c <__adddf3>
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009954:	f7f7 f850 	bl	80009f8 <__aeabi_dcmpgt>
 8009958:	2800      	cmp	r0, #0
 800995a:	d171      	bne.n	8009a40 <_dtoa_r+0x6b0>
 800995c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009960:	2000      	movs	r0, #0
 8009962:	4913      	ldr	r1, [pc, #76]	; (80099b0 <_dtoa_r+0x620>)
 8009964:	f7f6 fc00 	bl	8000168 <__aeabi_dsub>
 8009968:	4602      	mov	r2, r0
 800996a:	460b      	mov	r3, r1
 800996c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009970:	f7f7 f824 	bl	80009bc <__aeabi_dcmplt>
 8009974:	2800      	cmp	r0, #0
 8009976:	f43f af2f 	beq.w	80097d8 <_dtoa_r+0x448>
 800997a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800997e:	1e6a      	subs	r2, r5, #1
 8009980:	2b30      	cmp	r3, #48	; 0x30
 8009982:	d001      	beq.n	8009988 <_dtoa_r+0x5f8>
 8009984:	46ba      	mov	sl, r7
 8009986:	e04a      	b.n	8009a1e <_dtoa_r+0x68e>
 8009988:	4615      	mov	r5, r2
 800998a:	e7f6      	b.n	800997a <_dtoa_r+0x5ea>
 800998c:	4b05      	ldr	r3, [pc, #20]	; (80099a4 <_dtoa_r+0x614>)
 800998e:	f7f6 fda3 	bl	80004d8 <__aeabi_dmul>
 8009992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009996:	e7bd      	b.n	8009914 <_dtoa_r+0x584>
 8009998:	0800bda0 	.word	0x0800bda0
 800999c:	0800bd78 	.word	0x0800bd78
 80099a0:	3ff00000 	.word	0x3ff00000
 80099a4:	40240000 	.word	0x40240000
 80099a8:	401c0000 	.word	0x401c0000
 80099ac:	40140000 	.word	0x40140000
 80099b0:	3fe00000 	.word	0x3fe00000
 80099b4:	9d06      	ldr	r5, [sp, #24]
 80099b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80099ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099be:	4630      	mov	r0, r6
 80099c0:	4639      	mov	r1, r7
 80099c2:	f7f6 feb3 	bl	800072c <__aeabi_ddiv>
 80099c6:	f7f7 f837 	bl	8000a38 <__aeabi_d2iz>
 80099ca:	4681      	mov	r9, r0
 80099cc:	f7f6 fd1a 	bl	8000404 <__aeabi_i2d>
 80099d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099d4:	f7f6 fd80 	bl	80004d8 <__aeabi_dmul>
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	4630      	mov	r0, r6
 80099de:	4639      	mov	r1, r7
 80099e0:	f7f6 fbc2 	bl	8000168 <__aeabi_dsub>
 80099e4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80099e8:	f805 6b01 	strb.w	r6, [r5], #1
 80099ec:	9e06      	ldr	r6, [sp, #24]
 80099ee:	4602      	mov	r2, r0
 80099f0:	1bae      	subs	r6, r5, r6
 80099f2:	45b0      	cmp	r8, r6
 80099f4:	460b      	mov	r3, r1
 80099f6:	d135      	bne.n	8009a64 <_dtoa_r+0x6d4>
 80099f8:	f7f6 fbb8 	bl	800016c <__adddf3>
 80099fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a00:	4606      	mov	r6, r0
 8009a02:	460f      	mov	r7, r1
 8009a04:	f7f6 fff8 	bl	80009f8 <__aeabi_dcmpgt>
 8009a08:	b9c8      	cbnz	r0, 8009a3e <_dtoa_r+0x6ae>
 8009a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a0e:	4630      	mov	r0, r6
 8009a10:	4639      	mov	r1, r7
 8009a12:	f7f6 ffc9 	bl	80009a8 <__aeabi_dcmpeq>
 8009a16:	b110      	cbz	r0, 8009a1e <_dtoa_r+0x68e>
 8009a18:	f019 0f01 	tst.w	r9, #1
 8009a1c:	d10f      	bne.n	8009a3e <_dtoa_r+0x6ae>
 8009a1e:	4659      	mov	r1, fp
 8009a20:	4620      	mov	r0, r4
 8009a22:	f000 fed6 	bl	800a7d2 <_Bfree>
 8009a26:	2300      	movs	r3, #0
 8009a28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009a2a:	702b      	strb	r3, [r5, #0]
 8009a2c:	f10a 0301 	add.w	r3, sl, #1
 8009a30:	6013      	str	r3, [r2, #0]
 8009a32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f43f acf3 	beq.w	8009420 <_dtoa_r+0x90>
 8009a3a:	601d      	str	r5, [r3, #0]
 8009a3c:	e4f0      	b.n	8009420 <_dtoa_r+0x90>
 8009a3e:	4657      	mov	r7, sl
 8009a40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a44:	1e6b      	subs	r3, r5, #1
 8009a46:	2a39      	cmp	r2, #57	; 0x39
 8009a48:	d106      	bne.n	8009a58 <_dtoa_r+0x6c8>
 8009a4a:	9a06      	ldr	r2, [sp, #24]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d107      	bne.n	8009a60 <_dtoa_r+0x6d0>
 8009a50:	2330      	movs	r3, #48	; 0x30
 8009a52:	7013      	strb	r3, [r2, #0]
 8009a54:	4613      	mov	r3, r2
 8009a56:	3701      	adds	r7, #1
 8009a58:	781a      	ldrb	r2, [r3, #0]
 8009a5a:	3201      	adds	r2, #1
 8009a5c:	701a      	strb	r2, [r3, #0]
 8009a5e:	e791      	b.n	8009984 <_dtoa_r+0x5f4>
 8009a60:	461d      	mov	r5, r3
 8009a62:	e7ed      	b.n	8009a40 <_dtoa_r+0x6b0>
 8009a64:	2200      	movs	r2, #0
 8009a66:	4b99      	ldr	r3, [pc, #612]	; (8009ccc <_dtoa_r+0x93c>)
 8009a68:	f7f6 fd36 	bl	80004d8 <__aeabi_dmul>
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	2300      	movs	r3, #0
 8009a70:	4606      	mov	r6, r0
 8009a72:	460f      	mov	r7, r1
 8009a74:	f7f6 ff98 	bl	80009a8 <__aeabi_dcmpeq>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d09e      	beq.n	80099ba <_dtoa_r+0x62a>
 8009a7c:	e7cf      	b.n	8009a1e <_dtoa_r+0x68e>
 8009a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a80:	2a00      	cmp	r2, #0
 8009a82:	f000 8088 	beq.w	8009b96 <_dtoa_r+0x806>
 8009a86:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009a88:	2a01      	cmp	r2, #1
 8009a8a:	dc6d      	bgt.n	8009b68 <_dtoa_r+0x7d8>
 8009a8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a8e:	2a00      	cmp	r2, #0
 8009a90:	d066      	beq.n	8009b60 <_dtoa_r+0x7d0>
 8009a92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a96:	464d      	mov	r5, r9
 8009a98:	9e08      	ldr	r6, [sp, #32]
 8009a9a:	9a07      	ldr	r2, [sp, #28]
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	441a      	add	r2, r3
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	4499      	add	r9, r3
 8009aa4:	9207      	str	r2, [sp, #28]
 8009aa6:	f000 ff72 	bl	800a98e <__i2b>
 8009aaa:	4607      	mov	r7, r0
 8009aac:	2d00      	cmp	r5, #0
 8009aae:	dd0b      	ble.n	8009ac8 <_dtoa_r+0x738>
 8009ab0:	9b07      	ldr	r3, [sp, #28]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	dd08      	ble.n	8009ac8 <_dtoa_r+0x738>
 8009ab6:	42ab      	cmp	r3, r5
 8009ab8:	bfa8      	it	ge
 8009aba:	462b      	movge	r3, r5
 8009abc:	9a07      	ldr	r2, [sp, #28]
 8009abe:	eba9 0903 	sub.w	r9, r9, r3
 8009ac2:	1aed      	subs	r5, r5, r3
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	9307      	str	r3, [sp, #28]
 8009ac8:	9b08      	ldr	r3, [sp, #32]
 8009aca:	b1eb      	cbz	r3, 8009b08 <_dtoa_r+0x778>
 8009acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d065      	beq.n	8009b9e <_dtoa_r+0x80e>
 8009ad2:	b18e      	cbz	r6, 8009af8 <_dtoa_r+0x768>
 8009ad4:	4639      	mov	r1, r7
 8009ad6:	4632      	mov	r2, r6
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f000 fff7 	bl	800aacc <__pow5mult>
 8009ade:	465a      	mov	r2, fp
 8009ae0:	4601      	mov	r1, r0
 8009ae2:	4607      	mov	r7, r0
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f000 ff5b 	bl	800a9a0 <__multiply>
 8009aea:	4659      	mov	r1, fp
 8009aec:	900a      	str	r0, [sp, #40]	; 0x28
 8009aee:	4620      	mov	r0, r4
 8009af0:	f000 fe6f 	bl	800a7d2 <_Bfree>
 8009af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af6:	469b      	mov	fp, r3
 8009af8:	9b08      	ldr	r3, [sp, #32]
 8009afa:	1b9a      	subs	r2, r3, r6
 8009afc:	d004      	beq.n	8009b08 <_dtoa_r+0x778>
 8009afe:	4659      	mov	r1, fp
 8009b00:	4620      	mov	r0, r4
 8009b02:	f000 ffe3 	bl	800aacc <__pow5mult>
 8009b06:	4683      	mov	fp, r0
 8009b08:	2101      	movs	r1, #1
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	f000 ff3f 	bl	800a98e <__i2b>
 8009b10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b12:	4606      	mov	r6, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 81c6 	beq.w	8009ea6 <_dtoa_r+0xb16>
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	4601      	mov	r1, r0
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f000 ffd4 	bl	800aacc <__pow5mult>
 8009b24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009b26:	4606      	mov	r6, r0
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	dc3e      	bgt.n	8009baa <_dtoa_r+0x81a>
 8009b2c:	9b02      	ldr	r3, [sp, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d137      	bne.n	8009ba2 <_dtoa_r+0x812>
 8009b32:	9b03      	ldr	r3, [sp, #12]
 8009b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d134      	bne.n	8009ba6 <_dtoa_r+0x816>
 8009b3c:	9b03      	ldr	r3, [sp, #12]
 8009b3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b42:	0d1b      	lsrs	r3, r3, #20
 8009b44:	051b      	lsls	r3, r3, #20
 8009b46:	b12b      	cbz	r3, 8009b54 <_dtoa_r+0x7c4>
 8009b48:	9b07      	ldr	r3, [sp, #28]
 8009b4a:	f109 0901 	add.w	r9, r9, #1
 8009b4e:	3301      	adds	r3, #1
 8009b50:	9307      	str	r3, [sp, #28]
 8009b52:	2301      	movs	r3, #1
 8009b54:	9308      	str	r3, [sp, #32]
 8009b56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d128      	bne.n	8009bae <_dtoa_r+0x81e>
 8009b5c:	2001      	movs	r0, #1
 8009b5e:	e02e      	b.n	8009bbe <_dtoa_r+0x82e>
 8009b60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b66:	e796      	b.n	8009a96 <_dtoa_r+0x706>
 8009b68:	9b08      	ldr	r3, [sp, #32]
 8009b6a:	f108 36ff 	add.w	r6, r8, #4294967295
 8009b6e:	42b3      	cmp	r3, r6
 8009b70:	bfb7      	itett	lt
 8009b72:	9b08      	ldrlt	r3, [sp, #32]
 8009b74:	1b9e      	subge	r6, r3, r6
 8009b76:	1af2      	sublt	r2, r6, r3
 8009b78:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8009b7a:	bfbf      	itttt	lt
 8009b7c:	9608      	strlt	r6, [sp, #32]
 8009b7e:	189b      	addlt	r3, r3, r2
 8009b80:	930c      	strlt	r3, [sp, #48]	; 0x30
 8009b82:	2600      	movlt	r6, #0
 8009b84:	f1b8 0f00 	cmp.w	r8, #0
 8009b88:	bfb9      	ittee	lt
 8009b8a:	eba9 0508 	sublt.w	r5, r9, r8
 8009b8e:	2300      	movlt	r3, #0
 8009b90:	464d      	movge	r5, r9
 8009b92:	4643      	movge	r3, r8
 8009b94:	e781      	b.n	8009a9a <_dtoa_r+0x70a>
 8009b96:	9e08      	ldr	r6, [sp, #32]
 8009b98:	464d      	mov	r5, r9
 8009b9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009b9c:	e786      	b.n	8009aac <_dtoa_r+0x71c>
 8009b9e:	9a08      	ldr	r2, [sp, #32]
 8009ba0:	e7ad      	b.n	8009afe <_dtoa_r+0x76e>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	e7d6      	b.n	8009b54 <_dtoa_r+0x7c4>
 8009ba6:	9b02      	ldr	r3, [sp, #8]
 8009ba8:	e7d4      	b.n	8009b54 <_dtoa_r+0x7c4>
 8009baa:	2300      	movs	r3, #0
 8009bac:	9308      	str	r3, [sp, #32]
 8009bae:	6933      	ldr	r3, [r6, #16]
 8009bb0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009bb4:	6918      	ldr	r0, [r3, #16]
 8009bb6:	f000 fe9c 	bl	800a8f2 <__hi0bits>
 8009bba:	f1c0 0020 	rsb	r0, r0, #32
 8009bbe:	9b07      	ldr	r3, [sp, #28]
 8009bc0:	4418      	add	r0, r3
 8009bc2:	f010 001f 	ands.w	r0, r0, #31
 8009bc6:	d047      	beq.n	8009c58 <_dtoa_r+0x8c8>
 8009bc8:	f1c0 0320 	rsb	r3, r0, #32
 8009bcc:	2b04      	cmp	r3, #4
 8009bce:	dd3b      	ble.n	8009c48 <_dtoa_r+0x8b8>
 8009bd0:	9b07      	ldr	r3, [sp, #28]
 8009bd2:	f1c0 001c 	rsb	r0, r0, #28
 8009bd6:	4481      	add	r9, r0
 8009bd8:	4405      	add	r5, r0
 8009bda:	4403      	add	r3, r0
 8009bdc:	9307      	str	r3, [sp, #28]
 8009bde:	f1b9 0f00 	cmp.w	r9, #0
 8009be2:	dd05      	ble.n	8009bf0 <_dtoa_r+0x860>
 8009be4:	4659      	mov	r1, fp
 8009be6:	464a      	mov	r2, r9
 8009be8:	4620      	mov	r0, r4
 8009bea:	f000 ffbd 	bl	800ab68 <__lshift>
 8009bee:	4683      	mov	fp, r0
 8009bf0:	9b07      	ldr	r3, [sp, #28]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	dd05      	ble.n	8009c02 <_dtoa_r+0x872>
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f000 ffb4 	bl	800ab68 <__lshift>
 8009c00:	4606      	mov	r6, r0
 8009c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c04:	b353      	cbz	r3, 8009c5c <_dtoa_r+0x8cc>
 8009c06:	4631      	mov	r1, r6
 8009c08:	4658      	mov	r0, fp
 8009c0a:	f001 f801 	bl	800ac10 <__mcmp>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	da24      	bge.n	8009c5c <_dtoa_r+0x8cc>
 8009c12:	2300      	movs	r3, #0
 8009c14:	4659      	mov	r1, fp
 8009c16:	220a      	movs	r2, #10
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f000 fdf1 	bl	800a800 <__multadd>
 8009c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c24:	4683      	mov	fp, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 8144 	beq.w	8009eb4 <_dtoa_r+0xb24>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	4639      	mov	r1, r7
 8009c30:	220a      	movs	r2, #10
 8009c32:	4620      	mov	r0, r4
 8009c34:	f000 fde4 	bl	800a800 <__multadd>
 8009c38:	9b04      	ldr	r3, [sp, #16]
 8009c3a:	4607      	mov	r7, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	dc4d      	bgt.n	8009cdc <_dtoa_r+0x94c>
 8009c40:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	dd4a      	ble.n	8009cdc <_dtoa_r+0x94c>
 8009c46:	e011      	b.n	8009c6c <_dtoa_r+0x8dc>
 8009c48:	d0c9      	beq.n	8009bde <_dtoa_r+0x84e>
 8009c4a:	9a07      	ldr	r2, [sp, #28]
 8009c4c:	331c      	adds	r3, #28
 8009c4e:	441a      	add	r2, r3
 8009c50:	4499      	add	r9, r3
 8009c52:	441d      	add	r5, r3
 8009c54:	4613      	mov	r3, r2
 8009c56:	e7c1      	b.n	8009bdc <_dtoa_r+0x84c>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	e7f6      	b.n	8009c4a <_dtoa_r+0x8ba>
 8009c5c:	f1b8 0f00 	cmp.w	r8, #0
 8009c60:	dc36      	bgt.n	8009cd0 <_dtoa_r+0x940>
 8009c62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	dd33      	ble.n	8009cd0 <_dtoa_r+0x940>
 8009c68:	f8cd 8010 	str.w	r8, [sp, #16]
 8009c6c:	9b04      	ldr	r3, [sp, #16]
 8009c6e:	b963      	cbnz	r3, 8009c8a <_dtoa_r+0x8fa>
 8009c70:	4631      	mov	r1, r6
 8009c72:	2205      	movs	r2, #5
 8009c74:	4620      	mov	r0, r4
 8009c76:	f000 fdc3 	bl	800a800 <__multadd>
 8009c7a:	4601      	mov	r1, r0
 8009c7c:	4606      	mov	r6, r0
 8009c7e:	4658      	mov	r0, fp
 8009c80:	f000 ffc6 	bl	800ac10 <__mcmp>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	f73f add3 	bgt.w	8009830 <_dtoa_r+0x4a0>
 8009c8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c8c:	9d06      	ldr	r5, [sp, #24]
 8009c8e:	ea6f 0a03 	mvn.w	sl, r3
 8009c92:	f04f 0900 	mov.w	r9, #0
 8009c96:	4631      	mov	r1, r6
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f000 fd9a 	bl	800a7d2 <_Bfree>
 8009c9e:	2f00      	cmp	r7, #0
 8009ca0:	f43f aebd 	beq.w	8009a1e <_dtoa_r+0x68e>
 8009ca4:	f1b9 0f00 	cmp.w	r9, #0
 8009ca8:	d005      	beq.n	8009cb6 <_dtoa_r+0x926>
 8009caa:	45b9      	cmp	r9, r7
 8009cac:	d003      	beq.n	8009cb6 <_dtoa_r+0x926>
 8009cae:	4649      	mov	r1, r9
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f000 fd8e 	bl	800a7d2 <_Bfree>
 8009cb6:	4639      	mov	r1, r7
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f000 fd8a 	bl	800a7d2 <_Bfree>
 8009cbe:	e6ae      	b.n	8009a1e <_dtoa_r+0x68e>
 8009cc0:	2600      	movs	r6, #0
 8009cc2:	4637      	mov	r7, r6
 8009cc4:	e7e1      	b.n	8009c8a <_dtoa_r+0x8fa>
 8009cc6:	46ba      	mov	sl, r7
 8009cc8:	4637      	mov	r7, r6
 8009cca:	e5b1      	b.n	8009830 <_dtoa_r+0x4a0>
 8009ccc:	40240000 	.word	0x40240000
 8009cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd2:	f8cd 8010 	str.w	r8, [sp, #16]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f000 80f3 	beq.w	8009ec2 <_dtoa_r+0xb32>
 8009cdc:	2d00      	cmp	r5, #0
 8009cde:	dd05      	ble.n	8009cec <_dtoa_r+0x95c>
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	462a      	mov	r2, r5
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f000 ff3f 	bl	800ab68 <__lshift>
 8009cea:	4607      	mov	r7, r0
 8009cec:	9b08      	ldr	r3, [sp, #32]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d04c      	beq.n	8009d8c <_dtoa_r+0x9fc>
 8009cf2:	6879      	ldr	r1, [r7, #4]
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f000 fd38 	bl	800a76a <_Balloc>
 8009cfa:	4605      	mov	r5, r0
 8009cfc:	693a      	ldr	r2, [r7, #16]
 8009cfe:	f107 010c 	add.w	r1, r7, #12
 8009d02:	3202      	adds	r2, #2
 8009d04:	0092      	lsls	r2, r2, #2
 8009d06:	300c      	adds	r0, #12
 8009d08:	f000 fd24 	bl	800a754 <memcpy>
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	4629      	mov	r1, r5
 8009d10:	4620      	mov	r0, r4
 8009d12:	f000 ff29 	bl	800ab68 <__lshift>
 8009d16:	46b9      	mov	r9, r7
 8009d18:	4607      	mov	r7, r0
 8009d1a:	9b06      	ldr	r3, [sp, #24]
 8009d1c:	9307      	str	r3, [sp, #28]
 8009d1e:	9b02      	ldr	r3, [sp, #8]
 8009d20:	f003 0301 	and.w	r3, r3, #1
 8009d24:	9308      	str	r3, [sp, #32]
 8009d26:	4631      	mov	r1, r6
 8009d28:	4658      	mov	r0, fp
 8009d2a:	f7ff faa1 	bl	8009270 <quorem>
 8009d2e:	4649      	mov	r1, r9
 8009d30:	4605      	mov	r5, r0
 8009d32:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009d36:	4658      	mov	r0, fp
 8009d38:	f000 ff6a 	bl	800ac10 <__mcmp>
 8009d3c:	463a      	mov	r2, r7
 8009d3e:	9002      	str	r0, [sp, #8]
 8009d40:	4631      	mov	r1, r6
 8009d42:	4620      	mov	r0, r4
 8009d44:	f000 ff7e 	bl	800ac44 <__mdiff>
 8009d48:	68c3      	ldr	r3, [r0, #12]
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	bb03      	cbnz	r3, 8009d90 <_dtoa_r+0xa00>
 8009d4e:	4601      	mov	r1, r0
 8009d50:	9009      	str	r0, [sp, #36]	; 0x24
 8009d52:	4658      	mov	r0, fp
 8009d54:	f000 ff5c 	bl	800ac10 <__mcmp>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	4620      	mov	r0, r4
 8009d60:	9309      	str	r3, [sp, #36]	; 0x24
 8009d62:	f000 fd36 	bl	800a7d2 <_Bfree>
 8009d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d68:	b9a3      	cbnz	r3, 8009d94 <_dtoa_r+0xa04>
 8009d6a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009d6c:	b992      	cbnz	r2, 8009d94 <_dtoa_r+0xa04>
 8009d6e:	9a08      	ldr	r2, [sp, #32]
 8009d70:	b982      	cbnz	r2, 8009d94 <_dtoa_r+0xa04>
 8009d72:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009d76:	d029      	beq.n	8009dcc <_dtoa_r+0xa3c>
 8009d78:	9b02      	ldr	r3, [sp, #8]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	dd01      	ble.n	8009d82 <_dtoa_r+0x9f2>
 8009d7e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009d82:	9b07      	ldr	r3, [sp, #28]
 8009d84:	1c5d      	adds	r5, r3, #1
 8009d86:	f883 8000 	strb.w	r8, [r3]
 8009d8a:	e784      	b.n	8009c96 <_dtoa_r+0x906>
 8009d8c:	4638      	mov	r0, r7
 8009d8e:	e7c2      	b.n	8009d16 <_dtoa_r+0x986>
 8009d90:	2301      	movs	r3, #1
 8009d92:	e7e3      	b.n	8009d5c <_dtoa_r+0x9cc>
 8009d94:	9a02      	ldr	r2, [sp, #8]
 8009d96:	2a00      	cmp	r2, #0
 8009d98:	db04      	blt.n	8009da4 <_dtoa_r+0xa14>
 8009d9a:	d123      	bne.n	8009de4 <_dtoa_r+0xa54>
 8009d9c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009d9e:	bb0a      	cbnz	r2, 8009de4 <_dtoa_r+0xa54>
 8009da0:	9a08      	ldr	r2, [sp, #32]
 8009da2:	b9fa      	cbnz	r2, 8009de4 <_dtoa_r+0xa54>
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	ddec      	ble.n	8009d82 <_dtoa_r+0x9f2>
 8009da8:	4659      	mov	r1, fp
 8009daa:	2201      	movs	r2, #1
 8009dac:	4620      	mov	r0, r4
 8009dae:	f000 fedb 	bl	800ab68 <__lshift>
 8009db2:	4631      	mov	r1, r6
 8009db4:	4683      	mov	fp, r0
 8009db6:	f000 ff2b 	bl	800ac10 <__mcmp>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	dc03      	bgt.n	8009dc6 <_dtoa_r+0xa36>
 8009dbe:	d1e0      	bne.n	8009d82 <_dtoa_r+0x9f2>
 8009dc0:	f018 0f01 	tst.w	r8, #1
 8009dc4:	d0dd      	beq.n	8009d82 <_dtoa_r+0x9f2>
 8009dc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009dca:	d1d8      	bne.n	8009d7e <_dtoa_r+0x9ee>
 8009dcc:	9b07      	ldr	r3, [sp, #28]
 8009dce:	9a07      	ldr	r2, [sp, #28]
 8009dd0:	1c5d      	adds	r5, r3, #1
 8009dd2:	2339      	movs	r3, #57	; 0x39
 8009dd4:	7013      	strb	r3, [r2, #0]
 8009dd6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009dda:	1e6a      	subs	r2, r5, #1
 8009ddc:	2b39      	cmp	r3, #57	; 0x39
 8009dde:	d04d      	beq.n	8009e7c <_dtoa_r+0xaec>
 8009de0:	3301      	adds	r3, #1
 8009de2:	e052      	b.n	8009e8a <_dtoa_r+0xafa>
 8009de4:	9a07      	ldr	r2, [sp, #28]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f102 0501 	add.w	r5, r2, #1
 8009dec:	dd06      	ble.n	8009dfc <_dtoa_r+0xa6c>
 8009dee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009df2:	d0eb      	beq.n	8009dcc <_dtoa_r+0xa3c>
 8009df4:	f108 0801 	add.w	r8, r8, #1
 8009df8:	9b07      	ldr	r3, [sp, #28]
 8009dfa:	e7c4      	b.n	8009d86 <_dtoa_r+0x9f6>
 8009dfc:	9b06      	ldr	r3, [sp, #24]
 8009dfe:	9a04      	ldr	r2, [sp, #16]
 8009e00:	1aeb      	subs	r3, r5, r3
 8009e02:	4293      	cmp	r3, r2
 8009e04:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009e08:	d021      	beq.n	8009e4e <_dtoa_r+0xabe>
 8009e0a:	4659      	mov	r1, fp
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	220a      	movs	r2, #10
 8009e10:	4620      	mov	r0, r4
 8009e12:	f000 fcf5 	bl	800a800 <__multadd>
 8009e16:	45b9      	cmp	r9, r7
 8009e18:	4683      	mov	fp, r0
 8009e1a:	f04f 0300 	mov.w	r3, #0
 8009e1e:	f04f 020a 	mov.w	r2, #10
 8009e22:	4649      	mov	r1, r9
 8009e24:	4620      	mov	r0, r4
 8009e26:	d105      	bne.n	8009e34 <_dtoa_r+0xaa4>
 8009e28:	f000 fcea 	bl	800a800 <__multadd>
 8009e2c:	4681      	mov	r9, r0
 8009e2e:	4607      	mov	r7, r0
 8009e30:	9507      	str	r5, [sp, #28]
 8009e32:	e778      	b.n	8009d26 <_dtoa_r+0x996>
 8009e34:	f000 fce4 	bl	800a800 <__multadd>
 8009e38:	4639      	mov	r1, r7
 8009e3a:	4681      	mov	r9, r0
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	220a      	movs	r2, #10
 8009e40:	4620      	mov	r0, r4
 8009e42:	f000 fcdd 	bl	800a800 <__multadd>
 8009e46:	4607      	mov	r7, r0
 8009e48:	e7f2      	b.n	8009e30 <_dtoa_r+0xaa0>
 8009e4a:	f04f 0900 	mov.w	r9, #0
 8009e4e:	4659      	mov	r1, fp
 8009e50:	2201      	movs	r2, #1
 8009e52:	4620      	mov	r0, r4
 8009e54:	f000 fe88 	bl	800ab68 <__lshift>
 8009e58:	4631      	mov	r1, r6
 8009e5a:	4683      	mov	fp, r0
 8009e5c:	f000 fed8 	bl	800ac10 <__mcmp>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	dcb8      	bgt.n	8009dd6 <_dtoa_r+0xa46>
 8009e64:	d102      	bne.n	8009e6c <_dtoa_r+0xadc>
 8009e66:	f018 0f01 	tst.w	r8, #1
 8009e6a:	d1b4      	bne.n	8009dd6 <_dtoa_r+0xa46>
 8009e6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e70:	1e6a      	subs	r2, r5, #1
 8009e72:	2b30      	cmp	r3, #48	; 0x30
 8009e74:	f47f af0f 	bne.w	8009c96 <_dtoa_r+0x906>
 8009e78:	4615      	mov	r5, r2
 8009e7a:	e7f7      	b.n	8009e6c <_dtoa_r+0xadc>
 8009e7c:	9b06      	ldr	r3, [sp, #24]
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d105      	bne.n	8009e8e <_dtoa_r+0xafe>
 8009e82:	2331      	movs	r3, #49	; 0x31
 8009e84:	9a06      	ldr	r2, [sp, #24]
 8009e86:	f10a 0a01 	add.w	sl, sl, #1
 8009e8a:	7013      	strb	r3, [r2, #0]
 8009e8c:	e703      	b.n	8009c96 <_dtoa_r+0x906>
 8009e8e:	4615      	mov	r5, r2
 8009e90:	e7a1      	b.n	8009dd6 <_dtoa_r+0xa46>
 8009e92:	4b17      	ldr	r3, [pc, #92]	; (8009ef0 <_dtoa_r+0xb60>)
 8009e94:	f7ff bae1 	b.w	800945a <_dtoa_r+0xca>
 8009e98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f47f aabb 	bne.w	8009416 <_dtoa_r+0x86>
 8009ea0:	4b14      	ldr	r3, [pc, #80]	; (8009ef4 <_dtoa_r+0xb64>)
 8009ea2:	f7ff bada 	b.w	800945a <_dtoa_r+0xca>
 8009ea6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	f77f ae3f 	ble.w	8009b2c <_dtoa_r+0x79c>
 8009eae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009eb0:	9308      	str	r3, [sp, #32]
 8009eb2:	e653      	b.n	8009b5c <_dtoa_r+0x7cc>
 8009eb4:	9b04      	ldr	r3, [sp, #16]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	dc03      	bgt.n	8009ec2 <_dtoa_r+0xb32>
 8009eba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	f73f aed5 	bgt.w	8009c6c <_dtoa_r+0x8dc>
 8009ec2:	9d06      	ldr	r5, [sp, #24]
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	4658      	mov	r0, fp
 8009ec8:	f7ff f9d2 	bl	8009270 <quorem>
 8009ecc:	9b06      	ldr	r3, [sp, #24]
 8009ece:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009ed2:	f805 8b01 	strb.w	r8, [r5], #1
 8009ed6:	9a04      	ldr	r2, [sp, #16]
 8009ed8:	1aeb      	subs	r3, r5, r3
 8009eda:	429a      	cmp	r2, r3
 8009edc:	ddb5      	ble.n	8009e4a <_dtoa_r+0xaba>
 8009ede:	4659      	mov	r1, fp
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	220a      	movs	r2, #10
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f000 fc8b 	bl	800a800 <__multadd>
 8009eea:	4683      	mov	fp, r0
 8009eec:	e7ea      	b.n	8009ec4 <_dtoa_r+0xb34>
 8009eee:	bf00      	nop
 8009ef0:	0800bc78 	.word	0x0800bc78
 8009ef4:	0800bcf8 	.word	0x0800bcf8

08009ef8 <std>:
 8009ef8:	2300      	movs	r3, #0
 8009efa:	b510      	push	{r4, lr}
 8009efc:	4604      	mov	r4, r0
 8009efe:	e9c0 3300 	strd	r3, r3, [r0]
 8009f02:	6083      	str	r3, [r0, #8]
 8009f04:	8181      	strh	r1, [r0, #12]
 8009f06:	6643      	str	r3, [r0, #100]	; 0x64
 8009f08:	81c2      	strh	r2, [r0, #14]
 8009f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f0e:	6183      	str	r3, [r0, #24]
 8009f10:	4619      	mov	r1, r3
 8009f12:	2208      	movs	r2, #8
 8009f14:	305c      	adds	r0, #92	; 0x5c
 8009f16:	f7fd fc4d 	bl	80077b4 <memset>
 8009f1a:	4b05      	ldr	r3, [pc, #20]	; (8009f30 <std+0x38>)
 8009f1c:	6224      	str	r4, [r4, #32]
 8009f1e:	6263      	str	r3, [r4, #36]	; 0x24
 8009f20:	4b04      	ldr	r3, [pc, #16]	; (8009f34 <std+0x3c>)
 8009f22:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f24:	4b04      	ldr	r3, [pc, #16]	; (8009f38 <std+0x40>)
 8009f26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f28:	4b04      	ldr	r3, [pc, #16]	; (8009f3c <std+0x44>)
 8009f2a:	6323      	str	r3, [r4, #48]	; 0x30
 8009f2c:	bd10      	pop	{r4, pc}
 8009f2e:	bf00      	nop
 8009f30:	0800b605 	.word	0x0800b605
 8009f34:	0800b627 	.word	0x0800b627
 8009f38:	0800b65f 	.word	0x0800b65f
 8009f3c:	0800b683 	.word	0x0800b683

08009f40 <_cleanup_r>:
 8009f40:	4901      	ldr	r1, [pc, #4]	; (8009f48 <_cleanup_r+0x8>)
 8009f42:	f000 b885 	b.w	800a050 <_fwalk_reent>
 8009f46:	bf00      	nop
 8009f48:	0800b99d 	.word	0x0800b99d

08009f4c <__sfmoreglue>:
 8009f4c:	b570      	push	{r4, r5, r6, lr}
 8009f4e:	2568      	movs	r5, #104	; 0x68
 8009f50:	1e4a      	subs	r2, r1, #1
 8009f52:	4355      	muls	r5, r2
 8009f54:	460e      	mov	r6, r1
 8009f56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f5a:	f001 f859 	bl	800b010 <_malloc_r>
 8009f5e:	4604      	mov	r4, r0
 8009f60:	b140      	cbz	r0, 8009f74 <__sfmoreglue+0x28>
 8009f62:	2100      	movs	r1, #0
 8009f64:	e9c0 1600 	strd	r1, r6, [r0]
 8009f68:	300c      	adds	r0, #12
 8009f6a:	60a0      	str	r0, [r4, #8]
 8009f6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f70:	f7fd fc20 	bl	80077b4 <memset>
 8009f74:	4620      	mov	r0, r4
 8009f76:	bd70      	pop	{r4, r5, r6, pc}

08009f78 <__sinit>:
 8009f78:	6983      	ldr	r3, [r0, #24]
 8009f7a:	b510      	push	{r4, lr}
 8009f7c:	4604      	mov	r4, r0
 8009f7e:	bb33      	cbnz	r3, 8009fce <__sinit+0x56>
 8009f80:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009f84:	6503      	str	r3, [r0, #80]	; 0x50
 8009f86:	4b12      	ldr	r3, [pc, #72]	; (8009fd0 <__sinit+0x58>)
 8009f88:	4a12      	ldr	r2, [pc, #72]	; (8009fd4 <__sinit+0x5c>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	6282      	str	r2, [r0, #40]	; 0x28
 8009f8e:	4298      	cmp	r0, r3
 8009f90:	bf04      	itt	eq
 8009f92:	2301      	moveq	r3, #1
 8009f94:	6183      	streq	r3, [r0, #24]
 8009f96:	f000 f81f 	bl	8009fd8 <__sfp>
 8009f9a:	6060      	str	r0, [r4, #4]
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	f000 f81b 	bl	8009fd8 <__sfp>
 8009fa2:	60a0      	str	r0, [r4, #8]
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f000 f817 	bl	8009fd8 <__sfp>
 8009faa:	2200      	movs	r2, #0
 8009fac:	60e0      	str	r0, [r4, #12]
 8009fae:	2104      	movs	r1, #4
 8009fb0:	6860      	ldr	r0, [r4, #4]
 8009fb2:	f7ff ffa1 	bl	8009ef8 <std>
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	2109      	movs	r1, #9
 8009fba:	68a0      	ldr	r0, [r4, #8]
 8009fbc:	f7ff ff9c 	bl	8009ef8 <std>
 8009fc0:	2202      	movs	r2, #2
 8009fc2:	2112      	movs	r1, #18
 8009fc4:	68e0      	ldr	r0, [r4, #12]
 8009fc6:	f7ff ff97 	bl	8009ef8 <std>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	61a3      	str	r3, [r4, #24]
 8009fce:	bd10      	pop	{r4, pc}
 8009fd0:	0800bc64 	.word	0x0800bc64
 8009fd4:	08009f41 	.word	0x08009f41

08009fd8 <__sfp>:
 8009fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fda:	4b1b      	ldr	r3, [pc, #108]	; (800a048 <__sfp+0x70>)
 8009fdc:	4607      	mov	r7, r0
 8009fde:	681e      	ldr	r6, [r3, #0]
 8009fe0:	69b3      	ldr	r3, [r6, #24]
 8009fe2:	b913      	cbnz	r3, 8009fea <__sfp+0x12>
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	f7ff ffc7 	bl	8009f78 <__sinit>
 8009fea:	3648      	adds	r6, #72	; 0x48
 8009fec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	d503      	bpl.n	8009ffc <__sfp+0x24>
 8009ff4:	6833      	ldr	r3, [r6, #0]
 8009ff6:	b133      	cbz	r3, 800a006 <__sfp+0x2e>
 8009ff8:	6836      	ldr	r6, [r6, #0]
 8009ffa:	e7f7      	b.n	8009fec <__sfp+0x14>
 8009ffc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a000:	b16d      	cbz	r5, 800a01e <__sfp+0x46>
 800a002:	3468      	adds	r4, #104	; 0x68
 800a004:	e7f4      	b.n	8009ff0 <__sfp+0x18>
 800a006:	2104      	movs	r1, #4
 800a008:	4638      	mov	r0, r7
 800a00a:	f7ff ff9f 	bl	8009f4c <__sfmoreglue>
 800a00e:	6030      	str	r0, [r6, #0]
 800a010:	2800      	cmp	r0, #0
 800a012:	d1f1      	bne.n	8009ff8 <__sfp+0x20>
 800a014:	230c      	movs	r3, #12
 800a016:	4604      	mov	r4, r0
 800a018:	603b      	str	r3, [r7, #0]
 800a01a:	4620      	mov	r0, r4
 800a01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a01e:	4b0b      	ldr	r3, [pc, #44]	; (800a04c <__sfp+0x74>)
 800a020:	6665      	str	r5, [r4, #100]	; 0x64
 800a022:	e9c4 5500 	strd	r5, r5, [r4]
 800a026:	60a5      	str	r5, [r4, #8]
 800a028:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a02c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a030:	2208      	movs	r2, #8
 800a032:	4629      	mov	r1, r5
 800a034:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a038:	f7fd fbbc 	bl	80077b4 <memset>
 800a03c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a040:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a044:	e7e9      	b.n	800a01a <__sfp+0x42>
 800a046:	bf00      	nop
 800a048:	0800bc64 	.word	0x0800bc64
 800a04c:	ffff0001 	.word	0xffff0001

0800a050 <_fwalk_reent>:
 800a050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a054:	4680      	mov	r8, r0
 800a056:	4689      	mov	r9, r1
 800a058:	2600      	movs	r6, #0
 800a05a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a05e:	b914      	cbnz	r4, 800a066 <_fwalk_reent+0x16>
 800a060:	4630      	mov	r0, r6
 800a062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a066:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a06a:	3f01      	subs	r7, #1
 800a06c:	d501      	bpl.n	800a072 <_fwalk_reent+0x22>
 800a06e:	6824      	ldr	r4, [r4, #0]
 800a070:	e7f5      	b.n	800a05e <_fwalk_reent+0xe>
 800a072:	89ab      	ldrh	r3, [r5, #12]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d907      	bls.n	800a088 <_fwalk_reent+0x38>
 800a078:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a07c:	3301      	adds	r3, #1
 800a07e:	d003      	beq.n	800a088 <_fwalk_reent+0x38>
 800a080:	4629      	mov	r1, r5
 800a082:	4640      	mov	r0, r8
 800a084:	47c8      	blx	r9
 800a086:	4306      	orrs	r6, r0
 800a088:	3568      	adds	r5, #104	; 0x68
 800a08a:	e7ee      	b.n	800a06a <_fwalk_reent+0x1a>

0800a08c <rshift>:
 800a08c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a08e:	6906      	ldr	r6, [r0, #16]
 800a090:	114b      	asrs	r3, r1, #5
 800a092:	429e      	cmp	r6, r3
 800a094:	f100 0414 	add.w	r4, r0, #20
 800a098:	dd31      	ble.n	800a0fe <rshift+0x72>
 800a09a:	f011 011f 	ands.w	r1, r1, #31
 800a09e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a0a2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a0a6:	d108      	bne.n	800a0ba <rshift+0x2e>
 800a0a8:	4621      	mov	r1, r4
 800a0aa:	42b2      	cmp	r2, r6
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	d211      	bcs.n	800a0d4 <rshift+0x48>
 800a0b0:	f852 3b04 	ldr.w	r3, [r2], #4
 800a0b4:	f841 3b04 	str.w	r3, [r1], #4
 800a0b8:	e7f7      	b.n	800a0aa <rshift+0x1e>
 800a0ba:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a0be:	4623      	mov	r3, r4
 800a0c0:	f1c1 0c20 	rsb	ip, r1, #32
 800a0c4:	40cd      	lsrs	r5, r1
 800a0c6:	3204      	adds	r2, #4
 800a0c8:	42b2      	cmp	r2, r6
 800a0ca:	4617      	mov	r7, r2
 800a0cc:	d30d      	bcc.n	800a0ea <rshift+0x5e>
 800a0ce:	601d      	str	r5, [r3, #0]
 800a0d0:	b105      	cbz	r5, 800a0d4 <rshift+0x48>
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	42a3      	cmp	r3, r4
 800a0d6:	eba3 0204 	sub.w	r2, r3, r4
 800a0da:	bf08      	it	eq
 800a0dc:	2300      	moveq	r3, #0
 800a0de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a0e2:	6102      	str	r2, [r0, #16]
 800a0e4:	bf08      	it	eq
 800a0e6:	6143      	streq	r3, [r0, #20]
 800a0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ea:	683f      	ldr	r7, [r7, #0]
 800a0ec:	fa07 f70c 	lsl.w	r7, r7, ip
 800a0f0:	433d      	orrs	r5, r7
 800a0f2:	f843 5b04 	str.w	r5, [r3], #4
 800a0f6:	f852 5b04 	ldr.w	r5, [r2], #4
 800a0fa:	40cd      	lsrs	r5, r1
 800a0fc:	e7e4      	b.n	800a0c8 <rshift+0x3c>
 800a0fe:	4623      	mov	r3, r4
 800a100:	e7e8      	b.n	800a0d4 <rshift+0x48>

0800a102 <__hexdig_fun>:
 800a102:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a106:	2b09      	cmp	r3, #9
 800a108:	d802      	bhi.n	800a110 <__hexdig_fun+0xe>
 800a10a:	3820      	subs	r0, #32
 800a10c:	b2c0      	uxtb	r0, r0
 800a10e:	4770      	bx	lr
 800a110:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a114:	2b05      	cmp	r3, #5
 800a116:	d801      	bhi.n	800a11c <__hexdig_fun+0x1a>
 800a118:	3847      	subs	r0, #71	; 0x47
 800a11a:	e7f7      	b.n	800a10c <__hexdig_fun+0xa>
 800a11c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a120:	2b05      	cmp	r3, #5
 800a122:	d801      	bhi.n	800a128 <__hexdig_fun+0x26>
 800a124:	3827      	subs	r0, #39	; 0x27
 800a126:	e7f1      	b.n	800a10c <__hexdig_fun+0xa>
 800a128:	2000      	movs	r0, #0
 800a12a:	4770      	bx	lr

0800a12c <__gethex>:
 800a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a130:	b08b      	sub	sp, #44	; 0x2c
 800a132:	9002      	str	r0, [sp, #8]
 800a134:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a136:	468a      	mov	sl, r1
 800a138:	4690      	mov	r8, r2
 800a13a:	9306      	str	r3, [sp, #24]
 800a13c:	f000 fad1 	bl	800a6e2 <__localeconv_l>
 800a140:	6803      	ldr	r3, [r0, #0]
 800a142:	f04f 0b00 	mov.w	fp, #0
 800a146:	4618      	mov	r0, r3
 800a148:	9303      	str	r3, [sp, #12]
 800a14a:	f7f6 f801 	bl	8000150 <strlen>
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	9001      	str	r0, [sp, #4]
 800a152:	4403      	add	r3, r0
 800a154:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a158:	9307      	str	r3, [sp, #28]
 800a15a:	f8da 3000 	ldr.w	r3, [sl]
 800a15e:	3302      	adds	r3, #2
 800a160:	461f      	mov	r7, r3
 800a162:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a166:	2830      	cmp	r0, #48	; 0x30
 800a168:	d06c      	beq.n	800a244 <__gethex+0x118>
 800a16a:	f7ff ffca 	bl	800a102 <__hexdig_fun>
 800a16e:	4604      	mov	r4, r0
 800a170:	2800      	cmp	r0, #0
 800a172:	d16a      	bne.n	800a24a <__gethex+0x11e>
 800a174:	9a01      	ldr	r2, [sp, #4]
 800a176:	9903      	ldr	r1, [sp, #12]
 800a178:	4638      	mov	r0, r7
 800a17a:	f001 fa86 	bl	800b68a <strncmp>
 800a17e:	2800      	cmp	r0, #0
 800a180:	d166      	bne.n	800a250 <__gethex+0x124>
 800a182:	9b01      	ldr	r3, [sp, #4]
 800a184:	5cf8      	ldrb	r0, [r7, r3]
 800a186:	18fe      	adds	r6, r7, r3
 800a188:	f7ff ffbb 	bl	800a102 <__hexdig_fun>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d062      	beq.n	800a256 <__gethex+0x12a>
 800a190:	4633      	mov	r3, r6
 800a192:	7818      	ldrb	r0, [r3, #0]
 800a194:	461f      	mov	r7, r3
 800a196:	2830      	cmp	r0, #48	; 0x30
 800a198:	f103 0301 	add.w	r3, r3, #1
 800a19c:	d0f9      	beq.n	800a192 <__gethex+0x66>
 800a19e:	f7ff ffb0 	bl	800a102 <__hexdig_fun>
 800a1a2:	fab0 f580 	clz	r5, r0
 800a1a6:	4634      	mov	r4, r6
 800a1a8:	f04f 0b01 	mov.w	fp, #1
 800a1ac:	096d      	lsrs	r5, r5, #5
 800a1ae:	463a      	mov	r2, r7
 800a1b0:	4616      	mov	r6, r2
 800a1b2:	7830      	ldrb	r0, [r6, #0]
 800a1b4:	3201      	adds	r2, #1
 800a1b6:	f7ff ffa4 	bl	800a102 <__hexdig_fun>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	d1f8      	bne.n	800a1b0 <__gethex+0x84>
 800a1be:	9a01      	ldr	r2, [sp, #4]
 800a1c0:	9903      	ldr	r1, [sp, #12]
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	f001 fa61 	bl	800b68a <strncmp>
 800a1c8:	b950      	cbnz	r0, 800a1e0 <__gethex+0xb4>
 800a1ca:	b954      	cbnz	r4, 800a1e2 <__gethex+0xb6>
 800a1cc:	9b01      	ldr	r3, [sp, #4]
 800a1ce:	18f4      	adds	r4, r6, r3
 800a1d0:	4622      	mov	r2, r4
 800a1d2:	4616      	mov	r6, r2
 800a1d4:	7830      	ldrb	r0, [r6, #0]
 800a1d6:	3201      	adds	r2, #1
 800a1d8:	f7ff ff93 	bl	800a102 <__hexdig_fun>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d1f8      	bne.n	800a1d2 <__gethex+0xa6>
 800a1e0:	b10c      	cbz	r4, 800a1e6 <__gethex+0xba>
 800a1e2:	1ba4      	subs	r4, r4, r6
 800a1e4:	00a4      	lsls	r4, r4, #2
 800a1e6:	7833      	ldrb	r3, [r6, #0]
 800a1e8:	2b50      	cmp	r3, #80	; 0x50
 800a1ea:	d001      	beq.n	800a1f0 <__gethex+0xc4>
 800a1ec:	2b70      	cmp	r3, #112	; 0x70
 800a1ee:	d140      	bne.n	800a272 <__gethex+0x146>
 800a1f0:	7873      	ldrb	r3, [r6, #1]
 800a1f2:	2b2b      	cmp	r3, #43	; 0x2b
 800a1f4:	d031      	beq.n	800a25a <__gethex+0x12e>
 800a1f6:	2b2d      	cmp	r3, #45	; 0x2d
 800a1f8:	d033      	beq.n	800a262 <__gethex+0x136>
 800a1fa:	f04f 0900 	mov.w	r9, #0
 800a1fe:	1c71      	adds	r1, r6, #1
 800a200:	7808      	ldrb	r0, [r1, #0]
 800a202:	f7ff ff7e 	bl	800a102 <__hexdig_fun>
 800a206:	1e43      	subs	r3, r0, #1
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	2b18      	cmp	r3, #24
 800a20c:	d831      	bhi.n	800a272 <__gethex+0x146>
 800a20e:	f1a0 0210 	sub.w	r2, r0, #16
 800a212:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a216:	f7ff ff74 	bl	800a102 <__hexdig_fun>
 800a21a:	1e43      	subs	r3, r0, #1
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	2b18      	cmp	r3, #24
 800a220:	d922      	bls.n	800a268 <__gethex+0x13c>
 800a222:	f1b9 0f00 	cmp.w	r9, #0
 800a226:	d000      	beq.n	800a22a <__gethex+0xfe>
 800a228:	4252      	negs	r2, r2
 800a22a:	4414      	add	r4, r2
 800a22c:	f8ca 1000 	str.w	r1, [sl]
 800a230:	b30d      	cbz	r5, 800a276 <__gethex+0x14a>
 800a232:	f1bb 0f00 	cmp.w	fp, #0
 800a236:	bf0c      	ite	eq
 800a238:	2706      	moveq	r7, #6
 800a23a:	2700      	movne	r7, #0
 800a23c:	4638      	mov	r0, r7
 800a23e:	b00b      	add	sp, #44	; 0x2c
 800a240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a244:	f10b 0b01 	add.w	fp, fp, #1
 800a248:	e78a      	b.n	800a160 <__gethex+0x34>
 800a24a:	2500      	movs	r5, #0
 800a24c:	462c      	mov	r4, r5
 800a24e:	e7ae      	b.n	800a1ae <__gethex+0x82>
 800a250:	463e      	mov	r6, r7
 800a252:	2501      	movs	r5, #1
 800a254:	e7c7      	b.n	800a1e6 <__gethex+0xba>
 800a256:	4604      	mov	r4, r0
 800a258:	e7fb      	b.n	800a252 <__gethex+0x126>
 800a25a:	f04f 0900 	mov.w	r9, #0
 800a25e:	1cb1      	adds	r1, r6, #2
 800a260:	e7ce      	b.n	800a200 <__gethex+0xd4>
 800a262:	f04f 0901 	mov.w	r9, #1
 800a266:	e7fa      	b.n	800a25e <__gethex+0x132>
 800a268:	230a      	movs	r3, #10
 800a26a:	fb03 0202 	mla	r2, r3, r2, r0
 800a26e:	3a10      	subs	r2, #16
 800a270:	e7cf      	b.n	800a212 <__gethex+0xe6>
 800a272:	4631      	mov	r1, r6
 800a274:	e7da      	b.n	800a22c <__gethex+0x100>
 800a276:	4629      	mov	r1, r5
 800a278:	1bf3      	subs	r3, r6, r7
 800a27a:	3b01      	subs	r3, #1
 800a27c:	2b07      	cmp	r3, #7
 800a27e:	dc49      	bgt.n	800a314 <__gethex+0x1e8>
 800a280:	9802      	ldr	r0, [sp, #8]
 800a282:	f000 fa72 	bl	800a76a <_Balloc>
 800a286:	f04f 0b00 	mov.w	fp, #0
 800a28a:	4605      	mov	r5, r0
 800a28c:	46da      	mov	sl, fp
 800a28e:	9b01      	ldr	r3, [sp, #4]
 800a290:	f100 0914 	add.w	r9, r0, #20
 800a294:	f1c3 0301 	rsb	r3, r3, #1
 800a298:	f8cd 9010 	str.w	r9, [sp, #16]
 800a29c:	9308      	str	r3, [sp, #32]
 800a29e:	42b7      	cmp	r7, r6
 800a2a0:	d33b      	bcc.n	800a31a <__gethex+0x1ee>
 800a2a2:	9804      	ldr	r0, [sp, #16]
 800a2a4:	f840 ab04 	str.w	sl, [r0], #4
 800a2a8:	eba0 0009 	sub.w	r0, r0, r9
 800a2ac:	1080      	asrs	r0, r0, #2
 800a2ae:	6128      	str	r0, [r5, #16]
 800a2b0:	0147      	lsls	r7, r0, #5
 800a2b2:	4650      	mov	r0, sl
 800a2b4:	f000 fb1d 	bl	800a8f2 <__hi0bits>
 800a2b8:	f8d8 6000 	ldr.w	r6, [r8]
 800a2bc:	1a3f      	subs	r7, r7, r0
 800a2be:	42b7      	cmp	r7, r6
 800a2c0:	dd64      	ble.n	800a38c <__gethex+0x260>
 800a2c2:	1bbf      	subs	r7, r7, r6
 800a2c4:	4639      	mov	r1, r7
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	f000 fe27 	bl	800af1a <__any_on>
 800a2cc:	4682      	mov	sl, r0
 800a2ce:	b178      	cbz	r0, 800a2f0 <__gethex+0x1c4>
 800a2d0:	f04f 0a01 	mov.w	sl, #1
 800a2d4:	1e7b      	subs	r3, r7, #1
 800a2d6:	1159      	asrs	r1, r3, #5
 800a2d8:	f003 021f 	and.w	r2, r3, #31
 800a2dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a2e0:	fa0a f202 	lsl.w	r2, sl, r2
 800a2e4:	420a      	tst	r2, r1
 800a2e6:	d003      	beq.n	800a2f0 <__gethex+0x1c4>
 800a2e8:	4553      	cmp	r3, sl
 800a2ea:	dc46      	bgt.n	800a37a <__gethex+0x24e>
 800a2ec:	f04f 0a02 	mov.w	sl, #2
 800a2f0:	4639      	mov	r1, r7
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	f7ff feca 	bl	800a08c <rshift>
 800a2f8:	443c      	add	r4, r7
 800a2fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a2fe:	42a3      	cmp	r3, r4
 800a300:	da52      	bge.n	800a3a8 <__gethex+0x27c>
 800a302:	4629      	mov	r1, r5
 800a304:	9802      	ldr	r0, [sp, #8]
 800a306:	f000 fa64 	bl	800a7d2 <_Bfree>
 800a30a:	2300      	movs	r3, #0
 800a30c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a30e:	27a3      	movs	r7, #163	; 0xa3
 800a310:	6013      	str	r3, [r2, #0]
 800a312:	e793      	b.n	800a23c <__gethex+0x110>
 800a314:	3101      	adds	r1, #1
 800a316:	105b      	asrs	r3, r3, #1
 800a318:	e7b0      	b.n	800a27c <__gethex+0x150>
 800a31a:	1e73      	subs	r3, r6, #1
 800a31c:	9305      	str	r3, [sp, #20]
 800a31e:	9a07      	ldr	r2, [sp, #28]
 800a320:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a324:	4293      	cmp	r3, r2
 800a326:	d018      	beq.n	800a35a <__gethex+0x22e>
 800a328:	f1bb 0f20 	cmp.w	fp, #32
 800a32c:	d107      	bne.n	800a33e <__gethex+0x212>
 800a32e:	9b04      	ldr	r3, [sp, #16]
 800a330:	f8c3 a000 	str.w	sl, [r3]
 800a334:	f04f 0a00 	mov.w	sl, #0
 800a338:	46d3      	mov	fp, sl
 800a33a:	3304      	adds	r3, #4
 800a33c:	9304      	str	r3, [sp, #16]
 800a33e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a342:	f7ff fede 	bl	800a102 <__hexdig_fun>
 800a346:	f000 000f 	and.w	r0, r0, #15
 800a34a:	fa00 f00b 	lsl.w	r0, r0, fp
 800a34e:	ea4a 0a00 	orr.w	sl, sl, r0
 800a352:	f10b 0b04 	add.w	fp, fp, #4
 800a356:	9b05      	ldr	r3, [sp, #20]
 800a358:	e00d      	b.n	800a376 <__gethex+0x24a>
 800a35a:	9b05      	ldr	r3, [sp, #20]
 800a35c:	9a08      	ldr	r2, [sp, #32]
 800a35e:	4413      	add	r3, r2
 800a360:	42bb      	cmp	r3, r7
 800a362:	d3e1      	bcc.n	800a328 <__gethex+0x1fc>
 800a364:	4618      	mov	r0, r3
 800a366:	9a01      	ldr	r2, [sp, #4]
 800a368:	9903      	ldr	r1, [sp, #12]
 800a36a:	9309      	str	r3, [sp, #36]	; 0x24
 800a36c:	f001 f98d 	bl	800b68a <strncmp>
 800a370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a372:	2800      	cmp	r0, #0
 800a374:	d1d8      	bne.n	800a328 <__gethex+0x1fc>
 800a376:	461e      	mov	r6, r3
 800a378:	e791      	b.n	800a29e <__gethex+0x172>
 800a37a:	1eb9      	subs	r1, r7, #2
 800a37c:	4628      	mov	r0, r5
 800a37e:	f000 fdcc 	bl	800af1a <__any_on>
 800a382:	2800      	cmp	r0, #0
 800a384:	d0b2      	beq.n	800a2ec <__gethex+0x1c0>
 800a386:	f04f 0a03 	mov.w	sl, #3
 800a38a:	e7b1      	b.n	800a2f0 <__gethex+0x1c4>
 800a38c:	da09      	bge.n	800a3a2 <__gethex+0x276>
 800a38e:	1bf7      	subs	r7, r6, r7
 800a390:	4629      	mov	r1, r5
 800a392:	463a      	mov	r2, r7
 800a394:	9802      	ldr	r0, [sp, #8]
 800a396:	f000 fbe7 	bl	800ab68 <__lshift>
 800a39a:	4605      	mov	r5, r0
 800a39c:	1be4      	subs	r4, r4, r7
 800a39e:	f100 0914 	add.w	r9, r0, #20
 800a3a2:	f04f 0a00 	mov.w	sl, #0
 800a3a6:	e7a8      	b.n	800a2fa <__gethex+0x1ce>
 800a3a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a3ac:	42a0      	cmp	r0, r4
 800a3ae:	dd6b      	ble.n	800a488 <__gethex+0x35c>
 800a3b0:	1b04      	subs	r4, r0, r4
 800a3b2:	42a6      	cmp	r6, r4
 800a3b4:	dc2e      	bgt.n	800a414 <__gethex+0x2e8>
 800a3b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d022      	beq.n	800a404 <__gethex+0x2d8>
 800a3be:	2b03      	cmp	r3, #3
 800a3c0:	d024      	beq.n	800a40c <__gethex+0x2e0>
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d115      	bne.n	800a3f2 <__gethex+0x2c6>
 800a3c6:	42a6      	cmp	r6, r4
 800a3c8:	d113      	bne.n	800a3f2 <__gethex+0x2c6>
 800a3ca:	2e01      	cmp	r6, #1
 800a3cc:	dc0b      	bgt.n	800a3e6 <__gethex+0x2ba>
 800a3ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a3d2:	9a06      	ldr	r2, [sp, #24]
 800a3d4:	2762      	movs	r7, #98	; 0x62
 800a3d6:	6013      	str	r3, [r2, #0]
 800a3d8:	2301      	movs	r3, #1
 800a3da:	612b      	str	r3, [r5, #16]
 800a3dc:	f8c9 3000 	str.w	r3, [r9]
 800a3e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3e2:	601d      	str	r5, [r3, #0]
 800a3e4:	e72a      	b.n	800a23c <__gethex+0x110>
 800a3e6:	1e71      	subs	r1, r6, #1
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	f000 fd96 	bl	800af1a <__any_on>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	d1ed      	bne.n	800a3ce <__gethex+0x2a2>
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	9802      	ldr	r0, [sp, #8]
 800a3f6:	f000 f9ec 	bl	800a7d2 <_Bfree>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a3fe:	2750      	movs	r7, #80	; 0x50
 800a400:	6013      	str	r3, [r2, #0]
 800a402:	e71b      	b.n	800a23c <__gethex+0x110>
 800a404:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a406:	2b00      	cmp	r3, #0
 800a408:	d0e1      	beq.n	800a3ce <__gethex+0x2a2>
 800a40a:	e7f2      	b.n	800a3f2 <__gethex+0x2c6>
 800a40c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1dd      	bne.n	800a3ce <__gethex+0x2a2>
 800a412:	e7ee      	b.n	800a3f2 <__gethex+0x2c6>
 800a414:	1e67      	subs	r7, r4, #1
 800a416:	f1ba 0f00 	cmp.w	sl, #0
 800a41a:	d132      	bne.n	800a482 <__gethex+0x356>
 800a41c:	b127      	cbz	r7, 800a428 <__gethex+0x2fc>
 800a41e:	4639      	mov	r1, r7
 800a420:	4628      	mov	r0, r5
 800a422:	f000 fd7a 	bl	800af1a <__any_on>
 800a426:	4682      	mov	sl, r0
 800a428:	2301      	movs	r3, #1
 800a42a:	117a      	asrs	r2, r7, #5
 800a42c:	f007 071f 	and.w	r7, r7, #31
 800a430:	fa03 f707 	lsl.w	r7, r3, r7
 800a434:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a438:	4621      	mov	r1, r4
 800a43a:	421f      	tst	r7, r3
 800a43c:	f04f 0702 	mov.w	r7, #2
 800a440:	4628      	mov	r0, r5
 800a442:	bf18      	it	ne
 800a444:	f04a 0a02 	orrne.w	sl, sl, #2
 800a448:	1b36      	subs	r6, r6, r4
 800a44a:	f7ff fe1f 	bl	800a08c <rshift>
 800a44e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a452:	f1ba 0f00 	cmp.w	sl, #0
 800a456:	d048      	beq.n	800a4ea <__gethex+0x3be>
 800a458:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d015      	beq.n	800a48c <__gethex+0x360>
 800a460:	2b03      	cmp	r3, #3
 800a462:	d017      	beq.n	800a494 <__gethex+0x368>
 800a464:	2b01      	cmp	r3, #1
 800a466:	d109      	bne.n	800a47c <__gethex+0x350>
 800a468:	f01a 0f02 	tst.w	sl, #2
 800a46c:	d006      	beq.n	800a47c <__gethex+0x350>
 800a46e:	f8d9 3000 	ldr.w	r3, [r9]
 800a472:	ea4a 0a03 	orr.w	sl, sl, r3
 800a476:	f01a 0f01 	tst.w	sl, #1
 800a47a:	d10e      	bne.n	800a49a <__gethex+0x36e>
 800a47c:	f047 0710 	orr.w	r7, r7, #16
 800a480:	e033      	b.n	800a4ea <__gethex+0x3be>
 800a482:	f04f 0a01 	mov.w	sl, #1
 800a486:	e7cf      	b.n	800a428 <__gethex+0x2fc>
 800a488:	2701      	movs	r7, #1
 800a48a:	e7e2      	b.n	800a452 <__gethex+0x326>
 800a48c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a48e:	f1c3 0301 	rsb	r3, r3, #1
 800a492:	9315      	str	r3, [sp, #84]	; 0x54
 800a494:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a496:	2b00      	cmp	r3, #0
 800a498:	d0f0      	beq.n	800a47c <__gethex+0x350>
 800a49a:	f04f 0c00 	mov.w	ip, #0
 800a49e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a4a2:	f105 0314 	add.w	r3, r5, #20
 800a4a6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a4aa:	eb03 010a 	add.w	r1, r3, sl
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a4b8:	d01c      	beq.n	800a4f4 <__gethex+0x3c8>
 800a4ba:	3201      	adds	r2, #1
 800a4bc:	6002      	str	r2, [r0, #0]
 800a4be:	2f02      	cmp	r7, #2
 800a4c0:	f105 0314 	add.w	r3, r5, #20
 800a4c4:	d138      	bne.n	800a538 <__gethex+0x40c>
 800a4c6:	f8d8 2000 	ldr.w	r2, [r8]
 800a4ca:	3a01      	subs	r2, #1
 800a4cc:	42b2      	cmp	r2, r6
 800a4ce:	d10a      	bne.n	800a4e6 <__gethex+0x3ba>
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	1171      	asrs	r1, r6, #5
 800a4d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a4d8:	f006 061f 	and.w	r6, r6, #31
 800a4dc:	fa02 f606 	lsl.w	r6, r2, r6
 800a4e0:	421e      	tst	r6, r3
 800a4e2:	bf18      	it	ne
 800a4e4:	4617      	movne	r7, r2
 800a4e6:	f047 0720 	orr.w	r7, r7, #32
 800a4ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4ec:	601d      	str	r5, [r3, #0]
 800a4ee:	9b06      	ldr	r3, [sp, #24]
 800a4f0:	601c      	str	r4, [r3, #0]
 800a4f2:	e6a3      	b.n	800a23c <__gethex+0x110>
 800a4f4:	4299      	cmp	r1, r3
 800a4f6:	f843 cc04 	str.w	ip, [r3, #-4]
 800a4fa:	d8d8      	bhi.n	800a4ae <__gethex+0x382>
 800a4fc:	68ab      	ldr	r3, [r5, #8]
 800a4fe:	4599      	cmp	r9, r3
 800a500:	db12      	blt.n	800a528 <__gethex+0x3fc>
 800a502:	6869      	ldr	r1, [r5, #4]
 800a504:	9802      	ldr	r0, [sp, #8]
 800a506:	3101      	adds	r1, #1
 800a508:	f000 f92f 	bl	800a76a <_Balloc>
 800a50c:	4683      	mov	fp, r0
 800a50e:	692a      	ldr	r2, [r5, #16]
 800a510:	f105 010c 	add.w	r1, r5, #12
 800a514:	3202      	adds	r2, #2
 800a516:	0092      	lsls	r2, r2, #2
 800a518:	300c      	adds	r0, #12
 800a51a:	f000 f91b 	bl	800a754 <memcpy>
 800a51e:	4629      	mov	r1, r5
 800a520:	9802      	ldr	r0, [sp, #8]
 800a522:	f000 f956 	bl	800a7d2 <_Bfree>
 800a526:	465d      	mov	r5, fp
 800a528:	692b      	ldr	r3, [r5, #16]
 800a52a:	1c5a      	adds	r2, r3, #1
 800a52c:	612a      	str	r2, [r5, #16]
 800a52e:	2201      	movs	r2, #1
 800a530:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a534:	615a      	str	r2, [r3, #20]
 800a536:	e7c2      	b.n	800a4be <__gethex+0x392>
 800a538:	692a      	ldr	r2, [r5, #16]
 800a53a:	454a      	cmp	r2, r9
 800a53c:	dd0b      	ble.n	800a556 <__gethex+0x42a>
 800a53e:	2101      	movs	r1, #1
 800a540:	4628      	mov	r0, r5
 800a542:	f7ff fda3 	bl	800a08c <rshift>
 800a546:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a54a:	3401      	adds	r4, #1
 800a54c:	42a3      	cmp	r3, r4
 800a54e:	f6ff aed8 	blt.w	800a302 <__gethex+0x1d6>
 800a552:	2701      	movs	r7, #1
 800a554:	e7c7      	b.n	800a4e6 <__gethex+0x3ba>
 800a556:	f016 061f 	ands.w	r6, r6, #31
 800a55a:	d0fa      	beq.n	800a552 <__gethex+0x426>
 800a55c:	449a      	add	sl, r3
 800a55e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a562:	f000 f9c6 	bl	800a8f2 <__hi0bits>
 800a566:	f1c6 0620 	rsb	r6, r6, #32
 800a56a:	42b0      	cmp	r0, r6
 800a56c:	dbe7      	blt.n	800a53e <__gethex+0x412>
 800a56e:	e7f0      	b.n	800a552 <__gethex+0x426>

0800a570 <L_shift>:
 800a570:	f1c2 0208 	rsb	r2, r2, #8
 800a574:	0092      	lsls	r2, r2, #2
 800a576:	b570      	push	{r4, r5, r6, lr}
 800a578:	f1c2 0620 	rsb	r6, r2, #32
 800a57c:	6843      	ldr	r3, [r0, #4]
 800a57e:	6804      	ldr	r4, [r0, #0]
 800a580:	fa03 f506 	lsl.w	r5, r3, r6
 800a584:	432c      	orrs	r4, r5
 800a586:	40d3      	lsrs	r3, r2
 800a588:	6004      	str	r4, [r0, #0]
 800a58a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a58e:	4288      	cmp	r0, r1
 800a590:	d3f4      	bcc.n	800a57c <L_shift+0xc>
 800a592:	bd70      	pop	{r4, r5, r6, pc}

0800a594 <__match>:
 800a594:	b530      	push	{r4, r5, lr}
 800a596:	6803      	ldr	r3, [r0, #0]
 800a598:	3301      	adds	r3, #1
 800a59a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a59e:	b914      	cbnz	r4, 800a5a6 <__match+0x12>
 800a5a0:	6003      	str	r3, [r0, #0]
 800a5a2:	2001      	movs	r0, #1
 800a5a4:	bd30      	pop	{r4, r5, pc}
 800a5a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a5ae:	2d19      	cmp	r5, #25
 800a5b0:	bf98      	it	ls
 800a5b2:	3220      	addls	r2, #32
 800a5b4:	42a2      	cmp	r2, r4
 800a5b6:	d0f0      	beq.n	800a59a <__match+0x6>
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	e7f3      	b.n	800a5a4 <__match+0x10>

0800a5bc <__hexnan>:
 800a5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c0:	2500      	movs	r5, #0
 800a5c2:	680b      	ldr	r3, [r1, #0]
 800a5c4:	4682      	mov	sl, r0
 800a5c6:	115f      	asrs	r7, r3, #5
 800a5c8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a5cc:	f013 031f 	ands.w	r3, r3, #31
 800a5d0:	bf18      	it	ne
 800a5d2:	3704      	addne	r7, #4
 800a5d4:	1f3e      	subs	r6, r7, #4
 800a5d6:	4690      	mov	r8, r2
 800a5d8:	46b1      	mov	r9, r6
 800a5da:	4634      	mov	r4, r6
 800a5dc:	46ab      	mov	fp, r5
 800a5de:	b087      	sub	sp, #28
 800a5e0:	6801      	ldr	r1, [r0, #0]
 800a5e2:	9301      	str	r3, [sp, #4]
 800a5e4:	f847 5c04 	str.w	r5, [r7, #-4]
 800a5e8:	9502      	str	r5, [sp, #8]
 800a5ea:	784a      	ldrb	r2, [r1, #1]
 800a5ec:	1c4b      	adds	r3, r1, #1
 800a5ee:	9303      	str	r3, [sp, #12]
 800a5f0:	b342      	cbz	r2, 800a644 <__hexnan+0x88>
 800a5f2:	4610      	mov	r0, r2
 800a5f4:	9105      	str	r1, [sp, #20]
 800a5f6:	9204      	str	r2, [sp, #16]
 800a5f8:	f7ff fd83 	bl	800a102 <__hexdig_fun>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d143      	bne.n	800a688 <__hexnan+0xcc>
 800a600:	9a04      	ldr	r2, [sp, #16]
 800a602:	9905      	ldr	r1, [sp, #20]
 800a604:	2a20      	cmp	r2, #32
 800a606:	d818      	bhi.n	800a63a <__hexnan+0x7e>
 800a608:	9b02      	ldr	r3, [sp, #8]
 800a60a:	459b      	cmp	fp, r3
 800a60c:	dd13      	ble.n	800a636 <__hexnan+0x7a>
 800a60e:	454c      	cmp	r4, r9
 800a610:	d206      	bcs.n	800a620 <__hexnan+0x64>
 800a612:	2d07      	cmp	r5, #7
 800a614:	dc04      	bgt.n	800a620 <__hexnan+0x64>
 800a616:	462a      	mov	r2, r5
 800a618:	4649      	mov	r1, r9
 800a61a:	4620      	mov	r0, r4
 800a61c:	f7ff ffa8 	bl	800a570 <L_shift>
 800a620:	4544      	cmp	r4, r8
 800a622:	d944      	bls.n	800a6ae <__hexnan+0xf2>
 800a624:	2300      	movs	r3, #0
 800a626:	f1a4 0904 	sub.w	r9, r4, #4
 800a62a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a62e:	461d      	mov	r5, r3
 800a630:	464c      	mov	r4, r9
 800a632:	f8cd b008 	str.w	fp, [sp, #8]
 800a636:	9903      	ldr	r1, [sp, #12]
 800a638:	e7d7      	b.n	800a5ea <__hexnan+0x2e>
 800a63a:	2a29      	cmp	r2, #41	; 0x29
 800a63c:	d14a      	bne.n	800a6d4 <__hexnan+0x118>
 800a63e:	3102      	adds	r1, #2
 800a640:	f8ca 1000 	str.w	r1, [sl]
 800a644:	f1bb 0f00 	cmp.w	fp, #0
 800a648:	d044      	beq.n	800a6d4 <__hexnan+0x118>
 800a64a:	454c      	cmp	r4, r9
 800a64c:	d206      	bcs.n	800a65c <__hexnan+0xa0>
 800a64e:	2d07      	cmp	r5, #7
 800a650:	dc04      	bgt.n	800a65c <__hexnan+0xa0>
 800a652:	462a      	mov	r2, r5
 800a654:	4649      	mov	r1, r9
 800a656:	4620      	mov	r0, r4
 800a658:	f7ff ff8a 	bl	800a570 <L_shift>
 800a65c:	4544      	cmp	r4, r8
 800a65e:	d928      	bls.n	800a6b2 <__hexnan+0xf6>
 800a660:	4643      	mov	r3, r8
 800a662:	f854 2b04 	ldr.w	r2, [r4], #4
 800a666:	42a6      	cmp	r6, r4
 800a668:	f843 2b04 	str.w	r2, [r3], #4
 800a66c:	d2f9      	bcs.n	800a662 <__hexnan+0xa6>
 800a66e:	2200      	movs	r2, #0
 800a670:	f843 2b04 	str.w	r2, [r3], #4
 800a674:	429e      	cmp	r6, r3
 800a676:	d2fb      	bcs.n	800a670 <__hexnan+0xb4>
 800a678:	6833      	ldr	r3, [r6, #0]
 800a67a:	b91b      	cbnz	r3, 800a684 <__hexnan+0xc8>
 800a67c:	4546      	cmp	r6, r8
 800a67e:	d127      	bne.n	800a6d0 <__hexnan+0x114>
 800a680:	2301      	movs	r3, #1
 800a682:	6033      	str	r3, [r6, #0]
 800a684:	2005      	movs	r0, #5
 800a686:	e026      	b.n	800a6d6 <__hexnan+0x11a>
 800a688:	3501      	adds	r5, #1
 800a68a:	2d08      	cmp	r5, #8
 800a68c:	f10b 0b01 	add.w	fp, fp, #1
 800a690:	dd06      	ble.n	800a6a0 <__hexnan+0xe4>
 800a692:	4544      	cmp	r4, r8
 800a694:	d9cf      	bls.n	800a636 <__hexnan+0x7a>
 800a696:	2300      	movs	r3, #0
 800a698:	2501      	movs	r5, #1
 800a69a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a69e:	3c04      	subs	r4, #4
 800a6a0:	6822      	ldr	r2, [r4, #0]
 800a6a2:	f000 000f 	and.w	r0, r0, #15
 800a6a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a6aa:	6020      	str	r0, [r4, #0]
 800a6ac:	e7c3      	b.n	800a636 <__hexnan+0x7a>
 800a6ae:	2508      	movs	r5, #8
 800a6b0:	e7c1      	b.n	800a636 <__hexnan+0x7a>
 800a6b2:	9b01      	ldr	r3, [sp, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d0df      	beq.n	800a678 <__hexnan+0xbc>
 800a6b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6bc:	f1c3 0320 	rsb	r3, r3, #32
 800a6c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6c4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a6c8:	401a      	ands	r2, r3
 800a6ca:	f847 2c04 	str.w	r2, [r7, #-4]
 800a6ce:	e7d3      	b.n	800a678 <__hexnan+0xbc>
 800a6d0:	3e04      	subs	r6, #4
 800a6d2:	e7d1      	b.n	800a678 <__hexnan+0xbc>
 800a6d4:	2004      	movs	r0, #4
 800a6d6:	b007      	add	sp, #28
 800a6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a6dc <__locale_ctype_ptr_l>:
 800a6dc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a6e0:	4770      	bx	lr

0800a6e2 <__localeconv_l>:
 800a6e2:	30f0      	adds	r0, #240	; 0xf0
 800a6e4:	4770      	bx	lr
	...

0800a6e8 <_localeconv_r>:
 800a6e8:	4b04      	ldr	r3, [pc, #16]	; (800a6fc <_localeconv_r+0x14>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	6a18      	ldr	r0, [r3, #32]
 800a6ee:	4b04      	ldr	r3, [pc, #16]	; (800a700 <_localeconv_r+0x18>)
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	bf08      	it	eq
 800a6f4:	4618      	moveq	r0, r3
 800a6f6:	30f0      	adds	r0, #240	; 0xf0
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	2000017c 	.word	0x2000017c
 800a700:	200001e0 	.word	0x200001e0

0800a704 <malloc>:
 800a704:	4b02      	ldr	r3, [pc, #8]	; (800a710 <malloc+0xc>)
 800a706:	4601      	mov	r1, r0
 800a708:	6818      	ldr	r0, [r3, #0]
 800a70a:	f000 bc81 	b.w	800b010 <_malloc_r>
 800a70e:	bf00      	nop
 800a710:	2000017c 	.word	0x2000017c

0800a714 <__ascii_mbtowc>:
 800a714:	b082      	sub	sp, #8
 800a716:	b901      	cbnz	r1, 800a71a <__ascii_mbtowc+0x6>
 800a718:	a901      	add	r1, sp, #4
 800a71a:	b142      	cbz	r2, 800a72e <__ascii_mbtowc+0x1a>
 800a71c:	b14b      	cbz	r3, 800a732 <__ascii_mbtowc+0x1e>
 800a71e:	7813      	ldrb	r3, [r2, #0]
 800a720:	600b      	str	r3, [r1, #0]
 800a722:	7812      	ldrb	r2, [r2, #0]
 800a724:	1c10      	adds	r0, r2, #0
 800a726:	bf18      	it	ne
 800a728:	2001      	movne	r0, #1
 800a72a:	b002      	add	sp, #8
 800a72c:	4770      	bx	lr
 800a72e:	4610      	mov	r0, r2
 800a730:	e7fb      	b.n	800a72a <__ascii_mbtowc+0x16>
 800a732:	f06f 0001 	mvn.w	r0, #1
 800a736:	e7f8      	b.n	800a72a <__ascii_mbtowc+0x16>

0800a738 <memchr>:
 800a738:	b510      	push	{r4, lr}
 800a73a:	b2c9      	uxtb	r1, r1
 800a73c:	4402      	add	r2, r0
 800a73e:	4290      	cmp	r0, r2
 800a740:	4603      	mov	r3, r0
 800a742:	d101      	bne.n	800a748 <memchr+0x10>
 800a744:	2300      	movs	r3, #0
 800a746:	e003      	b.n	800a750 <memchr+0x18>
 800a748:	781c      	ldrb	r4, [r3, #0]
 800a74a:	3001      	adds	r0, #1
 800a74c:	428c      	cmp	r4, r1
 800a74e:	d1f6      	bne.n	800a73e <memchr+0x6>
 800a750:	4618      	mov	r0, r3
 800a752:	bd10      	pop	{r4, pc}

0800a754 <memcpy>:
 800a754:	b510      	push	{r4, lr}
 800a756:	1e43      	subs	r3, r0, #1
 800a758:	440a      	add	r2, r1
 800a75a:	4291      	cmp	r1, r2
 800a75c:	d100      	bne.n	800a760 <memcpy+0xc>
 800a75e:	bd10      	pop	{r4, pc}
 800a760:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a764:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a768:	e7f7      	b.n	800a75a <memcpy+0x6>

0800a76a <_Balloc>:
 800a76a:	b570      	push	{r4, r5, r6, lr}
 800a76c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a76e:	4604      	mov	r4, r0
 800a770:	460e      	mov	r6, r1
 800a772:	b93d      	cbnz	r5, 800a784 <_Balloc+0x1a>
 800a774:	2010      	movs	r0, #16
 800a776:	f7ff ffc5 	bl	800a704 <malloc>
 800a77a:	6260      	str	r0, [r4, #36]	; 0x24
 800a77c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a780:	6005      	str	r5, [r0, #0]
 800a782:	60c5      	str	r5, [r0, #12]
 800a784:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a786:	68eb      	ldr	r3, [r5, #12]
 800a788:	b183      	cbz	r3, 800a7ac <_Balloc+0x42>
 800a78a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a792:	b9b8      	cbnz	r0, 800a7c4 <_Balloc+0x5a>
 800a794:	2101      	movs	r1, #1
 800a796:	fa01 f506 	lsl.w	r5, r1, r6
 800a79a:	1d6a      	adds	r2, r5, #5
 800a79c:	0092      	lsls	r2, r2, #2
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f000 fbdc 	bl	800af5c <_calloc_r>
 800a7a4:	b160      	cbz	r0, 800a7c0 <_Balloc+0x56>
 800a7a6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a7aa:	e00e      	b.n	800a7ca <_Balloc+0x60>
 800a7ac:	2221      	movs	r2, #33	; 0x21
 800a7ae:	2104      	movs	r1, #4
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f000 fbd3 	bl	800af5c <_calloc_r>
 800a7b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7b8:	60e8      	str	r0, [r5, #12]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1e4      	bne.n	800a78a <_Balloc+0x20>
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	bd70      	pop	{r4, r5, r6, pc}
 800a7c4:	6802      	ldr	r2, [r0, #0]
 800a7c6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7d0:	e7f7      	b.n	800a7c2 <_Balloc+0x58>

0800a7d2 <_Bfree>:
 800a7d2:	b570      	push	{r4, r5, r6, lr}
 800a7d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a7d6:	4606      	mov	r6, r0
 800a7d8:	460d      	mov	r5, r1
 800a7da:	b93c      	cbnz	r4, 800a7ec <_Bfree+0x1a>
 800a7dc:	2010      	movs	r0, #16
 800a7de:	f7ff ff91 	bl	800a704 <malloc>
 800a7e2:	6270      	str	r0, [r6, #36]	; 0x24
 800a7e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7e8:	6004      	str	r4, [r0, #0]
 800a7ea:	60c4      	str	r4, [r0, #12]
 800a7ec:	b13d      	cbz	r5, 800a7fe <_Bfree+0x2c>
 800a7ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a7f0:	686a      	ldr	r2, [r5, #4]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7f8:	6029      	str	r1, [r5, #0]
 800a7fa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a7fe:	bd70      	pop	{r4, r5, r6, pc}

0800a800 <__multadd>:
 800a800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a804:	461f      	mov	r7, r3
 800a806:	4606      	mov	r6, r0
 800a808:	460c      	mov	r4, r1
 800a80a:	2300      	movs	r3, #0
 800a80c:	690d      	ldr	r5, [r1, #16]
 800a80e:	f101 0c14 	add.w	ip, r1, #20
 800a812:	f8dc 0000 	ldr.w	r0, [ip]
 800a816:	3301      	adds	r3, #1
 800a818:	b281      	uxth	r1, r0
 800a81a:	fb02 7101 	mla	r1, r2, r1, r7
 800a81e:	0c00      	lsrs	r0, r0, #16
 800a820:	0c0f      	lsrs	r7, r1, #16
 800a822:	fb02 7000 	mla	r0, r2, r0, r7
 800a826:	b289      	uxth	r1, r1
 800a828:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a82c:	429d      	cmp	r5, r3
 800a82e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a832:	f84c 1b04 	str.w	r1, [ip], #4
 800a836:	dcec      	bgt.n	800a812 <__multadd+0x12>
 800a838:	b1d7      	cbz	r7, 800a870 <__multadd+0x70>
 800a83a:	68a3      	ldr	r3, [r4, #8]
 800a83c:	42ab      	cmp	r3, r5
 800a83e:	dc12      	bgt.n	800a866 <__multadd+0x66>
 800a840:	6861      	ldr	r1, [r4, #4]
 800a842:	4630      	mov	r0, r6
 800a844:	3101      	adds	r1, #1
 800a846:	f7ff ff90 	bl	800a76a <_Balloc>
 800a84a:	4680      	mov	r8, r0
 800a84c:	6922      	ldr	r2, [r4, #16]
 800a84e:	f104 010c 	add.w	r1, r4, #12
 800a852:	3202      	adds	r2, #2
 800a854:	0092      	lsls	r2, r2, #2
 800a856:	300c      	adds	r0, #12
 800a858:	f7ff ff7c 	bl	800a754 <memcpy>
 800a85c:	4621      	mov	r1, r4
 800a85e:	4630      	mov	r0, r6
 800a860:	f7ff ffb7 	bl	800a7d2 <_Bfree>
 800a864:	4644      	mov	r4, r8
 800a866:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a86a:	3501      	adds	r5, #1
 800a86c:	615f      	str	r7, [r3, #20]
 800a86e:	6125      	str	r5, [r4, #16]
 800a870:	4620      	mov	r0, r4
 800a872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a876 <__s2b>:
 800a876:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a87a:	4615      	mov	r5, r2
 800a87c:	2209      	movs	r2, #9
 800a87e:	461f      	mov	r7, r3
 800a880:	3308      	adds	r3, #8
 800a882:	460c      	mov	r4, r1
 800a884:	fb93 f3f2 	sdiv	r3, r3, r2
 800a888:	4606      	mov	r6, r0
 800a88a:	2201      	movs	r2, #1
 800a88c:	2100      	movs	r1, #0
 800a88e:	429a      	cmp	r2, r3
 800a890:	db20      	blt.n	800a8d4 <__s2b+0x5e>
 800a892:	4630      	mov	r0, r6
 800a894:	f7ff ff69 	bl	800a76a <_Balloc>
 800a898:	9b08      	ldr	r3, [sp, #32]
 800a89a:	2d09      	cmp	r5, #9
 800a89c:	6143      	str	r3, [r0, #20]
 800a89e:	f04f 0301 	mov.w	r3, #1
 800a8a2:	6103      	str	r3, [r0, #16]
 800a8a4:	dd19      	ble.n	800a8da <__s2b+0x64>
 800a8a6:	f104 0809 	add.w	r8, r4, #9
 800a8aa:	46c1      	mov	r9, r8
 800a8ac:	442c      	add	r4, r5
 800a8ae:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a8b2:	4601      	mov	r1, r0
 800a8b4:	3b30      	subs	r3, #48	; 0x30
 800a8b6:	220a      	movs	r2, #10
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	f7ff ffa1 	bl	800a800 <__multadd>
 800a8be:	45a1      	cmp	r9, r4
 800a8c0:	d1f5      	bne.n	800a8ae <__s2b+0x38>
 800a8c2:	eb08 0405 	add.w	r4, r8, r5
 800a8c6:	3c08      	subs	r4, #8
 800a8c8:	1b2d      	subs	r5, r5, r4
 800a8ca:	1963      	adds	r3, r4, r5
 800a8cc:	42bb      	cmp	r3, r7
 800a8ce:	db07      	blt.n	800a8e0 <__s2b+0x6a>
 800a8d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8d4:	0052      	lsls	r2, r2, #1
 800a8d6:	3101      	adds	r1, #1
 800a8d8:	e7d9      	b.n	800a88e <__s2b+0x18>
 800a8da:	340a      	adds	r4, #10
 800a8dc:	2509      	movs	r5, #9
 800a8de:	e7f3      	b.n	800a8c8 <__s2b+0x52>
 800a8e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a8e4:	4601      	mov	r1, r0
 800a8e6:	3b30      	subs	r3, #48	; 0x30
 800a8e8:	220a      	movs	r2, #10
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	f7ff ff88 	bl	800a800 <__multadd>
 800a8f0:	e7eb      	b.n	800a8ca <__s2b+0x54>

0800a8f2 <__hi0bits>:
 800a8f2:	0c02      	lsrs	r2, r0, #16
 800a8f4:	0412      	lsls	r2, r2, #16
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	b9b2      	cbnz	r2, 800a928 <__hi0bits+0x36>
 800a8fa:	0403      	lsls	r3, r0, #16
 800a8fc:	2010      	movs	r0, #16
 800a8fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a902:	bf04      	itt	eq
 800a904:	021b      	lsleq	r3, r3, #8
 800a906:	3008      	addeq	r0, #8
 800a908:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a90c:	bf04      	itt	eq
 800a90e:	011b      	lsleq	r3, r3, #4
 800a910:	3004      	addeq	r0, #4
 800a912:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a916:	bf04      	itt	eq
 800a918:	009b      	lsleq	r3, r3, #2
 800a91a:	3002      	addeq	r0, #2
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	db06      	blt.n	800a92e <__hi0bits+0x3c>
 800a920:	005b      	lsls	r3, r3, #1
 800a922:	d503      	bpl.n	800a92c <__hi0bits+0x3a>
 800a924:	3001      	adds	r0, #1
 800a926:	4770      	bx	lr
 800a928:	2000      	movs	r0, #0
 800a92a:	e7e8      	b.n	800a8fe <__hi0bits+0xc>
 800a92c:	2020      	movs	r0, #32
 800a92e:	4770      	bx	lr

0800a930 <__lo0bits>:
 800a930:	6803      	ldr	r3, [r0, #0]
 800a932:	4601      	mov	r1, r0
 800a934:	f013 0207 	ands.w	r2, r3, #7
 800a938:	d00b      	beq.n	800a952 <__lo0bits+0x22>
 800a93a:	07da      	lsls	r2, r3, #31
 800a93c:	d423      	bmi.n	800a986 <__lo0bits+0x56>
 800a93e:	0798      	lsls	r0, r3, #30
 800a940:	bf49      	itett	mi
 800a942:	085b      	lsrmi	r3, r3, #1
 800a944:	089b      	lsrpl	r3, r3, #2
 800a946:	2001      	movmi	r0, #1
 800a948:	600b      	strmi	r3, [r1, #0]
 800a94a:	bf5c      	itt	pl
 800a94c:	600b      	strpl	r3, [r1, #0]
 800a94e:	2002      	movpl	r0, #2
 800a950:	4770      	bx	lr
 800a952:	b298      	uxth	r0, r3
 800a954:	b9a8      	cbnz	r0, 800a982 <__lo0bits+0x52>
 800a956:	2010      	movs	r0, #16
 800a958:	0c1b      	lsrs	r3, r3, #16
 800a95a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a95e:	bf04      	itt	eq
 800a960:	0a1b      	lsreq	r3, r3, #8
 800a962:	3008      	addeq	r0, #8
 800a964:	071a      	lsls	r2, r3, #28
 800a966:	bf04      	itt	eq
 800a968:	091b      	lsreq	r3, r3, #4
 800a96a:	3004      	addeq	r0, #4
 800a96c:	079a      	lsls	r2, r3, #30
 800a96e:	bf04      	itt	eq
 800a970:	089b      	lsreq	r3, r3, #2
 800a972:	3002      	addeq	r0, #2
 800a974:	07da      	lsls	r2, r3, #31
 800a976:	d402      	bmi.n	800a97e <__lo0bits+0x4e>
 800a978:	085b      	lsrs	r3, r3, #1
 800a97a:	d006      	beq.n	800a98a <__lo0bits+0x5a>
 800a97c:	3001      	adds	r0, #1
 800a97e:	600b      	str	r3, [r1, #0]
 800a980:	4770      	bx	lr
 800a982:	4610      	mov	r0, r2
 800a984:	e7e9      	b.n	800a95a <__lo0bits+0x2a>
 800a986:	2000      	movs	r0, #0
 800a988:	4770      	bx	lr
 800a98a:	2020      	movs	r0, #32
 800a98c:	4770      	bx	lr

0800a98e <__i2b>:
 800a98e:	b510      	push	{r4, lr}
 800a990:	460c      	mov	r4, r1
 800a992:	2101      	movs	r1, #1
 800a994:	f7ff fee9 	bl	800a76a <_Balloc>
 800a998:	2201      	movs	r2, #1
 800a99a:	6144      	str	r4, [r0, #20]
 800a99c:	6102      	str	r2, [r0, #16]
 800a99e:	bd10      	pop	{r4, pc}

0800a9a0 <__multiply>:
 800a9a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a4:	4614      	mov	r4, r2
 800a9a6:	690a      	ldr	r2, [r1, #16]
 800a9a8:	6923      	ldr	r3, [r4, #16]
 800a9aa:	4688      	mov	r8, r1
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	bfbe      	ittt	lt
 800a9b0:	460b      	movlt	r3, r1
 800a9b2:	46a0      	movlt	r8, r4
 800a9b4:	461c      	movlt	r4, r3
 800a9b6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a9ba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a9be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a9c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a9c6:	eb07 0609 	add.w	r6, r7, r9
 800a9ca:	42b3      	cmp	r3, r6
 800a9cc:	bfb8      	it	lt
 800a9ce:	3101      	addlt	r1, #1
 800a9d0:	f7ff fecb 	bl	800a76a <_Balloc>
 800a9d4:	f100 0514 	add.w	r5, r0, #20
 800a9d8:	462b      	mov	r3, r5
 800a9da:	2200      	movs	r2, #0
 800a9dc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a9e0:	4573      	cmp	r3, lr
 800a9e2:	d316      	bcc.n	800aa12 <__multiply+0x72>
 800a9e4:	f104 0214 	add.w	r2, r4, #20
 800a9e8:	f108 0114 	add.w	r1, r8, #20
 800a9ec:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a9f0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	9b00      	ldr	r3, [sp, #0]
 800a9f8:	9201      	str	r2, [sp, #4]
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d80c      	bhi.n	800aa18 <__multiply+0x78>
 800a9fe:	2e00      	cmp	r6, #0
 800aa00:	dd03      	ble.n	800aa0a <__multiply+0x6a>
 800aa02:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d05d      	beq.n	800aac6 <__multiply+0x126>
 800aa0a:	6106      	str	r6, [r0, #16]
 800aa0c:	b003      	add	sp, #12
 800aa0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa12:	f843 2b04 	str.w	r2, [r3], #4
 800aa16:	e7e3      	b.n	800a9e0 <__multiply+0x40>
 800aa18:	f8b2 b000 	ldrh.w	fp, [r2]
 800aa1c:	f1bb 0f00 	cmp.w	fp, #0
 800aa20:	d023      	beq.n	800aa6a <__multiply+0xca>
 800aa22:	4689      	mov	r9, r1
 800aa24:	46ac      	mov	ip, r5
 800aa26:	f04f 0800 	mov.w	r8, #0
 800aa2a:	f859 4b04 	ldr.w	r4, [r9], #4
 800aa2e:	f8dc a000 	ldr.w	sl, [ip]
 800aa32:	b2a3      	uxth	r3, r4
 800aa34:	fa1f fa8a 	uxth.w	sl, sl
 800aa38:	fb0b a303 	mla	r3, fp, r3, sl
 800aa3c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aa40:	f8dc 4000 	ldr.w	r4, [ip]
 800aa44:	4443      	add	r3, r8
 800aa46:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aa4a:	fb0b 840a 	mla	r4, fp, sl, r8
 800aa4e:	46e2      	mov	sl, ip
 800aa50:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aa5a:	454f      	cmp	r7, r9
 800aa5c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aa60:	f84a 3b04 	str.w	r3, [sl], #4
 800aa64:	d82b      	bhi.n	800aabe <__multiply+0x11e>
 800aa66:	f8cc 8004 	str.w	r8, [ip, #4]
 800aa6a:	9b01      	ldr	r3, [sp, #4]
 800aa6c:	3204      	adds	r2, #4
 800aa6e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800aa72:	f1ba 0f00 	cmp.w	sl, #0
 800aa76:	d020      	beq.n	800aaba <__multiply+0x11a>
 800aa78:	4689      	mov	r9, r1
 800aa7a:	46a8      	mov	r8, r5
 800aa7c:	f04f 0b00 	mov.w	fp, #0
 800aa80:	682b      	ldr	r3, [r5, #0]
 800aa82:	f8b9 c000 	ldrh.w	ip, [r9]
 800aa86:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	fb0a 440c 	mla	r4, sl, ip, r4
 800aa90:	46c4      	mov	ip, r8
 800aa92:	445c      	add	r4, fp
 800aa94:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aa98:	f84c 3b04 	str.w	r3, [ip], #4
 800aa9c:	f859 3b04 	ldr.w	r3, [r9], #4
 800aaa0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800aaa4:	0c1b      	lsrs	r3, r3, #16
 800aaa6:	fb0a b303 	mla	r3, sl, r3, fp
 800aaaa:	454f      	cmp	r7, r9
 800aaac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800aab0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800aab4:	d805      	bhi.n	800aac2 <__multiply+0x122>
 800aab6:	f8c8 3004 	str.w	r3, [r8, #4]
 800aaba:	3504      	adds	r5, #4
 800aabc:	e79b      	b.n	800a9f6 <__multiply+0x56>
 800aabe:	46d4      	mov	ip, sl
 800aac0:	e7b3      	b.n	800aa2a <__multiply+0x8a>
 800aac2:	46e0      	mov	r8, ip
 800aac4:	e7dd      	b.n	800aa82 <__multiply+0xe2>
 800aac6:	3e01      	subs	r6, #1
 800aac8:	e799      	b.n	800a9fe <__multiply+0x5e>
	...

0800aacc <__pow5mult>:
 800aacc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aad0:	4615      	mov	r5, r2
 800aad2:	f012 0203 	ands.w	r2, r2, #3
 800aad6:	4606      	mov	r6, r0
 800aad8:	460f      	mov	r7, r1
 800aada:	d007      	beq.n	800aaec <__pow5mult+0x20>
 800aadc:	4c21      	ldr	r4, [pc, #132]	; (800ab64 <__pow5mult+0x98>)
 800aade:	3a01      	subs	r2, #1
 800aae0:	2300      	movs	r3, #0
 800aae2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aae6:	f7ff fe8b 	bl	800a800 <__multadd>
 800aaea:	4607      	mov	r7, r0
 800aaec:	10ad      	asrs	r5, r5, #2
 800aaee:	d035      	beq.n	800ab5c <__pow5mult+0x90>
 800aaf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aaf2:	b93c      	cbnz	r4, 800ab04 <__pow5mult+0x38>
 800aaf4:	2010      	movs	r0, #16
 800aaf6:	f7ff fe05 	bl	800a704 <malloc>
 800aafa:	6270      	str	r0, [r6, #36]	; 0x24
 800aafc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab00:	6004      	str	r4, [r0, #0]
 800ab02:	60c4      	str	r4, [r0, #12]
 800ab04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab0c:	b94c      	cbnz	r4, 800ab22 <__pow5mult+0x56>
 800ab0e:	f240 2171 	movw	r1, #625	; 0x271
 800ab12:	4630      	mov	r0, r6
 800ab14:	f7ff ff3b 	bl	800a98e <__i2b>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab20:	6003      	str	r3, [r0, #0]
 800ab22:	f04f 0800 	mov.w	r8, #0
 800ab26:	07eb      	lsls	r3, r5, #31
 800ab28:	d50a      	bpl.n	800ab40 <__pow5mult+0x74>
 800ab2a:	4639      	mov	r1, r7
 800ab2c:	4622      	mov	r2, r4
 800ab2e:	4630      	mov	r0, r6
 800ab30:	f7ff ff36 	bl	800a9a0 <__multiply>
 800ab34:	4681      	mov	r9, r0
 800ab36:	4639      	mov	r1, r7
 800ab38:	4630      	mov	r0, r6
 800ab3a:	f7ff fe4a 	bl	800a7d2 <_Bfree>
 800ab3e:	464f      	mov	r7, r9
 800ab40:	106d      	asrs	r5, r5, #1
 800ab42:	d00b      	beq.n	800ab5c <__pow5mult+0x90>
 800ab44:	6820      	ldr	r0, [r4, #0]
 800ab46:	b938      	cbnz	r0, 800ab58 <__pow5mult+0x8c>
 800ab48:	4622      	mov	r2, r4
 800ab4a:	4621      	mov	r1, r4
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	f7ff ff27 	bl	800a9a0 <__multiply>
 800ab52:	6020      	str	r0, [r4, #0]
 800ab54:	f8c0 8000 	str.w	r8, [r0]
 800ab58:	4604      	mov	r4, r0
 800ab5a:	e7e4      	b.n	800ab26 <__pow5mult+0x5a>
 800ab5c:	4638      	mov	r0, r7
 800ab5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab62:	bf00      	nop
 800ab64:	0800be68 	.word	0x0800be68

0800ab68 <__lshift>:
 800ab68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab6c:	460c      	mov	r4, r1
 800ab6e:	4607      	mov	r7, r0
 800ab70:	4616      	mov	r6, r2
 800ab72:	6923      	ldr	r3, [r4, #16]
 800ab74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab78:	eb0a 0903 	add.w	r9, sl, r3
 800ab7c:	6849      	ldr	r1, [r1, #4]
 800ab7e:	68a3      	ldr	r3, [r4, #8]
 800ab80:	f109 0501 	add.w	r5, r9, #1
 800ab84:	42ab      	cmp	r3, r5
 800ab86:	db32      	blt.n	800abee <__lshift+0x86>
 800ab88:	4638      	mov	r0, r7
 800ab8a:	f7ff fdee 	bl	800a76a <_Balloc>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	4680      	mov	r8, r0
 800ab92:	461a      	mov	r2, r3
 800ab94:	f100 0114 	add.w	r1, r0, #20
 800ab98:	4553      	cmp	r3, sl
 800ab9a:	db2b      	blt.n	800abf4 <__lshift+0x8c>
 800ab9c:	6920      	ldr	r0, [r4, #16]
 800ab9e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aba2:	f104 0314 	add.w	r3, r4, #20
 800aba6:	f016 021f 	ands.w	r2, r6, #31
 800abaa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abb2:	d025      	beq.n	800ac00 <__lshift+0x98>
 800abb4:	2000      	movs	r0, #0
 800abb6:	f1c2 0e20 	rsb	lr, r2, #32
 800abba:	468a      	mov	sl, r1
 800abbc:	681e      	ldr	r6, [r3, #0]
 800abbe:	4096      	lsls	r6, r2
 800abc0:	4330      	orrs	r0, r6
 800abc2:	f84a 0b04 	str.w	r0, [sl], #4
 800abc6:	f853 0b04 	ldr.w	r0, [r3], #4
 800abca:	459c      	cmp	ip, r3
 800abcc:	fa20 f00e 	lsr.w	r0, r0, lr
 800abd0:	d814      	bhi.n	800abfc <__lshift+0x94>
 800abd2:	6048      	str	r0, [r1, #4]
 800abd4:	b108      	cbz	r0, 800abda <__lshift+0x72>
 800abd6:	f109 0502 	add.w	r5, r9, #2
 800abda:	3d01      	subs	r5, #1
 800abdc:	4638      	mov	r0, r7
 800abde:	f8c8 5010 	str.w	r5, [r8, #16]
 800abe2:	4621      	mov	r1, r4
 800abe4:	f7ff fdf5 	bl	800a7d2 <_Bfree>
 800abe8:	4640      	mov	r0, r8
 800abea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abee:	3101      	adds	r1, #1
 800abf0:	005b      	lsls	r3, r3, #1
 800abf2:	e7c7      	b.n	800ab84 <__lshift+0x1c>
 800abf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800abf8:	3301      	adds	r3, #1
 800abfa:	e7cd      	b.n	800ab98 <__lshift+0x30>
 800abfc:	4651      	mov	r1, sl
 800abfe:	e7dc      	b.n	800abba <__lshift+0x52>
 800ac00:	3904      	subs	r1, #4
 800ac02:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac06:	459c      	cmp	ip, r3
 800ac08:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac0c:	d8f9      	bhi.n	800ac02 <__lshift+0x9a>
 800ac0e:	e7e4      	b.n	800abda <__lshift+0x72>

0800ac10 <__mcmp>:
 800ac10:	6903      	ldr	r3, [r0, #16]
 800ac12:	690a      	ldr	r2, [r1, #16]
 800ac14:	b530      	push	{r4, r5, lr}
 800ac16:	1a9b      	subs	r3, r3, r2
 800ac18:	d10c      	bne.n	800ac34 <__mcmp+0x24>
 800ac1a:	0092      	lsls	r2, r2, #2
 800ac1c:	3014      	adds	r0, #20
 800ac1e:	3114      	adds	r1, #20
 800ac20:	1884      	adds	r4, r0, r2
 800ac22:	4411      	add	r1, r2
 800ac24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac2c:	4295      	cmp	r5, r2
 800ac2e:	d003      	beq.n	800ac38 <__mcmp+0x28>
 800ac30:	d305      	bcc.n	800ac3e <__mcmp+0x2e>
 800ac32:	2301      	movs	r3, #1
 800ac34:	4618      	mov	r0, r3
 800ac36:	bd30      	pop	{r4, r5, pc}
 800ac38:	42a0      	cmp	r0, r4
 800ac3a:	d3f3      	bcc.n	800ac24 <__mcmp+0x14>
 800ac3c:	e7fa      	b.n	800ac34 <__mcmp+0x24>
 800ac3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac42:	e7f7      	b.n	800ac34 <__mcmp+0x24>

0800ac44 <__mdiff>:
 800ac44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac48:	460d      	mov	r5, r1
 800ac4a:	4607      	mov	r7, r0
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	4628      	mov	r0, r5
 800ac50:	4614      	mov	r4, r2
 800ac52:	f7ff ffdd 	bl	800ac10 <__mcmp>
 800ac56:	1e06      	subs	r6, r0, #0
 800ac58:	d108      	bne.n	800ac6c <__mdiff+0x28>
 800ac5a:	4631      	mov	r1, r6
 800ac5c:	4638      	mov	r0, r7
 800ac5e:	f7ff fd84 	bl	800a76a <_Balloc>
 800ac62:	2301      	movs	r3, #1
 800ac64:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ac68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6c:	bfa4      	itt	ge
 800ac6e:	4623      	movge	r3, r4
 800ac70:	462c      	movge	r4, r5
 800ac72:	4638      	mov	r0, r7
 800ac74:	6861      	ldr	r1, [r4, #4]
 800ac76:	bfa6      	itte	ge
 800ac78:	461d      	movge	r5, r3
 800ac7a:	2600      	movge	r6, #0
 800ac7c:	2601      	movlt	r6, #1
 800ac7e:	f7ff fd74 	bl	800a76a <_Balloc>
 800ac82:	f04f 0e00 	mov.w	lr, #0
 800ac86:	60c6      	str	r6, [r0, #12]
 800ac88:	692b      	ldr	r3, [r5, #16]
 800ac8a:	6926      	ldr	r6, [r4, #16]
 800ac8c:	f104 0214 	add.w	r2, r4, #20
 800ac90:	f105 0914 	add.w	r9, r5, #20
 800ac94:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ac98:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ac9c:	f100 0114 	add.w	r1, r0, #20
 800aca0:	f852 ab04 	ldr.w	sl, [r2], #4
 800aca4:	f859 5b04 	ldr.w	r5, [r9], #4
 800aca8:	fa1f f38a 	uxth.w	r3, sl
 800acac:	4473      	add	r3, lr
 800acae:	b2ac      	uxth	r4, r5
 800acb0:	1b1b      	subs	r3, r3, r4
 800acb2:	0c2c      	lsrs	r4, r5, #16
 800acb4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800acb8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800acc2:	45c8      	cmp	r8, r9
 800acc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800acc8:	4694      	mov	ip, r2
 800acca:	f841 4b04 	str.w	r4, [r1], #4
 800acce:	d8e7      	bhi.n	800aca0 <__mdiff+0x5c>
 800acd0:	45bc      	cmp	ip, r7
 800acd2:	d304      	bcc.n	800acde <__mdiff+0x9a>
 800acd4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800acd8:	b183      	cbz	r3, 800acfc <__mdiff+0xb8>
 800acda:	6106      	str	r6, [r0, #16]
 800acdc:	e7c4      	b.n	800ac68 <__mdiff+0x24>
 800acde:	f85c 4b04 	ldr.w	r4, [ip], #4
 800ace2:	b2a2      	uxth	r2, r4
 800ace4:	4472      	add	r2, lr
 800ace6:	1413      	asrs	r3, r2, #16
 800ace8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800acec:	b292      	uxth	r2, r2
 800acee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800acf2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800acf6:	f841 2b04 	str.w	r2, [r1], #4
 800acfa:	e7e9      	b.n	800acd0 <__mdiff+0x8c>
 800acfc:	3e01      	subs	r6, #1
 800acfe:	e7e9      	b.n	800acd4 <__mdiff+0x90>

0800ad00 <__ulp>:
 800ad00:	4b10      	ldr	r3, [pc, #64]	; (800ad44 <__ulp+0x44>)
 800ad02:	400b      	ands	r3, r1
 800ad04:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	dd02      	ble.n	800ad12 <__ulp+0x12>
 800ad0c:	2000      	movs	r0, #0
 800ad0e:	4619      	mov	r1, r3
 800ad10:	4770      	bx	lr
 800ad12:	425b      	negs	r3, r3
 800ad14:	151b      	asrs	r3, r3, #20
 800ad16:	2b13      	cmp	r3, #19
 800ad18:	f04f 0000 	mov.w	r0, #0
 800ad1c:	f04f 0100 	mov.w	r1, #0
 800ad20:	dc04      	bgt.n	800ad2c <__ulp+0x2c>
 800ad22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ad26:	fa42 f103 	asr.w	r1, r2, r3
 800ad2a:	4770      	bx	lr
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	3b14      	subs	r3, #20
 800ad30:	2b1e      	cmp	r3, #30
 800ad32:	bfce      	itee	gt
 800ad34:	4613      	movgt	r3, r2
 800ad36:	f1c3 031f 	rsble	r3, r3, #31
 800ad3a:	fa02 f303 	lslle.w	r3, r2, r3
 800ad3e:	4618      	mov	r0, r3
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	7ff00000 	.word	0x7ff00000

0800ad48 <__b2d>:
 800ad48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad4c:	6907      	ldr	r7, [r0, #16]
 800ad4e:	f100 0914 	add.w	r9, r0, #20
 800ad52:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800ad56:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800ad5a:	f1a7 0804 	sub.w	r8, r7, #4
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f7ff fdc7 	bl	800a8f2 <__hi0bits>
 800ad64:	f1c0 0320 	rsb	r3, r0, #32
 800ad68:	280a      	cmp	r0, #10
 800ad6a:	600b      	str	r3, [r1, #0]
 800ad6c:	491e      	ldr	r1, [pc, #120]	; (800ade8 <__b2d+0xa0>)
 800ad6e:	dc17      	bgt.n	800ada0 <__b2d+0x58>
 800ad70:	45c1      	cmp	r9, r8
 800ad72:	bf28      	it	cs
 800ad74:	2200      	movcs	r2, #0
 800ad76:	f1c0 0c0b 	rsb	ip, r0, #11
 800ad7a:	fa26 f30c 	lsr.w	r3, r6, ip
 800ad7e:	bf38      	it	cc
 800ad80:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ad84:	ea43 0501 	orr.w	r5, r3, r1
 800ad88:	f100 0315 	add.w	r3, r0, #21
 800ad8c:	fa06 f303 	lsl.w	r3, r6, r3
 800ad90:	fa22 f20c 	lsr.w	r2, r2, ip
 800ad94:	ea43 0402 	orr.w	r4, r3, r2
 800ad98:	4620      	mov	r0, r4
 800ad9a:	4629      	mov	r1, r5
 800ad9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ada0:	45c1      	cmp	r9, r8
 800ada2:	bf3a      	itte	cc
 800ada4:	f1a7 0808 	subcc.w	r8, r7, #8
 800ada8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800adac:	2200      	movcs	r2, #0
 800adae:	f1b0 030b 	subs.w	r3, r0, #11
 800adb2:	d015      	beq.n	800ade0 <__b2d+0x98>
 800adb4:	409e      	lsls	r6, r3
 800adb6:	f1c3 0720 	rsb	r7, r3, #32
 800adba:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800adbe:	fa22 f107 	lsr.w	r1, r2, r7
 800adc2:	45c8      	cmp	r8, r9
 800adc4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800adc8:	ea46 0501 	orr.w	r5, r6, r1
 800adcc:	bf94      	ite	ls
 800adce:	2100      	movls	r1, #0
 800add0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800add4:	fa02 f003 	lsl.w	r0, r2, r3
 800add8:	40f9      	lsrs	r1, r7
 800adda:	ea40 0401 	orr.w	r4, r0, r1
 800adde:	e7db      	b.n	800ad98 <__b2d+0x50>
 800ade0:	ea46 0501 	orr.w	r5, r6, r1
 800ade4:	4614      	mov	r4, r2
 800ade6:	e7d7      	b.n	800ad98 <__b2d+0x50>
 800ade8:	3ff00000 	.word	0x3ff00000

0800adec <__d2b>:
 800adec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800adf0:	461c      	mov	r4, r3
 800adf2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800adf6:	2101      	movs	r1, #1
 800adf8:	4690      	mov	r8, r2
 800adfa:	f7ff fcb6 	bl	800a76a <_Balloc>
 800adfe:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800ae02:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800ae06:	4607      	mov	r7, r0
 800ae08:	bb34      	cbnz	r4, 800ae58 <__d2b+0x6c>
 800ae0a:	9201      	str	r2, [sp, #4]
 800ae0c:	f1b8 0200 	subs.w	r2, r8, #0
 800ae10:	d027      	beq.n	800ae62 <__d2b+0x76>
 800ae12:	a802      	add	r0, sp, #8
 800ae14:	f840 2d08 	str.w	r2, [r0, #-8]!
 800ae18:	f7ff fd8a 	bl	800a930 <__lo0bits>
 800ae1c:	9900      	ldr	r1, [sp, #0]
 800ae1e:	b1f0      	cbz	r0, 800ae5e <__d2b+0x72>
 800ae20:	9a01      	ldr	r2, [sp, #4]
 800ae22:	f1c0 0320 	rsb	r3, r0, #32
 800ae26:	fa02 f303 	lsl.w	r3, r2, r3
 800ae2a:	430b      	orrs	r3, r1
 800ae2c:	40c2      	lsrs	r2, r0
 800ae2e:	617b      	str	r3, [r7, #20]
 800ae30:	9201      	str	r2, [sp, #4]
 800ae32:	9b01      	ldr	r3, [sp, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	bf14      	ite	ne
 800ae38:	2102      	movne	r1, #2
 800ae3a:	2101      	moveq	r1, #1
 800ae3c:	61bb      	str	r3, [r7, #24]
 800ae3e:	6139      	str	r1, [r7, #16]
 800ae40:	b1c4      	cbz	r4, 800ae74 <__d2b+0x88>
 800ae42:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ae46:	4404      	add	r4, r0
 800ae48:	6034      	str	r4, [r6, #0]
 800ae4a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae4e:	6028      	str	r0, [r5, #0]
 800ae50:	4638      	mov	r0, r7
 800ae52:	b002      	add	sp, #8
 800ae54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ae5c:	e7d5      	b.n	800ae0a <__d2b+0x1e>
 800ae5e:	6179      	str	r1, [r7, #20]
 800ae60:	e7e7      	b.n	800ae32 <__d2b+0x46>
 800ae62:	a801      	add	r0, sp, #4
 800ae64:	f7ff fd64 	bl	800a930 <__lo0bits>
 800ae68:	2101      	movs	r1, #1
 800ae6a:	9b01      	ldr	r3, [sp, #4]
 800ae6c:	6139      	str	r1, [r7, #16]
 800ae6e:	617b      	str	r3, [r7, #20]
 800ae70:	3020      	adds	r0, #32
 800ae72:	e7e5      	b.n	800ae40 <__d2b+0x54>
 800ae74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae78:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ae7c:	6030      	str	r0, [r6, #0]
 800ae7e:	6918      	ldr	r0, [r3, #16]
 800ae80:	f7ff fd37 	bl	800a8f2 <__hi0bits>
 800ae84:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ae88:	e7e1      	b.n	800ae4e <__d2b+0x62>

0800ae8a <__ratio>:
 800ae8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8e:	4688      	mov	r8, r1
 800ae90:	4669      	mov	r1, sp
 800ae92:	4681      	mov	r9, r0
 800ae94:	f7ff ff58 	bl	800ad48 <__b2d>
 800ae98:	468b      	mov	fp, r1
 800ae9a:	4606      	mov	r6, r0
 800ae9c:	460f      	mov	r7, r1
 800ae9e:	4640      	mov	r0, r8
 800aea0:	a901      	add	r1, sp, #4
 800aea2:	f7ff ff51 	bl	800ad48 <__b2d>
 800aea6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aeaa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aeae:	460d      	mov	r5, r1
 800aeb0:	eba3 0c02 	sub.w	ip, r3, r2
 800aeb4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aeb8:	1a9b      	subs	r3, r3, r2
 800aeba:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	bfd5      	itete	le
 800aec2:	460a      	movle	r2, r1
 800aec4:	463a      	movgt	r2, r7
 800aec6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aeca:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800aece:	bfd8      	it	le
 800aed0:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800aed4:	462b      	mov	r3, r5
 800aed6:	4602      	mov	r2, r0
 800aed8:	4659      	mov	r1, fp
 800aeda:	4630      	mov	r0, r6
 800aedc:	f7f5 fc26 	bl	800072c <__aeabi_ddiv>
 800aee0:	b003      	add	sp, #12
 800aee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aee6 <__copybits>:
 800aee6:	3901      	subs	r1, #1
 800aee8:	b510      	push	{r4, lr}
 800aeea:	1149      	asrs	r1, r1, #5
 800aeec:	6914      	ldr	r4, [r2, #16]
 800aeee:	3101      	adds	r1, #1
 800aef0:	f102 0314 	add.w	r3, r2, #20
 800aef4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aef8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aefc:	42a3      	cmp	r3, r4
 800aefe:	4602      	mov	r2, r0
 800af00:	d303      	bcc.n	800af0a <__copybits+0x24>
 800af02:	2300      	movs	r3, #0
 800af04:	428a      	cmp	r2, r1
 800af06:	d305      	bcc.n	800af14 <__copybits+0x2e>
 800af08:	bd10      	pop	{r4, pc}
 800af0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af0e:	f840 2b04 	str.w	r2, [r0], #4
 800af12:	e7f3      	b.n	800aefc <__copybits+0x16>
 800af14:	f842 3b04 	str.w	r3, [r2], #4
 800af18:	e7f4      	b.n	800af04 <__copybits+0x1e>

0800af1a <__any_on>:
 800af1a:	f100 0214 	add.w	r2, r0, #20
 800af1e:	6900      	ldr	r0, [r0, #16]
 800af20:	114b      	asrs	r3, r1, #5
 800af22:	4298      	cmp	r0, r3
 800af24:	b510      	push	{r4, lr}
 800af26:	db11      	blt.n	800af4c <__any_on+0x32>
 800af28:	dd0a      	ble.n	800af40 <__any_on+0x26>
 800af2a:	f011 011f 	ands.w	r1, r1, #31
 800af2e:	d007      	beq.n	800af40 <__any_on+0x26>
 800af30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800af34:	fa24 f001 	lsr.w	r0, r4, r1
 800af38:	fa00 f101 	lsl.w	r1, r0, r1
 800af3c:	428c      	cmp	r4, r1
 800af3e:	d10b      	bne.n	800af58 <__any_on+0x3e>
 800af40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af44:	4293      	cmp	r3, r2
 800af46:	d803      	bhi.n	800af50 <__any_on+0x36>
 800af48:	2000      	movs	r0, #0
 800af4a:	bd10      	pop	{r4, pc}
 800af4c:	4603      	mov	r3, r0
 800af4e:	e7f7      	b.n	800af40 <__any_on+0x26>
 800af50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af54:	2900      	cmp	r1, #0
 800af56:	d0f5      	beq.n	800af44 <__any_on+0x2a>
 800af58:	2001      	movs	r0, #1
 800af5a:	e7f6      	b.n	800af4a <__any_on+0x30>

0800af5c <_calloc_r>:
 800af5c:	b538      	push	{r3, r4, r5, lr}
 800af5e:	fb02 f401 	mul.w	r4, r2, r1
 800af62:	4621      	mov	r1, r4
 800af64:	f000 f854 	bl	800b010 <_malloc_r>
 800af68:	4605      	mov	r5, r0
 800af6a:	b118      	cbz	r0, 800af74 <_calloc_r+0x18>
 800af6c:	4622      	mov	r2, r4
 800af6e:	2100      	movs	r1, #0
 800af70:	f7fc fc20 	bl	80077b4 <memset>
 800af74:	4628      	mov	r0, r5
 800af76:	bd38      	pop	{r3, r4, r5, pc}

0800af78 <_free_r>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	4605      	mov	r5, r0
 800af7c:	2900      	cmp	r1, #0
 800af7e:	d043      	beq.n	800b008 <_free_r+0x90>
 800af80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af84:	1f0c      	subs	r4, r1, #4
 800af86:	2b00      	cmp	r3, #0
 800af88:	bfb8      	it	lt
 800af8a:	18e4      	addlt	r4, r4, r3
 800af8c:	f000 fdbf 	bl	800bb0e <__malloc_lock>
 800af90:	4a1e      	ldr	r2, [pc, #120]	; (800b00c <_free_r+0x94>)
 800af92:	6813      	ldr	r3, [r2, #0]
 800af94:	4610      	mov	r0, r2
 800af96:	b933      	cbnz	r3, 800afa6 <_free_r+0x2e>
 800af98:	6063      	str	r3, [r4, #4]
 800af9a:	6014      	str	r4, [r2, #0]
 800af9c:	4628      	mov	r0, r5
 800af9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afa2:	f000 bdb5 	b.w	800bb10 <__malloc_unlock>
 800afa6:	42a3      	cmp	r3, r4
 800afa8:	d90b      	bls.n	800afc2 <_free_r+0x4a>
 800afaa:	6821      	ldr	r1, [r4, #0]
 800afac:	1862      	adds	r2, r4, r1
 800afae:	4293      	cmp	r3, r2
 800afb0:	bf01      	itttt	eq
 800afb2:	681a      	ldreq	r2, [r3, #0]
 800afb4:	685b      	ldreq	r3, [r3, #4]
 800afb6:	1852      	addeq	r2, r2, r1
 800afb8:	6022      	streq	r2, [r4, #0]
 800afba:	6063      	str	r3, [r4, #4]
 800afbc:	6004      	str	r4, [r0, #0]
 800afbe:	e7ed      	b.n	800af9c <_free_r+0x24>
 800afc0:	4613      	mov	r3, r2
 800afc2:	685a      	ldr	r2, [r3, #4]
 800afc4:	b10a      	cbz	r2, 800afca <_free_r+0x52>
 800afc6:	42a2      	cmp	r2, r4
 800afc8:	d9fa      	bls.n	800afc0 <_free_r+0x48>
 800afca:	6819      	ldr	r1, [r3, #0]
 800afcc:	1858      	adds	r0, r3, r1
 800afce:	42a0      	cmp	r0, r4
 800afd0:	d10b      	bne.n	800afea <_free_r+0x72>
 800afd2:	6820      	ldr	r0, [r4, #0]
 800afd4:	4401      	add	r1, r0
 800afd6:	1858      	adds	r0, r3, r1
 800afd8:	4282      	cmp	r2, r0
 800afda:	6019      	str	r1, [r3, #0]
 800afdc:	d1de      	bne.n	800af9c <_free_r+0x24>
 800afde:	6810      	ldr	r0, [r2, #0]
 800afe0:	6852      	ldr	r2, [r2, #4]
 800afe2:	4401      	add	r1, r0
 800afe4:	6019      	str	r1, [r3, #0]
 800afe6:	605a      	str	r2, [r3, #4]
 800afe8:	e7d8      	b.n	800af9c <_free_r+0x24>
 800afea:	d902      	bls.n	800aff2 <_free_r+0x7a>
 800afec:	230c      	movs	r3, #12
 800afee:	602b      	str	r3, [r5, #0]
 800aff0:	e7d4      	b.n	800af9c <_free_r+0x24>
 800aff2:	6820      	ldr	r0, [r4, #0]
 800aff4:	1821      	adds	r1, r4, r0
 800aff6:	428a      	cmp	r2, r1
 800aff8:	bf01      	itttt	eq
 800affa:	6811      	ldreq	r1, [r2, #0]
 800affc:	6852      	ldreq	r2, [r2, #4]
 800affe:	1809      	addeq	r1, r1, r0
 800b000:	6021      	streq	r1, [r4, #0]
 800b002:	6062      	str	r2, [r4, #4]
 800b004:	605c      	str	r4, [r3, #4]
 800b006:	e7c9      	b.n	800af9c <_free_r+0x24>
 800b008:	bd38      	pop	{r3, r4, r5, pc}
 800b00a:	bf00      	nop
 800b00c:	20000594 	.word	0x20000594

0800b010 <_malloc_r>:
 800b010:	b570      	push	{r4, r5, r6, lr}
 800b012:	1ccd      	adds	r5, r1, #3
 800b014:	f025 0503 	bic.w	r5, r5, #3
 800b018:	3508      	adds	r5, #8
 800b01a:	2d0c      	cmp	r5, #12
 800b01c:	bf38      	it	cc
 800b01e:	250c      	movcc	r5, #12
 800b020:	2d00      	cmp	r5, #0
 800b022:	4606      	mov	r6, r0
 800b024:	db01      	blt.n	800b02a <_malloc_r+0x1a>
 800b026:	42a9      	cmp	r1, r5
 800b028:	d903      	bls.n	800b032 <_malloc_r+0x22>
 800b02a:	230c      	movs	r3, #12
 800b02c:	6033      	str	r3, [r6, #0]
 800b02e:	2000      	movs	r0, #0
 800b030:	bd70      	pop	{r4, r5, r6, pc}
 800b032:	f000 fd6c 	bl	800bb0e <__malloc_lock>
 800b036:	4a21      	ldr	r2, [pc, #132]	; (800b0bc <_malloc_r+0xac>)
 800b038:	6814      	ldr	r4, [r2, #0]
 800b03a:	4621      	mov	r1, r4
 800b03c:	b991      	cbnz	r1, 800b064 <_malloc_r+0x54>
 800b03e:	4c20      	ldr	r4, [pc, #128]	; (800b0c0 <_malloc_r+0xb0>)
 800b040:	6823      	ldr	r3, [r4, #0]
 800b042:	b91b      	cbnz	r3, 800b04c <_malloc_r+0x3c>
 800b044:	4630      	mov	r0, r6
 800b046:	f000 facd 	bl	800b5e4 <_sbrk_r>
 800b04a:	6020      	str	r0, [r4, #0]
 800b04c:	4629      	mov	r1, r5
 800b04e:	4630      	mov	r0, r6
 800b050:	f000 fac8 	bl	800b5e4 <_sbrk_r>
 800b054:	1c43      	adds	r3, r0, #1
 800b056:	d124      	bne.n	800b0a2 <_malloc_r+0x92>
 800b058:	230c      	movs	r3, #12
 800b05a:	4630      	mov	r0, r6
 800b05c:	6033      	str	r3, [r6, #0]
 800b05e:	f000 fd57 	bl	800bb10 <__malloc_unlock>
 800b062:	e7e4      	b.n	800b02e <_malloc_r+0x1e>
 800b064:	680b      	ldr	r3, [r1, #0]
 800b066:	1b5b      	subs	r3, r3, r5
 800b068:	d418      	bmi.n	800b09c <_malloc_r+0x8c>
 800b06a:	2b0b      	cmp	r3, #11
 800b06c:	d90f      	bls.n	800b08e <_malloc_r+0x7e>
 800b06e:	600b      	str	r3, [r1, #0]
 800b070:	18cc      	adds	r4, r1, r3
 800b072:	50cd      	str	r5, [r1, r3]
 800b074:	4630      	mov	r0, r6
 800b076:	f000 fd4b 	bl	800bb10 <__malloc_unlock>
 800b07a:	f104 000b 	add.w	r0, r4, #11
 800b07e:	1d23      	adds	r3, r4, #4
 800b080:	f020 0007 	bic.w	r0, r0, #7
 800b084:	1ac3      	subs	r3, r0, r3
 800b086:	d0d3      	beq.n	800b030 <_malloc_r+0x20>
 800b088:	425a      	negs	r2, r3
 800b08a:	50e2      	str	r2, [r4, r3]
 800b08c:	e7d0      	b.n	800b030 <_malloc_r+0x20>
 800b08e:	684b      	ldr	r3, [r1, #4]
 800b090:	428c      	cmp	r4, r1
 800b092:	bf16      	itet	ne
 800b094:	6063      	strne	r3, [r4, #4]
 800b096:	6013      	streq	r3, [r2, #0]
 800b098:	460c      	movne	r4, r1
 800b09a:	e7eb      	b.n	800b074 <_malloc_r+0x64>
 800b09c:	460c      	mov	r4, r1
 800b09e:	6849      	ldr	r1, [r1, #4]
 800b0a0:	e7cc      	b.n	800b03c <_malloc_r+0x2c>
 800b0a2:	1cc4      	adds	r4, r0, #3
 800b0a4:	f024 0403 	bic.w	r4, r4, #3
 800b0a8:	42a0      	cmp	r0, r4
 800b0aa:	d005      	beq.n	800b0b8 <_malloc_r+0xa8>
 800b0ac:	1a21      	subs	r1, r4, r0
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	f000 fa98 	bl	800b5e4 <_sbrk_r>
 800b0b4:	3001      	adds	r0, #1
 800b0b6:	d0cf      	beq.n	800b058 <_malloc_r+0x48>
 800b0b8:	6025      	str	r5, [r4, #0]
 800b0ba:	e7db      	b.n	800b074 <_malloc_r+0x64>
 800b0bc:	20000594 	.word	0x20000594
 800b0c0:	20000598 	.word	0x20000598

0800b0c4 <__ssputs_r>:
 800b0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c8:	688e      	ldr	r6, [r1, #8]
 800b0ca:	4682      	mov	sl, r0
 800b0cc:	429e      	cmp	r6, r3
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	4690      	mov	r8, r2
 800b0d2:	4699      	mov	r9, r3
 800b0d4:	d837      	bhi.n	800b146 <__ssputs_r+0x82>
 800b0d6:	898a      	ldrh	r2, [r1, #12]
 800b0d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b0dc:	d031      	beq.n	800b142 <__ssputs_r+0x7e>
 800b0de:	2302      	movs	r3, #2
 800b0e0:	6825      	ldr	r5, [r4, #0]
 800b0e2:	6909      	ldr	r1, [r1, #16]
 800b0e4:	1a6f      	subs	r7, r5, r1
 800b0e6:	6965      	ldr	r5, [r4, #20]
 800b0e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0ec:	fb95 f5f3 	sdiv	r5, r5, r3
 800b0f0:	f109 0301 	add.w	r3, r9, #1
 800b0f4:	443b      	add	r3, r7
 800b0f6:	429d      	cmp	r5, r3
 800b0f8:	bf38      	it	cc
 800b0fa:	461d      	movcc	r5, r3
 800b0fc:	0553      	lsls	r3, r2, #21
 800b0fe:	d530      	bpl.n	800b162 <__ssputs_r+0x9e>
 800b100:	4629      	mov	r1, r5
 800b102:	f7ff ff85 	bl	800b010 <_malloc_r>
 800b106:	4606      	mov	r6, r0
 800b108:	b950      	cbnz	r0, 800b120 <__ssputs_r+0x5c>
 800b10a:	230c      	movs	r3, #12
 800b10c:	f04f 30ff 	mov.w	r0, #4294967295
 800b110:	f8ca 3000 	str.w	r3, [sl]
 800b114:	89a3      	ldrh	r3, [r4, #12]
 800b116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b11a:	81a3      	strh	r3, [r4, #12]
 800b11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b120:	463a      	mov	r2, r7
 800b122:	6921      	ldr	r1, [r4, #16]
 800b124:	f7ff fb16 	bl	800a754 <memcpy>
 800b128:	89a3      	ldrh	r3, [r4, #12]
 800b12a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b12e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b132:	81a3      	strh	r3, [r4, #12]
 800b134:	6126      	str	r6, [r4, #16]
 800b136:	443e      	add	r6, r7
 800b138:	6026      	str	r6, [r4, #0]
 800b13a:	464e      	mov	r6, r9
 800b13c:	6165      	str	r5, [r4, #20]
 800b13e:	1bed      	subs	r5, r5, r7
 800b140:	60a5      	str	r5, [r4, #8]
 800b142:	454e      	cmp	r6, r9
 800b144:	d900      	bls.n	800b148 <__ssputs_r+0x84>
 800b146:	464e      	mov	r6, r9
 800b148:	4632      	mov	r2, r6
 800b14a:	4641      	mov	r1, r8
 800b14c:	6820      	ldr	r0, [r4, #0]
 800b14e:	f000 fcc5 	bl	800badc <memmove>
 800b152:	68a3      	ldr	r3, [r4, #8]
 800b154:	2000      	movs	r0, #0
 800b156:	1b9b      	subs	r3, r3, r6
 800b158:	60a3      	str	r3, [r4, #8]
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	441e      	add	r6, r3
 800b15e:	6026      	str	r6, [r4, #0]
 800b160:	e7dc      	b.n	800b11c <__ssputs_r+0x58>
 800b162:	462a      	mov	r2, r5
 800b164:	f000 fcd5 	bl	800bb12 <_realloc_r>
 800b168:	4606      	mov	r6, r0
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d1e2      	bne.n	800b134 <__ssputs_r+0x70>
 800b16e:	6921      	ldr	r1, [r4, #16]
 800b170:	4650      	mov	r0, sl
 800b172:	f7ff ff01 	bl	800af78 <_free_r>
 800b176:	e7c8      	b.n	800b10a <__ssputs_r+0x46>

0800b178 <_svfiprintf_r>:
 800b178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17c:	461d      	mov	r5, r3
 800b17e:	898b      	ldrh	r3, [r1, #12]
 800b180:	b09d      	sub	sp, #116	; 0x74
 800b182:	061f      	lsls	r7, r3, #24
 800b184:	4680      	mov	r8, r0
 800b186:	460c      	mov	r4, r1
 800b188:	4616      	mov	r6, r2
 800b18a:	d50f      	bpl.n	800b1ac <_svfiprintf_r+0x34>
 800b18c:	690b      	ldr	r3, [r1, #16]
 800b18e:	b96b      	cbnz	r3, 800b1ac <_svfiprintf_r+0x34>
 800b190:	2140      	movs	r1, #64	; 0x40
 800b192:	f7ff ff3d 	bl	800b010 <_malloc_r>
 800b196:	6020      	str	r0, [r4, #0]
 800b198:	6120      	str	r0, [r4, #16]
 800b19a:	b928      	cbnz	r0, 800b1a8 <_svfiprintf_r+0x30>
 800b19c:	230c      	movs	r3, #12
 800b19e:	f8c8 3000 	str.w	r3, [r8]
 800b1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a6:	e0c8      	b.n	800b33a <_svfiprintf_r+0x1c2>
 800b1a8:	2340      	movs	r3, #64	; 0x40
 800b1aa:	6163      	str	r3, [r4, #20]
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b1b0:	2320      	movs	r3, #32
 800b1b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1b6:	2330      	movs	r3, #48	; 0x30
 800b1b8:	f04f 0b01 	mov.w	fp, #1
 800b1bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1c0:	9503      	str	r5, [sp, #12]
 800b1c2:	4637      	mov	r7, r6
 800b1c4:	463d      	mov	r5, r7
 800b1c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b1ca:	b10b      	cbz	r3, 800b1d0 <_svfiprintf_r+0x58>
 800b1cc:	2b25      	cmp	r3, #37	; 0x25
 800b1ce:	d13e      	bne.n	800b24e <_svfiprintf_r+0xd6>
 800b1d0:	ebb7 0a06 	subs.w	sl, r7, r6
 800b1d4:	d00b      	beq.n	800b1ee <_svfiprintf_r+0x76>
 800b1d6:	4653      	mov	r3, sl
 800b1d8:	4632      	mov	r2, r6
 800b1da:	4621      	mov	r1, r4
 800b1dc:	4640      	mov	r0, r8
 800b1de:	f7ff ff71 	bl	800b0c4 <__ssputs_r>
 800b1e2:	3001      	adds	r0, #1
 800b1e4:	f000 80a4 	beq.w	800b330 <_svfiprintf_r+0x1b8>
 800b1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ea:	4453      	add	r3, sl
 800b1ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ee:	783b      	ldrb	r3, [r7, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f000 809d 	beq.w	800b330 <_svfiprintf_r+0x1b8>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b200:	9304      	str	r3, [sp, #16]
 800b202:	9307      	str	r3, [sp, #28]
 800b204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b208:	931a      	str	r3, [sp, #104]	; 0x68
 800b20a:	462f      	mov	r7, r5
 800b20c:	2205      	movs	r2, #5
 800b20e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b212:	4850      	ldr	r0, [pc, #320]	; (800b354 <_svfiprintf_r+0x1dc>)
 800b214:	f7ff fa90 	bl	800a738 <memchr>
 800b218:	9b04      	ldr	r3, [sp, #16]
 800b21a:	b9d0      	cbnz	r0, 800b252 <_svfiprintf_r+0xda>
 800b21c:	06d9      	lsls	r1, r3, #27
 800b21e:	bf44      	itt	mi
 800b220:	2220      	movmi	r2, #32
 800b222:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b226:	071a      	lsls	r2, r3, #28
 800b228:	bf44      	itt	mi
 800b22a:	222b      	movmi	r2, #43	; 0x2b
 800b22c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b230:	782a      	ldrb	r2, [r5, #0]
 800b232:	2a2a      	cmp	r2, #42	; 0x2a
 800b234:	d015      	beq.n	800b262 <_svfiprintf_r+0xea>
 800b236:	462f      	mov	r7, r5
 800b238:	2000      	movs	r0, #0
 800b23a:	250a      	movs	r5, #10
 800b23c:	9a07      	ldr	r2, [sp, #28]
 800b23e:	4639      	mov	r1, r7
 800b240:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b244:	3b30      	subs	r3, #48	; 0x30
 800b246:	2b09      	cmp	r3, #9
 800b248:	d94d      	bls.n	800b2e6 <_svfiprintf_r+0x16e>
 800b24a:	b1b8      	cbz	r0, 800b27c <_svfiprintf_r+0x104>
 800b24c:	e00f      	b.n	800b26e <_svfiprintf_r+0xf6>
 800b24e:	462f      	mov	r7, r5
 800b250:	e7b8      	b.n	800b1c4 <_svfiprintf_r+0x4c>
 800b252:	4a40      	ldr	r2, [pc, #256]	; (800b354 <_svfiprintf_r+0x1dc>)
 800b254:	463d      	mov	r5, r7
 800b256:	1a80      	subs	r0, r0, r2
 800b258:	fa0b f000 	lsl.w	r0, fp, r0
 800b25c:	4318      	orrs	r0, r3
 800b25e:	9004      	str	r0, [sp, #16]
 800b260:	e7d3      	b.n	800b20a <_svfiprintf_r+0x92>
 800b262:	9a03      	ldr	r2, [sp, #12]
 800b264:	1d11      	adds	r1, r2, #4
 800b266:	6812      	ldr	r2, [r2, #0]
 800b268:	9103      	str	r1, [sp, #12]
 800b26a:	2a00      	cmp	r2, #0
 800b26c:	db01      	blt.n	800b272 <_svfiprintf_r+0xfa>
 800b26e:	9207      	str	r2, [sp, #28]
 800b270:	e004      	b.n	800b27c <_svfiprintf_r+0x104>
 800b272:	4252      	negs	r2, r2
 800b274:	f043 0302 	orr.w	r3, r3, #2
 800b278:	9207      	str	r2, [sp, #28]
 800b27a:	9304      	str	r3, [sp, #16]
 800b27c:	783b      	ldrb	r3, [r7, #0]
 800b27e:	2b2e      	cmp	r3, #46	; 0x2e
 800b280:	d10c      	bne.n	800b29c <_svfiprintf_r+0x124>
 800b282:	787b      	ldrb	r3, [r7, #1]
 800b284:	2b2a      	cmp	r3, #42	; 0x2a
 800b286:	d133      	bne.n	800b2f0 <_svfiprintf_r+0x178>
 800b288:	9b03      	ldr	r3, [sp, #12]
 800b28a:	3702      	adds	r7, #2
 800b28c:	1d1a      	adds	r2, r3, #4
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	9203      	str	r2, [sp, #12]
 800b292:	2b00      	cmp	r3, #0
 800b294:	bfb8      	it	lt
 800b296:	f04f 33ff 	movlt.w	r3, #4294967295
 800b29a:	9305      	str	r3, [sp, #20]
 800b29c:	4d2e      	ldr	r5, [pc, #184]	; (800b358 <_svfiprintf_r+0x1e0>)
 800b29e:	2203      	movs	r2, #3
 800b2a0:	7839      	ldrb	r1, [r7, #0]
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	f7ff fa48 	bl	800a738 <memchr>
 800b2a8:	b138      	cbz	r0, 800b2ba <_svfiprintf_r+0x142>
 800b2aa:	2340      	movs	r3, #64	; 0x40
 800b2ac:	1b40      	subs	r0, r0, r5
 800b2ae:	fa03 f000 	lsl.w	r0, r3, r0
 800b2b2:	9b04      	ldr	r3, [sp, #16]
 800b2b4:	3701      	adds	r7, #1
 800b2b6:	4303      	orrs	r3, r0
 800b2b8:	9304      	str	r3, [sp, #16]
 800b2ba:	7839      	ldrb	r1, [r7, #0]
 800b2bc:	2206      	movs	r2, #6
 800b2be:	4827      	ldr	r0, [pc, #156]	; (800b35c <_svfiprintf_r+0x1e4>)
 800b2c0:	1c7e      	adds	r6, r7, #1
 800b2c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2c6:	f7ff fa37 	bl	800a738 <memchr>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d038      	beq.n	800b340 <_svfiprintf_r+0x1c8>
 800b2ce:	4b24      	ldr	r3, [pc, #144]	; (800b360 <_svfiprintf_r+0x1e8>)
 800b2d0:	bb13      	cbnz	r3, 800b318 <_svfiprintf_r+0x1a0>
 800b2d2:	9b03      	ldr	r3, [sp, #12]
 800b2d4:	3307      	adds	r3, #7
 800b2d6:	f023 0307 	bic.w	r3, r3, #7
 800b2da:	3308      	adds	r3, #8
 800b2dc:	9303      	str	r3, [sp, #12]
 800b2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e0:	444b      	add	r3, r9
 800b2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e4:	e76d      	b.n	800b1c2 <_svfiprintf_r+0x4a>
 800b2e6:	fb05 3202 	mla	r2, r5, r2, r3
 800b2ea:	2001      	movs	r0, #1
 800b2ec:	460f      	mov	r7, r1
 800b2ee:	e7a6      	b.n	800b23e <_svfiprintf_r+0xc6>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	250a      	movs	r5, #10
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	3701      	adds	r7, #1
 800b2f8:	9305      	str	r3, [sp, #20]
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b300:	3a30      	subs	r2, #48	; 0x30
 800b302:	2a09      	cmp	r2, #9
 800b304:	d903      	bls.n	800b30e <_svfiprintf_r+0x196>
 800b306:	2b00      	cmp	r3, #0
 800b308:	d0c8      	beq.n	800b29c <_svfiprintf_r+0x124>
 800b30a:	9105      	str	r1, [sp, #20]
 800b30c:	e7c6      	b.n	800b29c <_svfiprintf_r+0x124>
 800b30e:	fb05 2101 	mla	r1, r5, r1, r2
 800b312:	2301      	movs	r3, #1
 800b314:	4607      	mov	r7, r0
 800b316:	e7f0      	b.n	800b2fa <_svfiprintf_r+0x182>
 800b318:	ab03      	add	r3, sp, #12
 800b31a:	9300      	str	r3, [sp, #0]
 800b31c:	4622      	mov	r2, r4
 800b31e:	4b11      	ldr	r3, [pc, #68]	; (800b364 <_svfiprintf_r+0x1ec>)
 800b320:	a904      	add	r1, sp, #16
 800b322:	4640      	mov	r0, r8
 800b324:	f7fc fae0 	bl	80078e8 <_printf_float>
 800b328:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b32c:	4681      	mov	r9, r0
 800b32e:	d1d6      	bne.n	800b2de <_svfiprintf_r+0x166>
 800b330:	89a3      	ldrh	r3, [r4, #12]
 800b332:	065b      	lsls	r3, r3, #25
 800b334:	f53f af35 	bmi.w	800b1a2 <_svfiprintf_r+0x2a>
 800b338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b33a:	b01d      	add	sp, #116	; 0x74
 800b33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b340:	ab03      	add	r3, sp, #12
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	4622      	mov	r2, r4
 800b346:	4b07      	ldr	r3, [pc, #28]	; (800b364 <_svfiprintf_r+0x1ec>)
 800b348:	a904      	add	r1, sp, #16
 800b34a:	4640      	mov	r0, r8
 800b34c:	f7fc fd78 	bl	8007e40 <_printf_i>
 800b350:	e7ea      	b.n	800b328 <_svfiprintf_r+0x1b0>
 800b352:	bf00      	nop
 800b354:	0800be74 	.word	0x0800be74
 800b358:	0800be7a 	.word	0x0800be7a
 800b35c:	0800be7e 	.word	0x0800be7e
 800b360:	080078e9 	.word	0x080078e9
 800b364:	0800b0c5 	.word	0x0800b0c5

0800b368 <__sfputc_r>:
 800b368:	6893      	ldr	r3, [r2, #8]
 800b36a:	b410      	push	{r4}
 800b36c:	3b01      	subs	r3, #1
 800b36e:	2b00      	cmp	r3, #0
 800b370:	6093      	str	r3, [r2, #8]
 800b372:	da07      	bge.n	800b384 <__sfputc_r+0x1c>
 800b374:	6994      	ldr	r4, [r2, #24]
 800b376:	42a3      	cmp	r3, r4
 800b378:	db01      	blt.n	800b37e <__sfputc_r+0x16>
 800b37a:	290a      	cmp	r1, #10
 800b37c:	d102      	bne.n	800b384 <__sfputc_r+0x1c>
 800b37e:	bc10      	pop	{r4}
 800b380:	f000 b996 	b.w	800b6b0 <__swbuf_r>
 800b384:	6813      	ldr	r3, [r2, #0]
 800b386:	1c58      	adds	r0, r3, #1
 800b388:	6010      	str	r0, [r2, #0]
 800b38a:	7019      	strb	r1, [r3, #0]
 800b38c:	4608      	mov	r0, r1
 800b38e:	bc10      	pop	{r4}
 800b390:	4770      	bx	lr

0800b392 <__sfputs_r>:
 800b392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b394:	4606      	mov	r6, r0
 800b396:	460f      	mov	r7, r1
 800b398:	4614      	mov	r4, r2
 800b39a:	18d5      	adds	r5, r2, r3
 800b39c:	42ac      	cmp	r4, r5
 800b39e:	d101      	bne.n	800b3a4 <__sfputs_r+0x12>
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	e007      	b.n	800b3b4 <__sfputs_r+0x22>
 800b3a4:	463a      	mov	r2, r7
 800b3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	f7ff ffdc 	bl	800b368 <__sfputc_r>
 800b3b0:	1c43      	adds	r3, r0, #1
 800b3b2:	d1f3      	bne.n	800b39c <__sfputs_r+0xa>
 800b3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3b8 <_vfiprintf_r>:
 800b3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3bc:	460c      	mov	r4, r1
 800b3be:	b09d      	sub	sp, #116	; 0x74
 800b3c0:	4617      	mov	r7, r2
 800b3c2:	461d      	mov	r5, r3
 800b3c4:	4606      	mov	r6, r0
 800b3c6:	b118      	cbz	r0, 800b3d0 <_vfiprintf_r+0x18>
 800b3c8:	6983      	ldr	r3, [r0, #24]
 800b3ca:	b90b      	cbnz	r3, 800b3d0 <_vfiprintf_r+0x18>
 800b3cc:	f7fe fdd4 	bl	8009f78 <__sinit>
 800b3d0:	4b7c      	ldr	r3, [pc, #496]	; (800b5c4 <_vfiprintf_r+0x20c>)
 800b3d2:	429c      	cmp	r4, r3
 800b3d4:	d158      	bne.n	800b488 <_vfiprintf_r+0xd0>
 800b3d6:	6874      	ldr	r4, [r6, #4]
 800b3d8:	89a3      	ldrh	r3, [r4, #12]
 800b3da:	0718      	lsls	r0, r3, #28
 800b3dc:	d55e      	bpl.n	800b49c <_vfiprintf_r+0xe4>
 800b3de:	6923      	ldr	r3, [r4, #16]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d05b      	beq.n	800b49c <_vfiprintf_r+0xe4>
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3e8:	2320      	movs	r3, #32
 800b3ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3ee:	2330      	movs	r3, #48	; 0x30
 800b3f0:	f04f 0b01 	mov.w	fp, #1
 800b3f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3f8:	9503      	str	r5, [sp, #12]
 800b3fa:	46b8      	mov	r8, r7
 800b3fc:	4645      	mov	r5, r8
 800b3fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b402:	b10b      	cbz	r3, 800b408 <_vfiprintf_r+0x50>
 800b404:	2b25      	cmp	r3, #37	; 0x25
 800b406:	d154      	bne.n	800b4b2 <_vfiprintf_r+0xfa>
 800b408:	ebb8 0a07 	subs.w	sl, r8, r7
 800b40c:	d00b      	beq.n	800b426 <_vfiprintf_r+0x6e>
 800b40e:	4653      	mov	r3, sl
 800b410:	463a      	mov	r2, r7
 800b412:	4621      	mov	r1, r4
 800b414:	4630      	mov	r0, r6
 800b416:	f7ff ffbc 	bl	800b392 <__sfputs_r>
 800b41a:	3001      	adds	r0, #1
 800b41c:	f000 80c2 	beq.w	800b5a4 <_vfiprintf_r+0x1ec>
 800b420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b422:	4453      	add	r3, sl
 800b424:	9309      	str	r3, [sp, #36]	; 0x24
 800b426:	f898 3000 	ldrb.w	r3, [r8]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f000 80ba 	beq.w	800b5a4 <_vfiprintf_r+0x1ec>
 800b430:	2300      	movs	r3, #0
 800b432:	f04f 32ff 	mov.w	r2, #4294967295
 800b436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b43a:	9304      	str	r3, [sp, #16]
 800b43c:	9307      	str	r3, [sp, #28]
 800b43e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b442:	931a      	str	r3, [sp, #104]	; 0x68
 800b444:	46a8      	mov	r8, r5
 800b446:	2205      	movs	r2, #5
 800b448:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b44c:	485e      	ldr	r0, [pc, #376]	; (800b5c8 <_vfiprintf_r+0x210>)
 800b44e:	f7ff f973 	bl	800a738 <memchr>
 800b452:	9b04      	ldr	r3, [sp, #16]
 800b454:	bb78      	cbnz	r0, 800b4b6 <_vfiprintf_r+0xfe>
 800b456:	06d9      	lsls	r1, r3, #27
 800b458:	bf44      	itt	mi
 800b45a:	2220      	movmi	r2, #32
 800b45c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b460:	071a      	lsls	r2, r3, #28
 800b462:	bf44      	itt	mi
 800b464:	222b      	movmi	r2, #43	; 0x2b
 800b466:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b46a:	782a      	ldrb	r2, [r5, #0]
 800b46c:	2a2a      	cmp	r2, #42	; 0x2a
 800b46e:	d02a      	beq.n	800b4c6 <_vfiprintf_r+0x10e>
 800b470:	46a8      	mov	r8, r5
 800b472:	2000      	movs	r0, #0
 800b474:	250a      	movs	r5, #10
 800b476:	9a07      	ldr	r2, [sp, #28]
 800b478:	4641      	mov	r1, r8
 800b47a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b47e:	3b30      	subs	r3, #48	; 0x30
 800b480:	2b09      	cmp	r3, #9
 800b482:	d969      	bls.n	800b558 <_vfiprintf_r+0x1a0>
 800b484:	b360      	cbz	r0, 800b4e0 <_vfiprintf_r+0x128>
 800b486:	e024      	b.n	800b4d2 <_vfiprintf_r+0x11a>
 800b488:	4b50      	ldr	r3, [pc, #320]	; (800b5cc <_vfiprintf_r+0x214>)
 800b48a:	429c      	cmp	r4, r3
 800b48c:	d101      	bne.n	800b492 <_vfiprintf_r+0xda>
 800b48e:	68b4      	ldr	r4, [r6, #8]
 800b490:	e7a2      	b.n	800b3d8 <_vfiprintf_r+0x20>
 800b492:	4b4f      	ldr	r3, [pc, #316]	; (800b5d0 <_vfiprintf_r+0x218>)
 800b494:	429c      	cmp	r4, r3
 800b496:	bf08      	it	eq
 800b498:	68f4      	ldreq	r4, [r6, #12]
 800b49a:	e79d      	b.n	800b3d8 <_vfiprintf_r+0x20>
 800b49c:	4621      	mov	r1, r4
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f000 f978 	bl	800b794 <__swsetup_r>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d09d      	beq.n	800b3e4 <_vfiprintf_r+0x2c>
 800b4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ac:	b01d      	add	sp, #116	; 0x74
 800b4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b2:	46a8      	mov	r8, r5
 800b4b4:	e7a2      	b.n	800b3fc <_vfiprintf_r+0x44>
 800b4b6:	4a44      	ldr	r2, [pc, #272]	; (800b5c8 <_vfiprintf_r+0x210>)
 800b4b8:	4645      	mov	r5, r8
 800b4ba:	1a80      	subs	r0, r0, r2
 800b4bc:	fa0b f000 	lsl.w	r0, fp, r0
 800b4c0:	4318      	orrs	r0, r3
 800b4c2:	9004      	str	r0, [sp, #16]
 800b4c4:	e7be      	b.n	800b444 <_vfiprintf_r+0x8c>
 800b4c6:	9a03      	ldr	r2, [sp, #12]
 800b4c8:	1d11      	adds	r1, r2, #4
 800b4ca:	6812      	ldr	r2, [r2, #0]
 800b4cc:	9103      	str	r1, [sp, #12]
 800b4ce:	2a00      	cmp	r2, #0
 800b4d0:	db01      	blt.n	800b4d6 <_vfiprintf_r+0x11e>
 800b4d2:	9207      	str	r2, [sp, #28]
 800b4d4:	e004      	b.n	800b4e0 <_vfiprintf_r+0x128>
 800b4d6:	4252      	negs	r2, r2
 800b4d8:	f043 0302 	orr.w	r3, r3, #2
 800b4dc:	9207      	str	r2, [sp, #28]
 800b4de:	9304      	str	r3, [sp, #16]
 800b4e0:	f898 3000 	ldrb.w	r3, [r8]
 800b4e4:	2b2e      	cmp	r3, #46	; 0x2e
 800b4e6:	d10e      	bne.n	800b506 <_vfiprintf_r+0x14e>
 800b4e8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b4ec:	2b2a      	cmp	r3, #42	; 0x2a
 800b4ee:	d138      	bne.n	800b562 <_vfiprintf_r+0x1aa>
 800b4f0:	9b03      	ldr	r3, [sp, #12]
 800b4f2:	f108 0802 	add.w	r8, r8, #2
 800b4f6:	1d1a      	adds	r2, r3, #4
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	9203      	str	r2, [sp, #12]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	bfb8      	it	lt
 800b500:	f04f 33ff 	movlt.w	r3, #4294967295
 800b504:	9305      	str	r3, [sp, #20]
 800b506:	4d33      	ldr	r5, [pc, #204]	; (800b5d4 <_vfiprintf_r+0x21c>)
 800b508:	2203      	movs	r2, #3
 800b50a:	f898 1000 	ldrb.w	r1, [r8]
 800b50e:	4628      	mov	r0, r5
 800b510:	f7ff f912 	bl	800a738 <memchr>
 800b514:	b140      	cbz	r0, 800b528 <_vfiprintf_r+0x170>
 800b516:	2340      	movs	r3, #64	; 0x40
 800b518:	1b40      	subs	r0, r0, r5
 800b51a:	fa03 f000 	lsl.w	r0, r3, r0
 800b51e:	9b04      	ldr	r3, [sp, #16]
 800b520:	f108 0801 	add.w	r8, r8, #1
 800b524:	4303      	orrs	r3, r0
 800b526:	9304      	str	r3, [sp, #16]
 800b528:	f898 1000 	ldrb.w	r1, [r8]
 800b52c:	2206      	movs	r2, #6
 800b52e:	482a      	ldr	r0, [pc, #168]	; (800b5d8 <_vfiprintf_r+0x220>)
 800b530:	f108 0701 	add.w	r7, r8, #1
 800b534:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b538:	f7ff f8fe 	bl	800a738 <memchr>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d037      	beq.n	800b5b0 <_vfiprintf_r+0x1f8>
 800b540:	4b26      	ldr	r3, [pc, #152]	; (800b5dc <_vfiprintf_r+0x224>)
 800b542:	bb1b      	cbnz	r3, 800b58c <_vfiprintf_r+0x1d4>
 800b544:	9b03      	ldr	r3, [sp, #12]
 800b546:	3307      	adds	r3, #7
 800b548:	f023 0307 	bic.w	r3, r3, #7
 800b54c:	3308      	adds	r3, #8
 800b54e:	9303      	str	r3, [sp, #12]
 800b550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b552:	444b      	add	r3, r9
 800b554:	9309      	str	r3, [sp, #36]	; 0x24
 800b556:	e750      	b.n	800b3fa <_vfiprintf_r+0x42>
 800b558:	fb05 3202 	mla	r2, r5, r2, r3
 800b55c:	2001      	movs	r0, #1
 800b55e:	4688      	mov	r8, r1
 800b560:	e78a      	b.n	800b478 <_vfiprintf_r+0xc0>
 800b562:	2300      	movs	r3, #0
 800b564:	250a      	movs	r5, #10
 800b566:	4619      	mov	r1, r3
 800b568:	f108 0801 	add.w	r8, r8, #1
 800b56c:	9305      	str	r3, [sp, #20]
 800b56e:	4640      	mov	r0, r8
 800b570:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b574:	3a30      	subs	r2, #48	; 0x30
 800b576:	2a09      	cmp	r2, #9
 800b578:	d903      	bls.n	800b582 <_vfiprintf_r+0x1ca>
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d0c3      	beq.n	800b506 <_vfiprintf_r+0x14e>
 800b57e:	9105      	str	r1, [sp, #20]
 800b580:	e7c1      	b.n	800b506 <_vfiprintf_r+0x14e>
 800b582:	fb05 2101 	mla	r1, r5, r1, r2
 800b586:	2301      	movs	r3, #1
 800b588:	4680      	mov	r8, r0
 800b58a:	e7f0      	b.n	800b56e <_vfiprintf_r+0x1b6>
 800b58c:	ab03      	add	r3, sp, #12
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	4622      	mov	r2, r4
 800b592:	4b13      	ldr	r3, [pc, #76]	; (800b5e0 <_vfiprintf_r+0x228>)
 800b594:	a904      	add	r1, sp, #16
 800b596:	4630      	mov	r0, r6
 800b598:	f7fc f9a6 	bl	80078e8 <_printf_float>
 800b59c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b5a0:	4681      	mov	r9, r0
 800b5a2:	d1d5      	bne.n	800b550 <_vfiprintf_r+0x198>
 800b5a4:	89a3      	ldrh	r3, [r4, #12]
 800b5a6:	065b      	lsls	r3, r3, #25
 800b5a8:	f53f af7e 	bmi.w	800b4a8 <_vfiprintf_r+0xf0>
 800b5ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5ae:	e77d      	b.n	800b4ac <_vfiprintf_r+0xf4>
 800b5b0:	ab03      	add	r3, sp, #12
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	4622      	mov	r2, r4
 800b5b6:	4b0a      	ldr	r3, [pc, #40]	; (800b5e0 <_vfiprintf_r+0x228>)
 800b5b8:	a904      	add	r1, sp, #16
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	f7fc fc40 	bl	8007e40 <_printf_i>
 800b5c0:	e7ec      	b.n	800b59c <_vfiprintf_r+0x1e4>
 800b5c2:	bf00      	nop
 800b5c4:	0800bd28 	.word	0x0800bd28
 800b5c8:	0800be74 	.word	0x0800be74
 800b5cc:	0800bd48 	.word	0x0800bd48
 800b5d0:	0800bd08 	.word	0x0800bd08
 800b5d4:	0800be7a 	.word	0x0800be7a
 800b5d8:	0800be7e 	.word	0x0800be7e
 800b5dc:	080078e9 	.word	0x080078e9
 800b5e0:	0800b393 	.word	0x0800b393

0800b5e4 <_sbrk_r>:
 800b5e4:	b538      	push	{r3, r4, r5, lr}
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	4c05      	ldr	r4, [pc, #20]	; (800b600 <_sbrk_r+0x1c>)
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	4608      	mov	r0, r1
 800b5ee:	6023      	str	r3, [r4, #0]
 800b5f0:	f7f5 fc68 	bl	8000ec4 <_sbrk>
 800b5f4:	1c43      	adds	r3, r0, #1
 800b5f6:	d102      	bne.n	800b5fe <_sbrk_r+0x1a>
 800b5f8:	6823      	ldr	r3, [r4, #0]
 800b5fa:	b103      	cbz	r3, 800b5fe <_sbrk_r+0x1a>
 800b5fc:	602b      	str	r3, [r5, #0]
 800b5fe:	bd38      	pop	{r3, r4, r5, pc}
 800b600:	20000ee0 	.word	0x20000ee0

0800b604 <__sread>:
 800b604:	b510      	push	{r4, lr}
 800b606:	460c      	mov	r4, r1
 800b608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b60c:	f000 faa8 	bl	800bb60 <_read_r>
 800b610:	2800      	cmp	r0, #0
 800b612:	bfab      	itete	ge
 800b614:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b616:	89a3      	ldrhlt	r3, [r4, #12]
 800b618:	181b      	addge	r3, r3, r0
 800b61a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b61e:	bfac      	ite	ge
 800b620:	6563      	strge	r3, [r4, #84]	; 0x54
 800b622:	81a3      	strhlt	r3, [r4, #12]
 800b624:	bd10      	pop	{r4, pc}

0800b626 <__swrite>:
 800b626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b62a:	461f      	mov	r7, r3
 800b62c:	898b      	ldrh	r3, [r1, #12]
 800b62e:	4605      	mov	r5, r0
 800b630:	05db      	lsls	r3, r3, #23
 800b632:	460c      	mov	r4, r1
 800b634:	4616      	mov	r6, r2
 800b636:	d505      	bpl.n	800b644 <__swrite+0x1e>
 800b638:	2302      	movs	r3, #2
 800b63a:	2200      	movs	r2, #0
 800b63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b640:	f000 f9d6 	bl	800b9f0 <_lseek_r>
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	4632      	mov	r2, r6
 800b648:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b64c:	81a3      	strh	r3, [r4, #12]
 800b64e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b652:	463b      	mov	r3, r7
 800b654:	4628      	mov	r0, r5
 800b656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b65a:	f000 b889 	b.w	800b770 <_write_r>

0800b65e <__sseek>:
 800b65e:	b510      	push	{r4, lr}
 800b660:	460c      	mov	r4, r1
 800b662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b666:	f000 f9c3 	bl	800b9f0 <_lseek_r>
 800b66a:	1c43      	adds	r3, r0, #1
 800b66c:	89a3      	ldrh	r3, [r4, #12]
 800b66e:	bf15      	itete	ne
 800b670:	6560      	strne	r0, [r4, #84]	; 0x54
 800b672:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b676:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b67a:	81a3      	strheq	r3, [r4, #12]
 800b67c:	bf18      	it	ne
 800b67e:	81a3      	strhne	r3, [r4, #12]
 800b680:	bd10      	pop	{r4, pc}

0800b682 <__sclose>:
 800b682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b686:	f000 b8f3 	b.w	800b870 <_close_r>

0800b68a <strncmp>:
 800b68a:	b510      	push	{r4, lr}
 800b68c:	b16a      	cbz	r2, 800b6aa <strncmp+0x20>
 800b68e:	3901      	subs	r1, #1
 800b690:	1884      	adds	r4, r0, r2
 800b692:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b696:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d103      	bne.n	800b6a6 <strncmp+0x1c>
 800b69e:	42a0      	cmp	r0, r4
 800b6a0:	d001      	beq.n	800b6a6 <strncmp+0x1c>
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1f5      	bne.n	800b692 <strncmp+0x8>
 800b6a6:	1a98      	subs	r0, r3, r2
 800b6a8:	bd10      	pop	{r4, pc}
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	e7fc      	b.n	800b6a8 <strncmp+0x1e>
	...

0800b6b0 <__swbuf_r>:
 800b6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6b2:	460e      	mov	r6, r1
 800b6b4:	4614      	mov	r4, r2
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	b118      	cbz	r0, 800b6c2 <__swbuf_r+0x12>
 800b6ba:	6983      	ldr	r3, [r0, #24]
 800b6bc:	b90b      	cbnz	r3, 800b6c2 <__swbuf_r+0x12>
 800b6be:	f7fe fc5b 	bl	8009f78 <__sinit>
 800b6c2:	4b21      	ldr	r3, [pc, #132]	; (800b748 <__swbuf_r+0x98>)
 800b6c4:	429c      	cmp	r4, r3
 800b6c6:	d12a      	bne.n	800b71e <__swbuf_r+0x6e>
 800b6c8:	686c      	ldr	r4, [r5, #4]
 800b6ca:	69a3      	ldr	r3, [r4, #24]
 800b6cc:	60a3      	str	r3, [r4, #8]
 800b6ce:	89a3      	ldrh	r3, [r4, #12]
 800b6d0:	071a      	lsls	r2, r3, #28
 800b6d2:	d52e      	bpl.n	800b732 <__swbuf_r+0x82>
 800b6d4:	6923      	ldr	r3, [r4, #16]
 800b6d6:	b363      	cbz	r3, 800b732 <__swbuf_r+0x82>
 800b6d8:	6923      	ldr	r3, [r4, #16]
 800b6da:	6820      	ldr	r0, [r4, #0]
 800b6dc:	b2f6      	uxtb	r6, r6
 800b6de:	1ac0      	subs	r0, r0, r3
 800b6e0:	6963      	ldr	r3, [r4, #20]
 800b6e2:	4637      	mov	r7, r6
 800b6e4:	4283      	cmp	r3, r0
 800b6e6:	dc04      	bgt.n	800b6f2 <__swbuf_r+0x42>
 800b6e8:	4621      	mov	r1, r4
 800b6ea:	4628      	mov	r0, r5
 800b6ec:	f000 f956 	bl	800b99c <_fflush_r>
 800b6f0:	bb28      	cbnz	r0, 800b73e <__swbuf_r+0x8e>
 800b6f2:	68a3      	ldr	r3, [r4, #8]
 800b6f4:	3001      	adds	r0, #1
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	60a3      	str	r3, [r4, #8]
 800b6fa:	6823      	ldr	r3, [r4, #0]
 800b6fc:	1c5a      	adds	r2, r3, #1
 800b6fe:	6022      	str	r2, [r4, #0]
 800b700:	701e      	strb	r6, [r3, #0]
 800b702:	6963      	ldr	r3, [r4, #20]
 800b704:	4283      	cmp	r3, r0
 800b706:	d004      	beq.n	800b712 <__swbuf_r+0x62>
 800b708:	89a3      	ldrh	r3, [r4, #12]
 800b70a:	07db      	lsls	r3, r3, #31
 800b70c:	d519      	bpl.n	800b742 <__swbuf_r+0x92>
 800b70e:	2e0a      	cmp	r6, #10
 800b710:	d117      	bne.n	800b742 <__swbuf_r+0x92>
 800b712:	4621      	mov	r1, r4
 800b714:	4628      	mov	r0, r5
 800b716:	f000 f941 	bl	800b99c <_fflush_r>
 800b71a:	b190      	cbz	r0, 800b742 <__swbuf_r+0x92>
 800b71c:	e00f      	b.n	800b73e <__swbuf_r+0x8e>
 800b71e:	4b0b      	ldr	r3, [pc, #44]	; (800b74c <__swbuf_r+0x9c>)
 800b720:	429c      	cmp	r4, r3
 800b722:	d101      	bne.n	800b728 <__swbuf_r+0x78>
 800b724:	68ac      	ldr	r4, [r5, #8]
 800b726:	e7d0      	b.n	800b6ca <__swbuf_r+0x1a>
 800b728:	4b09      	ldr	r3, [pc, #36]	; (800b750 <__swbuf_r+0xa0>)
 800b72a:	429c      	cmp	r4, r3
 800b72c:	bf08      	it	eq
 800b72e:	68ec      	ldreq	r4, [r5, #12]
 800b730:	e7cb      	b.n	800b6ca <__swbuf_r+0x1a>
 800b732:	4621      	mov	r1, r4
 800b734:	4628      	mov	r0, r5
 800b736:	f000 f82d 	bl	800b794 <__swsetup_r>
 800b73a:	2800      	cmp	r0, #0
 800b73c:	d0cc      	beq.n	800b6d8 <__swbuf_r+0x28>
 800b73e:	f04f 37ff 	mov.w	r7, #4294967295
 800b742:	4638      	mov	r0, r7
 800b744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b746:	bf00      	nop
 800b748:	0800bd28 	.word	0x0800bd28
 800b74c:	0800bd48 	.word	0x0800bd48
 800b750:	0800bd08 	.word	0x0800bd08

0800b754 <__ascii_wctomb>:
 800b754:	b149      	cbz	r1, 800b76a <__ascii_wctomb+0x16>
 800b756:	2aff      	cmp	r2, #255	; 0xff
 800b758:	bf8b      	itete	hi
 800b75a:	238a      	movhi	r3, #138	; 0x8a
 800b75c:	700a      	strbls	r2, [r1, #0]
 800b75e:	6003      	strhi	r3, [r0, #0]
 800b760:	2001      	movls	r0, #1
 800b762:	bf88      	it	hi
 800b764:	f04f 30ff 	movhi.w	r0, #4294967295
 800b768:	4770      	bx	lr
 800b76a:	4608      	mov	r0, r1
 800b76c:	4770      	bx	lr
	...

0800b770 <_write_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	4605      	mov	r5, r0
 800b774:	4608      	mov	r0, r1
 800b776:	4611      	mov	r1, r2
 800b778:	2200      	movs	r2, #0
 800b77a:	4c05      	ldr	r4, [pc, #20]	; (800b790 <_write_r+0x20>)
 800b77c:	6022      	str	r2, [r4, #0]
 800b77e:	461a      	mov	r2, r3
 800b780:	f7f5 fa3c 	bl	8000bfc <_write>
 800b784:	1c43      	adds	r3, r0, #1
 800b786:	d102      	bne.n	800b78e <_write_r+0x1e>
 800b788:	6823      	ldr	r3, [r4, #0]
 800b78a:	b103      	cbz	r3, 800b78e <_write_r+0x1e>
 800b78c:	602b      	str	r3, [r5, #0]
 800b78e:	bd38      	pop	{r3, r4, r5, pc}
 800b790:	20000ee0 	.word	0x20000ee0

0800b794 <__swsetup_r>:
 800b794:	4b32      	ldr	r3, [pc, #200]	; (800b860 <__swsetup_r+0xcc>)
 800b796:	b570      	push	{r4, r5, r6, lr}
 800b798:	681d      	ldr	r5, [r3, #0]
 800b79a:	4606      	mov	r6, r0
 800b79c:	460c      	mov	r4, r1
 800b79e:	b125      	cbz	r5, 800b7aa <__swsetup_r+0x16>
 800b7a0:	69ab      	ldr	r3, [r5, #24]
 800b7a2:	b913      	cbnz	r3, 800b7aa <__swsetup_r+0x16>
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	f7fe fbe7 	bl	8009f78 <__sinit>
 800b7aa:	4b2e      	ldr	r3, [pc, #184]	; (800b864 <__swsetup_r+0xd0>)
 800b7ac:	429c      	cmp	r4, r3
 800b7ae:	d10f      	bne.n	800b7d0 <__swsetup_r+0x3c>
 800b7b0:	686c      	ldr	r4, [r5, #4]
 800b7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7b6:	b29a      	uxth	r2, r3
 800b7b8:	0715      	lsls	r5, r2, #28
 800b7ba:	d42c      	bmi.n	800b816 <__swsetup_r+0x82>
 800b7bc:	06d0      	lsls	r0, r2, #27
 800b7be:	d411      	bmi.n	800b7e4 <__swsetup_r+0x50>
 800b7c0:	2209      	movs	r2, #9
 800b7c2:	6032      	str	r2, [r6, #0]
 800b7c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7c8:	81a3      	strh	r3, [r4, #12]
 800b7ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ce:	e03e      	b.n	800b84e <__swsetup_r+0xba>
 800b7d0:	4b25      	ldr	r3, [pc, #148]	; (800b868 <__swsetup_r+0xd4>)
 800b7d2:	429c      	cmp	r4, r3
 800b7d4:	d101      	bne.n	800b7da <__swsetup_r+0x46>
 800b7d6:	68ac      	ldr	r4, [r5, #8]
 800b7d8:	e7eb      	b.n	800b7b2 <__swsetup_r+0x1e>
 800b7da:	4b24      	ldr	r3, [pc, #144]	; (800b86c <__swsetup_r+0xd8>)
 800b7dc:	429c      	cmp	r4, r3
 800b7de:	bf08      	it	eq
 800b7e0:	68ec      	ldreq	r4, [r5, #12]
 800b7e2:	e7e6      	b.n	800b7b2 <__swsetup_r+0x1e>
 800b7e4:	0751      	lsls	r1, r2, #29
 800b7e6:	d512      	bpl.n	800b80e <__swsetup_r+0x7a>
 800b7e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7ea:	b141      	cbz	r1, 800b7fe <__swsetup_r+0x6a>
 800b7ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7f0:	4299      	cmp	r1, r3
 800b7f2:	d002      	beq.n	800b7fa <__swsetup_r+0x66>
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	f7ff fbbf 	bl	800af78 <_free_r>
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	6363      	str	r3, [r4, #52]	; 0x34
 800b7fe:	89a3      	ldrh	r3, [r4, #12]
 800b800:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b804:	81a3      	strh	r3, [r4, #12]
 800b806:	2300      	movs	r3, #0
 800b808:	6063      	str	r3, [r4, #4]
 800b80a:	6923      	ldr	r3, [r4, #16]
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	89a3      	ldrh	r3, [r4, #12]
 800b810:	f043 0308 	orr.w	r3, r3, #8
 800b814:	81a3      	strh	r3, [r4, #12]
 800b816:	6923      	ldr	r3, [r4, #16]
 800b818:	b94b      	cbnz	r3, 800b82e <__swsetup_r+0x9a>
 800b81a:	89a3      	ldrh	r3, [r4, #12]
 800b81c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b824:	d003      	beq.n	800b82e <__swsetup_r+0x9a>
 800b826:	4621      	mov	r1, r4
 800b828:	4630      	mov	r0, r6
 800b82a:	f000 f917 	bl	800ba5c <__smakebuf_r>
 800b82e:	89a2      	ldrh	r2, [r4, #12]
 800b830:	f012 0301 	ands.w	r3, r2, #1
 800b834:	d00c      	beq.n	800b850 <__swsetup_r+0xbc>
 800b836:	2300      	movs	r3, #0
 800b838:	60a3      	str	r3, [r4, #8]
 800b83a:	6963      	ldr	r3, [r4, #20]
 800b83c:	425b      	negs	r3, r3
 800b83e:	61a3      	str	r3, [r4, #24]
 800b840:	6923      	ldr	r3, [r4, #16]
 800b842:	b953      	cbnz	r3, 800b85a <__swsetup_r+0xc6>
 800b844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b848:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b84c:	d1ba      	bne.n	800b7c4 <__swsetup_r+0x30>
 800b84e:	bd70      	pop	{r4, r5, r6, pc}
 800b850:	0792      	lsls	r2, r2, #30
 800b852:	bf58      	it	pl
 800b854:	6963      	ldrpl	r3, [r4, #20]
 800b856:	60a3      	str	r3, [r4, #8]
 800b858:	e7f2      	b.n	800b840 <__swsetup_r+0xac>
 800b85a:	2000      	movs	r0, #0
 800b85c:	e7f7      	b.n	800b84e <__swsetup_r+0xba>
 800b85e:	bf00      	nop
 800b860:	2000017c 	.word	0x2000017c
 800b864:	0800bd28 	.word	0x0800bd28
 800b868:	0800bd48 	.word	0x0800bd48
 800b86c:	0800bd08 	.word	0x0800bd08

0800b870 <_close_r>:
 800b870:	b538      	push	{r3, r4, r5, lr}
 800b872:	2300      	movs	r3, #0
 800b874:	4c05      	ldr	r4, [pc, #20]	; (800b88c <_close_r+0x1c>)
 800b876:	4605      	mov	r5, r0
 800b878:	4608      	mov	r0, r1
 800b87a:	6023      	str	r3, [r4, #0]
 800b87c:	f7f5 faf1 	bl	8000e62 <_close>
 800b880:	1c43      	adds	r3, r0, #1
 800b882:	d102      	bne.n	800b88a <_close_r+0x1a>
 800b884:	6823      	ldr	r3, [r4, #0]
 800b886:	b103      	cbz	r3, 800b88a <_close_r+0x1a>
 800b888:	602b      	str	r3, [r5, #0]
 800b88a:	bd38      	pop	{r3, r4, r5, pc}
 800b88c:	20000ee0 	.word	0x20000ee0

0800b890 <__sflush_r>:
 800b890:	898a      	ldrh	r2, [r1, #12]
 800b892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b896:	4605      	mov	r5, r0
 800b898:	0710      	lsls	r0, r2, #28
 800b89a:	460c      	mov	r4, r1
 800b89c:	d458      	bmi.n	800b950 <__sflush_r+0xc0>
 800b89e:	684b      	ldr	r3, [r1, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	dc05      	bgt.n	800b8b0 <__sflush_r+0x20>
 800b8a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	dc02      	bgt.n	800b8b0 <__sflush_r+0x20>
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8b2:	2e00      	cmp	r6, #0
 800b8b4:	d0f9      	beq.n	800b8aa <__sflush_r+0x1a>
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8bc:	682f      	ldr	r7, [r5, #0]
 800b8be:	6a21      	ldr	r1, [r4, #32]
 800b8c0:	602b      	str	r3, [r5, #0]
 800b8c2:	d032      	beq.n	800b92a <__sflush_r+0x9a>
 800b8c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8c6:	89a3      	ldrh	r3, [r4, #12]
 800b8c8:	075a      	lsls	r2, r3, #29
 800b8ca:	d505      	bpl.n	800b8d8 <__sflush_r+0x48>
 800b8cc:	6863      	ldr	r3, [r4, #4]
 800b8ce:	1ac0      	subs	r0, r0, r3
 800b8d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8d2:	b10b      	cbz	r3, 800b8d8 <__sflush_r+0x48>
 800b8d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8d6:	1ac0      	subs	r0, r0, r3
 800b8d8:	2300      	movs	r3, #0
 800b8da:	4602      	mov	r2, r0
 800b8dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8de:	6a21      	ldr	r1, [r4, #32]
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	47b0      	blx	r6
 800b8e4:	1c43      	adds	r3, r0, #1
 800b8e6:	89a3      	ldrh	r3, [r4, #12]
 800b8e8:	d106      	bne.n	800b8f8 <__sflush_r+0x68>
 800b8ea:	6829      	ldr	r1, [r5, #0]
 800b8ec:	291d      	cmp	r1, #29
 800b8ee:	d848      	bhi.n	800b982 <__sflush_r+0xf2>
 800b8f0:	4a29      	ldr	r2, [pc, #164]	; (800b998 <__sflush_r+0x108>)
 800b8f2:	40ca      	lsrs	r2, r1
 800b8f4:	07d6      	lsls	r6, r2, #31
 800b8f6:	d544      	bpl.n	800b982 <__sflush_r+0xf2>
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	6062      	str	r2, [r4, #4]
 800b8fc:	6922      	ldr	r2, [r4, #16]
 800b8fe:	04d9      	lsls	r1, r3, #19
 800b900:	6022      	str	r2, [r4, #0]
 800b902:	d504      	bpl.n	800b90e <__sflush_r+0x7e>
 800b904:	1c42      	adds	r2, r0, #1
 800b906:	d101      	bne.n	800b90c <__sflush_r+0x7c>
 800b908:	682b      	ldr	r3, [r5, #0]
 800b90a:	b903      	cbnz	r3, 800b90e <__sflush_r+0x7e>
 800b90c:	6560      	str	r0, [r4, #84]	; 0x54
 800b90e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b910:	602f      	str	r7, [r5, #0]
 800b912:	2900      	cmp	r1, #0
 800b914:	d0c9      	beq.n	800b8aa <__sflush_r+0x1a>
 800b916:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b91a:	4299      	cmp	r1, r3
 800b91c:	d002      	beq.n	800b924 <__sflush_r+0x94>
 800b91e:	4628      	mov	r0, r5
 800b920:	f7ff fb2a 	bl	800af78 <_free_r>
 800b924:	2000      	movs	r0, #0
 800b926:	6360      	str	r0, [r4, #52]	; 0x34
 800b928:	e7c0      	b.n	800b8ac <__sflush_r+0x1c>
 800b92a:	2301      	movs	r3, #1
 800b92c:	4628      	mov	r0, r5
 800b92e:	47b0      	blx	r6
 800b930:	1c41      	adds	r1, r0, #1
 800b932:	d1c8      	bne.n	800b8c6 <__sflush_r+0x36>
 800b934:	682b      	ldr	r3, [r5, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d0c5      	beq.n	800b8c6 <__sflush_r+0x36>
 800b93a:	2b1d      	cmp	r3, #29
 800b93c:	d001      	beq.n	800b942 <__sflush_r+0xb2>
 800b93e:	2b16      	cmp	r3, #22
 800b940:	d101      	bne.n	800b946 <__sflush_r+0xb6>
 800b942:	602f      	str	r7, [r5, #0]
 800b944:	e7b1      	b.n	800b8aa <__sflush_r+0x1a>
 800b946:	89a3      	ldrh	r3, [r4, #12]
 800b948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b94c:	81a3      	strh	r3, [r4, #12]
 800b94e:	e7ad      	b.n	800b8ac <__sflush_r+0x1c>
 800b950:	690f      	ldr	r7, [r1, #16]
 800b952:	2f00      	cmp	r7, #0
 800b954:	d0a9      	beq.n	800b8aa <__sflush_r+0x1a>
 800b956:	0793      	lsls	r3, r2, #30
 800b958:	bf18      	it	ne
 800b95a:	2300      	movne	r3, #0
 800b95c:	680e      	ldr	r6, [r1, #0]
 800b95e:	bf08      	it	eq
 800b960:	694b      	ldreq	r3, [r1, #20]
 800b962:	eba6 0807 	sub.w	r8, r6, r7
 800b966:	600f      	str	r7, [r1, #0]
 800b968:	608b      	str	r3, [r1, #8]
 800b96a:	f1b8 0f00 	cmp.w	r8, #0
 800b96e:	dd9c      	ble.n	800b8aa <__sflush_r+0x1a>
 800b970:	4643      	mov	r3, r8
 800b972:	463a      	mov	r2, r7
 800b974:	6a21      	ldr	r1, [r4, #32]
 800b976:	4628      	mov	r0, r5
 800b978:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b97a:	47b0      	blx	r6
 800b97c:	2800      	cmp	r0, #0
 800b97e:	dc06      	bgt.n	800b98e <__sflush_r+0xfe>
 800b980:	89a3      	ldrh	r3, [r4, #12]
 800b982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b986:	81a3      	strh	r3, [r4, #12]
 800b988:	f04f 30ff 	mov.w	r0, #4294967295
 800b98c:	e78e      	b.n	800b8ac <__sflush_r+0x1c>
 800b98e:	4407      	add	r7, r0
 800b990:	eba8 0800 	sub.w	r8, r8, r0
 800b994:	e7e9      	b.n	800b96a <__sflush_r+0xda>
 800b996:	bf00      	nop
 800b998:	20400001 	.word	0x20400001

0800b99c <_fflush_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	690b      	ldr	r3, [r1, #16]
 800b9a0:	4605      	mov	r5, r0
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	b1db      	cbz	r3, 800b9de <_fflush_r+0x42>
 800b9a6:	b118      	cbz	r0, 800b9b0 <_fflush_r+0x14>
 800b9a8:	6983      	ldr	r3, [r0, #24]
 800b9aa:	b90b      	cbnz	r3, 800b9b0 <_fflush_r+0x14>
 800b9ac:	f7fe fae4 	bl	8009f78 <__sinit>
 800b9b0:	4b0c      	ldr	r3, [pc, #48]	; (800b9e4 <_fflush_r+0x48>)
 800b9b2:	429c      	cmp	r4, r3
 800b9b4:	d109      	bne.n	800b9ca <_fflush_r+0x2e>
 800b9b6:	686c      	ldr	r4, [r5, #4]
 800b9b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9bc:	b17b      	cbz	r3, 800b9de <_fflush_r+0x42>
 800b9be:	4621      	mov	r1, r4
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9c6:	f7ff bf63 	b.w	800b890 <__sflush_r>
 800b9ca:	4b07      	ldr	r3, [pc, #28]	; (800b9e8 <_fflush_r+0x4c>)
 800b9cc:	429c      	cmp	r4, r3
 800b9ce:	d101      	bne.n	800b9d4 <_fflush_r+0x38>
 800b9d0:	68ac      	ldr	r4, [r5, #8]
 800b9d2:	e7f1      	b.n	800b9b8 <_fflush_r+0x1c>
 800b9d4:	4b05      	ldr	r3, [pc, #20]	; (800b9ec <_fflush_r+0x50>)
 800b9d6:	429c      	cmp	r4, r3
 800b9d8:	bf08      	it	eq
 800b9da:	68ec      	ldreq	r4, [r5, #12]
 800b9dc:	e7ec      	b.n	800b9b8 <_fflush_r+0x1c>
 800b9de:	2000      	movs	r0, #0
 800b9e0:	bd38      	pop	{r3, r4, r5, pc}
 800b9e2:	bf00      	nop
 800b9e4:	0800bd28 	.word	0x0800bd28
 800b9e8:	0800bd48 	.word	0x0800bd48
 800b9ec:	0800bd08 	.word	0x0800bd08

0800b9f0 <_lseek_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	4605      	mov	r5, r0
 800b9f4:	4608      	mov	r0, r1
 800b9f6:	4611      	mov	r1, r2
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	4c05      	ldr	r4, [pc, #20]	; (800ba10 <_lseek_r+0x20>)
 800b9fc:	6022      	str	r2, [r4, #0]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	f7f5 fa53 	bl	8000eaa <_lseek>
 800ba04:	1c43      	adds	r3, r0, #1
 800ba06:	d102      	bne.n	800ba0e <_lseek_r+0x1e>
 800ba08:	6823      	ldr	r3, [r4, #0]
 800ba0a:	b103      	cbz	r3, 800ba0e <_lseek_r+0x1e>
 800ba0c:	602b      	str	r3, [r5, #0]
 800ba0e:	bd38      	pop	{r3, r4, r5, pc}
 800ba10:	20000ee0 	.word	0x20000ee0

0800ba14 <__swhatbuf_r>:
 800ba14:	b570      	push	{r4, r5, r6, lr}
 800ba16:	460e      	mov	r6, r1
 800ba18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba1c:	b096      	sub	sp, #88	; 0x58
 800ba1e:	2900      	cmp	r1, #0
 800ba20:	4614      	mov	r4, r2
 800ba22:	461d      	mov	r5, r3
 800ba24:	da07      	bge.n	800ba36 <__swhatbuf_r+0x22>
 800ba26:	2300      	movs	r3, #0
 800ba28:	602b      	str	r3, [r5, #0]
 800ba2a:	89b3      	ldrh	r3, [r6, #12]
 800ba2c:	061a      	lsls	r2, r3, #24
 800ba2e:	d410      	bmi.n	800ba52 <__swhatbuf_r+0x3e>
 800ba30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba34:	e00e      	b.n	800ba54 <__swhatbuf_r+0x40>
 800ba36:	466a      	mov	r2, sp
 800ba38:	f000 f8a4 	bl	800bb84 <_fstat_r>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	dbf2      	blt.n	800ba26 <__swhatbuf_r+0x12>
 800ba40:	9a01      	ldr	r2, [sp, #4]
 800ba42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba4a:	425a      	negs	r2, r3
 800ba4c:	415a      	adcs	r2, r3
 800ba4e:	602a      	str	r2, [r5, #0]
 800ba50:	e7ee      	b.n	800ba30 <__swhatbuf_r+0x1c>
 800ba52:	2340      	movs	r3, #64	; 0x40
 800ba54:	2000      	movs	r0, #0
 800ba56:	6023      	str	r3, [r4, #0]
 800ba58:	b016      	add	sp, #88	; 0x58
 800ba5a:	bd70      	pop	{r4, r5, r6, pc}

0800ba5c <__smakebuf_r>:
 800ba5c:	898b      	ldrh	r3, [r1, #12]
 800ba5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba60:	079d      	lsls	r5, r3, #30
 800ba62:	4606      	mov	r6, r0
 800ba64:	460c      	mov	r4, r1
 800ba66:	d507      	bpl.n	800ba78 <__smakebuf_r+0x1c>
 800ba68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba6c:	6023      	str	r3, [r4, #0]
 800ba6e:	6123      	str	r3, [r4, #16]
 800ba70:	2301      	movs	r3, #1
 800ba72:	6163      	str	r3, [r4, #20]
 800ba74:	b002      	add	sp, #8
 800ba76:	bd70      	pop	{r4, r5, r6, pc}
 800ba78:	ab01      	add	r3, sp, #4
 800ba7a:	466a      	mov	r2, sp
 800ba7c:	f7ff ffca 	bl	800ba14 <__swhatbuf_r>
 800ba80:	9900      	ldr	r1, [sp, #0]
 800ba82:	4605      	mov	r5, r0
 800ba84:	4630      	mov	r0, r6
 800ba86:	f7ff fac3 	bl	800b010 <_malloc_r>
 800ba8a:	b948      	cbnz	r0, 800baa0 <__smakebuf_r+0x44>
 800ba8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba90:	059a      	lsls	r2, r3, #22
 800ba92:	d4ef      	bmi.n	800ba74 <__smakebuf_r+0x18>
 800ba94:	f023 0303 	bic.w	r3, r3, #3
 800ba98:	f043 0302 	orr.w	r3, r3, #2
 800ba9c:	81a3      	strh	r3, [r4, #12]
 800ba9e:	e7e3      	b.n	800ba68 <__smakebuf_r+0xc>
 800baa0:	4b0d      	ldr	r3, [pc, #52]	; (800bad8 <__smakebuf_r+0x7c>)
 800baa2:	62b3      	str	r3, [r6, #40]	; 0x28
 800baa4:	89a3      	ldrh	r3, [r4, #12]
 800baa6:	6020      	str	r0, [r4, #0]
 800baa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baac:	81a3      	strh	r3, [r4, #12]
 800baae:	9b00      	ldr	r3, [sp, #0]
 800bab0:	6120      	str	r0, [r4, #16]
 800bab2:	6163      	str	r3, [r4, #20]
 800bab4:	9b01      	ldr	r3, [sp, #4]
 800bab6:	b15b      	cbz	r3, 800bad0 <__smakebuf_r+0x74>
 800bab8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800babc:	4630      	mov	r0, r6
 800babe:	f000 f873 	bl	800bba8 <_isatty_r>
 800bac2:	b128      	cbz	r0, 800bad0 <__smakebuf_r+0x74>
 800bac4:	89a3      	ldrh	r3, [r4, #12]
 800bac6:	f023 0303 	bic.w	r3, r3, #3
 800baca:	f043 0301 	orr.w	r3, r3, #1
 800bace:	81a3      	strh	r3, [r4, #12]
 800bad0:	89a3      	ldrh	r3, [r4, #12]
 800bad2:	431d      	orrs	r5, r3
 800bad4:	81a5      	strh	r5, [r4, #12]
 800bad6:	e7cd      	b.n	800ba74 <__smakebuf_r+0x18>
 800bad8:	08009f41 	.word	0x08009f41

0800badc <memmove>:
 800badc:	4288      	cmp	r0, r1
 800bade:	b510      	push	{r4, lr}
 800bae0:	eb01 0302 	add.w	r3, r1, r2
 800bae4:	d807      	bhi.n	800baf6 <memmove+0x1a>
 800bae6:	1e42      	subs	r2, r0, #1
 800bae8:	4299      	cmp	r1, r3
 800baea:	d00a      	beq.n	800bb02 <memmove+0x26>
 800baec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baf0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800baf4:	e7f8      	b.n	800bae8 <memmove+0xc>
 800baf6:	4283      	cmp	r3, r0
 800baf8:	d9f5      	bls.n	800bae6 <memmove+0xa>
 800bafa:	1881      	adds	r1, r0, r2
 800bafc:	1ad2      	subs	r2, r2, r3
 800bafe:	42d3      	cmn	r3, r2
 800bb00:	d100      	bne.n	800bb04 <memmove+0x28>
 800bb02:	bd10      	pop	{r4, pc}
 800bb04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb08:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bb0c:	e7f7      	b.n	800bafe <memmove+0x22>

0800bb0e <__malloc_lock>:
 800bb0e:	4770      	bx	lr

0800bb10 <__malloc_unlock>:
 800bb10:	4770      	bx	lr

0800bb12 <_realloc_r>:
 800bb12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb14:	4607      	mov	r7, r0
 800bb16:	4614      	mov	r4, r2
 800bb18:	460e      	mov	r6, r1
 800bb1a:	b921      	cbnz	r1, 800bb26 <_realloc_r+0x14>
 800bb1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bb20:	4611      	mov	r1, r2
 800bb22:	f7ff ba75 	b.w	800b010 <_malloc_r>
 800bb26:	b922      	cbnz	r2, 800bb32 <_realloc_r+0x20>
 800bb28:	f7ff fa26 	bl	800af78 <_free_r>
 800bb2c:	4625      	mov	r5, r4
 800bb2e:	4628      	mov	r0, r5
 800bb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb32:	f000 f849 	bl	800bbc8 <_malloc_usable_size_r>
 800bb36:	42a0      	cmp	r0, r4
 800bb38:	d20f      	bcs.n	800bb5a <_realloc_r+0x48>
 800bb3a:	4621      	mov	r1, r4
 800bb3c:	4638      	mov	r0, r7
 800bb3e:	f7ff fa67 	bl	800b010 <_malloc_r>
 800bb42:	4605      	mov	r5, r0
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d0f2      	beq.n	800bb2e <_realloc_r+0x1c>
 800bb48:	4631      	mov	r1, r6
 800bb4a:	4622      	mov	r2, r4
 800bb4c:	f7fe fe02 	bl	800a754 <memcpy>
 800bb50:	4631      	mov	r1, r6
 800bb52:	4638      	mov	r0, r7
 800bb54:	f7ff fa10 	bl	800af78 <_free_r>
 800bb58:	e7e9      	b.n	800bb2e <_realloc_r+0x1c>
 800bb5a:	4635      	mov	r5, r6
 800bb5c:	e7e7      	b.n	800bb2e <_realloc_r+0x1c>
	...

0800bb60 <_read_r>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4605      	mov	r5, r0
 800bb64:	4608      	mov	r0, r1
 800bb66:	4611      	mov	r1, r2
 800bb68:	2200      	movs	r2, #0
 800bb6a:	4c05      	ldr	r4, [pc, #20]	; (800bb80 <_read_r+0x20>)
 800bb6c:	6022      	str	r2, [r4, #0]
 800bb6e:	461a      	mov	r2, r3
 800bb70:	f7f5 f95a 	bl	8000e28 <_read>
 800bb74:	1c43      	adds	r3, r0, #1
 800bb76:	d102      	bne.n	800bb7e <_read_r+0x1e>
 800bb78:	6823      	ldr	r3, [r4, #0]
 800bb7a:	b103      	cbz	r3, 800bb7e <_read_r+0x1e>
 800bb7c:	602b      	str	r3, [r5, #0]
 800bb7e:	bd38      	pop	{r3, r4, r5, pc}
 800bb80:	20000ee0 	.word	0x20000ee0

0800bb84 <_fstat_r>:
 800bb84:	b538      	push	{r3, r4, r5, lr}
 800bb86:	2300      	movs	r3, #0
 800bb88:	4c06      	ldr	r4, [pc, #24]	; (800bba4 <_fstat_r+0x20>)
 800bb8a:	4605      	mov	r5, r0
 800bb8c:	4608      	mov	r0, r1
 800bb8e:	4611      	mov	r1, r2
 800bb90:	6023      	str	r3, [r4, #0]
 800bb92:	f7f5 f971 	bl	8000e78 <_fstat>
 800bb96:	1c43      	adds	r3, r0, #1
 800bb98:	d102      	bne.n	800bba0 <_fstat_r+0x1c>
 800bb9a:	6823      	ldr	r3, [r4, #0]
 800bb9c:	b103      	cbz	r3, 800bba0 <_fstat_r+0x1c>
 800bb9e:	602b      	str	r3, [r5, #0]
 800bba0:	bd38      	pop	{r3, r4, r5, pc}
 800bba2:	bf00      	nop
 800bba4:	20000ee0 	.word	0x20000ee0

0800bba8 <_isatty_r>:
 800bba8:	b538      	push	{r3, r4, r5, lr}
 800bbaa:	2300      	movs	r3, #0
 800bbac:	4c05      	ldr	r4, [pc, #20]	; (800bbc4 <_isatty_r+0x1c>)
 800bbae:	4605      	mov	r5, r0
 800bbb0:	4608      	mov	r0, r1
 800bbb2:	6023      	str	r3, [r4, #0]
 800bbb4:	f7f5 f96f 	bl	8000e96 <_isatty>
 800bbb8:	1c43      	adds	r3, r0, #1
 800bbba:	d102      	bne.n	800bbc2 <_isatty_r+0x1a>
 800bbbc:	6823      	ldr	r3, [r4, #0]
 800bbbe:	b103      	cbz	r3, 800bbc2 <_isatty_r+0x1a>
 800bbc0:	602b      	str	r3, [r5, #0]
 800bbc2:	bd38      	pop	{r3, r4, r5, pc}
 800bbc4:	20000ee0 	.word	0x20000ee0

0800bbc8 <_malloc_usable_size_r>:
 800bbc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbcc:	1f18      	subs	r0, r3, #4
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	bfbc      	itt	lt
 800bbd2:	580b      	ldrlt	r3, [r1, r0]
 800bbd4:	18c0      	addlt	r0, r0, r3
 800bbd6:	4770      	bx	lr

0800bbd8 <_init>:
 800bbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbda:	bf00      	nop
 800bbdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbde:	bc08      	pop	{r3}
 800bbe0:	469e      	mov	lr, r3
 800bbe2:	4770      	bx	lr

0800bbe4 <_fini>:
 800bbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe6:	bf00      	nop
 800bbe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbea:	bc08      	pop	{r3}
 800bbec:	469e      	mov	lr, r3
 800bbee:	4770      	bx	lr
